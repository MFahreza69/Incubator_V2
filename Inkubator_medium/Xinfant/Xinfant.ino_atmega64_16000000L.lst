
C:\Users\XIRKA(~1\AppData\Local\Temp\arduino_build_778267/Xinfant.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 18 01 	jmp	0x230	; 0x230 <__dtors_end>
       4:	0c 94 52 27 	jmp	0x4ea4	; 0x4ea4 <__vector_1>
       8:	0c 94 79 27 	jmp	0x4ef2	; 0x4ef2 <__vector_2>
       c:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__vector_3>
      10:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <__vector_4>
      14:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <__vector_5>
      18:	0c 94 15 28 	jmp	0x502a	; 0x502a <__vector_6>
      1c:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <__vector_7>
      20:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <__vector_8>
      24:	0c 94 62 2e 	jmp	0x5cc4	; 0x5cc4 <__vector_9>
      28:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      2c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      30:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      34:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      38:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      3c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      40:	0c 94 8a 28 	jmp	0x5114	; 0x5114 <__vector_16>
      44:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      48:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__vector_18>
      4c:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__vector_19>
      50:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      54:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      58:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      5c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      60:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      64:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      68:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      6c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      70:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      74:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      78:	0c 94 b3 2c 	jmp	0x5966	; 0x5966 <__vector_30>
      7c:	0c 94 e5 2c 	jmp	0x59ca	; 0x59ca <__vector_31>
      80:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      84:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <__vector_33>
      88:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x27c>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__trampolines_end>:
__trampolines_start():
     10e:	00 00       	nop
     110:	80 3f       	cpi	r24, 0xF0	; 240
     112:	cd cc       	rjmp	.-1638   	; 0xfffffaae <__eeprom_end+0xff7efaae>
     114:	cc 3d       	cpi	r28, 0xDC	; 220
     116:	6f 12       	cpse	r6, r31
     118:	83 3a       	cpi	r24, 0xA3	; 163
     11a:	95 bf       	out	0x35, r25	; 53
     11c:	d6 33       	cpi	r29, 0x36	; 54
     11e:	7d 1d       	adc	r23, r13
     120:	90 26       	eor	r9, r16
     122:	b3 ce       	rjmp	.-666    	; 0xfffffe8a <__eeprom_end+0xff7efe8a>
     124:	01 0c       	add	r0, r1

00000126 <ArduinoJson6194_1::FloatTraits<double, 4u>::negativeBinaryPowerOfTen(int)::factors>:
     126:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     136:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000013e <ArduinoJson6194_1::FloatTraits<double, 4u>::positiveBinaryPowerOfTen(int)::factors>:
     13e:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     14e:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000156 <digital_pin_to_timer_PGM>:
     156:	00 00 00 0a 0b 0c 00 00 00 00 00 00 01 04 05 06     ................
	...

0000018b <digital_pin_to_bit_mask_PGM>:
     18b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     19b:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     1ab:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     1bb:	08 10 20 40 80                                      .. @.

000001c0 <digital_pin_to_port_PGM>:
     1c0:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
     1d0:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     1e0:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
     1f0:	06 06 06 06 06                                      .....

000001f5 <port_to_input_PGM>:
     1f5:	00 00 39 00 36 00 33 00 30 00 21 00 20 00 63 00     ..9.6.3.0.!. .c.

00000205 <port_to_output_PGM>:
     205:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

00000215 <port_to_mode_PGM>:
     215:	00 00 3a 00 37 00 34 00 31 00 22 00 61 00 64 00     ..:.7.4.1.".a.d.

00000225 <tone_pin_to_timer_PGM>:
     225:	02                                                  .

00000226 <__ctors_start>:
__ctors_start():
     226:	d0 19       	sub	r29, r0
     228:	72 20       	and	r7, r2
     22a:	86 2c       	mov	r8, r6
     22c:	15 2d       	mov	r17, r5

0000022e <__ctors_end>:
__dtors_start():
     22e:	eb 19       	sub	r30, r11

00000230 <__dtors_end>:
__dtors_end():
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d0 e1       	ldi	r29, 0x10	; 16
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61

0000023c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     23c:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     23e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     240:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     242:	ec e8       	ldi	r30, 0x8C	; 140
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     244:	f8 e6       	ldi	r31, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     246:	02 c0       	rjmp	.+4      	; 0x24c <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     248:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     24a:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     24c:	ae 3a       	cpi	r26, 0xAE	; 174
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     24e:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     250:	d9 f7       	brne	.-10     	; 0x248 <__do_copy_data+0xc>

00000252 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     252:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     254:	ae ea       	ldi	r26, 0xAE	; 174
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     256:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     258:	01 c0       	rjmp	.+2      	; 0x25c <.do_clear_bss_start>

0000025a <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     25a:	1d 92       	st	X+, r1

0000025c <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     25c:	ad 3f       	cpi	r26, 0xFD	; 253
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     25e:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     260:	e1 f7       	brne	.-8      	; 0x25a <.do_clear_bss_loop>

00000262 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     262:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     264:	c7 e1       	ldi	r28, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     266:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     268:	04 c0       	rjmp	.+8      	; 0x272 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     26a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     26c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     26e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     272:	c3 31       	cpi	r28, 0x13	; 19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     274:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     276:	c9 f7       	brne	.-14     	; 0x26a <__do_global_ctors+0x8>
     278:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <main>
     27c:	0c 94 39 34 	jmp	0x6872	; 0x6872 <__do_global_dtors>

00000280 <__bad_interrupt>:
__vector_22():
     280:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000284 <Xbaby::Xbaby()>:
_ZN5XbabyC2Ev():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:58
                return pos;
            }
            return pos;
        }
    }
}
     284:	fc 01       	movw	r30, r24
     286:	11 82       	std	Z+1, r1	; 0x01
     288:	10 82       	st	Z, r1
     28a:	13 82       	std	Z+3, r1	; 0x03
     28c:	12 82       	std	Z+2, r1	; 0x02
     28e:	15 82       	std	Z+5, r1	; 0x05
     290:	14 82       	std	Z+4, r1	; 0x04
     292:	16 82       	std	Z+6, r1	; 0x06
     294:	17 82       	std	Z+7, r1	; 0x07
     296:	10 86       	std	Z+8, r1	; 0x08
     298:	11 86       	std	Z+9, r1	; 0x09
     29a:	13 86       	std	Z+11, r1	; 0x0b
     29c:	12 86       	std	Z+10, r1	; 0x0a
     29e:	14 86       	std	Z+12, r1	; 0x0c
     2a0:	15 86       	std	Z+13, r1	; 0x0d
     2a2:	16 86       	std	Z+14, r1	; 0x0e
     2a4:	17 86       	std	Z+15, r1	; 0x0f
     2a6:	08 95       	ret

000002a8 <Xbaby::get_value_baby_skin(float, float, int)>:
_ZN5Xbaby19get_value_baby_skinEffi():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:60

float Xbaby::get_value_baby_skin(float valueA, float valueB, int pin){
     2a8:	2f 92       	push	r2
     2aa:	3f 92       	push	r3
     2ac:	4f 92       	push	r4
     2ae:	5f 92       	push	r5
     2b0:	6f 92       	push	r6
     2b2:	7f 92       	push	r7
     2b4:	8f 92       	push	r8
     2b6:	9f 92       	push	r9
     2b8:	af 92       	push	r10
     2ba:	bf 92       	push	r11
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <Xbaby::get_value_baby_skin(float, float, int)+0x26>
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <Xbaby::get_value_baby_skin(float, float, int)+0x28>
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	9d 83       	std	Y+5, r25	; 0x05
     2d8:	8c 83       	std	Y+4, r24	; 0x04
     2da:	eb 82       	std	Y+3, r14	; 0x03
     2dc:	24 e1       	ldi	r18, 0x14	; 20
     2de:	22 2e       	mov	r2, r18
     2e0:	31 2c       	mov	r3, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:61
    float avr_temp = 0;
     2e2:	c1 2c       	mov	r12, r1
     2e4:	d1 2c       	mov	r13, r1
     2e6:	76 01       	movw	r14, r12
     2e8:	c8 96       	adiw	r24, 0x38	; 56
     2ea:	9a 83       	std	Y+2, r25	; 0x02
     2ec:	89 83       	std	Y+1, r24	; 0x01
     2ee:	0c 81       	ldd	r16, Y+4	; 0x04
     2f0:	1d 81       	ldd	r17, Y+5	; 0x05
     2f2:	00 5f       	subi	r16, 0xF0	; 240
     2f4:	1f 4f       	sbci	r17, 0xFF	; 255
     2f6:	58 01       	movw	r10, r16
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:65 (discriminator 2)

    for(unsigned int i=0; i<20; i++){
        for(int a=0; a<20; a++){
            sampleData[a] = analogRead(pin);
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	0e 94 62 29 	call	0x52c4	; 0x52c4 <analogRead>
     2fe:	f5 01       	movw	r30, r10
     300:	81 93       	st	Z+, r24
     302:	91 93       	st	Z+, r25
     304:	5f 01       	movw	r10, r30
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:64 (discriminator 2)

float Xbaby::get_value_baby_skin(float valueA, float valueB, int pin){
    float avr_temp = 0;

    for(unsigned int i=0; i<20; i++){
        for(int a=0; a<20; a++){
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	9a 81       	ldd	r25, Y+2	; 0x02
     30a:	8e 17       	cp	r24, r30
     30c:	9f 07       	cpc	r25, r31
     30e:	a1 f7       	brne	.-24     	; 0x2f8 <Xbaby::get_value_baby_skin(float, float, int)+0x50>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:68 (discriminator 2)
            sampleData[a] = analogRead(pin);
        }
        for(int b=0; b<20; b++){
            avr_temp += sampleData[b];
     310:	f8 01       	movw	r30, r16
     312:	61 91       	ld	r22, Z+
     314:	71 91       	ld	r23, Z+
     316:	8f 01       	movw	r16, r30
     318:	07 2e       	mov	r0, r23
     31a:	00 0c       	add	r0, r0
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__floatsisf>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	c7 01       	movw	r24, r14
     32a:	b6 01       	movw	r22, r12
     32c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
     330:	6b 01       	movw	r12, r22
     332:	7c 01       	movw	r14, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:67 (discriminator 2)

    for(unsigned int i=0; i<20; i++){
        for(int a=0; a<20; a++){
            sampleData[a] = analogRead(pin);
        }
        for(int b=0; b<20; b++){
     334:	a0 16       	cp	r10, r16
     336:	b1 06       	cpc	r11, r17
     338:	59 f7       	brne	.-42     	; 0x310 <Xbaby::get_value_baby_skin(float, float, int)+0x68>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:70
            avr_temp += sampleData[b];
        }
        avr_temp = avr_temp/20;
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 ea       	ldi	r20, 0xA0	; 160
     340:	51 e4       	ldi	r21, 0x41	; 65
     342:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <__divsf3>
     346:	6b 01       	movw	r12, r22
     348:	7c 01       	movw	r14, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:71
        all_temp = ((-0.00005*(pow(avr_temp,3))) + (0.09*(pow(avr_temp, 2))) - (38.6*(avr_temp)) + 33102)/1000;
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e4       	ldi	r20, 0x40	; 64
     350:	50 e4       	ldi	r21, 0x40	; 64
     352:	0e 94 11 31 	call	0x6222	; 0x6222 <pow>
     356:	2b 01       	movw	r4, r22
     358:	3c 01       	movw	r6, r24
     35a:	a7 01       	movw	r20, r14
     35c:	96 01       	movw	r18, r12
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     366:	2c ee       	ldi	r18, 0xEC	; 236
     368:	31 e5       	ldi	r19, 0x51	; 81
     36a:	48 eb       	ldi	r20, 0xB8	; 184
     36c:	5d e3       	ldi	r21, 0x3D	; 61
     36e:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     372:	4b 01       	movw	r8, r22
     374:	5c 01       	movw	r10, r24
     376:	27 e1       	ldi	r18, 0x17	; 23
     378:	37 eb       	ldi	r19, 0xB7	; 183
     37a:	41 e5       	ldi	r20, 0x51	; 81
     37c:	58 eb       	ldi	r21, 0xB8	; 184
     37e:	c3 01       	movw	r24, r6
     380:	b2 01       	movw	r22, r4
     382:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     386:	9b 01       	movw	r18, r22
     388:	ac 01       	movw	r20, r24
     38a:	c5 01       	movw	r24, r10
     38c:	b4 01       	movw	r22, r8
     38e:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
     392:	4b 01       	movw	r8, r22
     394:	5c 01       	movw	r10, r24
     396:	26 e6       	ldi	r18, 0x66	; 102
     398:	36 e6       	ldi	r19, 0x66	; 102
     39a:	4a e1       	ldi	r20, 0x1A	; 26
     39c:	52 e4       	ldi	r21, 0x42	; 66
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     3a6:	9b 01       	movw	r18, r22
     3a8:	ac 01       	movw	r20, r24
     3aa:	c5 01       	movw	r24, r10
     3ac:	b4 01       	movw	r22, r8
     3ae:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	3e e4       	ldi	r19, 0x4E	; 78
     3b6:	41 e0       	ldi	r20, 0x01	; 1
     3b8:	57 e4       	ldi	r21, 0x47	; 71
     3ba:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	4a e7       	ldi	r20, 0x7A	; 122
     3c4:	54 e4       	ldi	r21, 0x44	; 68
     3c6:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <__divsf3>
     3ca:	4b 01       	movw	r8, r22
     3cc:	5c 01       	movw	r10, r24
     3ce:	ec 81       	ldd	r30, Y+4	; 0x04
     3d0:	fd 81       	ldd	r31, Y+5	; 0x05
     3d2:	86 82       	std	Z+6, r8	; 0x06
     3d4:	97 82       	std	Z+7, r9	; 0x07
     3d6:	a0 86       	std	Z+8, r10	; 0x08
     3d8:	b1 86       	std	Z+9, r11	; 0x09
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:72
        if(avr_temp <= 100){
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	48 ec       	ldi	r20, 0xC8	; 200
     3e0:	52 e4       	ldi	r21, 0x42	; 66
     3e2:	c7 01       	movw	r24, r14
     3e4:	b6 01       	movw	r22, r12
     3e6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	1c f1       	brlt	.+70     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:73
            return all_temp = 0;
     3ee:	ec 81       	ldd	r30, Y+4	; 0x04
     3f0:	fd 81       	ldd	r31, Y+5	; 0x05
     3f2:	16 82       	std	Z+6, r1	; 0x06
     3f4:	17 82       	std	Z+7, r1	; 0x07
     3f6:	10 86       	std	Z+8, r1	; 0x08
     3f8:	11 86       	std	Z+9, r1	; 0x09
     3fa:	81 2c       	mov	r8, r1
     3fc:	91 2c       	mov	r9, r1
     3fe:	54 01       	movw	r10, r8
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:77
        }
    }
    return all_temp;
}
     400:	c5 01       	movw	r24, r10
     402:	b4 01       	movw	r22, r8
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	bf 90       	pop	r11
     420:	af 90       	pop	r10
     422:	9f 90       	pop	r9
     424:	8f 90       	pop	r8
     426:	7f 90       	pop	r7
     428:	6f 90       	pop	r6
     42a:	5f 90       	pop	r5
     42c:	4f 90       	pop	r4
     42e:	3f 90       	pop	r3
     430:	2f 90       	pop	r2
     432:	08 95       	ret
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	2f 1a       	sub	r2, r31
     438:	31 08       	sbc	r3, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:63 (discriminator 2)
}

float Xbaby::get_value_baby_skin(float valueA, float valueB, int pin){
    float avr_temp = 0;

    for(unsigned int i=0; i<20; i++){
     43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	58 cf       	rjmp	.-336    	; 0x2ee <Xbaby::get_value_baby_skin(float, float, int)+0x46>
     43e:	e0 cf       	rjmp	.-64     	; 0x400 <__LOCK_REGION_LENGTH__>

00000440 <Xbaby::get_value_fan(float, int, float, float, float, float, float)>:
_ZN5Xbaby13get_value_fanEfifffff():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:80
    }
    return all_temp;
}


int Xbaby::get_value_fan(float set_temp, int mode, float temp_chamber, float temp_baby0, float temp_baby1, float set_baby_humidity, float baby_humidity){
     440:	2f 92       	push	r2
     442:	3f 92       	push	r3
     444:	4f 92       	push	r4
     446:	5f 92       	push	r5
     448:	6f 92       	push	r6
     44a:	7f 92       	push	r7
     44c:	8f 92       	push	r8
     44e:	9f 92       	push	r9
     450:	af 92       	push	r10
     452:	bf 92       	push	r11
     454:	cf 92       	push	r12
     456:	df 92       	push	r13
     458:	ef 92       	push	r14
     45a:	ff 92       	push	r15
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x26>
     466:	00 d0       	rcall	.+0      	; 0x468 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x28>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	cb 01       	movw	r24, r22
     46e:	ba 01       	movw	r22, r20
     470:	19 01       	movw	r2, r18
     472:	e9 82       	std	Y+1, r14	; 0x01
     474:	fa 82       	std	Y+2, r15	; 0x02
     476:	0b 83       	std	Y+3, r16	; 0x03
     478:	1c 83       	std	Y+4, r17	; 0x04
     47a:	25 01       	movw	r4, r10
     47c:	36 01       	movw	r6, r12
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:81
    float err_chamber = (set_temp*10) - (temp_chamber*10);
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e2       	ldi	r20, 0x20	; 32
     484:	51 e4       	ldi	r21, 0x41	; 65
     486:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     48a:	4b 01       	movw	r8, r22
     48c:	5c 01       	movw	r10, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:84
    float err_baby0 = (set_temp*10) - (temp_baby0*10);
    float err_baby1 = (set_temp*10) - (temp_baby1*10);
    float err_humidity = (set_baby_humidity*10) - (baby_humidity*10);
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 e2       	ldi	r20, 0x20	; 32
     494:	51 e4       	ldi	r21, 0x41	; 65
     496:	6d 8d       	ldd	r22, Y+29	; 0x1d
     498:	7e 8d       	ldd	r23, Y+30	; 0x1e
     49a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     49c:	98 a1       	ldd	r25, Y+32	; 0x20
     49e:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     4a2:	6b 01       	movw	r12, r22
     4a4:	7c 01       	movw	r14, r24
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e2       	ldi	r20, 0x20	; 32
     4ac:	51 e4       	ldi	r21, 0x41	; 65
     4ae:	69 a1       	ldd	r22, Y+33	; 0x21
     4b0:	7a a1       	ldd	r23, Y+34	; 0x22
     4b2:	8b a1       	ldd	r24, Y+35	; 0x23
     4b4:	9c a1       	ldd	r25, Y+36	; 0x24
     4b6:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     4ba:	9b 01       	movw	r18, r22
     4bc:	ac 01       	movw	r20, r24
     4be:	c7 01       	movw	r24, r14
     4c0:	b6 01       	movw	r22, r12
     4c2:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
     4c6:	6b 01       	movw	r12, r22
     4c8:	7c 01       	movw	r14, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:85
    if(mode == 1){
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	28 16       	cp	r2, r24
     4ce:	31 04       	cpc	r3, r1
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x94>
     4d2:	6f c0       	rjmp	.+222    	; 0x5b2 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x172>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:86
        if(temp_baby0 == 0 && temp_baby1 == 0){
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	a9 01       	movw	r20, r18
     4da:	c3 01       	movw	r24, r6
     4dc:	b2 01       	movw	r22, r4
     4de:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     4e2:	81 11       	cpse	r24, r1
     4e4:	0e c0       	rjmp	.+28     	; 0x502 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0xc2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:86 (discriminator 1)
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	a9 01       	movw	r20, r18
     4ec:	69 8d       	ldd	r22, Y+25	; 0x19
     4ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4f4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     4f8:	81 11       	cpse	r24, r1
     4fa:	ae c0       	rjmp	.+348    	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:87
            return 0;
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	ab c0       	rjmp	.+342    	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:82
}


int Xbaby::get_value_fan(float set_temp, int mode, float temp_chamber, float temp_baby0, float temp_baby1, float set_baby_humidity, float baby_humidity){
    float err_chamber = (set_temp*10) - (temp_chamber*10);
    float err_baby0 = (set_temp*10) - (temp_baby0*10);
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e2       	ldi	r20, 0x20	; 32
     508:	51 e4       	ldi	r21, 0x41	; 65
     50a:	c3 01       	movw	r24, r6
     50c:	b2 01       	movw	r22, r4
     50e:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     512:	9b 01       	movw	r18, r22
     514:	ac 01       	movw	r20, r24
     516:	c5 01       	movw	r24, r10
     518:	b4 01       	movw	r22, r8
     51a:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
     51e:	4b 01       	movw	r8, r22
     520:	5c 01       	movw	r10, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:90
    if(mode == 1){
        if(temp_baby0 == 0 && temp_baby1 == 0){
            return 0;
        }else{
            if(temp_baby0 != 0){
                if(err_baby0 < -0.5){
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	5f eb       	ldi	r21, 0xBF	; 191
     52a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     52e:	87 ff       	sbrs	r24, 7
     530:	0c c0       	rjmp	.+24     	; 0x54a <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x10a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:138
        if(temp_chamber < 0){
            return 0;
        }
        else{
            if(err_chamber < -0.5){
                if(err_humidity >= 0){
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	a9 01       	movw	r20, r18
     538:	c7 01       	movw	r24, r14
     53a:	b6 01       	movw	r22, r12
     53c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     540:	87 fd       	sbrc	r24, 7
     542:	a1 c0       	rjmp	.+322    	; 0x686 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x246>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:92
            return 0;
        }else{
            if(temp_baby0 != 0){
                if(err_baby0 < -0.5){
                    if(err_humidity >= 0){
                        return 130;
     544:	82 e8       	ldi	r24, 0x82	; 130
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	87 c0       	rjmp	.+270    	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:96
                    }
                    return 50;
                }
                if(err_baby0 < 150 && err_baby0 >= 0.5){
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	46 e1       	ldi	r20, 0x16	; 22
     550:	53 e4       	ldi	r21, 0x43	; 67
     552:	c5 01       	movw	r24, r10
     554:	b4 01       	movw	r22, r8
     556:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     55a:	87 ff       	sbrs	r24, 7
     55c:	0a c0       	rjmp	.+20     	; 0x572 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x132>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:96 (discriminator 1)
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	5f e3       	ldi	r21, 0x3F	; 63
     566:	c5 01       	movw	r24, r10
     568:	b4 01       	movw	r22, r8
     56a:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     56e:	87 ff       	sbrs	r24, 7
     570:	e9 cf       	rjmp	.-46     	; 0x544 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x104>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:102
                    if(err_humidity >= 0){
                        return 130;
                    }
                    return 130;
                }
                if(err_baby0 < 0.5 && err_baby0 >= -0.5){
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	5f e3       	ldi	r21, 0x3F	; 63
     57a:	c5 01       	movw	r24, r10
     57c:	b4 01       	movw	r22, r8
     57e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     582:	87 ff       	sbrs	r24, 7
     584:	69 c0       	rjmp	.+210    	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:102 (discriminator 1)
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	5f eb       	ldi	r21, 0xBF	; 191
     58e:	c5 01       	movw	r24, r10
     590:	b4 01       	movw	r22, r8
     592:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     596:	87 fd       	sbrc	r24, 7
     598:	5f c0       	rjmp	.+190    	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:150
                    return 130;
                }
                return 130;
            }
            if(err_chamber < 0.1 && err_chamber > -0.5){
                if(err_humidity >= 0){
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	a9 01       	movw	r20, r18
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     5a8:	87 ff       	sbrs	r24, 7
     5aa:	cc cf       	rjmp	.-104    	; 0x544 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x104>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:106
                }
                if(err_baby0 < 0.5 && err_baby0 >= -0.5){
                    if(err_humidity >= 0){
                        return 130;
                    }
                    return 100;
     5ac:	84 e6       	ldi	r24, 0x64	; 100
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	53 c0       	rjmp	.+166    	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:132
                }
            }
        }
    }
    }
    if(mode == 2){
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	28 16       	cp	r2, r24
     5b6:	31 04       	cpc	r3, r1
     5b8:	09 f0       	breq	.+2      	; 0x5bc <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x17c>
     5ba:	4e c0       	rjmp	.+156    	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:133
        if(temp_chamber < 0){
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	a9 01       	movw	r20, r18
     5c2:	69 81       	ldd	r22, Y+1	; 0x01
     5c4:	7a 81       	ldd	r23, Y+2	; 0x02
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     5ce:	87 fd       	sbrc	r24, 7
     5d0:	95 cf       	rjmp	.-214    	; 0x4fc <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:81
    return all_temp;
}


int Xbaby::get_value_fan(float set_temp, int mode, float temp_chamber, float temp_baby0, float temp_baby1, float set_baby_humidity, float baby_humidity){
    float err_chamber = (set_temp*10) - (temp_chamber*10);
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e2       	ldi	r20, 0x20	; 32
     5d8:	51 e4       	ldi	r21, 0x41	; 65
     5da:	69 81       	ldd	r22, Y+1	; 0x01
     5dc:	7a 81       	ldd	r23, Y+2	; 0x02
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     5e6:	9b 01       	movw	r18, r22
     5e8:	ac 01       	movw	r20, r24
     5ea:	c5 01       	movw	r24, r10
     5ec:	b4 01       	movw	r22, r8
     5ee:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
     5f2:	4b 01       	movw	r8, r22
     5f4:	5c 01       	movw	r10, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:137
    if(mode == 2){
        if(temp_chamber < 0){
            return 0;
        }
        else{
            if(err_chamber < -0.5){
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	5f eb       	ldi	r21, 0xBF	; 191
     5fe:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     602:	87 fd       	sbrc	r24, 7
     604:	96 cf       	rjmp	.-212    	; 0x532 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0xf2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:143
                if(err_humidity >= 0){
                    return 130;
                }
                return 50;
            }
            if(err_chamber < 150 && err_chamber >= 0.1){
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	46 e1       	ldi	r20, 0x16	; 22
     60c:	53 e4       	ldi	r21, 0x43	; 67
     60e:	c5 01       	movw	r24, r10
     610:	b4 01       	movw	r22, r8
     612:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     616:	87 ff       	sbrs	r24, 7
     618:	0a c0       	rjmp	.+20     	; 0x62e <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x1ee>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:143 (discriminator 1)
     61a:	2d ec       	ldi	r18, 0xCD	; 205
     61c:	3c ec       	ldi	r19, 0xCC	; 204
     61e:	4c ec       	ldi	r20, 0xCC	; 204
     620:	5d e3       	ldi	r21, 0x3D	; 61
     622:	c5 01       	movw	r24, r10
     624:	b4 01       	movw	r22, r8
     626:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     62a:	87 ff       	sbrs	r24, 7
     62c:	8b cf       	rjmp	.-234    	; 0x544 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x104>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:149
                if(err_humidity >= 0){
                    return 130;
                }
                return 130;
            }
            if(err_chamber < 0.1 && err_chamber > -0.5){
     62e:	2d ec       	ldi	r18, 0xCD	; 205
     630:	3c ec       	ldi	r19, 0xCC	; 204
     632:	4c ec       	ldi	r20, 0xCC	; 204
     634:	5d e3       	ldi	r21, 0x3D	; 61
     636:	c5 01       	movw	r24, r10
     638:	b4 01       	movw	r22, r8
     63a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     63e:	87 ff       	sbrs	r24, 7
     640:	0b c0       	rjmp	.+22     	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:149 (discriminator 1)
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	5f eb       	ldi	r21, 0xBF	; 191
     64a:	c5 01       	movw	r24, r10
     64c:	b4 01       	movw	r22, r8
     64e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     652:	18 16       	cp	r1, r24
     654:	0c f4       	brge	.+2      	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>
     656:	a1 cf       	rjmp	.-190    	; 0x59a <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x15a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:157
                }
                return 100;
            }
        }
    }
}
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	df 90       	pop	r13
     66e:	cf 90       	pop	r12
     670:	bf 90       	pop	r11
     672:	af 90       	pop	r10
     674:	9f 90       	pop	r9
     676:	8f 90       	pop	r8
     678:	7f 90       	pop	r7
     67a:	6f 90       	pop	r6
     67c:	5f 90       	pop	r5
     67e:	4f 90       	pop	r4
     680:	3f 90       	pop	r3
     682:	2f 90       	pop	r2
     684:	08 95       	ret
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:94
            if(temp_baby0 != 0){
                if(err_baby0 < -0.5){
                    if(err_humidity >= 0){
                        return 130;
                    }
                    return 50;
     686:	82 e3       	ldi	r24, 0x32	; 50
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	e6 cf       	rjmp	.-52     	; 0x658 <Xbaby::get_value_fan(float, int, float, float, float, float, float)+0x218>

0000068c <Xbaby::get_value_heater(float, int, int, float, float, float)>:
_ZN5Xbaby16get_value_heaterEfiifff():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:160
        }
    }
}


int Xbaby::get_value_heater(float set_temp,int mode, int high, float temp_chamber, float temp_baby0, float temp_baby1){
     68c:	2f 92       	push	r2
     68e:	3f 92       	push	r3
     690:	4f 92       	push	r4
     692:	5f 92       	push	r5
     694:	6f 92       	push	r6
     696:	7f 92       	push	r7
     698:	8f 92       	push	r8
     69a:	9f 92       	push	r9
     69c:	af 92       	push	r10
     69e:	bf 92       	push	r11
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	cb 01       	movw	r24, r22
     6b6:	ba 01       	movw	r22, r20
     6b8:	19 01       	movw	r2, r18
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:161
    float err_chamber = (set_temp*10) - (temp_chamber*10); 
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e2       	ldi	r20, 0x20	; 32
     6c0:	51 e4       	ldi	r21, 0x41	; 65
     6c2:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     6c6:	2b 01       	movw	r4, r22
     6c8:	3c 01       	movw	r6, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:164
    float err_baby0 = (set_temp*10) - (temp_baby0*10);
    float err_baby1 = (set_temp*10) - (temp_baby1*10);
    if(mode == 1 && high == 0 ){
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	28 16       	cp	r2, r24
     6ce:	31 04       	cpc	r3, r1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x48>
     6d2:	2a c3       	rjmp	.+1620   	; 0xd28 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x69c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:162 (discriminator 1)
}


int Xbaby::get_value_heater(float set_temp,int mode, int high, float temp_chamber, float temp_baby0, float temp_baby1){
    float err_chamber = (set_temp*10) - (temp_chamber*10); 
    float err_baby0 = (set_temp*10) - (temp_baby0*10);
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e2       	ldi	r20, 0x20	; 32
     6da:	51 e4       	ldi	r21, 0x41	; 65
     6dc:	c5 01       	movw	r24, r10
     6de:	b4 01       	movw	r22, r8
     6e0:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	c3 01       	movw	r24, r6
     6ea:	b2 01       	movw	r22, r4
     6ec:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
     6f0:	6b 01       	movw	r12, r22
     6f2:	7c 01       	movw	r14, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:163 (discriminator 1)
    float err_baby1 = (set_temp*10) - (temp_baby1*10);
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e2       	ldi	r20, 0x20	; 32
     6fa:	51 e4       	ldi	r21, 0x41	; 65
     6fc:	6d 89       	ldd	r22, Y+21	; 0x15
     6fe:	7e 89       	ldd	r23, Y+22	; 0x16
     700:	8f 89       	ldd	r24, Y+23	; 0x17
     702:	98 8d       	ldd	r25, Y+24	; 0x18
     704:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c3 01       	movw	r24, r6
     70e:	b2 01       	movw	r22, r4
     710:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
     714:	2b 01       	movw	r4, r22
     716:	3c 01       	movw	r6, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:164 (discriminator 1)
    if(mode == 1 && high == 0 ){
     718:	01 15       	cp	r16, r1
     71a:	11 05       	cpc	r17, r1
     71c:	09 f0       	breq	.+2      	; 0x720 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x94>
     71e:	7f c1       	rjmp	.+766    	; 0xa1e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x392>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:165
        if(temp_baby0 == 0 && temp_baby1 == 0){
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	a9 01       	movw	r20, r18
     726:	c5 01       	movw	r24, r10
     728:	b4 01       	movw	r22, r8
     72a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     72e:	81 11       	cpse	r24, r1
     730:	0d c0       	rjmp	.+26     	; 0x74c <Xbaby::get_value_heater(float, int, int, float, float, float)+0xc0>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:165 (discriminator 1)
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	a9 01       	movw	r20, r18
     738:	6d 89       	ldd	r22, Y+21	; 0x15
     73a:	7e 89       	ldd	r23, Y+22	; 0x16
     73c:	8f 89       	ldd	r24, Y+23	; 0x17
     73e:	98 8d       	ldd	r25, Y+24	; 0x18
     740:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     744:	81 11       	cpse	r24, r1
     746:	b9 c0       	rjmp	.+370    	; 0x8ba <Xbaby::get_value_heater(float, int, int, float, float, float)+0x22e>
     748:	c8 01       	movw	r24, r16
     74a:	8a c4       	rjmp	.+2324   	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:169
            return 0;
        }else{
            if(temp_baby0 != 0){
                if(err_baby0 < -0.5 && err_baby0 > -99){
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	5f eb       	ldi	r21, 0xBF	; 191
     754:	c7 01       	movw	r24, r14
     756:	b6 01       	movw	r22, r12
     758:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     75c:	87 ff       	sbrs	r24, 7
     75e:	0a c0       	rjmp	.+20     	; 0x774 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xe8>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:169 (discriminator 1)
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	46 ec       	ldi	r20, 0xC6	; 198
     766:	52 ec       	ldi	r21, 0xC2	; 194
     768:	c7 01       	movw	r24, r14
     76a:	b6 01       	movw	r22, r12
     76c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     770:	18 16       	cp	r1, r24
     772:	54 f3       	brlt	.-44     	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:172
                    return 0;
                }
                if(err_baby0 < 150 && err_baby0 >= 70.5){
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	46 e1       	ldi	r20, 0x16	; 22
     77a:	53 e4       	ldi	r21, 0x43	; 67
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     784:	87 ff       	sbrs	r24, 7
     786:	0a c0       	rjmp	.+20     	; 0x79c <Xbaby::get_value_heater(float, int, int, float, float, float)+0x110>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:172 (discriminator 1)
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	4d e8       	ldi	r20, 0x8D	; 141
     78e:	52 e4       	ldi	r21, 0x42	; 66
     790:	c7 01       	movw	r24, r14
     792:	b6 01       	movw	r22, r12
     794:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     798:	87 ff       	sbrs	r24, 7
     79a:	90 c4       	rjmp	.+2336   	; 0x10bc <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa30>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:175
                    return 220;
                }
                if(err_baby0 < 70.5 && err_baby0 >= 50.5){
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	4d e8       	ldi	r20, 0x8D	; 141
     7a2:	52 e4       	ldi	r21, 0x42	; 66
     7a4:	c7 01       	movw	r24, r14
     7a6:	b6 01       	movw	r22, r12
     7a8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     7ac:	87 ff       	sbrs	r24, 7
     7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x138>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:175 (discriminator 1)
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	4a e4       	ldi	r20, 0x4A	; 74
     7b6:	52 e4       	ldi	r21, 0x42	; 66
     7b8:	c7 01       	movw	r24, r14
     7ba:	b6 01       	movw	r22, r12
     7bc:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     7c0:	87 ff       	sbrs	r24, 7
     7c2:	7f c4       	rjmp	.+2302   	; 0x10c2 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa36>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:178
                    return 200;
                }
                if(err_baby0 < 50.5 && err_baby0 >= 40.5){
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	4a e4       	ldi	r20, 0x4A	; 74
     7ca:	52 e4       	ldi	r21, 0x42	; 66
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     7d4:	87 ff       	sbrs	r24, 7
     7d6:	0a c0       	rjmp	.+20     	; 0x7ec <Xbaby::get_value_heater(float, int, int, float, float, float)+0x160>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:178 (discriminator 1)
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	42 e2       	ldi	r20, 0x22	; 34
     7de:	52 e4       	ldi	r21, 0x42	; 66
     7e0:	c7 01       	movw	r24, r14
     7e2:	b6 01       	movw	r22, r12
     7e4:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     7e8:	87 ff       	sbrs	r24, 7
     7ea:	71 c4       	rjmp	.+2274   	; 0x10ce <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa42>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:181
                    return 170;
                }
                if(err_baby0 < 40.5 && err_baby0 >= 20.5){
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	42 e2       	ldi	r20, 0x22	; 34
     7f2:	52 e4       	ldi	r21, 0x42	; 66
     7f4:	c7 01       	movw	r24, r14
     7f6:	b6 01       	movw	r22, r12
     7f8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     7fc:	87 ff       	sbrs	r24, 7
     7fe:	0a c0       	rjmp	.+20     	; 0x814 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x188>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:181 (discriminator 1)
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	44 ea       	ldi	r20, 0xA4	; 164
     806:	51 e4       	ldi	r21, 0x41	; 65
     808:	c7 01       	movw	r24, r14
     80a:	b6 01       	movw	r22, r12
     80c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     810:	87 ff       	sbrs	r24, 7
     812:	63 c4       	rjmp	.+2246   	; 0x10da <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa4e>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:184
                    return 120;
                }            
                if(err_baby0 < 20.5 && err_baby0 >= 10.5){
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	44 ea       	ldi	r20, 0xA4	; 164
     81a:	51 e4       	ldi	r21, 0x41	; 65
     81c:	c7 01       	movw	r24, r14
     81e:	b6 01       	movw	r22, r12
     820:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     824:	87 ff       	sbrs	r24, 7
     826:	0a c0       	rjmp	.+20     	; 0x83c <Xbaby::get_value_heater(float, int, int, float, float, float)+0x1b0>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:184 (discriminator 1)
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	48 e2       	ldi	r20, 0x28	; 40
     82e:	51 e4       	ldi	r21, 0x41	; 65
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     838:	87 ff       	sbrs	r24, 7
     83a:	52 c4       	rjmp	.+2212   	; 0x10e0 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa54>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:187
                    return 100;
                }
                if(err_baby0 < 10.5 && err_baby0 >= 5.5){
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	48 e2       	ldi	r20, 0x28	; 40
     842:	51 e4       	ldi	r21, 0x41	; 65
     844:	c7 01       	movw	r24, r14
     846:	b6 01       	movw	r22, r12
     848:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     84c:	87 ff       	sbrs	r24, 7
     84e:	0a c0       	rjmp	.+20     	; 0x864 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x1d8>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:187 (discriminator 1)
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 eb       	ldi	r20, 0xB0	; 176
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     860:	87 ff       	sbrs	r24, 7
     862:	1d c4       	rjmp	.+2106   	; 0x109e <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa12>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:190
                    return 90;
                }
                if(err_baby0 < 5.5 && err_baby0 >= 1.5){
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 eb       	ldi	r20, 0xB0	; 176
     86a:	50 e4       	ldi	r21, 0x40	; 64
     86c:	c7 01       	movw	r24, r14
     86e:	b6 01       	movw	r22, r12
     870:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     874:	87 ff       	sbrs	r24, 7
     876:	0a c0       	rjmp	.+20     	; 0x88c <Xbaby::get_value_heater(float, int, int, float, float, float)+0x200>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:190 (discriminator 1)
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 ec       	ldi	r20, 0xC0	; 192
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	c7 01       	movw	r24, r14
     882:	b6 01       	movw	r22, r12
     884:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     888:	87 ff       	sbrs	r24, 7
     88a:	99 c1       	rjmp	.+818    	; 0xbbe <Xbaby::get_value_heater(float, int, int, float, float, float)+0x532>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:193
                    return 72;
                }
                if(err_baby0 < 1.5 && err_baby0 >= -0.5){
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	40 ec       	ldi	r20, 0xC0	; 192
     892:	5f e3       	ldi	r21, 0x3F	; 63
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     89c:	87 ff       	sbrs	r24, 7
     89e:	e0 c3       	rjmp	.+1984   	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:193 (discriminator 1)
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	5f eb       	ldi	r21, 0xBF	; 191
     8a8:	c7 01       	movw	r24, r14
     8aa:	b6 01       	movw	r22, r12
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:222 (discriminator 1)
                    return 90;
                }
                if(err_baby1 < 5.5 && err_baby1 >= 1.5){
                    return 72;
                }
                if(err_baby1 < 1.5 && err_baby1 >= -0.5){
     8ac:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     8b0:	87 fd       	sbrc	r24, 7
     8b2:	d6 c3       	rjmp	.+1964   	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:194
                }
                if(err_baby0 < 5.5 && err_baby0 >= 1.5){
                    return 72;
                }
                if(err_baby0 < 1.5 && err_baby0 >= -0.5){
                    return 64;
     8b4:	00 e4       	ldi	r16, 0x40	; 64
     8b6:	10 e0       	ldi	r17, 0x00	; 0
     8b8:	47 cf       	rjmp	.-370    	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:198
                }
            }
            if(temp_baby0 == 0 && temp_baby1 != 0){
                if(err_baby1 < -0.5 && err_baby1 > -99){
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	5f eb       	ldi	r21, 0xBF	; 191
     8c2:	c3 01       	movw	r24, r6
     8c4:	b2 01       	movw	r22, r4
     8c6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     8ca:	87 ff       	sbrs	r24, 7
     8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x258>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:198 (discriminator 1)
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	46 ec       	ldi	r20, 0xC6	; 198
     8d4:	52 ec       	ldi	r21, 0xC2	; 194
     8d6:	c3 01       	movw	r24, r6
     8d8:	b2 01       	movw	r22, r4
     8da:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     8de:	18 16       	cp	r1, r24
     8e0:	0c f4       	brge	.+2      	; 0x8e4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x258>
     8e2:	d4 c3       	rjmp	.+1960   	; 0x108c <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa00>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:201
                    return 10;
                }
                if(err_baby1 < 150 && err_baby1 >= 70.5){
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	46 e1       	ldi	r20, 0x16	; 22
     8ea:	53 e4       	ldi	r21, 0x43	; 67
     8ec:	c3 01       	movw	r24, r6
     8ee:	b2 01       	movw	r22, r4
     8f0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     8f4:	87 ff       	sbrs	r24, 7
     8f6:	0a c0       	rjmp	.+20     	; 0x90c <Xbaby::get_value_heater(float, int, int, float, float, float)+0x280>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:201 (discriminator 1)
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4d e8       	ldi	r20, 0x8D	; 141
     8fe:	52 e4       	ldi	r21, 0x42	; 66
     900:	c3 01       	movw	r24, r6
     902:	b2 01       	movw	r22, r4
     904:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     908:	87 ff       	sbrs	r24, 7
     90a:	d8 c3       	rjmp	.+1968   	; 0x10bc <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa30>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:204
                    return 220;
                }
                if(err_baby1 < 70.5 && err_baby1 >= 50.5){
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	4d e8       	ldi	r20, 0x8D	; 141
     912:	52 e4       	ldi	r21, 0x42	; 66
     914:	c3 01       	movw	r24, r6
     916:	b2 01       	movw	r22, r4
     918:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     91c:	87 ff       	sbrs	r24, 7
     91e:	0a c0       	rjmp	.+20     	; 0x934 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x2a8>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:204 (discriminator 1)
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	4a e4       	ldi	r20, 0x4A	; 74
     926:	52 e4       	ldi	r21, 0x42	; 66
     928:	c3 01       	movw	r24, r6
     92a:	b2 01       	movw	r22, r4
     92c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     930:	87 ff       	sbrs	r24, 7
     932:	c7 c3       	rjmp	.+1934   	; 0x10c2 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa36>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:207
                    return 200;
                }
                if(err_baby1 < 50.5 && err_baby1 >= 40.5){
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	4a e4       	ldi	r20, 0x4A	; 74
     93a:	52 e4       	ldi	r21, 0x42	; 66
     93c:	c3 01       	movw	r24, r6
     93e:	b2 01       	movw	r22, r4
     940:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     944:	87 ff       	sbrs	r24, 7
     946:	0a c0       	rjmp	.+20     	; 0x95c <Xbaby::get_value_heater(float, int, int, float, float, float)+0x2d0>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:207 (discriminator 1)
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	42 e2       	ldi	r20, 0x22	; 34
     94e:	52 e4       	ldi	r21, 0x42	; 66
     950:	c3 01       	movw	r24, r6
     952:	b2 01       	movw	r22, r4
     954:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     958:	87 ff       	sbrs	r24, 7
     95a:	b9 c3       	rjmp	.+1906   	; 0x10ce <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa42>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:210
                    return 170;
                }
                if(err_baby1 < 40.5 && err_baby1 >= 20.5){
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	42 e2       	ldi	r20, 0x22	; 34
     962:	52 e4       	ldi	r21, 0x42	; 66
     964:	c3 01       	movw	r24, r6
     966:	b2 01       	movw	r22, r4
     968:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     96c:	87 ff       	sbrs	r24, 7
     96e:	0a c0       	rjmp	.+20     	; 0x984 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x2f8>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:210 (discriminator 1)
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	44 ea       	ldi	r20, 0xA4	; 164
     976:	51 e4       	ldi	r21, 0x41	; 65
     978:	c3 01       	movw	r24, r6
     97a:	b2 01       	movw	r22, r4
     97c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     980:	87 ff       	sbrs	r24, 7
     982:	ab c3       	rjmp	.+1878   	; 0x10da <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa4e>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:213
                    return 120;
                }            
                if(err_baby1 < 20.5 && err_baby1 >= 10.5){
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	44 ea       	ldi	r20, 0xA4	; 164
     98a:	51 e4       	ldi	r21, 0x41	; 65
     98c:	c3 01       	movw	r24, r6
     98e:	b2 01       	movw	r22, r4
     990:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     994:	87 ff       	sbrs	r24, 7
     996:	0a c0       	rjmp	.+20     	; 0x9ac <Xbaby::get_value_heater(float, int, int, float, float, float)+0x320>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:213 (discriminator 1)
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	48 e2       	ldi	r20, 0x28	; 40
     99e:	51 e4       	ldi	r21, 0x41	; 65
     9a0:	c3 01       	movw	r24, r6
     9a2:	b2 01       	movw	r22, r4
     9a4:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     9a8:	87 ff       	sbrs	r24, 7
     9aa:	9a c3       	rjmp	.+1844   	; 0x10e0 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa54>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:216
                    return 100;
                }
                if(err_baby1 < 10.5 && err_baby1 >= 5.5){
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	48 e2       	ldi	r20, 0x28	; 40
     9b2:	51 e4       	ldi	r21, 0x41	; 65
     9b4:	c3 01       	movw	r24, r6
     9b6:	b2 01       	movw	r22, r4
     9b8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     9bc:	87 ff       	sbrs	r24, 7
     9be:	0a c0       	rjmp	.+20     	; 0x9d4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x348>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:216 (discriminator 1)
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 eb       	ldi	r20, 0xB0	; 176
     9c6:	50 e4       	ldi	r21, 0x40	; 64
     9c8:	c3 01       	movw	r24, r6
     9ca:	b2 01       	movw	r22, r4
     9cc:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     9d0:	87 ff       	sbrs	r24, 7
     9d2:	65 c3       	rjmp	.+1738   	; 0x109e <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa12>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:219
                    return 90;
                }
                if(err_baby1 < 5.5 && err_baby1 >= 1.5){
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	40 eb       	ldi	r20, 0xB0	; 176
     9da:	50 e4       	ldi	r21, 0x40	; 64
     9dc:	c3 01       	movw	r24, r6
     9de:	b2 01       	movw	r22, r4
     9e0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     9e4:	87 ff       	sbrs	r24, 7
     9e6:	0a c0       	rjmp	.+20     	; 0x9fc <Xbaby::get_value_heater(float, int, int, float, float, float)+0x370>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:219 (discriminator 1)
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 ec       	ldi	r20, 0xC0	; 192
     9ee:	5f e3       	ldi	r21, 0x3F	; 63
     9f0:	c3 01       	movw	r24, r6
     9f2:	b2 01       	movw	r22, r4
     9f4:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     9f8:	87 ff       	sbrs	r24, 7
     9fa:	e1 c0       	rjmp	.+450    	; 0xbbe <Xbaby::get_value_heater(float, int, int, float, float, float)+0x532>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:222
                    return 72;
                }
                if(err_baby1 < 1.5 && err_baby1 >= -0.5){
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 ec       	ldi	r20, 0xC0	; 192
     a02:	5f e3       	ldi	r21, 0x3F	; 63
     a04:	c3 01       	movw	r24, r6
     a06:	b2 01       	movw	r22, r4
     a08:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     a0c:	87 ff       	sbrs	r24, 7
     a0e:	28 c3       	rjmp	.+1616   	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:222 (discriminator 1)
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	5f eb       	ldi	r21, 0xBF	; 191
     a18:	c3 01       	movw	r24, r6
     a1a:	b2 01       	movw	r22, r4
     a1c:	47 cf       	rjmp	.-370    	; 0x8ac <Xbaby::get_value_heater(float, int, int, float, float, float)+0x220>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:228 (discriminator 1)
                    return 64;
                }
            }
        }
    }
    if(mode == 1 && high == 1){
     a1e:	01 30       	cpi	r16, 0x01	; 1
     a20:	11 05       	cpc	r17, r1
     a22:	09 f0       	breq	.+2      	; 0xa26 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x39a>
     a24:	1d c3       	rjmp	.+1594   	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:229
        if(temp_baby0 == 0 && temp_baby1 == 0){
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	a9 01       	movw	r20, r18
     a2c:	c5 01       	movw	r24, r10
     a2e:	b4 01       	movw	r22, r8
     a30:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     a34:	81 11       	cpse	r24, r1
     a36:	0e c0       	rjmp	.+28     	; 0xa54 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x3c8>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:229 (discriminator 1)
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	a9 01       	movw	r20, r18
     a3e:	6d 89       	ldd	r22, Y+21	; 0x15
     a40:	7e 89       	ldd	r23, Y+22	; 0x16
     a42:	8f 89       	ldd	r24, Y+23	; 0x17
     a44:	98 8d       	ldd	r25, Y+24	; 0x18
     a46:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     a4a:	81 11       	cpse	r24, r1
     a4c:	bb c0       	rjmp	.+374    	; 0xbc4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x538>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:295
        }    
    }

    if(mode == 2 && high == 0){
        if(temp_chamber < 0){
            return 0;
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	00 e0       	ldi	r16, 0x00	; 0
     a52:	7a ce       	rjmp	.-780    	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:233
    if(mode == 1 && high == 1){
        if(temp_baby0 == 0 && temp_baby1 == 0){
            return 0;
        }else{
             if(temp_baby0 != 0){
                if(err_baby0 < -0.5 && err_baby0 > -99){
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	5f eb       	ldi	r21, 0xBF	; 191
     a5c:	c7 01       	movw	r24, r14
     a5e:	b6 01       	movw	r22, r12
     a60:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     a64:	87 ff       	sbrs	r24, 7
     a66:	0b c0       	rjmp	.+22     	; 0xa7e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x3f2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:233 (discriminator 1)
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	46 ec       	ldi	r20, 0xC6	; 198
     a6e:	52 ec       	ldi	r21, 0xC2	; 194
     a70:	c7 01       	movw	r24, r14
     a72:	b6 01       	movw	r22, r12
     a74:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     a78:	18 16       	cp	r1, r24
     a7a:	0c f4       	brge	.+2      	; 0xa7e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x3f2>
     a7c:	07 c3       	rjmp	.+1550   	; 0x108c <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa00>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:236
                    return 10;
                }
                if(err_baby0 < 150 && err_baby0 >= 70.5){
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	46 e1       	ldi	r20, 0x16	; 22
     a84:	53 e4       	ldi	r21, 0x43	; 67
     a86:	c7 01       	movw	r24, r14
     a88:	b6 01       	movw	r22, r12
     a8a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     a8e:	87 ff       	sbrs	r24, 7
     a90:	0a c0       	rjmp	.+20     	; 0xaa6 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x41a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:236 (discriminator 1)
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	4d e8       	ldi	r20, 0x8D	; 141
     a98:	52 e4       	ldi	r21, 0x42	; 66
     a9a:	c7 01       	movw	r24, r14
     a9c:	b6 01       	movw	r22, r12
     a9e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     aa2:	87 ff       	sbrs	r24, 7
     aa4:	f6 c2       	rjmp	.+1516   	; 0x1092 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa06>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:239
                    return 225;
                }
                if(err_baby0 < 70.5 && err_baby0 >= 50.5){
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	4d e8       	ldi	r20, 0x8D	; 141
     aac:	52 e4       	ldi	r21, 0x42	; 66
     aae:	c7 01       	movw	r24, r14
     ab0:	b6 01       	movw	r22, r12
     ab2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     ab6:	87 ff       	sbrs	r24, 7
     ab8:	0a c0       	rjmp	.+20     	; 0xace <Xbaby::get_value_heater(float, int, int, float, float, float)+0x442>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:239 (discriminator 1)
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	4a e4       	ldi	r20, 0x4A	; 74
     ac0:	52 e4       	ldi	r21, 0x42	; 66
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     aca:	87 ff       	sbrs	r24, 7
     acc:	f7 c2       	rjmp	.+1518   	; 0x10bc <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa30>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:242
                    return 220;
                }
                if(err_baby0 < 50.5 && err_baby0 >= 40.5){
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	4a e4       	ldi	r20, 0x4A	; 74
     ad4:	52 e4       	ldi	r21, 0x42	; 66
     ad6:	c7 01       	movw	r24, r14
     ad8:	b6 01       	movw	r22, r12
     ada:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     ade:	87 ff       	sbrs	r24, 7
     ae0:	0a c0       	rjmp	.+20     	; 0xaf6 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x46a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:242 (discriminator 1)
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	42 e2       	ldi	r20, 0x22	; 34
     ae8:	52 e4       	ldi	r21, 0x42	; 66
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     af2:	87 ff       	sbrs	r24, 7
     af4:	da c2       	rjmp	.+1460   	; 0x10aa <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa1e>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:245
                    return 210;
                }
                if(err_baby0 < 40.5 && err_baby0 >= 30.5){
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	42 e2       	ldi	r20, 0x22	; 34
     afc:	52 e4       	ldi	r21, 0x42	; 66
     afe:	c7 01       	movw	r24, r14
     b00:	b6 01       	movw	r22, r12
     b02:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     b06:	87 ff       	sbrs	r24, 7
     b08:	0a c0       	rjmp	.+20     	; 0xb1e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x492>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:245 (discriminator 1)
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	44 ef       	ldi	r20, 0xF4	; 244
     b10:	51 e4       	ldi	r21, 0x41	; 65
     b12:	c7 01       	movw	r24, r14
     b14:	b6 01       	movw	r22, r12
     b16:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     b1a:	87 ff       	sbrs	r24, 7
     b1c:	d5 c2       	rjmp	.+1450   	; 0x10c8 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa3c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:248
                    return 180;
                }            
                if(err_baby0 < 30.5 && err_baby0 >= 10.5){
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	44 ef       	ldi	r20, 0xF4	; 244
     b24:	51 e4       	ldi	r21, 0x41	; 65
     b26:	c7 01       	movw	r24, r14
     b28:	b6 01       	movw	r22, r12
     b2a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     b2e:	87 ff       	sbrs	r24, 7
     b30:	0a c0       	rjmp	.+20     	; 0xb46 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x4ba>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:248 (discriminator 1)
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	48 e2       	ldi	r20, 0x28	; 40
     b38:	51 e4       	ldi	r21, 0x41	; 65
     b3a:	c7 01       	movw	r24, r14
     b3c:	b6 01       	movw	r22, r12
     b3e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     b42:	87 ff       	sbrs	r24, 7
     b44:	a9 c2       	rjmp	.+1362   	; 0x1098 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa0c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:251
                    return 140;
                }
                if(err_baby0 < 10.5 && err_baby0 >= 5.5){
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	48 e2       	ldi	r20, 0x28	; 40
     b4c:	51 e4       	ldi	r21, 0x41	; 65
     b4e:	c7 01       	movw	r24, r14
     b50:	b6 01       	movw	r22, r12
     b52:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     b56:	87 ff       	sbrs	r24, 7
     b58:	0a c0       	rjmp	.+20     	; 0xb6e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x4e2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:251 (discriminator 1)
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 eb       	ldi	r20, 0xB0	; 176
     b60:	50 e4       	ldi	r21, 0x40	; 64
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     b6a:	87 ff       	sbrs	r24, 7
     b6c:	98 c2       	rjmp	.+1328   	; 0x109e <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa12>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:254
                    return 90;
                }
                if(err_baby0 < 5.5 && err_baby0 >= 1.5){
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 eb       	ldi	r20, 0xB0	; 176
     b74:	50 e4       	ldi	r21, 0x40	; 64
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     b7e:	87 ff       	sbrs	r24, 7
     b80:	0a c0       	rjmp	.+20     	; 0xb96 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x50a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:254 (discriminator 1)
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 ec       	ldi	r20, 0xC0	; 192
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	c7 01       	movw	r24, r14
     b8c:	b6 01       	movw	r22, r12
     b8e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     b92:	87 ff       	sbrs	r24, 7
     b94:	78 c2       	rjmp	.+1264   	; 0x1086 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9fa>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:257
                    return 82;
                }
                if(err_baby0 < 1.5 && err_baby0 >= -0.5){
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 ec       	ldi	r20, 0xC0	; 192
     b9c:	5f e3       	ldi	r21, 0x3F	; 63
     b9e:	c7 01       	movw	r24, r14
     ba0:	b6 01       	movw	r22, r12
     ba2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     ba6:	87 ff       	sbrs	r24, 7
     ba8:	5b c2       	rjmp	.+1206   	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:257 (discriminator 1)
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	5f eb       	ldi	r21, 0xBF	; 191
     bb2:	c7 01       	movw	r24, r14
     bb4:	b6 01       	movw	r22, r12
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:286 (discriminator 1)
                    return 90;
                }
                if(err_baby1 < 5.5 && err_baby1 >= 1.5){
                    return 80;
                }
                if(err_baby1 < 1.5 && err_baby1 >= -0.5){
     bb6:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     bba:	87 fd       	sbrc	r24, 7
     bbc:	51 c2       	rjmp	.+1186   	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:258
                }
                if(err_baby0 < 5.5 && err_baby0 >= 1.5){
                    return 82;
                }
                if(err_baby0 < 1.5 && err_baby0 >= -0.5){
                    return 72;
     bbe:	08 e4       	ldi	r16, 0x48	; 72
     bc0:	10 e0       	ldi	r17, 0x00	; 0
     bc2:	c2 cd       	rjmp	.-1148   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:262
                }
            }
            if(temp_baby0 == 0 && temp_baby1 != 0){
                if(err_baby1 < -0.5 && err_baby1 > -99){
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	5f eb       	ldi	r21, 0xBF	; 191
     bcc:	c3 01       	movw	r24, r6
     bce:	b2 01       	movw	r22, r4
     bd0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     bd4:	87 ff       	sbrs	r24, 7
     bd6:	0b c0       	rjmp	.+22     	; 0xbee <Xbaby::get_value_heater(float, int, int, float, float, float)+0x562>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:262 (discriminator 1)
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	46 ec       	ldi	r20, 0xC6	; 198
     bde:	52 ec       	ldi	r21, 0xC2	; 194
     be0:	c3 01       	movw	r24, r6
     be2:	b2 01       	movw	r22, r4
     be4:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     be8:	18 16       	cp	r1, r24
     bea:	0c f4       	brge	.+2      	; 0xbee <Xbaby::get_value_heater(float, int, int, float, float, float)+0x562>
     bec:	4f c2       	rjmp	.+1182   	; 0x108c <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa00>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:265
                    return 10;
                }
                if(err_baby1 < 150 && err_baby1 >= 70.5){
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	46 e1       	ldi	r20, 0x16	; 22
     bf4:	53 e4       	ldi	r21, 0x43	; 67
     bf6:	c3 01       	movw	r24, r6
     bf8:	b2 01       	movw	r22, r4
     bfa:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     bfe:	87 ff       	sbrs	r24, 7
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x58a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:265 (discriminator 1)
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	4d e8       	ldi	r20, 0x8D	; 141
     c08:	52 e4       	ldi	r21, 0x42	; 66
     c0a:	c3 01       	movw	r24, r6
     c0c:	b2 01       	movw	r22, r4
     c0e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     c12:	87 ff       	sbrs	r24, 7
     c14:	3e c2       	rjmp	.+1148   	; 0x1092 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa06>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:268
                    return 225;
                }
                if(err_baby1 < 70.5 && err_baby1 >= 50.5){
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	4d e8       	ldi	r20, 0x8D	; 141
     c1c:	52 e4       	ldi	r21, 0x42	; 66
     c1e:	c3 01       	movw	r24, r6
     c20:	b2 01       	movw	r22, r4
     c22:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     c26:	87 ff       	sbrs	r24, 7
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x5b2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:268 (discriminator 1)
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	4a e4       	ldi	r20, 0x4A	; 74
     c30:	52 e4       	ldi	r21, 0x42	; 66
     c32:	c3 01       	movw	r24, r6
     c34:	b2 01       	movw	r22, r4
     c36:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     c3a:	87 ff       	sbrs	r24, 7
     c3c:	3f c2       	rjmp	.+1150   	; 0x10bc <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa30>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:271
                    return 220;
                }
                if(err_baby1 < 50.5 && err_baby1 >= 40.5){
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	4a e4       	ldi	r20, 0x4A	; 74
     c44:	52 e4       	ldi	r21, 0x42	; 66
     c46:	c3 01       	movw	r24, r6
     c48:	b2 01       	movw	r22, r4
     c4a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     c4e:	87 ff       	sbrs	r24, 7
     c50:	0a c0       	rjmp	.+20     	; 0xc66 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x5da>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:271 (discriminator 1)
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	42 e2       	ldi	r20, 0x22	; 34
     c58:	52 e4       	ldi	r21, 0x42	; 66
     c5a:	c3 01       	movw	r24, r6
     c5c:	b2 01       	movw	r22, r4
     c5e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     c62:	87 ff       	sbrs	r24, 7
     c64:	2e c2       	rjmp	.+1116   	; 0x10c2 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa36>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:274
                    return 200;
                }
                if(err_baby1 < 40.5 && err_baby1 >= 30.5){
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	42 e2       	ldi	r20, 0x22	; 34
     c6c:	52 e4       	ldi	r21, 0x42	; 66
     c6e:	c3 01       	movw	r24, r6
     c70:	b2 01       	movw	r22, r4
     c72:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     c76:	87 ff       	sbrs	r24, 7
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x602>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:274 (discriminator 1)
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	44 ef       	ldi	r20, 0xF4	; 244
     c80:	51 e4       	ldi	r21, 0x41	; 65
     c82:	c3 01       	movw	r24, r6
     c84:	b2 01       	movw	r22, r4
     c86:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     c8a:	87 ff       	sbrs	r24, 7
     c8c:	1d c2       	rjmp	.+1082   	; 0x10c8 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa3c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:277
                    return 180;
                }            
                if(err_baby1 < 20.5 && err_baby1 >= 10.5){
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	44 ea       	ldi	r20, 0xA4	; 164
     c94:	51 e4       	ldi	r21, 0x41	; 65
     c96:	c3 01       	movw	r24, r6
     c98:	b2 01       	movw	r22, r4
     c9a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     c9e:	87 ff       	sbrs	r24, 7
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x62a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:277 (discriminator 1)
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	48 e2       	ldi	r20, 0x28	; 40
     ca8:	51 e4       	ldi	r21, 0x41	; 65
     caa:	c3 01       	movw	r24, r6
     cac:	b2 01       	movw	r22, r4
     cae:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     cb2:	87 ff       	sbrs	r24, 7
     cb4:	f1 c1       	rjmp	.+994    	; 0x1098 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa0c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:280
                    return 140;
                }
                if(err_baby1 < 10.5 && err_baby1 >= 5.5){
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	48 e2       	ldi	r20, 0x28	; 40
     cbc:	51 e4       	ldi	r21, 0x41	; 65
     cbe:	c3 01       	movw	r24, r6
     cc0:	b2 01       	movw	r22, r4
     cc2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     cc6:	87 ff       	sbrs	r24, 7
     cc8:	0a c0       	rjmp	.+20     	; 0xcde <Xbaby::get_value_heater(float, int, int, float, float, float)+0x652>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:280 (discriminator 1)
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 eb       	ldi	r20, 0xB0	; 176
     cd0:	50 e4       	ldi	r21, 0x40	; 64
     cd2:	c3 01       	movw	r24, r6
     cd4:	b2 01       	movw	r22, r4
     cd6:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     cda:	87 ff       	sbrs	r24, 7
     cdc:	e0 c1       	rjmp	.+960    	; 0x109e <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa12>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:283
                    return 90;
                }
                if(err_baby1 < 5.5 && err_baby1 >= 1.5){
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 eb       	ldi	r20, 0xB0	; 176
     ce4:	50 e4       	ldi	r21, 0x40	; 64
     ce6:	c3 01       	movw	r24, r6
     ce8:	b2 01       	movw	r22, r4
     cea:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     cee:	87 ff       	sbrs	r24, 7
     cf0:	0a c0       	rjmp	.+20     	; 0xd06 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x67a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:283 (discriminator 1)
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 ec       	ldi	r20, 0xC0	; 192
     cf8:	5f e3       	ldi	r21, 0x3F	; 63
     cfa:	c3 01       	movw	r24, r6
     cfc:	b2 01       	movw	r22, r4
     cfe:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     d02:	87 ff       	sbrs	r24, 7
     d04:	cf c1       	rjmp	.+926    	; 0x10a4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa18>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:286
                    return 80;
                }
                if(err_baby1 < 1.5 && err_baby1 >= -0.5){
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 ec       	ldi	r20, 0xC0	; 192
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	c3 01       	movw	r24, r6
     d10:	b2 01       	movw	r22, r4
     d12:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     d16:	87 ff       	sbrs	r24, 7
     d18:	a3 c1       	rjmp	.+838    	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:286 (discriminator 1)
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	5f eb       	ldi	r21, 0xBF	; 191
     d22:	c3 01       	movw	r24, r6
     d24:	b2 01       	movw	r22, r4
     d26:	47 cf       	rjmp	.-370    	; 0xbb6 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x52a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:293
                }
            }
        }    
    }

    if(mode == 2 && high == 0){
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	28 16       	cp	r2, r24
     d2c:	31 04       	cpc	r3, r1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x6a6>
     d30:	97 c1       	rjmp	.+814    	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:161 (discriminator 1)
    }
}


int Xbaby::get_value_heater(float set_temp,int mode, int high, float temp_chamber, float temp_baby0, float temp_baby1){
    float err_chamber = (set_temp*10) - (temp_chamber*10); 
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e2       	ldi	r20, 0x20	; 32
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	c7 01       	movw	r24, r14
     d3c:	b6 01       	movw	r22, r12
     d3e:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c3 01       	movw	r24, r6
     d48:	b2 01       	movw	r22, r4
     d4a:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
     d4e:	4b 01       	movw	r8, r22
     d50:	5c 01       	movw	r10, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:293 (discriminator 1)
                }
            }
        }    
    }

    if(mode == 2 && high == 0){
     d52:	01 15       	cp	r16, r1
     d54:	11 05       	cpc	r17, r1
     d56:	09 f0       	breq	.+2      	; 0xd5a <Xbaby::get_value_heater(float, int, int, float, float, float)+0x6ce>
     d58:	c1 c0       	rjmp	.+386    	; 0xedc <Xbaby::get_value_heater(float, int, int, float, float, float)+0x850>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:294
        if(temp_chamber < 0){
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	a9 01       	movw	r20, r18
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     d68:	87 fd       	sbrc	r24, 7
     d6a:	ee cc       	rjmp	.-1572   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:297
            return 0;
        }else{
                if(err_chamber < -0.5 && err_chamber > -99){
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	5f eb       	ldi	r21, 0xBF	; 191
     d74:	c5 01       	movw	r24, r10
     d76:	b4 01       	movw	r22, r8
     d78:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     d7c:	87 ff       	sbrs	r24, 7
     d7e:	0b c0       	rjmp	.+22     	; 0xd96 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x70a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:297 (discriminator 1)
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	46 ec       	ldi	r20, 0xC6	; 198
     d86:	52 ec       	ldi	r21, 0xC2	; 194
     d88:	c5 01       	movw	r24, r10
     d8a:	b4 01       	movw	r22, r8
     d8c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     d90:	18 16       	cp	r1, r24
     d92:	0c f4       	brge	.+2      	; 0xd96 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x70a>
     d94:	d9 cc       	rjmp	.-1614   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:300
                    return 0;
                }
                if(err_chamber < 150 && err_chamber >= 70.5){
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	46 e1       	ldi	r20, 0x16	; 22
     d9c:	53 e4       	ldi	r21, 0x43	; 67
     d9e:	c5 01       	movw	r24, r10
     da0:	b4 01       	movw	r22, r8
     da2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     da6:	87 ff       	sbrs	r24, 7
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <Xbaby::get_value_heater(float, int, int, float, float, float)+0x732>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:300 (discriminator 1)
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4d e8       	ldi	r20, 0x8D	; 141
     db0:	52 e4       	ldi	r21, 0x42	; 66
     db2:	c5 01       	movw	r24, r10
     db4:	b4 01       	movw	r22, r8
     db6:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     dba:	87 ff       	sbrs	r24, 7
     dbc:	7c c1       	rjmp	.+760    	; 0x10b6 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa2a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:303
                    return 255;
                }
                if(err_chamber < 70.5 && err_chamber >= 50.5){
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	4d e8       	ldi	r20, 0x8D	; 141
     dc4:	52 e4       	ldi	r21, 0x42	; 66
     dc6:	c5 01       	movw	r24, r10
     dc8:	b4 01       	movw	r22, r8
     dca:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     dce:	87 ff       	sbrs	r24, 7
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x75a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:303 (discriminator 1)
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a e4       	ldi	r20, 0x4A	; 74
     dd8:	52 e4       	ldi	r21, 0x42	; 66
     dda:	c5 01       	movw	r24, r10
     ddc:	b4 01       	movw	r22, r8
     dde:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     de2:	87 ff       	sbrs	r24, 7
     de4:	62 c1       	rjmp	.+708    	; 0x10aa <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa1e>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:306
                    return 210;
                }
                if(err_chamber < 50.5 && err_chamber >= 30.5){
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	4a e4       	ldi	r20, 0x4A	; 74
     dec:	52 e4       	ldi	r21, 0x42	; 66
     dee:	c5 01       	movw	r24, r10
     df0:	b4 01       	movw	r22, r8
     df2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     df6:	87 ff       	sbrs	r24, 7
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x782>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:306 (discriminator 1)
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	44 ef       	ldi	r20, 0xF4	; 244
     e00:	51 e4       	ldi	r21, 0x41	; 65
     e02:	c5 01       	movw	r24, r10
     e04:	b4 01       	movw	r22, r8
     e06:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     e0a:	87 ff       	sbrs	r24, 7
     e0c:	5d c1       	rjmp	.+698    	; 0x10c8 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa3c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:309
                    return 180;
                }
                if(err_chamber < 30.5 && err_chamber >= 20.5){
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	44 ef       	ldi	r20, 0xF4	; 244
     e14:	51 e4       	ldi	r21, 0x41	; 65
     e16:	c5 01       	movw	r24, r10
     e18:	b4 01       	movw	r22, r8
     e1a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     e1e:	87 ff       	sbrs	r24, 7
     e20:	0a c0       	rjmp	.+20     	; 0xe36 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x7aa>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:309 (discriminator 1)
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	44 ea       	ldi	r20, 0xA4	; 164
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	c5 01       	movw	r24, r10
     e2c:	b4 01       	movw	r22, r8
     e2e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     e32:	87 ff       	sbrs	r24, 7
     e34:	4f c1       	rjmp	.+670    	; 0x10d4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa48>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:312
                    return 150;
                }            
                if(err_chamber < 20.5 && err_chamber >= 10.5){
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	44 ea       	ldi	r20, 0xA4	; 164
     e3c:	51 e4       	ldi	r21, 0x41	; 65
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     e46:	87 ff       	sbrs	r24, 7
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x7d2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:312 (discriminator 1)
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	48 e2       	ldi	r20, 0x28	; 40
     e50:	51 e4       	ldi	r21, 0x41	; 65
     e52:	c5 01       	movw	r24, r10
     e54:	b4 01       	movw	r22, r8
     e56:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     e5a:	87 ff       	sbrs	r24, 7
     e5c:	3e c1       	rjmp	.+636    	; 0x10da <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa4e>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:315
                    return 120;
                }
                if(err_chamber < 10.5 && err_chamber >= 5.5){
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	48 e2       	ldi	r20, 0x28	; 40
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	c5 01       	movw	r24, r10
     e68:	b4 01       	movw	r22, r8
     e6a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     e6e:	87 ff       	sbrs	r24, 7
     e70:	0a c0       	rjmp	.+20     	; 0xe86 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x7fa>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:315 (discriminator 1)
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 eb       	ldi	r20, 0xB0	; 176
     e78:	50 e4       	ldi	r21, 0x40	; 64
     e7a:	c5 01       	movw	r24, r10
     e7c:	b4 01       	movw	r22, r8
     e7e:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     e82:	87 ff       	sbrs	r24, 7
     e84:	15 c1       	rjmp	.+554    	; 0x10b0 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa24>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:318
                    return 95;
                }
                if(err_chamber < 5.5 && err_chamber >= 1.5){
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 eb       	ldi	r20, 0xB0	; 176
     e8c:	50 e4       	ldi	r21, 0x40	; 64
     e8e:	c5 01       	movw	r24, r10
     e90:	b4 01       	movw	r22, r8
     e92:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     e96:	87 ff       	sbrs	r24, 7
     e98:	0a c0       	rjmp	.+20     	; 0xeae <Xbaby::get_value_heater(float, int, int, float, float, float)+0x822>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:318 (discriminator 1)
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 ec       	ldi	r20, 0xC0	; 192
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	c5 01       	movw	r24, r10
     ea4:	b4 01       	movw	r22, r8
     ea6:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     eaa:	87 ff       	sbrs	r24, 7
     eac:	88 ce       	rjmp	.-752    	; 0xbbe <Xbaby::get_value_heater(float, int, int, float, float, float)+0x532>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:321
                    return 72;
                }
                if(err_chamber < 1.5 && err_chamber >= -0.5){
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 ec       	ldi	r20, 0xC0	; 192
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	c5 01       	movw	r24, r10
     eb8:	b4 01       	movw	r22, r8
     eba:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     ebe:	87 ff       	sbrs	r24, 7
     ec0:	cf c0       	rjmp	.+414    	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:321 (discriminator 1)
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	5f eb       	ldi	r21, 0xBF	; 191
     eca:	c5 01       	movw	r24, r10
     ecc:	b4 01       	movw	r22, r8
     ece:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     ed2:	87 fd       	sbrc	r24, 7
     ed4:	c5 c0       	rjmp	.+394    	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:322
                    return 52;
     ed6:	04 e3       	ldi	r16, 0x34	; 52
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	36 cc       	rjmp	.-1940   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:326 (discriminator 1)
                }
        }
    }
    if(mode == 2 && high == 1){
     edc:	01 30       	cpi	r16, 0x01	; 1
     ede:	11 05       	cpc	r17, r1
     ee0:	09 f0       	breq	.+2      	; 0xee4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x858>
     ee2:	be c0       	rjmp	.+380    	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:327
        if(temp_chamber < 0){
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	a9 01       	movw	r20, r18
     eea:	c7 01       	movw	r24, r14
     eec:	b6 01       	movw	r22, r12
     eee:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     ef2:	87 fd       	sbrc	r24, 7
     ef4:	ac cd       	rjmp	.-1192   	; 0xa4e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x3c2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:330
            return 0;
        }else{
                if(err_chamber < -0.4 && err_chamber > -99){
     ef6:	2d ec       	ldi	r18, 0xCD	; 205
     ef8:	3c ec       	ldi	r19, 0xCC	; 204
     efa:	4c ec       	ldi	r20, 0xCC	; 204
     efc:	5e eb       	ldi	r21, 0xBE	; 190
     efe:	c5 01       	movw	r24, r10
     f00:	b4 01       	movw	r22, r8
     f02:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     f06:	87 ff       	sbrs	r24, 7
     f08:	0b c0       	rjmp	.+22     	; 0xf20 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x894>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:330 (discriminator 1)
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	46 ec       	ldi	r20, 0xC6	; 198
     f10:	52 ec       	ldi	r21, 0xC2	; 194
     f12:	c5 01       	movw	r24, r10
     f14:	b4 01       	movw	r22, r8
     f16:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     f1a:	18 16       	cp	r1, r24
     f1c:	0c f4       	brge	.+2      	; 0xf20 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x894>
     f1e:	97 cd       	rjmp	.-1234   	; 0xa4e <Xbaby::get_value_heater(float, int, int, float, float, float)+0x3c2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:333
                    return 0;
                }
                if(err_chamber < 150 && err_chamber >= 70.5){
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	46 e1       	ldi	r20, 0x16	; 22
     f26:	53 e4       	ldi	r21, 0x43	; 67
     f28:	c5 01       	movw	r24, r10
     f2a:	b4 01       	movw	r22, r8
     f2c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     f30:	87 ff       	sbrs	r24, 7
     f32:	0a c0       	rjmp	.+20     	; 0xf48 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x8bc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:333 (discriminator 1)
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	4d e8       	ldi	r20, 0x8D	; 141
     f3a:	52 e4       	ldi	r21, 0x42	; 66
     f3c:	c5 01       	movw	r24, r10
     f3e:	b4 01       	movw	r22, r8
     f40:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     f44:	87 ff       	sbrs	r24, 7
     f46:	b7 c0       	rjmp	.+366    	; 0x10b6 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa2a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:336
                    return 255;
                }
                if(err_chamber < 70.5 && err_chamber >= 50.5){
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	4d e8       	ldi	r20, 0x8D	; 141
     f4e:	52 e4       	ldi	r21, 0x42	; 66
     f50:	c5 01       	movw	r24, r10
     f52:	b4 01       	movw	r22, r8
     f54:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     f58:	87 ff       	sbrs	r24, 7
     f5a:	0a c0       	rjmp	.+20     	; 0xf70 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x8e4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:336 (discriminator 1)
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	4a e4       	ldi	r20, 0x4A	; 74
     f62:	52 e4       	ldi	r21, 0x42	; 66
     f64:	c5 01       	movw	r24, r10
     f66:	b4 01       	movw	r22, r8
     f68:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     f6c:	87 ff       	sbrs	r24, 7
     f6e:	a6 c0       	rjmp	.+332    	; 0x10bc <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa30>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:339
                    return 220;
                }
                if(err_chamber < 50.5 && err_chamber >= 30.5){
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a e4       	ldi	r20, 0x4A	; 74
     f76:	52 e4       	ldi	r21, 0x42	; 66
     f78:	c5 01       	movw	r24, r10
     f7a:	b4 01       	movw	r22, r8
     f7c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     f80:	87 ff       	sbrs	r24, 7
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x90c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:339 (discriminator 1)
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	44 ef       	ldi	r20, 0xF4	; 244
     f8a:	51 e4       	ldi	r21, 0x41	; 65
     f8c:	c5 01       	movw	r24, r10
     f8e:	b4 01       	movw	r22, r8
     f90:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     f94:	87 ff       	sbrs	r24, 7
     f96:	95 c0       	rjmp	.+298    	; 0x10c2 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa36>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:342
                    return 200;
                }
                if(err_chamber < 30.5 && err_chamber >= 20.5){
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	44 ef       	ldi	r20, 0xF4	; 244
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	c5 01       	movw	r24, r10
     fa2:	b4 01       	movw	r22, r8
     fa4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     fa8:	87 ff       	sbrs	r24, 7
     faa:	0a c0       	rjmp	.+20     	; 0xfc0 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x934>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:342 (discriminator 1)
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	44 ea       	ldi	r20, 0xA4	; 164
     fb2:	51 e4       	ldi	r21, 0x41	; 65
     fb4:	c5 01       	movw	r24, r10
     fb6:	b4 01       	movw	r22, r8
     fb8:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     fbc:	87 ff       	sbrs	r24, 7
     fbe:	84 c0       	rjmp	.+264    	; 0x10c8 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa3c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:345
                    return 180;
                }            
                if(err_chamber < 20.5 && err_chamber >= 10.5){
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	44 ea       	ldi	r20, 0xA4	; 164
     fc6:	51 e4       	ldi	r21, 0x41	; 65
     fc8:	c5 01       	movw	r24, r10
     fca:	b4 01       	movw	r22, r8
     fcc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     fd0:	87 ff       	sbrs	r24, 7
     fd2:	0a c0       	rjmp	.+20     	; 0xfe8 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x95c>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:345 (discriminator 1)
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	48 e2       	ldi	r20, 0x28	; 40
     fda:	51 e4       	ldi	r21, 0x41	; 65
     fdc:	c5 01       	movw	r24, r10
     fde:	b4 01       	movw	r22, r8
     fe0:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
     fe4:	87 ff       	sbrs	r24, 7
     fe6:	73 c0       	rjmp	.+230    	; 0x10ce <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa42>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:348
                    return 170;
                }
                if(err_chamber < 10.5 && err_chamber >= 5.5){
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	48 e2       	ldi	r20, 0x28	; 40
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	c5 01       	movw	r24, r10
     ff2:	b4 01       	movw	r22, r8
     ff4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
     ff8:	87 ff       	sbrs	r24, 7
     ffa:	0a c0       	rjmp	.+20     	; 0x1010 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x984>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:348 (discriminator 1)
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 eb       	ldi	r20, 0xB0	; 176
    1002:	50 e4       	ldi	r21, 0x40	; 64
    1004:	c5 01       	movw	r24, r10
    1006:	b4 01       	movw	r22, r8
    1008:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    100c:	87 ff       	sbrs	r24, 7
    100e:	62 c0       	rjmp	.+196    	; 0x10d4 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa48>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:351
                    return 150;
                }
                if(err_chamber < 5.5 && err_chamber >= 1.5){
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 eb       	ldi	r20, 0xB0	; 176
    1016:	50 e4       	ldi	r21, 0x40	; 64
    1018:	c5 01       	movw	r24, r10
    101a:	b4 01       	movw	r22, r8
    101c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1020:	87 ff       	sbrs	r24, 7
    1022:	0a c0       	rjmp	.+20     	; 0x1038 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9ac>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:351 (discriminator 1)
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 ec       	ldi	r20, 0xC0	; 192
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	c5 01       	movw	r24, r10
    102e:	b4 01       	movw	r22, r8
    1030:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1034:	87 ff       	sbrs	r24, 7
    1036:	51 c0       	rjmp	.+162    	; 0x10da <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa4e>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:354
                    return 120;
                }
                if(err_chamber < 1.5 && err_chamber >= -0.4){
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 ec       	ldi	r20, 0xC0	; 192
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	c5 01       	movw	r24, r10
    1042:	b4 01       	movw	r22, r8
    1044:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1048:	87 ff       	sbrs	r24, 7
    104a:	0a c0       	rjmp	.+20     	; 0x1060 <Xbaby::get_value_heater(float, int, int, float, float, float)+0x9d4>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:354 (discriminator 1)
    104c:	2d ec       	ldi	r18, 0xCD	; 205
    104e:	3c ec       	ldi	r19, 0xCC	; 204
    1050:	4c ec       	ldi	r20, 0xCC	; 204
    1052:	5e eb       	ldi	r21, 0xBE	; 190
    1054:	c5 01       	movw	r24, r10
    1056:	b4 01       	movw	r22, r8
    1058:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    105c:	87 ff       	sbrs	r24, 7
    105e:	40 c0       	rjmp	.+128    	; 0x10e0 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xa54>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:360
                    return 100;
                }
        }
    }

}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	3f 90       	pop	r3
    1082:	2f 90       	pop	r2
    1084:	08 95       	ret
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:255
                }
                if(err_baby0 < 10.5 && err_baby0 >= 5.5){
                    return 90;
                }
                if(err_baby0 < 5.5 && err_baby0 >= 1.5){
                    return 82;
    1086:	02 e5       	ldi	r16, 0x52	; 82
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	5e cb       	rjmp	.-2372   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:199
                    return 64;
                }
            }
            if(temp_baby0 == 0 && temp_baby1 != 0){
                if(err_baby1 < -0.5 && err_baby1 > -99){
                    return 10;
    108c:	0a e0       	ldi	r16, 0x0A	; 10
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	5b cb       	rjmp	.-2378   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:237
             if(temp_baby0 != 0){
                if(err_baby0 < -0.5 && err_baby0 > -99){
                    return 10;
                }
                if(err_baby0 < 150 && err_baby0 >= 70.5){
                    return 225;
    1092:	01 ee       	ldi	r16, 0xE1	; 225
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	58 cb       	rjmp	.-2384   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:249
                }
                if(err_baby0 < 40.5 && err_baby0 >= 30.5){
                    return 180;
                }            
                if(err_baby0 < 30.5 && err_baby0 >= 10.5){
                    return 140;
    1098:	0c e8       	ldi	r16, 0x8C	; 140
    109a:	10 e0       	ldi	r17, 0x00	; 0
    109c:	55 cb       	rjmp	.-2390   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:188
                }            
                if(err_baby0 < 20.5 && err_baby0 >= 10.5){
                    return 100;
                }
                if(err_baby0 < 10.5 && err_baby0 >= 5.5){
                    return 90;
    109e:	0a e5       	ldi	r16, 0x5A	; 90
    10a0:	10 e0       	ldi	r17, 0x00	; 0
    10a2:	52 cb       	rjmp	.-2396   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:284
                }
                if(err_baby1 < 10.5 && err_baby1 >= 5.5){
                    return 90;
                }
                if(err_baby1 < 5.5 && err_baby1 >= 1.5){
                    return 80;
    10a4:	00 e5       	ldi	r16, 0x50	; 80
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	4f cb       	rjmp	.-2402   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:304
                }
                if(err_chamber < 150 && err_chamber >= 70.5){
                    return 255;
                }
                if(err_chamber < 70.5 && err_chamber >= 50.5){
                    return 210;
    10aa:	02 ed       	ldi	r16, 0xD2	; 210
    10ac:	10 e0       	ldi	r17, 0x00	; 0
    10ae:	4c cb       	rjmp	.-2408   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:316
                }            
                if(err_chamber < 20.5 && err_chamber >= 10.5){
                    return 120;
                }
                if(err_chamber < 10.5 && err_chamber >= 5.5){
                    return 95;
    10b0:	0f e5       	ldi	r16, 0x5F	; 95
    10b2:	10 e0       	ldi	r17, 0x00	; 0
    10b4:	49 cb       	rjmp	.-2414   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:301
        }else{
                if(err_chamber < -0.5 && err_chamber > -99){
                    return 0;
                }
                if(err_chamber < 150 && err_chamber >= 70.5){
                    return 255;
    10b6:	0f ef       	ldi	r16, 0xFF	; 255
    10b8:	10 e0       	ldi	r17, 0x00	; 0
    10ba:	46 cb       	rjmp	.-2420   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:337
                }
                if(err_chamber < 150 && err_chamber >= 70.5){
                    return 255;
                }
                if(err_chamber < 70.5 && err_chamber >= 50.5){
                    return 220;
    10bc:	0c ed       	ldi	r16, 0xDC	; 220
    10be:	10 e0       	ldi	r17, 0x00	; 0
    10c0:	43 cb       	rjmp	.-2426   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:340
                }
                if(err_chamber < 50.5 && err_chamber >= 30.5){
                    return 200;
    10c2:	08 ec       	ldi	r16, 0xC8	; 200
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	40 cb       	rjmp	.-2432   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:343
                }
                if(err_chamber < 30.5 && err_chamber >= 20.5){
                    return 180;
    10c8:	04 eb       	ldi	r16, 0xB4	; 180
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	3d cb       	rjmp	.-2438   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:346
                }            
                if(err_chamber < 20.5 && err_chamber >= 10.5){
                    return 170;
    10ce:	0a ea       	ldi	r16, 0xAA	; 170
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	3a cb       	rjmp	.-2444   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:349
                }
                if(err_chamber < 10.5 && err_chamber >= 5.5){
                    return 150;
    10d4:	06 e9       	ldi	r16, 0x96	; 150
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	37 cb       	rjmp	.-2450   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:352
                }
                if(err_chamber < 5.5 && err_chamber >= 1.5){
                    return 120;
    10da:	08 e7       	ldi	r16, 0x78	; 120
    10dc:	10 e0       	ldi	r17, 0x00	; 0
    10de:	34 cb       	rjmp	.-2456   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xbaby.cpp:355
                }
                if(err_chamber < 1.5 && err_chamber >= -0.4){
                    return 100;
    10e0:	04 e6       	ldi	r16, 0x64	; 100
    10e2:	10 e0       	ldi	r17, 0x00	; 0
    10e4:	31 cb       	rjmp	.-2462   	; 0x748 <Xbaby::get_value_heater(float, int, int, float, float, float)+0xbc>

000010e6 <ArduinoJson6194_1::SafeBoolIdom<ArduinoJson6194_1::String>::safeBoolHelper() const>:
_ZNK17ArduinoJson6194_112SafeBoolIdomINS_6StringEE14safeBoolHelperEv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:496
        // Serial.println("Alarm!!!!");
    }
    else{
        noTone(pinBuzzer);
    }
}
    10e6:	08 95       	ret

000010e8 <ArduinoJson6194_1::SafeBoolIdom<ArduinoJson6194_1::DeserializationError>::safeBoolHelper() const>:
_ZNK17ArduinoJson6194_112SafeBoolIdomINS_20DeserializationErrorEE14safeBoolHelperEv():
    10e8:	08 95       	ret

000010ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>:
_ZN17ArduinoJson6194_19ConverterIhvE6toJsonEhNS_10VariantRefE():
    10ea:	fb 01       	movw	r30, r22
    10ec:	30 97       	sbiw	r30, 0x00	; 0
    10ee:	59 f0       	breq	.+22     	; 0x1106 <__stack+0x7>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    10f0:	94 81       	ldd	r25, Z+4	; 0x04
    10f2:	90 78       	andi	r25, 0x80	; 128
    10f4:	98 60       	ori	r25, 0x08	; 8
    10f6:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData10setIntegerIhEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES4_():
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	a0 e0       	ldi	r26, 0x00	; 0
    10fe:	80 83       	st	Z, r24
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	a2 83       	std	Z+2, r26	; 0x02
    1104:	b3 83       	std	Z+3, r27	; 0x03
_ZN17ArduinoJson6194_19ConverterIhvE6toJsonEhNS_10VariantRefE():
    1106:	08 95       	ret

00001108 <ArduinoJson6194_1::VariantSlot::next()>:
_ZN17ArduinoJson6194_111VariantSlot4nextEv():
    1108:	fc 01       	movw	r30, r24
    110a:	25 81       	ldd	r18, Z+5	; 0x05
    110c:	22 23       	and	r18, r18
    110e:	39 f0       	breq	.+14     	; 0x111e <ArduinoJson6194_1::VariantSlot::next()+0x16>
    1110:	f8 e0       	ldi	r31, 0x08	; 8
    1112:	2f 02       	muls	r18, r31
    1114:	90 01       	movw	r18, r0
    1116:	11 24       	eor	r1, r1
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	08 95       	ret
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	08 95       	ret

00001124 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]>:
_ZNK17ArduinoJson6194_114CollectionData7getSlotINS_23ZeroTerminatedRamStringEEEPNS_11VariantSlotET_():
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	d0 e0       	ldi	r29, 0x00	; 0
    112e:	c0 e0       	ldi	r28, 0x00	; 0
    1130:	61 15       	cp	r22, r1
    1132:	71 05       	cpc	r23, r1
    1134:	91 f0       	breq	.+36     	; 0x115a <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]+0x36>
    1136:	8b 01       	movw	r16, r22
    1138:	fc 01       	movw	r30, r24
    113a:	c0 81       	ld	r28, Z
    113c:	d1 81       	ldd	r29, Z+1	; 0x01
    113e:	20 97       	sbiw	r28, 0x00	; 0
    1140:	61 f0       	breq	.+24     	; 0x115a <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]+0x36>
_ZN17ArduinoJson6194_113stringCompareENS_23ZeroTerminatedRamStringES0_():
    1142:	6e 81       	ldd	r22, Y+6	; 0x06
    1144:	7f 81       	ldd	r23, Y+7	; 0x07
    1146:	c8 01       	movw	r24, r16
    1148:	0e 94 30 34 	call	0x6860	; 0x6860 <strcmp>
_ZNK17ArduinoJson6194_114CollectionData7getSlotINS_23ZeroTerminatedRamStringEEEPNS_11VariantSlotET_():
    114c:	89 2b       	or	r24, r25
    114e:	29 f0       	breq	.+10     	; 0x115a <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]+0x36>
    1150:	ce 01       	movw	r24, r28
    1152:	0e 94 84 08 	call	0x1108	; 0x1108 <ArduinoJson6194_1::VariantSlot::next()>
    1156:	ec 01       	movw	r28, r24
    1158:	f2 cf       	rjmp	.-28     	; 0x113e <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]+0x1a>
    115a:	ce 01       	movw	r24, r28
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>:
_ZNK17ArduinoJson6194_111VariantData10getElementEj():
    1166:	fc 01       	movw	r30, r24
    1168:	24 81       	ldd	r18, Z+4	; 0x04
    116a:	26 ff       	sbrs	r18, 6
    116c:	14 c0       	rjmp	.+40     	; 0x1196 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x30>
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
_ZNK17ArduinoJson6194_114CollectionData7getSlotEj():
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	91 f0       	breq	.+36     	; 0x119a <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x34>
_ZN17ArduinoJson6194_111VariantSlot4nextEj():
    1176:	61 15       	cp	r22, r1
    1178:	71 05       	cpc	r23, r1
    117a:	79 f0       	breq	.+30     	; 0x119a <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x34>
    117c:	fc 01       	movw	r30, r24
    117e:	25 81       	ldd	r18, Z+5	; 0x05
    1180:	61 50       	subi	r22, 0x01	; 1
    1182:	71 09       	sbc	r23, r1
    1184:	22 23       	and	r18, r18
    1186:	39 f0       	breq	.+14     	; 0x1196 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x30>
    1188:	f8 e0       	ldi	r31, 0x08	; 8
    118a:	2f 02       	muls	r18, r31
    118c:	90 01       	movw	r18, r0
    118e:	11 24       	eor	r1, r1
    1190:	82 0f       	add	r24, r18
    1192:	93 1f       	adc	r25, r19
    1194:	f0 cf       	rjmp	.-32     	; 0x1176 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x10>
_ZNK17ArduinoJson6194_111VariantData10getElementEj():
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	08 95       	ret

0000119c <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>:
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	dc 01       	movw	r26, r24
    11a2:	eb 01       	movw	r28, r22
_ZNK17ArduinoJson6194_110MemoryPool8canAllocEj():
    11a4:	ec 81       	ldd	r30, Y+4	; 0x04
    11a6:	fd 81       	ldd	r31, Y+5	; 0x05
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	9b 81       	ldd	r25, Y+3	; 0x03
    11ac:	08 96       	adiw	r24, 0x08	; 8
_ZN17ArduinoJson6194_110MemoryPool10allocRightEj():
    11ae:	e8 17       	cp	r30, r24
    11b0:	f9 07       	cpc	r31, r25
    11b2:	40 f4       	brcc	.+16     	; 0x11c4 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x28>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	88 87       	std	Y+8, r24	; 0x08
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	e0 e0       	ldi	r30, 0x00	; 0
    11bc:	cf 01       	movw	r24, r30
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret
_ZN17ArduinoJson6194_110MemoryPool10allocRightEj():
    11c4:	38 97       	sbiw	r30, 0x08	; 8
    11c6:	fd 83       	std	Y+5, r31	; 0x05
    11c8:	ec 83       	std	Y+4, r30	; 0x04
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
    11ca:	30 97       	sbiw	r30, 0x00	; 0
    11cc:	b9 f3       	breq	.-18     	; 0x11bc <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x20>
    11ce:	12 96       	adiw	r26, 0x02	; 2
    11d0:	cd 91       	ld	r28, X+
    11d2:	dc 91       	ld	r29, X
    11d4:	13 97       	sbiw	r26, 0x03	; 3
    11d6:	20 97       	sbiw	r28, 0x00	; 0
    11d8:	91 f0       	breq	.+36     	; 0x11fe <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x62>
_ZN17ArduinoJson6194_111VariantSlot14setNextNotNullEPS0_():
    11da:	cf 01       	movw	r24, r30
    11dc:	8c 1b       	sub	r24, r28
    11de:	9d 0b       	sbc	r25, r29
    11e0:	23 e0       	ldi	r18, 0x03	; 3
    11e2:	95 95       	asr	r25
    11e4:	87 95       	ror	r24
    11e6:	2a 95       	dec	r18
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x46>
    11ea:	8d 83       	std	Y+5, r24	; 0x05
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
    11ec:	13 96       	adiw	r26, 0x03	; 3
    11ee:	fc 93       	st	X, r31
    11f0:	ee 93       	st	-X, r30
    11f2:	12 97       	sbiw	r26, 0x02	; 2
_ZN17ArduinoJson6194_111VariantSlot5clearEv():
    11f4:	15 82       	std	Z+5, r1	; 0x05
    11f6:	14 82       	std	Z+4, r1	; 0x04
    11f8:	17 82       	std	Z+7, r1	; 0x07
    11fa:	16 82       	std	Z+6, r1	; 0x06
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
    11fc:	df cf       	rjmp	.-66     	; 0x11bc <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x20>
    11fe:	11 96       	adiw	r26, 0x01	; 1
    1200:	fc 93       	st	X, r31
    1202:	ee 93       	st	-X, r30
    1204:	f3 cf       	rjmp	.-26     	; 0x11ec <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x50>

00001206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>:
_ZN17ArduinoJson6194_122variantGetOrAddElementEPNS_11VariantDataEjPNS_10MemoryPoolE():
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    1214:	8b 01       	movw	r16, r22
    1216:	7a 01       	movw	r14, r20
    1218:	89 2b       	or	r24, r25
    121a:	29 f1       	breq	.+74     	; 0x1266 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x60>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
_ZNK17ArduinoJson6194_111VariantData4typeEv():
    121e:	98 2f       	mov	r25, r24
    1220:	9f 77       	andi	r25, 0x7F	; 127
_ZN17ArduinoJson6194_111VariantData15getOrAddElementEjPNS_10MemoryPoolE():
    1222:	39 f4       	brne	.+14     	; 0x1232 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x2c>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    1224:	80 78       	andi	r24, 0x80	; 128
    1226:	80 64       	ori	r24, 0x40	; 64
    1228:	8c 83       	std	Y+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	18 82       	st	Y, r1
    122e:	1b 82       	std	Y+3, r1	; 0x03
    1230:	1a 82       	std	Y+2, r1	; 0x02
_ZN17ArduinoJson6194_111VariantData15getOrAddElementEjPNS_10MemoryPoolE():
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	86 ff       	sbrs	r24, 6
    1236:	17 c0       	rjmp	.+46     	; 0x1266 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x60>
_ZN17ArduinoJson6194_114CollectionData15getOrAddElementEjPNS_10MemoryPoolE():
    1238:	88 81       	ld	r24, Y
    123a:	99 81       	ldd	r25, Y+1	; 0x01
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	41 f0       	breq	.+16     	; 0x1250 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x4a>
    1240:	01 15       	cp	r16, r1
    1242:	11 05       	cpc	r17, r1
    1244:	91 f0       	breq	.+36     	; 0x126a <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x64>
    1246:	0e 94 84 08 	call	0x1108	; 0x1108 <ArduinoJson6194_1::VariantSlot::next()>
    124a:	01 50       	subi	r16, 0x01	; 1
    124c:	11 09       	sbc	r17, r1
    124e:	f6 cf       	rjmp	.-20     	; 0x123c <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x36>
    1250:	01 50       	subi	r16, 0x01	; 1
    1252:	11 09       	sbc	r17, r1
    1254:	0e 3f       	cpi	r16, 0xFE	; 254
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	12 07       	cpc	r17, r18
    125a:	39 f0       	breq	.+14     	; 0x126a <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x64>
    125c:	b7 01       	movw	r22, r14
    125e:	ce 01       	movw	r24, r28
    1260:	0e 94 ce 08 	call	0x119c	; 0x119c <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
    1264:	f5 cf       	rjmp	.-22     	; 0x1250 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x4a>
_ZN17ArduinoJson6194_122variantGetOrAddElementEPNS_11VariantDataEjPNS_10MemoryPoolE():
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	08 95       	ret

00001278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>:
_ZN17ArduinoJson6194_111VariantData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPS0_T_PNS_10MemoryPoolET0_():
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
_ZNK17ArduinoJson6194_111VariantData4typeEv():
    1288:	98 2f       	mov	r25, r24
    128a:	9f 77       	andi	r25, 0x7F	; 127
_ZN17ArduinoJson6194_111VariantData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPS0_T_PNS_10MemoryPoolET0_():
    128c:	39 f4       	brne	.+14     	; 0x129c <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]+0x24>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    128e:	80 78       	andi	r24, 0x80	; 128
    1290:	80 62       	ori	r24, 0x20	; 32
    1292:	8c 83       	std	Y+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
    1294:	19 82       	std	Y+1, r1	; 0x01
    1296:	18 82       	st	Y, r1
    1298:	1b 82       	std	Y+3, r1	; 0x03
    129a:	1a 82       	std	Y+2, r1	; 0x02
_ZN17ArduinoJson6194_111VariantData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPS0_T_PNS_10MemoryPoolET0_():
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	85 fd       	sbrc	r24, 5
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]+0x3c>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret
_ZN17ArduinoJson6194_114CollectionData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
    12b4:	61 15       	cp	r22, r1
    12b6:	71 05       	cpc	r23, r1
    12b8:	a1 f3       	breq	.-24     	; 0x12a2 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]+0x2a>
    12ba:	7a 01       	movw	r14, r20
    12bc:	8b 01       	movw	r16, r22
    12be:	ce 01       	movw	r24, r28
    12c0:	0e 94 92 08 	call	0x1124	; 0x1124 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]>
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	79 f7       	brne	.-34     	; 0x12a6 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]+0x2e>
_ZN17ArduinoJson6194_114CollectionData9addMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
    12c8:	b7 01       	movw	r22, r14
    12ca:	ce 01       	movw	r24, r28
    12cc:	0e 94 ce 08 	call	0x119c	; 0x119c <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
    12d0:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_110slotSetKeyINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEbPNS_11VariantSlotET_PNS_10MemoryPoolET0_():
    12d2:	89 2b       	or	r24, r25
    12d4:	31 f3       	breq	.-52     	; 0x12a2 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]+0x2a>
_ZN17ArduinoJson6194_113SlotKeySetterclINS_6StringEEEvT_():
    12d6:	83 e7       	ldi	r24, 0x73	; 115
    12d8:	98 e0       	ldi	r25, 0x08	; 8
    12da:	89 2b       	or	r24, r25
    12dc:	29 f0       	breq	.+10     	; 0x12e8 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]+0x70>
_ZN17ArduinoJson6194_111VariantSlot6setKeyENS_6StringE():
    12de:	84 81       	ldd	r24, Z+4	; 0x04
    12e0:	8f 77       	andi	r24, 0x7F	; 127
    12e2:	84 83       	std	Z+4, r24	; 0x04
    12e4:	17 83       	std	Z+7, r17	; 0x07
    12e6:	06 83       	std	Z+6, r16	; 0x06
_ZN17ArduinoJson6194_111VariantSlot4dataEv():
    12e8:	cf 01       	movw	r24, r30
    12ea:	dd cf       	rjmp	.-70     	; 0x12a6 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]+0x2e>

000012ec <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>:
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    12ec:	4f 92       	push	r4
    12ee:	5f 92       	push	r5
    12f0:	6f 92       	push	r6
    12f2:	7f 92       	push	r7
    12f4:	8f 92       	push	r8
    12f6:	9f 92       	push	r9
    12f8:	af 92       	push	r10
    12fa:	bf 92       	push	r11
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ec 01       	movw	r28, r24
    130e:	8b 01       	movw	r16, r22
    1310:	88 81       	ld	r24, Y
    1312:	8b 32       	cpi	r24, 0x2B	; 43
    1314:	c9 f1       	breq	.+114    	; 0x1388 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x9c>
    1316:	8d 32       	cpi	r24, 0x2D	; 45
    1318:	c1 f5       	brne	.+112    	; 0x138a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x9e>
    131a:	21 96       	adiw	r28, 0x01	; 1
    131c:	ff 24       	eor	r15, r15
    131e:	f3 94       	inc	r15
    1320:	88 81       	ld	r24, Y
_ZN17ArduinoJson6194_17isdigitEc():
    1322:	90 ed       	ldi	r25, 0xD0	; 208
    1324:	98 0f       	add	r25, r24
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    1326:	9a 30       	cpi	r25, 0x0A	; 10
    1328:	18 f0       	brcs	.+6      	; 0x1330 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x44>
    132a:	8e 32       	cpi	r24, 0x2E	; 46
    132c:	09 f0       	breq	.+2      	; 0x1330 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x44>
    132e:	4d c1       	rjmp	.+666    	; 0x15ca <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2de>
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	cb 01       	movw	r24, r22
    1336:	fe 01       	movw	r30, r28
    1338:	21 91       	ld	r18, Z+
_ZN17ArduinoJson6194_17isdigitEc():
    133a:	a0 ed       	ldi	r26, 0xD0	; 208
    133c:	8a 2e       	mov	r8, r26
    133e:	82 0e       	add	r8, r18
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    1340:	39 e0       	ldi	r19, 0x09	; 9
    1342:	38 15       	cp	r19, r8
    1344:	20 f1       	brcs	.+72     	; 0x138e <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xa2>
    1346:	6a 39       	cpi	r22, 0x9A	; 154
    1348:	49 e9       	ldi	r20, 0x99	; 153
    134a:	74 07       	cpc	r23, r20
    134c:	84 07       	cpc	r24, r20
    134e:	49 e1       	ldi	r20, 0x19	; 25
    1350:	94 07       	cpc	r25, r20
    1352:	38 f5       	brcc	.+78     	; 0x13a2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xb6>
    1354:	aa e0       	ldi	r26, 0x0A	; 10
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	9b 01       	movw	r18, r22
    135a:	ac 01       	movw	r20, r24
    135c:	0e 94 00 33 	call	0x6600	; 0x6600 <__muluhisi3>
    1360:	91 2c       	mov	r9, r1
    1362:	b1 2c       	mov	r11, r1
    1364:	a1 2c       	mov	r10, r1
    1366:	24 01       	movw	r4, r8
    1368:	35 01       	movw	r6, r10
    136a:	40 94       	com	r4
    136c:	50 94       	com	r5
    136e:	60 94       	com	r6
    1370:	70 94       	com	r7
    1372:	46 16       	cp	r4, r22
    1374:	57 06       	cpc	r5, r23
    1376:	68 06       	cpc	r6, r24
    1378:	79 06       	cpc	r7, r25
    137a:	98 f0       	brcs	.+38     	; 0x13a2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xb6>
    137c:	68 0d       	add	r22, r8
    137e:	79 1d       	adc	r23, r9
    1380:	8a 1d       	adc	r24, r10
    1382:	9b 1d       	adc	r25, r11
    1384:	ef 01       	movw	r28, r30
    1386:	d7 cf       	rjmp	.-82     	; 0x1336 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x4a>
    1388:	21 96       	adiw	r28, 0x01	; 1
    138a:	f1 2c       	mov	r15, r1
    138c:	c9 cf       	rjmp	.-110    	; 0x1320 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x34>
    138e:	21 11       	cpse	r18, r1
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xb6>
    1392:	ff 20       	and	r15, r15
    1394:	f1 f1       	breq	.+124    	; 0x1412 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x126>
    1396:	61 30       	cpi	r22, 0x01	; 1
    1398:	71 05       	cpc	r23, r1
    139a:	81 05       	cpc	r24, r1
    139c:	50 e8       	ldi	r21, 0x80	; 128
    139e:	95 07       	cpc	r25, r21
    13a0:	a0 f0       	brcs	.+40     	; 0x13ca <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xde>
    13a2:	e1 2c       	mov	r14, r1
    13a4:	ea e0       	ldi	r30, 0x0A	; 10
    13a6:	8e 2e       	mov	r8, r30
    13a8:	91 2c       	mov	r9, r1
    13aa:	a1 2c       	mov	r10, r1
    13ac:	b1 2c       	mov	r11, r1
    13ae:	61 15       	cp	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	f0 e8       	ldi	r31, 0x80	; 128
    13b4:	8f 07       	cpc	r24, r31
    13b6:	91 05       	cpc	r25, r1
    13b8:	c0 f1       	brcs	.+112    	; 0x142a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x13e>
    13ba:	a5 01       	movw	r20, r10
    13bc:	94 01       	movw	r18, r8
    13be:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    13c2:	ca 01       	movw	r24, r20
    13c4:	b9 01       	movw	r22, r18
    13c6:	e3 94       	inc	r14
    13c8:	f2 cf       	rjmp	.-28     	; 0x13ae <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xc2>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    13ca:	f8 01       	movw	r30, r16
    13cc:	24 81       	ldd	r18, Z+4	; 0x04
    13ce:	20 78       	andi	r18, 0x80	; 128
    13d0:	2a 60       	ori	r18, 0x0A	; 10
    13d2:	24 83       	std	Z+4, r18	; 0x04
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	88 27       	eor	r24, r24
    13da:	99 27       	eor	r25, r25
    13dc:	dc 01       	movw	r26, r24
    13de:	82 1b       	sub	r24, r18
    13e0:	93 0b       	sbc	r25, r19
    13e2:	a4 0b       	sbc	r26, r20
    13e4:	b5 0b       	sbc	r27, r21
_ZN17ArduinoJson6194_111VariantData10setIntegerIlEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES4_():
    13e6:	80 83       	st	Z, r24
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	a2 83       	std	Z+2, r26	; 0x02
    13ec:	b3 83       	std	Z+3, r27	; 0x03
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    13ee:	8f 2d       	mov	r24, r15
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	7f 90       	pop	r7
    140a:	6f 90       	pop	r6
    140c:	5f 90       	pop	r5
    140e:	4f 90       	pop	r4
    1410:	08 95       	ret
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    1412:	f8 01       	movw	r30, r16
    1414:	24 81       	ldd	r18, Z+4	; 0x04
    1416:	20 78       	andi	r18, 0x80	; 128
    1418:	28 60       	ori	r18, 0x08	; 8
    141a:	24 83       	std	Z+4, r18	; 0x04
_ZN17ArduinoJson6194_111VariantData10setIntegerImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES4_():
    141c:	60 83       	st	Z, r22
    141e:	71 83       	std	Z+1, r23	; 0x01
    1420:	82 83       	std	Z+2, r24	; 0x02
    1422:	93 83       	std	Z+3, r25	; 0x03
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    1424:	ff 24       	eor	r15, r15
    1426:	f3 94       	inc	r15
    1428:	e2 cf       	rjmp	.-60     	; 0x13ee <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x102>
    142a:	fe 01       	movw	r30, r28
    142c:	29 91       	ld	r18, Y+
_ZN17ArduinoJson6194_17isdigitEc():
    142e:	30 ed       	ldi	r19, 0xD0	; 208
    1430:	32 0f       	add	r19, r18
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    1432:	3a 30       	cpi	r19, 0x0A	; 10
    1434:	10 f4       	brcc	.+4      	; 0x143a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x14e>
    1436:	e3 94       	inc	r14
    1438:	f8 cf       	rjmp	.-16     	; 0x142a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x13e>
    143a:	2e 32       	cpi	r18, 0x2E	; 46
    143c:	f1 f4       	brne	.+60     	; 0x147a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x18e>
    143e:	ef 01       	movw	r28, r30
    1440:	21 96       	adiw	r28, 0x01	; 1
    1442:	fe 01       	movw	r30, r28
    1444:	21 96       	adiw	r28, 0x01	; 1
_ZN17ArduinoJson6194_17isdigitEc():
    1446:	20 81       	ld	r18, Z
    1448:	50 ed       	ldi	r21, 0xD0	; 208
    144a:	d5 2e       	mov	r13, r21
    144c:	d2 0e       	add	r13, r18
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    144e:	29 e0       	ldi	r18, 0x09	; 9
    1450:	2d 15       	cp	r18, r13
    1452:	98 f0       	brcs	.+38     	; 0x147a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x18e>
    1454:	6c 3c       	cpi	r22, 0xCC	; 204
    1456:	3c ec       	ldi	r19, 0xCC	; 204
    1458:	73 07       	cpc	r23, r19
    145a:	3c e0       	ldi	r19, 0x0C	; 12
    145c:	83 07       	cpc	r24, r19
    145e:	91 05       	cpc	r25, r1
    1460:	80 f7       	brcc	.-32     	; 0x1442 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x156>
    1462:	aa e0       	ldi	r26, 0x0A	; 10
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	9b 01       	movw	r18, r22
    1468:	ac 01       	movw	r20, r24
    146a:	0e 94 00 33 	call	0x6600	; 0x6600 <__muluhisi3>
    146e:	6d 0d       	add	r22, r13
    1470:	71 1d       	adc	r23, r1
    1472:	81 1d       	adc	r24, r1
    1474:	91 1d       	adc	r25, r1
    1476:	ea 94       	dec	r14
    1478:	e4 cf       	rjmp	.-56     	; 0x1442 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x156>
    147a:	20 81       	ld	r18, Z
    147c:	2f 7d       	andi	r18, 0xDF	; 223
    147e:	d0 e0       	ldi	r29, 0x00	; 0
    1480:	c0 e0       	ldi	r28, 0x00	; 0
    1482:	25 34       	cpi	r18, 0x45	; 69
    1484:	09 f0       	breq	.+2      	; 0x1488 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x19c>
    1486:	5d c0       	rjmp	.+186    	; 0x1542 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x256>
    1488:	21 81       	ldd	r18, Z+1	; 0x01
    148a:	2d 32       	cpi	r18, 0x2D	; 45
    148c:	d9 f5       	brne	.+118    	; 0x1504 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x218>
    148e:	32 96       	adiw	r30, 0x02	; 2
    1490:	cc 24       	eor	r12, r12
    1492:	c3 94       	inc	r12
    1494:	df 01       	movw	r26, r30
    1496:	d0 e0       	ldi	r29, 0x00	; 0
    1498:	c0 e0       	ldi	r28, 0x00	; 0
    149a:	2e 2d       	mov	r18, r14
    149c:	0e 2c       	mov	r0, r14
    149e:	00 0c       	add	r0, r0
    14a0:	33 0b       	sbc	r19, r19
    14a2:	4a e0       	ldi	r20, 0x0A	; 10
    14a4:	b4 2e       	mov	r11, r20
    14a6:	fd 01       	movw	r30, r26
    14a8:	dd 90       	ld	r13, X+
_ZN17ArduinoJson6194_17isdigitEc():
    14aa:	40 ed       	ldi	r20, 0xD0	; 208
    14ac:	4d 0d       	add	r20, r13
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    14ae:	4a 30       	cpi	r20, 0x0A	; 10
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x1c8>
    14b2:	42 c0       	rjmp	.+132    	; 0x1538 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x24c>
    14b4:	bc 9e       	mul	r11, r28
    14b6:	a0 01       	movw	r20, r0
    14b8:	bd 9e       	mul	r11, r29
    14ba:	50 0d       	add	r21, r0
    14bc:	11 24       	eor	r1, r1
    14be:	cd 2d       	mov	r28, r13
    14c0:	dd 0c       	add	r13, r13
    14c2:	dd 0b       	sbc	r29, r29
    14c4:	e0 97       	sbiw	r28, 0x30	; 48
    14c6:	c4 0f       	add	r28, r20
    14c8:	d5 1f       	adc	r29, r21
    14ca:	ae 01       	movw	r20, r28
    14cc:	42 0f       	add	r20, r18
    14ce:	53 1f       	adc	r21, r19
    14d0:	47 32       	cpi	r20, 0x27	; 39
    14d2:	51 05       	cpc	r21, r1
    14d4:	44 f3       	brlt	.-48     	; 0x14a6 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x1ba>
    14d6:	f8 01       	movw	r30, r16
    14d8:	84 81       	ldd	r24, Z+4	; 0x04
    14da:	cc 20       	and	r12, r12
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x226>
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e8       	ldi	r23, 0x80	; 128
    14e6:	f1 10       	cpse	r15, r1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x204>
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	ba 01       	movw	r22, r20
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    14f0:	80 78       	andi	r24, 0x80	; 128
    14f2:	8c 60       	ori	r24, 0x0C	; 12
    14f4:	f8 01       	movw	r30, r16
    14f6:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
    14f8:	40 83       	st	Z, r20
    14fa:	51 83       	std	Z+1, r21	; 0x01
    14fc:	62 83       	std	Z+2, r22	; 0x02
    14fe:	73 83       	std	Z+3, r23	; 0x03
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    1500:	fc 2c       	mov	r15, r12
    1502:	75 cf       	rjmp	.-278    	; 0x13ee <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x102>
    1504:	2b 32       	cpi	r18, 0x2B	; 43
    1506:	19 f0       	breq	.+6      	; 0x150e <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x222>
    1508:	31 96       	adiw	r30, 0x01	; 1
    150a:	c1 2c       	mov	r12, r1
    150c:	c3 cf       	rjmp	.-122    	; 0x1494 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x1a8>
    150e:	32 96       	adiw	r30, 0x02	; 2
    1510:	fc cf       	rjmp	.-8      	; 0x150a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x21e>
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	60 e8       	ldi	r22, 0x80	; 128
    1518:	7f ef       	ldi	r23, 0xFF	; 255
    151a:	f1 10       	cpse	r15, r1
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x23a>
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	60 e8       	ldi	r22, 0x80	; 128
    1524:	7f e7       	ldi	r23, 0x7F	; 127
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    1526:	80 78       	andi	r24, 0x80	; 128
    1528:	8c 60       	ori	r24, 0x0C	; 12
    152a:	f8 01       	movw	r30, r16
    152c:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
    152e:	40 83       	st	Z, r20
    1530:	51 83       	std	Z+1, r21	; 0x01
    1532:	62 83       	std	Z+2, r22	; 0x02
    1534:	73 83       	std	Z+3, r23	; 0x03
    1536:	76 cf       	rjmp	.-276    	; 0x1424 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x138>
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    1538:	cc 20       	and	r12, r12
    153a:	19 f0       	breq	.+6      	; 0x1542 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x256>
    153c:	d1 95       	neg	r29
    153e:	c1 95       	neg	r28
    1540:	d1 09       	sbc	r29, r1
    1542:	20 81       	ld	r18, Z
    1544:	21 11       	cpse	r18, r1
    1546:	41 c0       	rjmp	.+130    	; 0x15ca <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2de>
    1548:	ce 0d       	add	r28, r14
    154a:	d1 1d       	adc	r29, r1
    154c:	e7 fc       	sbrc	r14, 7
    154e:	da 95       	dec	r29
    1550:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__floatunsisf>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
    1554:	1c 16       	cp	r1, r28
    1556:	1d 06       	cpc	r1, r29
    1558:	04 f5       	brge	.+64     	; 0x159a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2ae>
    155a:	e1 2c       	mov	r14, r1
    155c:	c0 ff       	sbrs	r28, 0
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x28c>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE24positiveBinaryPowerOfTenEi():
    1560:	24 e0       	ldi	r18, 0x04	; 4
    1562:	e2 9e       	mul	r14, r18
    1564:	f0 01       	movw	r30, r0
    1566:	11 24       	eor	r1, r1
    1568:	e2 5c       	subi	r30, 0xC2	; 194
    156a:	fe 4f       	sbci	r31, 0xFE	; 254
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
    156c:	25 91       	lpm	r18, Z+
    156e:	35 91       	lpm	r19, Z+
    1570:	45 91       	lpm	r20, Z+
    1572:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
    1574:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    1578:	d5 95       	asr	r29
    157a:	c7 95       	ror	r28
    157c:	e3 94       	inc	r14
    157e:	20 97       	sbiw	r28, 0x00	; 0
    1580:	69 f7       	brne	.-38     	; 0x155c <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x270>
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    1582:	f1 10       	cpse	r15, r1
    1584:	90 58       	subi	r25, 0x80	; 128
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
    1586:	f8 01       	movw	r30, r16
    1588:	24 81       	ldd	r18, Z+4	; 0x04
    158a:	20 78       	andi	r18, 0x80	; 128
    158c:	2c 60       	ori	r18, 0x0C	; 12
    158e:	24 83       	std	Z+4, r18	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
    1590:	60 83       	st	Z, r22
    1592:	71 83       	std	Z+1, r23	; 0x01
    1594:	82 83       	std	Z+2, r24	; 0x02
    1596:	93 83       	std	Z+3, r25	; 0x03
    1598:	45 cf       	rjmp	.-374    	; 0x1424 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x138>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
    159a:	d1 95       	neg	r29
    159c:	c1 95       	neg	r28
    159e:	d1 09       	sbc	r29, r1
    15a0:	e1 2c       	mov	r14, r1
    15a2:	20 97       	sbiw	r28, 0x00	; 0
    15a4:	71 f3       	breq	.-36     	; 0x1582 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x296>
    15a6:	c0 ff       	sbrs	r28, 0
    15a8:	0c c0       	rjmp	.+24     	; 0x15c2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2d6>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE24negativeBinaryPowerOfTenEi():
    15aa:	44 e0       	ldi	r20, 0x04	; 4
    15ac:	e4 9e       	mul	r14, r20
    15ae:	f0 01       	movw	r30, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	ea 5d       	subi	r30, 0xDA	; 218
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
    15b6:	25 91       	lpm	r18, Z+
    15b8:	35 91       	lpm	r19, Z+
    15ba:	45 91       	lpm	r20, Z+
    15bc:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
    15be:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    15c2:	d5 95       	asr	r29
    15c4:	c7 95       	ror	r28
    15c6:	e3 94       	inc	r14
    15c8:	ec cf       	rjmp	.-40     	; 0x15a2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2b6>
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
    15ca:	f1 2c       	mov	r15, r1
    15cc:	10 cf       	rjmp	.-480    	; 0x13ee <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x102>

000015ce <pin_setup()>:
_Z9pin_setupv():
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	8a e1       	ldi	r24, 0x1A	; 26
    15d2:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	84 e0       	ldi	r24, 0x04	; 4
    15da:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	8d e0       	ldi	r24, 0x0D	; 13
    15ea:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	81 e2       	ldi	r24, 0x21	; 33
    15f2:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	8c e0       	ldi	r24, 0x0C	; 12
    15fa:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	84 e3       	ldi	r24, 0x34	; 52
    1602:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	82 e3       	ldi	r24, 0x32	; 50
    160a:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	8e e0       	ldi	r24, 0x0E	; 14
    1612:	0c 94 20 2a 	jmp	0x5440	; 0x5440 <pinMode>

00001616 <setup>:
setup():
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	55 e2       	ldi	r21, 0x25	; 37
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	86 e0       	ldi	r24, 0x06	; 6
    1620:	93 e0       	ldi	r25, 0x03	; 3
    1622:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <SoftwareSerial::begin(long)>
_ZN14HardwareSerial5beginEm():
    1626:	26 e0       	ldi	r18, 0x06	; 6
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	55 e2       	ldi	r21, 0x25	; 37
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	85 e5       	ldi	r24, 0x55	; 85
    1632:	96 e0       	ldi	r25, 0x06	; 6
    1634:	0e 94 cc 2b 	call	0x5798	; 0x5798 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
    1638:	67 ea       	ldi	r22, 0xA7	; 167
    163a:	74 e0       	ldi	r23, 0x04	; 4
    163c:	8b e2       	ldi	r24, 0x2B	; 43
    163e:	93 e0       	ldi	r25, 0x03	; 3
    1640:	0e 94 9e 22 	call	0x453c	; 0x453c <RTC_DS3231::begin(TwoWire*)>
    1644:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <pin_setup()>
    1648:	26 e2       	ldi	r18, 0x26	; 38
    164a:	38 e1       	ldi	r19, 0x18	; 24
    164c:	48 ec       	ldi	r20, 0xC8	; 200
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	8a e5       	ldi	r24, 0x5A	; 90
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <SimpleTimer::setInterval(long, void (*)())>
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	8d e0       	ldi	r24, 0x0D	; 13
    1662:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <analogWrite>

00001666 <read_temperature()>:
_Z16read_temperaturev():
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	85 e2       	ldi	r24, 0x25	; 37
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <SHT1x::readTemperatureC()>
    167e:	4b 01       	movw	r8, r22
    1680:	5c 01       	movw	r10, r24
    1682:	85 e2       	ldi	r24, 0x25	; 37
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <SHT1x::readHumidity()>
    168a:	6b 01       	movw	r12, r22
    168c:	7c 01       	movw	r14, r24
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	c5 01       	movw	r24, r10
    1698:	b4 01       	movw	r22, r8
    169a:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    169e:	87 ff       	sbrs	r24, 7
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <read_temperature()+0x4c>
    16a2:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <chamberTemp0>
    16a6:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <chamberTemp0+0x1>
    16aa:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <chamberTemp0+0x2>
    16ae:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <chamberTemp0+0x3>
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	c5 01       	movw	r24, r10
    16bc:	b4 01       	movw	r22, r8
    16be:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	44 f4       	brge	.+16     	; 0x16d6 <read_temperature()+0x70>
    16c6:	80 92 9b 04 	sts	0x049B, r8	; 0x80049b <chamberTemp0>
    16ca:	90 92 9c 04 	sts	0x049C, r9	; 0x80049c <chamberTemp0+0x1>
    16ce:	a0 92 9d 04 	sts	0x049D, r10	; 0x80049d <chamberTemp0+0x2>
    16d2:	b0 92 9e 04 	sts	0x049E, r11	; 0x80049e <chamberTemp0+0x3>
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	c7 01       	movw	r24, r14
    16e0:	b6 01       	movw	r22, r12
    16e2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    16e6:	87 ff       	sbrs	r24, 7
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <read_temperature()+0x94>
    16ea:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <humidityMid>
    16ee:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <humidityMid+0x1>
    16f2:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <humidityMid+0x2>
    16f6:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <humidityMid+0x3>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	40 e8       	ldi	r20, 0x80	; 128
    1700:	5f e3       	ldi	r21, 0x3F	; 63
    1702:	c7 01       	movw	r24, r14
    1704:	b6 01       	movw	r22, r12
    1706:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    170a:	18 16       	cp	r1, r24
    170c:	44 f4       	brge	.+16     	; 0x171e <read_temperature()+0xb8>
    170e:	c0 92 97 04 	sts	0x0497, r12	; 0x800497 <humidityMid>
    1712:	d0 92 98 04 	sts	0x0498, r13	; 0x800498 <humidityMid+0x1>
    1716:	e0 92 99 04 	sts	0x0499, r14	; 0x800499 <humidityMid+0x2>
    171a:	f0 92 9a 04 	sts	0x049A, r15	; 0x80049a <humidityMid+0x3>
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	08 95       	ret

00001730 <read_skin_temperature()>:
_Z21read_skin_temperaturev():
    1730:	8f 92       	push	r8
    1732:	9f 92       	push	r9
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <setValue0B>
    1748:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <setValue0B+0x1>
    174c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <setValue0B+0x2>
    1750:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <setValue0B+0x3>
    1754:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <setValue0A>
    1758:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <setValue0A+0x1>
    175c:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <setValue0A+0x2>
    1760:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <setValue0A+0x3>
    1764:	8d e2       	ldi	r24, 0x2D	; 45
    1766:	e8 2e       	mov	r14, r24
    1768:	f1 2c       	mov	r15, r1
    176a:	8d e2       	ldi	r24, 0x2D	; 45
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Xbaby::get_value_baby_skin(float, float, int)>
    1772:	4b 01       	movw	r8, r22
    1774:	5c 01       	movw	r10, r24
    1776:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <setValue1B>
    177a:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <setValue1B+0x1>
    177e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <setValue1B+0x2>
    1782:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <setValue1B+0x3>
    1786:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <setValue1A>
    178a:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <setValue1A+0x1>
    178e:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <setValue1A+0x2>
    1792:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <setValue1A+0x3>
    1796:	9e e2       	ldi	r25, 0x2E	; 46
    1798:	e9 2e       	mov	r14, r25
    179a:	f1 2c       	mov	r15, r1
    179c:	8d e2       	ldi	r24, 0x2D	; 45
    179e:	93 e0       	ldi	r25, 0x03	; 3
    17a0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Xbaby::get_value_baby_skin(float, float, int)>
    17a4:	6b 01       	movw	r12, r22
    17a6:	7c 01       	movw	r14, r24
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	48 ea       	ldi	r20, 0xA8	; 168
    17ae:	51 e4       	ldi	r21, 0x41	; 65
    17b0:	c5 01       	movw	r24, r10
    17b2:	b4 01       	movw	r22, r8
    17b4:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	5c f5       	brge	.+86     	; 0x1812 <read_skin_temperature()+0xe2>
    17bc:	80 92 a3 04 	sts	0x04A3, r8	; 0x8004a3 <babySkinTemp0>
    17c0:	90 92 a4 04 	sts	0x04A4, r9	; 0x8004a4 <babySkinTemp0+0x1>
    17c4:	a0 92 a5 04 	sts	0x04A5, r10	; 0x8004a5 <babySkinTemp0+0x2>
    17c8:	b0 92 a6 04 	sts	0x04A6, r11	; 0x8004a6 <babySkinTemp0+0x3>
    17cc:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <millis>
    17d0:	00 91 93 04 	lds	r16, 0x0493	; 0x800493 <tcal>
    17d4:	10 91 94 04 	lds	r17, 0x0494	; 0x800494 <tcal+0x1>
    17d8:	20 91 95 04 	lds	r18, 0x0495	; 0x800495 <tcal+0x2>
    17dc:	30 91 96 04 	lds	r19, 0x0496	; 0x800496 <tcal+0x3>
    17e0:	60 1b       	sub	r22, r16
    17e2:	71 0b       	sbc	r23, r17
    17e4:	82 0b       	sbc	r24, r18
    17e6:	93 0b       	sbc	r25, r19
    17e8:	69 3e       	cpi	r22, 0xE9	; 233
    17ea:	73 40       	sbci	r23, 0x03	; 3
    17ec:	81 05       	cpc	r24, r1
    17ee:	91 05       	cpc	r25, r1
    17f0:	80 f0       	brcs	.+32     	; 0x1812 <read_skin_temperature()+0xe2>
    17f2:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <babySkinTemp0>
    17f6:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <babySkinTemp0+0x1>
    17fa:	a0 91 a5 04 	lds	r26, 0x04A5	; 0x8004a5 <babySkinTemp0+0x2>
    17fe:	b0 91 a6 04 	lds	r27, 0x04A6	; 0x8004a6 <babySkinTemp0+0x3>
    1802:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <displayBabyTemp0>
    1806:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <displayBabyTemp0+0x1>
    180a:	a0 93 82 04 	sts	0x0482, r26	; 0x800482 <displayBabyTemp0+0x2>
    180e:	b0 93 83 04 	sts	0x0483, r27	; 0x800483 <displayBabyTemp0+0x3>
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 eb       	ldi	r20, 0xB0	; 176
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	c5 01       	movw	r24, r10
    181c:	b4 01       	movw	r22, r8
    181e:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1822:	87 ff       	sbrs	r24, 7
    1824:	10 c0       	rjmp	.+32     	; 0x1846 <read_skin_temperature()+0x116>
    1826:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <babySkinTemp0>
    182a:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <babySkinTemp0+0x1>
    182e:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <babySkinTemp0+0x2>
    1832:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <babySkinTemp0+0x3>
    1836:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <displayBabyTemp0>
    183a:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <displayBabyTemp0+0x1>
    183e:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <displayBabyTemp0+0x2>
    1842:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <displayBabyTemp0+0x3>
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	48 ea       	ldi	r20, 0xA8	; 168
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	c7 01       	movw	r24, r14
    1850:	b6 01       	movw	r22, r12
    1852:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1856:	18 16       	cp	r1, r24
    1858:	5c f5       	brge	.+86     	; 0x18b0 <read_skin_temperature()+0x180>
    185a:	c0 92 9f 04 	sts	0x049F, r12	; 0x80049f <babySkinTemp1>
    185e:	d0 92 a0 04 	sts	0x04A0, r13	; 0x8004a0 <babySkinTemp1+0x1>
    1862:	e0 92 a1 04 	sts	0x04A1, r14	; 0x8004a1 <babySkinTemp1+0x2>
    1866:	f0 92 a2 04 	sts	0x04A2, r15	; 0x8004a2 <babySkinTemp1+0x3>
    186a:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <millis>
    186e:	80 90 93 04 	lds	r8, 0x0493	; 0x800493 <tcal>
    1872:	90 90 94 04 	lds	r9, 0x0494	; 0x800494 <tcal+0x1>
    1876:	a0 90 95 04 	lds	r10, 0x0495	; 0x800495 <tcal+0x2>
    187a:	b0 90 96 04 	lds	r11, 0x0496	; 0x800496 <tcal+0x3>
    187e:	68 19       	sub	r22, r8
    1880:	79 09       	sbc	r23, r9
    1882:	8a 09       	sbc	r24, r10
    1884:	9b 09       	sbc	r25, r11
    1886:	69 3e       	cpi	r22, 0xE9	; 233
    1888:	73 40       	sbci	r23, 0x03	; 3
    188a:	81 05       	cpc	r24, r1
    188c:	91 05       	cpc	r25, r1
    188e:	80 f0       	brcs	.+32     	; 0x18b0 <read_skin_temperature()+0x180>
    1890:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <babySkinTemp1>
    1894:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <babySkinTemp1+0x1>
    1898:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <babySkinTemp1+0x2>
    189c:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <babySkinTemp1+0x3>
    18a0:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <displayBabyTemp1>
    18a4:	90 93 7d 04 	sts	0x047D, r25	; 0x80047d <displayBabyTemp1+0x1>
    18a8:	a0 93 7e 04 	sts	0x047E, r26	; 0x80047e <displayBabyTemp1+0x2>
    18ac:	b0 93 7f 04 	sts	0x047F, r27	; 0x80047f <displayBabyTemp1+0x3>
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 eb       	ldi	r20, 0xB0	; 176
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	c7 01       	movw	r24, r14
    18ba:	b6 01       	movw	r22, r12
    18bc:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    18c0:	87 ff       	sbrs	r24, 7
    18c2:	10 c0       	rjmp	.+32     	; 0x18e4 <read_skin_temperature()+0x1b4>
    18c4:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <babySkinTemp1>
    18c8:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <babySkinTemp1+0x1>
    18cc:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <babySkinTemp1+0x2>
    18d0:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <babySkinTemp1+0x3>
    18d4:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <displayBabyTemp1>
    18d8:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <displayBabyTemp1+0x1>
    18dc:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <displayBabyTemp1+0x2>
    18e0:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <displayBabyTemp1+0x3>
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	08 95       	ret

000018fa <set_pwm(int, int)>:
_Z7set_pwmii():
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
    1900:	84 e0       	ldi	r24, 0x04	; 4
    1902:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1906:	be 01       	movw	r22, r28
    1908:	83 e0       	ldi	r24, 0x03	; 3
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <analogWrite>

00001912 <run_control()>:
_Z11run_controlv():
    1912:	4f 92       	push	r4
    1914:	5f 92       	push	r5
    1916:	6f 92       	push	r6
    1918:	7f 92       	push	r7
    191a:	8f 92       	push	r8
    191c:	9f 92       	push	r9
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	00 d0       	rcall	.+0      	; 0x1934 <run_control()+0x22>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <run_control()+0x24>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <run_control()+0x26>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	a0 90 a3 04 	lds	r10, 0x04A3	; 0x8004a3 <babySkinTemp0>
    1940:	b0 90 a4 04 	lds	r11, 0x04A4	; 0x8004a4 <babySkinTemp0+0x1>
    1944:	c0 90 a5 04 	lds	r12, 0x04A5	; 0x8004a5 <babySkinTemp0+0x2>
    1948:	d0 90 a6 04 	lds	r13, 0x04A6	; 0x8004a6 <babySkinTemp0+0x3>
    194c:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <chamberTemp0>
    1950:	90 91 9c 04 	lds	r25, 0x049C	; 0x80049c <chamberTemp0+0x1>
    1954:	a0 91 9d 04 	lds	r26, 0x049D	; 0x80049d <chamberTemp0+0x2>
    1958:	b0 91 9e 04 	lds	r27, 0x049E	; 0x80049e <chamberTemp0+0x3>
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	ab 83       	std	Y+3, r26	; 0x03
    1962:	bc 83       	std	Y+4, r27	; 0x04
    1964:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <skinMode>
    1968:	a9 2f       	mov	r26, r25
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	be 83       	std	Y+6, r27	; 0x06
    196e:	ad 83       	std	Y+5, r26	; 0x05
    1970:	40 90 17 01 	lds	r4, 0x0117	; 0x800117 <setTemp>
    1974:	50 90 18 01 	lds	r5, 0x0118	; 0x800118 <setTemp+0x1>
    1978:	60 90 19 01 	lds	r6, 0x0119	; 0x800119 <setTemp+0x2>
    197c:	70 90 1a 01 	lds	r7, 0x011A	; 0x80011a <setTemp+0x3>
    1980:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <humidityMid+0x3>
    1984:	8f 93       	push	r24
    1986:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <humidityMid+0x2>
    198a:	8f 93       	push	r24
    198c:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <humidityMid+0x1>
    1990:	8f 93       	push	r24
    1992:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <humidityMid>
    1996:	8f 93       	push	r24
    1998:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <setHumidity>
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__floatunsisf>
    19a6:	9f 93       	push	r25
    19a8:	8f 93       	push	r24
    19aa:	7f 93       	push	r23
    19ac:	6f 93       	push	r22
    19ae:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <babySkinTemp1+0x3>
    19b2:	8f 93       	push	r24
    19b4:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <babySkinTemp1+0x2>
    19b8:	8f 93       	push	r24
    19ba:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <babySkinTemp1+0x1>
    19be:	8f 93       	push	r24
    19c0:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <babySkinTemp1>
    19c4:	8f 93       	push	r24
    19c6:	e9 80       	ldd	r14, Y+1	; 0x01
    19c8:	fa 80       	ldd	r15, Y+2	; 0x02
    19ca:	0b 81       	ldd	r16, Y+3	; 0x03
    19cc:	1c 81       	ldd	r17, Y+4	; 0x04
    19ce:	2d 81       	ldd	r18, Y+5	; 0x05
    19d0:	3e 81       	ldd	r19, Y+6	; 0x06
    19d2:	b3 01       	movw	r22, r6
    19d4:	a2 01       	movw	r20, r4
    19d6:	8d e2       	ldi	r24, 0x2D	; 45
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	0e 94 20 02 	call	0x440	; 0x440 <Xbaby::get_value_fan(float, int, float, float, float, float, float)>
    19de:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <fanPwm>
    19e2:	80 90 a3 04 	lds	r8, 0x04A3	; 0x8004a3 <babySkinTemp0>
    19e6:	90 90 a4 04 	lds	r9, 0x04A4	; 0x8004a4 <babySkinTemp0+0x1>
    19ea:	a0 90 a5 04 	lds	r10, 0x04A5	; 0x8004a5 <babySkinTemp0+0x2>
    19ee:	b0 90 a6 04 	lds	r11, 0x04A6	; 0x8004a6 <babySkinTemp0+0x3>
    19f2:	c0 90 9b 04 	lds	r12, 0x049B	; 0x80049b <chamberTemp0>
    19f6:	d0 90 9c 04 	lds	r13, 0x049C	; 0x80049c <chamberTemp0+0x1>
    19fa:	e0 90 9d 04 	lds	r14, 0x049D	; 0x80049d <chamberTemp0+0x2>
    19fe:	f0 90 9e 04 	lds	r15, 0x049E	; 0x80049e <chamberTemp0+0x3>
    1a02:	00 91 8d 04 	lds	r16, 0x048D	; 0x80048d <highTemp>
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	20 91 8f 04 	lds	r18, 0x048F	; 0x80048f <skinMode>
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <setTemp>
    1a12:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <setTemp+0x1>
    1a16:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <setTemp+0x2>
    1a1a:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <setTemp+0x3>
    1a1e:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <babySkinTemp1+0x3>
    1a22:	8f 93       	push	r24
    1a24:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <babySkinTemp1+0x2>
    1a28:	8f 93       	push	r24
    1a2a:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <babySkinTemp1+0x1>
    1a2e:	8f 93       	push	r24
    1a30:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <babySkinTemp1>
    1a34:	8f 93       	push	r24
    1a36:	8d e2       	ldi	r24, 0x2D	; 45
    1a38:	93 e0       	ldi	r25, 0x03	; 3
    1a3a:	0e 94 46 03 	call	0x68c	; 0x68c <Xbaby::get_value_heater(float, int, int, float, float, float)>
    1a3e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <heaterPwm>
    1a42:	bc 01       	movw	r22, r24
    1a44:	77 27       	eor	r23, r23
    1a46:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <fanPwm>
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <set_pwm(int, int)>
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <skinMode>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	25 c0       	rjmp	.+74     	; 0x1aac <run_control()+0x19a>
    1a62:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <humiMode>
    1a66:	81 11       	cpse	r24, r1
    1a68:	21 c0       	rjmp	.+66     	; 0x1aac <run_control()+0x19a>
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	60 e0       	ldi	r22, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <set_pwm(int, int)>
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	8d e0       	ldi	r24, 0x0D	; 13
    1a7c:	26 96       	adiw	r28, 0x06	; 6
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	bf 90       	pop	r11
    1a9a:	af 90       	pop	r10
    1a9c:	9f 90       	pop	r9
    1a9e:	8f 90       	pop	r8
    1aa0:	7f 90       	pop	r7
    1aa2:	6f 90       	pop	r6
    1aa4:	5f 90       	pop	r5
    1aa6:	4f 90       	pop	r4
    1aa8:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <analogWrite>
    1aac:	26 96       	adiw	r28, 0x06	; 6
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	df 90       	pop	r13
    1ac6:	cf 90       	pop	r12
    1ac8:	bf 90       	pop	r11
    1aca:	af 90       	pop	r10
    1acc:	9f 90       	pop	r9
    1ace:	8f 90       	pop	r8
    1ad0:	7f 90       	pop	r7
    1ad2:	6f 90       	pop	r6
    1ad4:	5f 90       	pop	r5
    1ad6:	4f 90       	pop	r4
    1ad8:	08 95       	ret

00001ada <run_warmer()>:
_Z10run_warmerv():
    1ada:	8f 92       	push	r8
    1adc:	9f 92       	push	r9
    1ade:	af 92       	push	r10
    1ae0:	bf 92       	push	r11
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	80 90 97 04 	lds	r8, 0x0497	; 0x800497 <humidityMid>
    1aee:	90 90 98 04 	lds	r9, 0x0498	; 0x800498 <humidityMid+0x1>
    1af2:	a0 90 99 04 	lds	r10, 0x0499	; 0x800499 <humidityMid+0x2>
    1af6:	b0 90 9a 04 	lds	r11, 0x049A	; 0x80049a <humidityMid+0x3>
    1afa:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <setHumidity>
    1afe:	8a e0       	ldi	r24, 0x0A	; 10
    1b00:	68 9f       	mul	r22, r24
    1b02:	b0 01       	movw	r22, r0
    1b04:	11 24       	eor	r1, r1
    1b06:	07 2e       	mov	r0, r23
    1b08:	00 0c       	add	r0, r0
    1b0a:	88 0b       	sbc	r24, r24
    1b0c:	99 0b       	sbc	r25, r25
    1b0e:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__floatsisf>
    1b12:	6b 01       	movw	r12, r22
    1b14:	7c 01       	movw	r14, r24
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	c5 01       	movw	r24, r10
    1b20:	b4 01       	movw	r22, r8
    1b22:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	c7 01       	movw	r24, r14
    1b2c:	b6 01       	movw	r22, r12
    1b2e:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    1b32:	6b 01       	movw	r12, r22
    1b34:	7c 01       	movw	r14, r24
    1b36:	c0 92 78 04 	sts	0x0478, r12	; 0x800478 <errorHumidity>
    1b3a:	d0 92 79 04 	sts	0x0479, r13	; 0x800479 <errorHumidity+0x1>
    1b3e:	e0 92 7a 04 	sts	0x047A, r14	; 0x80047a <errorHumidity+0x2>
    1b42:	f0 92 7b 04 	sts	0x047B, r15	; 0x80047b <errorHumidity+0x3>
    1b46:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <humiMode>
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	81 f4       	brne	.+32     	; 0x1b6e <run_warmer()+0x94>
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	a9 01       	movw	r20, r18
    1b54:	c5 01       	movw	r24, r10
    1b56:	b4 01       	movw	r22, r8
    1b58:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1b5c:	87 ff       	sbrs	r24, 7
    1b5e:	1b c0       	rjmp	.+54     	; 0x1b96 <run_warmer()+0xbc>
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	8d e0       	ldi	r24, 0x0D	; 13
    1b66:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1b6a:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <warmerPwm>
    1b6e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <humiMode>
    1b72:	81 11       	cpse	r24, r1
    1b74:	07 c0       	rjmp	.+14     	; 0x1b84 <run_warmer()+0xaa>
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	8d e0       	ldi	r24, 0x0D	; 13
    1b7c:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1b80:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <warmerPwm>
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	bf 90       	pop	r11
    1b8e:	af 90       	pop	r10
    1b90:	9f 90       	pop	r9
    1b92:	8f 90       	pop	r8
    1b94:	08 95       	ret
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	5f eb       	ldi	r21, 0xBF	; 191
    1b9e:	c7 01       	movw	r24, r14
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1ba6:	87 ff       	sbrs	r24, 7
    1ba8:	11 c0       	rjmp	.+34     	; 0x1bcc <run_warmer()+0xf2>
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4c e0       	ldi	r20, 0x0C	; 12
    1bb0:	52 ec       	ldi	r21, 0xC2	; 194
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	3c f4       	brge	.+14     	; 0x1bcc <run_warmer()+0xf2>
    1bbe:	70 e0       	ldi	r23, 0x00	; 0
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	8d e0       	ldi	r24, 0x0D	; 13
    1bc4:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1bc8:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <warmerPwm>
    1bcc:	c0 90 78 04 	lds	r12, 0x0478	; 0x800478 <errorHumidity>
    1bd0:	d0 90 79 04 	lds	r13, 0x0479	; 0x800479 <errorHumidity+0x1>
    1bd4:	e0 90 7a 04 	lds	r14, 0x047A	; 0x80047a <errorHumidity+0x2>
    1bd8:	f0 90 7b 04 	lds	r15, 0x047B	; 0x80047b <errorHumidity+0x3>
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e8       	ldi	r19, 0x80	; 128
    1be0:	4d e6       	ldi	r20, 0x6D	; 109
    1be2:	54 e4       	ldi	r21, 0x44	; 68
    1be4:	c7 01       	movw	r24, r14
    1be6:	b6 01       	movw	r22, r12
    1be8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1bec:	87 ff       	sbrs	r24, 7
    1bee:	12 c0       	rjmp	.+36     	; 0x1c14 <run_warmer()+0x13a>
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e8       	ldi	r19, 0x80	; 128
    1bf4:	49 e9       	ldi	r20, 0x99	; 153
    1bf6:	53 e4       	ldi	r21, 0x43	; 67
    1bf8:	c7 01       	movw	r24, r14
    1bfa:	b6 01       	movw	r22, r12
    1bfc:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1c00:	87 fd       	sbrc	r24, 7
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <run_warmer()+0x13a>
    1c04:	6f ef       	ldi	r22, 0xFF	; 255
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	8d e0       	ldi	r24, 0x0D	; 13
    1c0a:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <warmerPwm>
    1c14:	c0 90 78 04 	lds	r12, 0x0478	; 0x800478 <errorHumidity>
    1c18:	d0 90 79 04 	lds	r13, 0x0479	; 0x800479 <errorHumidity+0x1>
    1c1c:	e0 90 7a 04 	lds	r14, 0x047A	; 0x80047a <errorHumidity+0x2>
    1c20:	f0 90 7b 04 	lds	r15, 0x047B	; 0x80047b <errorHumidity+0x3>
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e8       	ldi	r19, 0x80	; 128
    1c28:	49 e9       	ldi	r20, 0x99	; 153
    1c2a:	53 e4       	ldi	r21, 0x43	; 67
    1c2c:	c7 01       	movw	r24, r14
    1c2e:	b6 01       	movw	r22, r12
    1c30:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1c34:	87 ff       	sbrs	r24, 7
    1c36:	12 c0       	rjmp	.+36     	; 0x1c5c <run_warmer()+0x182>
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	42 ed       	ldi	r20, 0xD2	; 210
    1c3e:	52 e4       	ldi	r21, 0x42	; 66
    1c40:	c7 01       	movw	r24, r14
    1c42:	b6 01       	movw	r22, r12
    1c44:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1c48:	87 fd       	sbrc	r24, 7
    1c4a:	08 c0       	rjmp	.+16     	; 0x1c5c <run_warmer()+0x182>
    1c4c:	67 ed       	ldi	r22, 0xD7	; 215
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	8d e0       	ldi	r24, 0x0D	; 13
    1c52:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1c56:	87 ed       	ldi	r24, 0xD7	; 215
    1c58:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <warmerPwm>
    1c5c:	c0 90 78 04 	lds	r12, 0x0478	; 0x800478 <errorHumidity>
    1c60:	d0 90 79 04 	lds	r13, 0x0479	; 0x800479 <errorHumidity+0x1>
    1c64:	e0 90 7a 04 	lds	r14, 0x047A	; 0x80047a <errorHumidity+0x2>
    1c68:	f0 90 7b 04 	lds	r15, 0x047B	; 0x80047b <errorHumidity+0x3>
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	42 ed       	ldi	r20, 0xD2	; 210
    1c72:	52 e4       	ldi	r21, 0x42	; 66
    1c74:	c7 01       	movw	r24, r14
    1c76:	b6 01       	movw	r22, r12
    1c78:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1c7c:	87 ff       	sbrs	r24, 7
    1c7e:	12 c0       	rjmp	.+36     	; 0x1ca4 <run_warmer()+0x1ca>
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4c e8       	ldi	r20, 0x8C	; 140
    1c86:	52 e4       	ldi	r21, 0x42	; 66
    1c88:	c7 01       	movw	r24, r14
    1c8a:	b6 01       	movw	r22, r12
    1c8c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1c90:	87 fd       	sbrc	r24, 7
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <run_warmer()+0x1ca>
    1c94:	68 ec       	ldi	r22, 0xC8	; 200
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	8d e0       	ldi	r24, 0x0D	; 13
    1c9a:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1c9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ca0:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <warmerPwm>
    1ca4:	c0 90 78 04 	lds	r12, 0x0478	; 0x800478 <errorHumidity>
    1ca8:	d0 90 79 04 	lds	r13, 0x0479	; 0x800479 <errorHumidity+0x1>
    1cac:	e0 90 7a 04 	lds	r14, 0x047A	; 0x80047a <errorHumidity+0x2>
    1cb0:	f0 90 7b 04 	lds	r15, 0x047B	; 0x80047b <errorHumidity+0x3>
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4c e8       	ldi	r20, 0x8C	; 140
    1cba:	52 e4       	ldi	r21, 0x42	; 66
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	b6 01       	movw	r22, r12
    1cc0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1cc4:	87 ff       	sbrs	r24, 7
    1cc6:	12 c0       	rjmp	.+36     	; 0x1cec <run_warmer()+0x212>
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 ea       	ldi	r20, 0xA0	; 160
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	b6 01       	movw	r22, r12
    1cd4:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1cd8:	87 fd       	sbrc	r24, 7
    1cda:	08 c0       	rjmp	.+16     	; 0x1cec <run_warmer()+0x212>
    1cdc:	6e eb       	ldi	r22, 0xBE	; 190
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	8d e0       	ldi	r24, 0x0D	; 13
    1ce2:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1ce6:	8e eb       	ldi	r24, 0xBE	; 190
    1ce8:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <warmerPwm>
    1cec:	c0 90 78 04 	lds	r12, 0x0478	; 0x800478 <errorHumidity>
    1cf0:	d0 90 79 04 	lds	r13, 0x0479	; 0x800479 <errorHumidity+0x1>
    1cf4:	e0 90 7a 04 	lds	r14, 0x047A	; 0x80047a <errorHumidity+0x2>
    1cf8:	f0 90 7b 04 	lds	r15, 0x047B	; 0x80047b <errorHumidity+0x3>
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 ea       	ldi	r20, 0xA0	; 160
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	c7 01       	movw	r24, r14
    1d06:	b6 01       	movw	r22, r12
    1d08:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1d0c:	87 ff       	sbrs	r24, 7
    1d0e:	12 c0       	rjmp	.+36     	; 0x1d34 <run_warmer()+0x25a>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 ea       	ldi	r20, 0xA0	; 160
    1d16:	50 e4       	ldi	r21, 0x40	; 64
    1d18:	c7 01       	movw	r24, r14
    1d1a:	b6 01       	movw	r22, r12
    1d1c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1d20:	87 fd       	sbrc	r24, 7
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <run_warmer()+0x25a>
    1d24:	64 eb       	ldi	r22, 0xB4	; 180
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	8d e0       	ldi	r24, 0x0D	; 13
    1d2a:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1d2e:	84 eb       	ldi	r24, 0xB4	; 180
    1d30:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <warmerPwm>
    1d34:	c0 90 78 04 	lds	r12, 0x0478	; 0x800478 <errorHumidity>
    1d38:	d0 90 79 04 	lds	r13, 0x0479	; 0x800479 <errorHumidity+0x1>
    1d3c:	e0 90 7a 04 	lds	r14, 0x047A	; 0x80047a <errorHumidity+0x2>
    1d40:	f0 90 7b 04 	lds	r15, 0x047B	; 0x80047b <errorHumidity+0x3>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 ea       	ldi	r20, 0xA0	; 160
    1d4a:	50 e4       	ldi	r21, 0x40	; 64
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	b6 01       	movw	r22, r12
    1d50:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1d54:	87 ff       	sbrs	r24, 7
    1d56:	0b cf       	rjmp	.-490    	; 0x1b6e <run_warmer()+0x94>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	5f eb       	ldi	r21, 0xBF	; 191
    1d60:	c7 01       	movw	r24, r14
    1d62:	b6 01       	movw	r22, r12
    1d64:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1d68:	87 fd       	sbrc	r24, 7
    1d6a:	01 cf       	rjmp	.-510    	; 0x1b6e <run_warmer()+0x94>
    1d6c:	64 eb       	ldi	r22, 0xB4	; 180
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	8d e0       	ldi	r24, 0x0D	; 13
    1d72:	0e 94 77 29 	call	0x52ee	; 0x52ee <analogWrite>
    1d76:	84 eb       	ldi	r24, 0xB4	; 180
    1d78:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <warmerPwm>
    1d7c:	f8 ce       	rjmp	.-528    	; 0x1b6e <run_warmer()+0x94>

00001d7e <read_error()>:
_Z10read_errorv():
    1d7e:	4f 92       	push	r4
    1d80:	5f 92       	push	r5
    1d82:	6f 92       	push	r6
    1d84:	7f 92       	push	r7
    1d86:	8f 92       	push	r8
    1d88:	9f 92       	push	r9
    1d8a:	af 92       	push	r10
    1d8c:	bf 92       	push	r11
    1d8e:	cf 92       	push	r12
    1d90:	df 92       	push	r13
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	60 97       	sbiw	r28, 0x10	; 16
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <setTemp>
    1dae:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <setTemp+0x1>
    1db2:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <setTemp+0x2>
    1db6:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <setTemp+0x3>
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	af 83       	std	Y+7, r26	; 0x07
    1dc0:	b8 87       	std	Y+8, r27	; 0x08
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e2       	ldi	r20, 0x20	; 32
    1dc8:	51 e4       	ldi	r21, 0x41	; 65
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    1dd2:	4b 01       	movw	r8, r22
    1dd4:	5c 01       	movw	r10, r24
    1dd6:	c0 90 9b 04 	lds	r12, 0x049B	; 0x80049b <chamberTemp0>
    1dda:	d0 90 9c 04 	lds	r13, 0x049C	; 0x80049c <chamberTemp0+0x1>
    1dde:	e0 90 9d 04 	lds	r14, 0x049D	; 0x80049d <chamberTemp0+0x2>
    1de2:	f0 90 9e 04 	lds	r15, 0x049E	; 0x80049e <chamberTemp0+0x3>
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	c7 01       	movw	r24, r14
    1df0:	b6 01       	movw	r22, r12
    1df2:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    1df6:	9b 01       	movw	r18, r22
    1df8:	ac 01       	movw	r20, r24
    1dfa:	c5 01       	movw	r24, r10
    1dfc:	b4 01       	movw	r22, r8
    1dfe:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    1e02:	69 83       	std	Y+1, r22	; 0x01
    1e04:	7a 83       	std	Y+2, r23	; 0x02
    1e06:	8b 83       	std	Y+3, r24	; 0x03
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <errorAir>
    1e0e:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <errorAir+0x1>
    1e12:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <errorAir+0x2>
    1e16:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <errorAir+0x3>
    1e1a:	40 90 a3 04 	lds	r4, 0x04A3	; 0x8004a3 <babySkinTemp0>
    1e1e:	50 90 a4 04 	lds	r5, 0x04A4	; 0x8004a4 <babySkinTemp0+0x1>
    1e22:	60 90 a5 04 	lds	r6, 0x04A5	; 0x8004a5 <babySkinTemp0+0x2>
    1e26:	70 90 a6 04 	lds	r7, 0x04A6	; 0x8004a6 <babySkinTemp0+0x3>
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	c3 01       	movw	r24, r6
    1e34:	b2 01       	movw	r22, r4
    1e36:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    1e3a:	9b 01       	movw	r18, r22
    1e3c:	ac 01       	movw	r20, r24
    1e3e:	c5 01       	movw	r24, r10
    1e40:	b4 01       	movw	r22, r8
    1e42:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    1e46:	6d 87       	std	Y+13, r22	; 0x0d
    1e48:	7e 87       	std	Y+14, r23	; 0x0e
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f
    1e4c:	98 8b       	std	Y+16, r25	; 0x10
    1e4e:	60 93 6c 04 	sts	0x046C, r22	; 0x80046c <errorSkin0>
    1e52:	70 93 6d 04 	sts	0x046D, r23	; 0x80046d <errorSkin0+0x1>
    1e56:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <errorSkin0+0x2>
    1e5a:	90 93 6f 04 	sts	0x046F, r25	; 0x80046f <errorSkin0+0x3>
    1e5e:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <babySkinTemp1>
    1e62:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <babySkinTemp1+0x1>
    1e66:	a0 91 a1 04 	lds	r26, 0x04A1	; 0x8004a1 <babySkinTemp1+0x2>
    1e6a:	b0 91 a2 04 	lds	r27, 0x04A2	; 0x8004a2 <babySkinTemp1+0x3>
    1e6e:	89 87       	std	Y+9, r24	; 0x09
    1e70:	9a 87       	std	Y+10, r25	; 0x0a
    1e72:	ab 87       	std	Y+11, r26	; 0x0b
    1e74:	bc 87       	std	Y+12, r27	; 0x0c
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    1e86:	9b 01       	movw	r18, r22
    1e88:	ac 01       	movw	r20, r24
    1e8a:	c5 01       	movw	r24, r10
    1e8c:	b4 01       	movw	r22, r8
    1e8e:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    1e92:	4b 01       	movw	r8, r22
    1e94:	5c 01       	movw	r10, r24
    1e96:	80 92 68 04 	sts	0x0468, r8	; 0x800468 <errorSkin1>
    1e9a:	90 92 69 04 	sts	0x0469, r9	; 0x800469 <errorSkin1+0x1>
    1e9e:	a0 92 6a 04 	sts	0x046A, r10	; 0x80046a <errorSkin1+0x2>
    1ea2:	b0 92 6b 04 	sts	0x046B, r11	; 0x80046b <errorSkin1+0x3>
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	a9 01       	movw	r20, r18
    1eac:	c3 01       	movw	r24, r6
    1eae:	b2 01       	movw	r22, r4
    1eb0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <read_error()+0x13c>
    1eb8:	0d c1       	rjmp	.+538    	; 0x20d4 <read_error()+0x356>
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	a9 01       	movw	r20, r18
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f4       	brne	.+2      	; 0x1ece <read_error()+0x150>
    1ecc:	03 c1       	rjmp	.+518    	; 0x20d4 <read_error()+0x356>
    1ece:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <error0>
    1ed2:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <skinMode>
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <read_error()+0x15e>
    1eda:	17 c1       	rjmp	.+558    	; 0x210a <read_error()+0x38c>
    1edc:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <steadytime1>
    1ee0:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <error2>
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	6d 85       	ldd	r22, Y+13	; 0x0d
    1eee:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef2:	98 89       	ldd	r25, Y+16	; 0x10
    1ef4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1ef8:	87 ff       	sbrs	r24, 7
    1efa:	0c c0       	rjmp	.+24     	; 0x1f14 <read_error()+0x196>
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f eb       	ldi	r21, 0xBF	; 191
    1f04:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f06:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f0a:	98 89       	ldd	r25, Y+16	; 0x10
    1f0c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1f10:	87 ff       	sbrs	r24, 7
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <read_error()+0x1be>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	c5 01       	movw	r24, r10
    1f1e:	b4 01       	movw	r22, r8
    1f20:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1f24:	87 ff       	sbrs	r24, 7
    1f26:	16 c0       	rjmp	.+44     	; 0x1f54 <read_error()+0x1d6>
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f eb       	ldi	r21, 0xBF	; 191
    1f30:	c5 01       	movw	r24, r10
    1f32:	b4 01       	movw	r22, r8
    1f34:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1f38:	87 fd       	sbrc	r24, 7
    1f3a:	0c c0       	rjmp	.+24     	; 0x1f54 <read_error()+0x1d6>
    1f3c:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <steadytime0>
    1f40:	8f 5f       	subi	r24, 0xFF	; 255
    1f42:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <steadytime0>
    1f46:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <error1>
    1f4a:	8c 33       	cpi	r24, 0x3C	; 60
    1f4c:	18 f0       	brcs	.+6      	; 0x1f54 <read_error()+0x1d6>
    1f4e:	8c e3       	ldi	r24, 0x3C	; 60
    1f50:	80 93 75 04 	sts	0x0475, r24	; 0x800475 <steadytime0>
    1f54:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <steadytime0>
    1f58:	8c 33       	cpi	r24, 0x3C	; 60
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <read_error()+0x1e0>
    1f5c:	44 c0       	rjmp	.+136    	; 0x1fe6 <read_error()+0x268>
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	6d 81       	ldd	r22, Y+5	; 0x05
    1f68:	7e 81       	ldd	r23, Y+6	; 0x06
    1f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6c:	98 85       	ldd	r25, Y+8	; 0x08
    1f6e:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    1f72:	69 83       	std	Y+1, r22	; 0x01
    1f74:	7a 83       	std	Y+2, r23	; 0x02
    1f76:	8b 83       	std	Y+3, r24	; 0x03
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	9b 01       	movw	r18, r22
    1f7c:	ac 01       	movw	r20, r24
    1f7e:	c3 01       	movw	r24, r6
    1f80:	b2 01       	movw	r22, r4
    1f82:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1f86:	87 ff       	sbrs	r24, 7
    1f88:	2b c0       	rjmp	.+86     	; 0x1fe0 <read_error()+0x262>
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	6d 81       	ldd	r22, Y+5	; 0x05
    1f94:	7e 81       	ldd	r23, Y+6	; 0x06
    1f96:	8f 81       	ldd	r24, Y+7	; 0x07
    1f98:	98 85       	ldd	r25, Y+8	; 0x08
    1f9a:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    1f9e:	4b 01       	movw	r8, r22
    1fa0:	5c 01       	movw	r10, r24
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	9b 01       	movw	r18, r22
    1fa6:	c3 01       	movw	r24, r6
    1fa8:	b2 01       	movw	r22, r4
    1faa:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	bc f4       	brge	.+46     	; 0x1fe0 <read_error()+0x262>
    1fb2:	29 81       	ldd	r18, Y+1	; 0x01
    1fb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fb6:	4b 81       	ldd	r20, Y+3	; 0x03
    1fb8:	5c 81       	ldd	r21, Y+4	; 0x04
    1fba:	69 85       	ldd	r22, Y+9	; 0x09
    1fbc:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fbe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc2:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    1fc6:	87 ff       	sbrs	r24, 7
    1fc8:	0b c0       	rjmp	.+22     	; 0x1fe0 <read_error()+0x262>
    1fca:	a5 01       	movw	r20, r10
    1fcc:	94 01       	movw	r18, r8
    1fce:	69 85       	ldd	r22, Y+9	; 0x09
    1fd0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1fd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fd6:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	0c f4       	brge	.+2      	; 0x1fe0 <read_error()+0x262>
    1fde:	92 c0       	rjmp	.+292    	; 0x2104 <read_error()+0x386>
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <error1>
    1fe6:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <highTemp>
    1fea:	99 83       	std	Y+1, r25	; 0x01
    1fec:	91 11       	cpse	r25, r1
    1fee:	0a c0       	rjmp	.+20     	; 0x2004 <read_error()+0x286>
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	48 e1       	ldi	r20, 0x18	; 24
    1ff6:	52 e4       	ldi	r21, 0x42	; 66
    1ff8:	c7 01       	movw	r24, r14
    1ffa:	b6 01       	movw	r22, r12
    1ffc:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2000:	87 ff       	sbrs	r24, 7
    2002:	16 c0       	rjmp	.+44     	; 0x2030 <read_error()+0x2b2>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	48 e1       	ldi	r20, 0x18	; 24
    200a:	52 e4       	ldi	r21, 0x42	; 66
    200c:	c3 01       	movw	r24, r6
    200e:	b2 01       	movw	r22, r4
    2010:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2014:	87 ff       	sbrs	r24, 7
    2016:	0c c0       	rjmp	.+24     	; 0x2030 <read_error()+0x2b2>
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	48 e1       	ldi	r20, 0x18	; 24
    201e:	52 e4       	ldi	r21, 0x42	; 66
    2020:	69 85       	ldd	r22, Y+9	; 0x09
    2022:	7a 85       	ldd	r23, Y+10	; 0x0a
    2024:	8b 85       	ldd	r24, Y+11	; 0x0b
    2026:	9c 85       	ldd	r25, Y+12	; 0x0c
    2028:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    202c:	87 fd       	sbrc	r24, 7
    202e:	cf c0       	rjmp	.+414    	; 0x21ce <read_error()+0x450>
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <error3>
    2036:	a9 81       	ldd	r26, Y+1	; 0x01
    2038:	a1 30       	cpi	r26, 0x01	; 1
    203a:	51 f4       	brne	.+20     	; 0x2050 <read_error()+0x2d2>
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4e e1       	ldi	r20, 0x1E	; 30
    2042:	52 e4       	ldi	r21, 0x42	; 66
    2044:	c7 01       	movw	r24, r14
    2046:	b6 01       	movw	r22, r12
    2048:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    204c:	87 ff       	sbrs	r24, 7
    204e:	16 c0       	rjmp	.+44     	; 0x207c <read_error()+0x2fe>
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e1       	ldi	r20, 0x1A	; 26
    2056:	52 e4       	ldi	r21, 0x42	; 66
    2058:	c3 01       	movw	r24, r6
    205a:	b2 01       	movw	r22, r4
    205c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2060:	87 ff       	sbrs	r24, 7
    2062:	0c c0       	rjmp	.+24     	; 0x207c <read_error()+0x2fe>
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a e1       	ldi	r20, 0x1A	; 26
    206a:	52 e4       	ldi	r21, 0x42	; 66
    206c:	69 85       	ldd	r22, Y+9	; 0x09
    206e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2070:	8b 85       	ldd	r24, Y+11	; 0x0b
    2072:	9c 85       	ldd	r25, Y+12	; 0x0c
    2074:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2078:	87 fd       	sbrc	r24, 7
    207a:	ac c0       	rjmp	.+344    	; 0x21d4 <read_error()+0x456>
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <error4>
    2082:	82 e3       	ldi	r24, 0x32	; 50
    2084:	0e 94 8a 2a 	call	0x5514	; 0x5514 <digitalRead>
    2088:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <powerIn>
    208c:	81 30       	cpi	r24, 0x01	; 1
    208e:	09 f0       	breq	.+2      	; 0x2092 <read_error()+0x314>
    2090:	a4 c0       	rjmp	.+328    	; 0x21da <read_error()+0x45c>
    2092:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <error5>
    2096:	8e e0       	ldi	r24, 0x0E	; 14
    2098:	0e 94 8a 2a 	call	0x5514	; 0x5514 <digitalRead>
    209c:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <waterIn>
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <read_error()+0x328>
    20a4:	a0 c0       	rjmp	.+320    	; 0x21e6 <read_error()+0x468>
    20a6:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <error6>
    20aa:	60 96       	adiw	r28, 0x10	; 16
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	ff 90       	pop	r15
    20bc:	ef 90       	pop	r14
    20be:	df 90       	pop	r13
    20c0:	cf 90       	pop	r12
    20c2:	bf 90       	pop	r11
    20c4:	af 90       	pop	r10
    20c6:	9f 90       	pop	r9
    20c8:	8f 90       	pop	r8
    20ca:	7f 90       	pop	r7
    20cc:	6f 90       	pop	r6
    20ce:	5f 90       	pop	r5
    20d0:	4f 90       	pop	r4
    20d2:	08 95       	ret
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <error0>
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	a9 01       	movw	r20, r18
    20e0:	c3 01       	movw	r24, r6
    20e2:	b2 01       	movw	r22, r4
    20e4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	09 f4       	brne	.+2      	; 0x20ee <read_error()+0x370>
    20ec:	f2 ce       	rjmp	.-540    	; 0x1ed2 <read_error()+0x154>
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	a9 01       	movw	r20, r18
    20f4:	c7 01       	movw	r24, r14
    20f6:	b6 01       	movw	r22, r12
    20f8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	09 f4       	brne	.+2      	; 0x2102 <read_error()+0x384>
    2100:	e8 ce       	rjmp	.-560    	; 0x1ed2 <read_error()+0x154>
    2102:	e5 ce       	rjmp	.-566    	; 0x1ece <read_error()+0x150>
    2104:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <error1>
    2108:	6e cf       	rjmp	.-292    	; 0x1fe6 <read_error()+0x268>
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	09 f0       	breq	.+2      	; 0x2110 <read_error()+0x392>
    210e:	58 c0       	rjmp	.+176    	; 0x21c0 <read_error()+0x442>
    2110:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <steadytime0>
    2114:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <error1>
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	69 81       	ldd	r22, Y+1	; 0x01
    2122:	7a 81       	ldd	r23, Y+2	; 0x02
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    212c:	87 ff       	sbrs	r24, 7
    212e:	18 c0       	rjmp	.+48     	; 0x2160 <read_error()+0x3e2>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f eb       	ldi	r21, 0xBF	; 191
    2138:	69 81       	ldd	r22, Y+1	; 0x01
    213a:	7a 81       	ldd	r23, Y+2	; 0x02
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2144:	87 fd       	sbrc	r24, 7
    2146:	0c c0       	rjmp	.+24     	; 0x2160 <read_error()+0x3e2>
    2148:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <steadytime1>
    214c:	8f 5f       	subi	r24, 0xFF	; 255
    214e:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <steadytime1>
    2152:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <error2>
    2156:	8c 33       	cpi	r24, 0x3C	; 60
    2158:	18 f0       	brcs	.+6      	; 0x2160 <read_error()+0x3e2>
    215a:	8c e3       	ldi	r24, 0x3C	; 60
    215c:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <steadytime1>
    2160:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <steadytime1>
    2164:	8c 33       	cpi	r24, 0x3C	; 60
    2166:	09 f0       	breq	.+2      	; 0x216a <read_error()+0x3ec>
    2168:	3e cf       	rjmp	.-388    	; 0x1fe6 <read_error()+0x268>
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	6d 81       	ldd	r22, Y+5	; 0x05
    2174:	7e 81       	ldd	r23, Y+6	; 0x06
    2176:	8f 81       	ldd	r24, Y+7	; 0x07
    2178:	98 85       	ldd	r25, Y+8	; 0x08
    217a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    217e:	9b 01       	movw	r18, r22
    2180:	ac 01       	movw	r20, r24
    2182:	c7 01       	movw	r24, r14
    2184:	b6 01       	movw	r22, r12
    2186:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    218a:	87 ff       	sbrs	r24, 7
    218c:	12 c0       	rjmp	.+36     	; 0x21b2 <read_error()+0x434>
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	6d 81       	ldd	r22, Y+5	; 0x05
    2198:	7e 81       	ldd	r23, Y+6	; 0x06
    219a:	8f 81       	ldd	r24, Y+7	; 0x07
    219c:	98 85       	ldd	r25, Y+8	; 0x08
    219e:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    21a2:	9b 01       	movw	r18, r22
    21a4:	ac 01       	movw	r20, r24
    21a6:	c7 01       	movw	r24, r14
    21a8:	b6 01       	movw	r22, r12
    21aa:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	24 f0       	brlt	.+8      	; 0x21ba <read_error()+0x43c>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <error2>
    21b8:	16 cf       	rjmp	.-468    	; 0x1fe6 <read_error()+0x268>
    21ba:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <error2>
    21be:	13 cf       	rjmp	.-474    	; 0x1fe6 <read_error()+0x268>
    21c0:	81 11       	cpse	r24, r1
    21c2:	11 cf       	rjmp	.-478    	; 0x1fe6 <read_error()+0x268>
    21c4:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <steadytime0>
    21c8:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <steadytime1>
    21cc:	0c cf       	rjmp	.-488    	; 0x1fe6 <read_error()+0x268>
    21ce:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <error3>
    21d2:	31 cf       	rjmp	.-414    	; 0x2036 <read_error()+0x2b8>
    21d4:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <error4>
    21d8:	54 cf       	rjmp	.-344    	; 0x2082 <read_error()+0x304>
    21da:	81 11       	cpse	r24, r1
    21dc:	5c cf       	rjmp	.-328    	; 0x2096 <read_error()+0x318>
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <error5>
    21e4:	58 cf       	rjmp	.-336    	; 0x2096 <read_error()+0x318>
    21e6:	81 11       	cpse	r24, r1
    21e8:	60 cf       	rjmp	.-320    	; 0x20aa <read_error()+0x32c>
    21ea:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <error6>
    21ee:	5d cf       	rjmp	.-326    	; 0x20aa <read_error()+0x32c>

000021f0 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()>:
_ZN17ArduinoJson6194_118StaticJsonDocumentILj512EEC2Ev():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/StaticJsonDocument.hpp:17
class StaticJsonDocument : public JsonDocument {
  static const size_t _capacity =
      AddPadding<Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(_buffer, _capacity) {}
    21f0:	fc 01       	movw	r30, r24
    21f2:	0e 96       	adiw	r24, 0x0e	; 14
_ZN17ArduinoJson6194_110MemoryPoolC4EPcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:34
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0),
        _overflowed(false) {
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
    21f8:	93 83       	std	Z+3, r25	; 0x03
    21fa:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:32
class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	09 f0       	breq	.+2      	; 0x2202 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()+0x12>
    2200:	9e 5f       	subi	r25, 0xFE	; 254
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:34
        _end(buf ? buf + capa : 0),
        _overflowed(false) {
    2202:	95 83       	std	Z+5, r25	; 0x05
    2204:	84 83       	std	Z+4, r24	; 0x04
    2206:	97 83       	std	Z+7, r25	; 0x07
    2208:	86 83       	std	Z+6, r24	; 0x06
    220a:	10 86       	std	Z+8, r1	; 0x08
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    220c:	15 86       	std	Z+13, r1	; 0x0d
_ZN17ArduinoJson6194_118StaticJsonDocumentILj512EEC2Ev():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/StaticJsonDocument.hpp:17
    220e:	08 95       	ret

00002210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>:
_ZN17ArduinoJson6194_19ConverterIhvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:48
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    if (data)
      data->setInteger(src);
  }

  static T fromJson(VariantConstRef src) {
    2210:	cf 92       	push	r12
    2212:	df 92       	push	r13
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	00 d0       	rcall	.+0      	; 0x221e <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0xe>
    221e:	00 d0       	rcall	.+0      	; 0x2220 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x10>
    2220:	1f 92       	push	r1
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:51
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    const VariantData* data = getData(src);
    return data ? data->asIntegral<T>() : T();
    2228:	89 2b       	or	r24, r25
    222a:	39 f0       	breq	.+14     	; 0x223a <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    222c:	84 81       	ldd	r24, Z+4	; 0x04
    222e:	8f 77       	andi	r24, 0x7F	; 127
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:20

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
    2230:	86 30       	cpi	r24, 0x06	; 6
    2232:	b1 f0       	breq	.+44     	; 0x2260 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x50>
    2234:	20 f4       	brcc	.+8      	; 0x223e <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2e>
    2236:	84 30       	cpi	r24, 0x04	; 4
    2238:	00 f5       	brcc	.+64     	; 0x227a <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x6a>
_ZN17ArduinoJson6194_19ConverterIhvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:51
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	12 c0       	rjmp	.+36     	; 0x2262 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:20
    223e:	8a 30       	cpi	r24, 0x0A	; 10
    2240:	21 f0       	breq	.+8      	; 0x224a <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x3a>
    2242:	8c 30       	cpi	r24, 0x0C	; 12
    2244:	39 f1       	breq	.+78     	; 0x2294 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x84>
    2246:	88 30       	cpi	r24, 0x08	; 8
    2248:	c1 f7       	brne	.-16     	; 0x223a <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:26
    case VALUE_IS_BOOLEAN:
      return _content.asBoolean;
    case VALUE_IS_UNSIGNED_INTEGER:
      return convertNumber<T>(_content.asUnsignedInteger);
    case VALUE_IS_SIGNED_INTEGER:
      return convertNumber<T>(_content.asSignedInteger);
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	a2 81       	ldd	r26, Z+2	; 0x02
    2250:	b3 81       	ldd	r27, Z+3	; 0x03
_ZN17ArduinoJson6194_113convertNumberIhlEET_T0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:111
         value <= numeric_limits<TOut>::highest();
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
    2252:	8f 3f       	cpi	r24, 0xFF	; 255
    2254:	91 05       	cpc	r25, r1
    2256:	a1 05       	cpc	r26, r1
    2258:	b1 05       	cpc	r27, r1
    225a:	19 f0       	breq	.+6      	; 0x2262 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
    225c:	10 f0       	brcs	.+4      	; 0x2262 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
    225e:	ed cf       	rjmp	.-38     	; 0x223a <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:22

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
    case VALUE_IS_BOOLEAN:
      return _content.asBoolean;
    2260:	80 81       	ld	r24, Z
_ZN17ArduinoJson6194_19ConverterIhvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:52
  }
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	08 95       	ret
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:29
      return convertNumber<T>(_content.asUnsignedInteger);
    case VALUE_IS_SIGNED_INTEGER:
      return convertNumber<T>(_content.asSignedInteger);
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseNumber<T>(_content.asString.data);
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    227e:	1d 82       	std	Y+5, r1	; 0x05
_ZN17ArduinoJson6194_111parseNumberIhEET_PKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:150

template <typename T>
inline T parseNumber(const char* s) {
  VariantData value;
  value.init();  // VariantData is a POD, so it has no constructor
  parseNumber(s, value);
    2280:	be 01       	movw	r22, r28
    2282:	6f 5f       	subi	r22, 0xFF	; 255
    2284:	7f 4f       	sbci	r23, 0xFF	; 255
    2286:	0e 94 76 09 	call	0x12ec	; 0x12ec <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:151
  return Converter<T>::fromJson(VariantConstRef(&value));
    228a:	ce 01       	movw	r24, r28
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
    2292:	e7 cf       	rjmp	.-50     	; 0x2262 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:31
    case VALUE_IS_FLOAT:
      return convertNumber<T>(_content.asFloat);
    2294:	c0 80       	ld	r12, Z
    2296:	d1 80       	ldd	r13, Z+1	; 0x01
    2298:	e2 80       	ldd	r14, Z+2	; 0x02
    229a:	f3 80       	ldd	r15, Z+3	; 0x03
_ZN17ArduinoJson6194_116canConvertNumberIhdEENS_9enable_ifIXaasrNS_17is_floating_pointIT0_EE5valuentsrNS2_IT_EE5valueEbE4typeES3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:105
template <typename TOut, typename TIn>
typename enable_if<is_floating_point<TIn>::value &&
                       !is_floating_point<TOut>::value,
                   bool>::type
canConvertNumber(TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	a9 01       	movw	r20, r18
    22a2:	c7 01       	movw	r24, r14
    22a4:	b6 01       	movw	r22, r12
    22a6:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    22aa:	87 fd       	sbrc	r24, 7
    22ac:	c6 cf       	rjmp	.-116    	; 0x223a <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	53 e4       	ldi	r21, 0x43	; 67
    22b6:	c7 01       	movw	r24, r14
    22b8:	b6 01       	movw	r22, r12
    22ba:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    22be:	18 16       	cp	r1, r24
    22c0:	0c f4       	brge	.+2      	; 0x22c4 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0xb4>
    22c2:	bb cf       	rjmp	.-138    	; 0x223a <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZN17ArduinoJson6194_113convertNumberIhdEET_T0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:111
         value <= numeric_limits<TOut>::highest();
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
    22c4:	c7 01       	movw	r24, r14
    22c6:	b6 01       	movw	r22, r12
    22c8:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__fixunssfsi>
    22cc:	86 2f       	mov	r24, r22
    22ce:	c9 cf       	rjmp	.-110    	; 0x2262 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>

000022d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE7currentEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:45

    return _error;
  }

 private:
  char current() {
    22d0:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE7currentEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:29
  int last() const {
    return _current;
  }

  FORCE_INLINE char current() {
    if (!_loaded) {
    22d2:	80 85       	ldd	r24, Z+8	; 0x08
    22d4:	81 11       	cpse	r24, r1
    22d6:	0a c0       	rjmp	.+20     	; 0x22ec <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()+0x1c>
_ZN17ArduinoJson6194_16ReaderIPcvE4readEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/Readers/RamReader.hpp:31
 public:
  explicit Reader(const void* ptr)
      : _ptr(ptr ? reinterpret_cast<const char*>(ptr) : "") {}

  int read() {
    return static_cast<unsigned char>(*_ptr++);
    22d8:	a5 81       	ldd	r26, Z+5	; 0x05
    22da:	b6 81       	ldd	r27, Z+6	; 0x06
    22dc:	cd 01       	movw	r24, r26
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	96 83       	std	Z+6, r25	; 0x06
    22e2:	85 83       	std	Z+5, r24	; 0x05
    22e4:	8c 91       	ld	r24, X
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE4loadEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:43
    int c = _reader.read();
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      _ended = true;
#endif
    _current = static_cast<char>(c > 0 ? c : 0);
    22e6:	87 83       	std	Z+7, r24	; 0x07
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:44
    _loaded = true;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	80 87       	std	Z+8, r24	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE7currentEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:47
    return _latch.current();
  }
    22ec:	87 81       	ldd	r24, Z+7	; 0x07
    22ee:	08 95       	ret

000022f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE21skipSpacesAndCommentsEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:550
      return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    return uint8_t(c - 'A' + 10);
  }

  bool skipSpacesAndComments() {
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:552
    for (;;) {
      switch (current()) {
    22f6:	ce 01       	movw	r24, r28
    22f8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    22fc:	8b 30       	cpi	r24, 0x0B	; 11
    22fe:	3c f4       	brge	.+14     	; 0x230e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x1e>
    2300:	89 30       	cpi	r24, 0x09	; 9
    2302:	4c f4       	brge	.+18     	; 0x2316 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x26>
    2304:	88 23       	and	r24, r24
    2306:	49 f0       	breq	.+18     	; 0x231a <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x2a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:616
          }
          break;
#endif

        default:
          _foundSomething = true;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:617
          return true;
    230c:	10 c0       	rjmp	.+32     	; 0x232e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x3e>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:552
    return uint8_t(c - 'A' + 10);
  }

  bool skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    230e:	8d 30       	cpi	r24, 0x0D	; 13
    2310:	11 f0       	breq	.+4      	; 0x2316 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x26>
    2312:	80 32       	cpi	r24, 0x20	; 32
    2314:	c9 f7       	brne	.-14     	; 0x2308 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x18>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    _ended = false;
#endif
  }

  void clear() {
    _loaded = false;
    2316:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE21skipSpacesAndCommentsEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:552
    2318:	ee cf       	rjmp	.-36     	; 0x22f6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:555
        // end of string
        case '\0':
          _error = _foundSomething ? DeserializationError::IncompleteInput
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	81 11       	cpse	r24, r1
    231e:	0a c0       	rjmp	.+20     	; 0x2334 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x44>
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:555 (discriminator 4)
    2324:	c5 5b       	subi	r28, 0xB5	; 181
    2326:	df 4f       	sbci	r29, 0xFF	; 255
    2328:	99 83       	std	Y+1, r25	; 0x01
    232a:	88 83       	st	Y, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:557 (discriminator 4)
                                   : DeserializationError::EmptyInput;
          return false;
    232c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:620
        default:
          _foundSomething = true;
          return true;
      }
    }
  }
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:555
  bool skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
        // end of string
        case '\0':
          _error = _foundSomething ? DeserializationError::IncompleteInput
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	f5 cf       	rjmp	.-22     	; 0x2324 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x34>

0000233a <float ArduinoJson6194_1::VariantData::asFloat<float>() const>:
_ZNK17ArduinoJson6194_111VariantData7asFloatIfEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:55
  }
}

// T = float/double
template <typename T>
inline T VariantData::asFloat() const {
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	00 d0       	rcall	.+0      	; 0x2340 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x6>
    2340:	00 d0       	rcall	.+0      	; 0x2342 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x8>
    2342:	1f 92       	push	r1
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	fc 01       	movw	r30, r24
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    234a:	94 81       	ldd	r25, Z+4	; 0x04
    234c:	9f 77       	andi	r25, 0x7F	; 127
_ZNK17ArduinoJson6194_111VariantData7asFloatIfEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:56
  switch (type()) {
    234e:	96 30       	cpi	r25, 0x06	; 6
    2350:	91 f0       	breq	.+36     	; 0x2376 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x3c>
    2352:	30 f4       	brcc	.+12     	; 0x2360 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x26>
    2354:	94 30       	cpi	r25, 0x04	; 4
    2356:	20 f5       	brcc	.+72     	; 0x23a0 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x66>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:69
    case VALUE_IS_OWNED_STRING:
      return parseNumber<T>(_content.asString.data);
    case VALUE_IS_FLOAT:
      return static_cast<T>(_content.asFloat);
    default:
      return 0;
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	cb 01       	movw	r24, r22
    235e:	11 c0       	rjmp	.+34     	; 0x2382 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x48>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:56
}

// T = float/double
template <typename T>
inline T VariantData::asFloat() const {
  switch (type()) {
    2360:	9a 30       	cpi	r25, 0x0A	; 10
    2362:	b9 f0       	breq	.+46     	; 0x2392 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x58>
    2364:	9c 30       	cpi	r25, 0x0C	; 12
    2366:	49 f1       	breq	.+82     	; 0x23ba <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x80>
    2368:	98 30       	cpi	r25, 0x08	; 8
    236a:	b1 f7       	brne	.-20     	; 0x2358 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x1e>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:60
    case VALUE_IS_BOOLEAN:
      return static_cast<T>(_content.asBoolean);
    case VALUE_IS_UNSIGNED_INTEGER:
      return static_cast<T>(_content.asUnsignedInteger);
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	04 c0       	rjmp	.+8      	; 0x237e <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x44>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:58
// T = float/double
template <typename T>
inline T VariantData::asFloat() const {
  switch (type()) {
    case VALUE_IS_BOOLEAN:
      return static_cast<T>(_content.asBoolean);
    2376:	60 81       	ld	r22, Z
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:60
    case VALUE_IS_UNSIGNED_INTEGER:
      return static_cast<T>(_content.asUnsignedInteger);
    237e:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__floatunsisf>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:71
    case VALUE_IS_FLOAT:
      return static_cast<T>(_content.asFloat);
    default:
      return 0;
  }
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:62
    case VALUE_IS_BOOLEAN:
      return static_cast<T>(_content.asBoolean);
    case VALUE_IS_UNSIGNED_INTEGER:
      return static_cast<T>(_content.asUnsignedInteger);
    case VALUE_IS_SIGNED_INTEGER:
      return static_cast<T>(_content.asSignedInteger);
    2392:	60 81       	ld	r22, Z
    2394:	71 81       	ldd	r23, Z+1	; 0x01
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__floatsisf>
    239e:	f1 cf       	rjmp	.-30     	; 0x2382 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x48>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:65
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseNumber<T>(_content.asString.data);
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    23a4:	1d 82       	std	Y+5, r1	; 0x05
_ZN17ArduinoJson6194_111parseNumberIfEET_PKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:150

template <typename T>
inline T parseNumber(const char* s) {
  VariantData value;
  value.init();  // VariantData is a POD, so it has no constructor
  parseNumber(s, value);
    23a6:	be 01       	movw	r22, r28
    23a8:	6f 5f       	subi	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	0e 94 76 09 	call	0x12ec	; 0x12ec <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>
_ZN17ArduinoJson6194_19ConverterIfvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:106
      data->setFloat(static_cast<Float>(src));
  }

  static T fromJson(VariantConstRef src) {
    const VariantData* data = getData(src);
    return data ? data->asFloat<T>() : false;
    23b0:	ce 01       	movw	r24, r28
    23b2:	01 96       	adiw	r24, 0x01	; 1
    23b4:	0e 94 9d 11 	call	0x233a	; 0x233a <float ArduinoJson6194_1::VariantData::asFloat<float>() const>
_ZNK17ArduinoJson6194_111VariantData7asFloatIfEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:65
    23b8:	e4 cf       	rjmp	.-56     	; 0x2382 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x48>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:67
    case VALUE_IS_FLOAT:
      return static_cast<T>(_content.asFloat);
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	df cf       	rjmp	.-66     	; 0x2382 <float ArduinoJson6194_1::VariantData::asFloat<float>() const+0x48>

000023c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE3eatEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:53

  void move() {
    _latch.clear();
  }

  bool eat(char charToSkip) {
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	ec 01       	movw	r28, r24
    23cc:	16 2f       	mov	r17, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:54
    if (current() != charToSkip)
    23ce:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    23d2:	81 13       	cpse	r24, r17
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)+0x1e>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    23d6:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE3eatEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:57
      return false;
    move();
    return true;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:58
  }
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	1f 91       	pop	r17
    23e0:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:55
    _latch.clear();
  }

  bool eat(char charToSkip) {
    if (current() != charToSkip)
      return false;
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	fa cf       	rjmp	.-12     	; 0x23da <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)+0x16>

000023e6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:352
      return false;
    variant.setString(_stringStorage.save());
    return true;
  }

  bool parseQuotedString() {
    23e6:	9f 92       	push	r9
    23e8:	af 92       	push	r10
    23ea:	bf 92       	push	r11
    23ec:	cf 92       	push	r12
    23ee:	df 92       	push	r13
    23f0:	ef 92       	push	r14
    23f2:	ff 92       	push	r15
    23f4:	0f 93       	push	r16
    23f6:	1f 93       	push	r17
    23f8:	cf 93       	push	r28
    23fa:	df 93       	push	r29
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x18>
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1a>
    2400:	1f 92       	push	r1
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:356
#if ARDUINOJSON_DECODE_UNICODE
    Utf16::Codepoint codepoint;
#endif
    const char stopChar = current();
    2408:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    240c:	b8 2e       	mov	r11, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    240e:	d8 01       	movw	r26, r16
    2410:	18 96       	adiw	r26, 0x08	; 8
    2412:	1c 92       	st	X, r1
_ZN17ArduinoJson6194_15Utf169CodepointC4Ev():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:34
  return codeunit >= 0xDC00 && codeunit < 0xE000;
}

class Codepoint {
 public:
  Codepoint() : _highSurrogate(0), _codepoint(0) {}
    2414:	f1 2c       	mov	r15, r1
    2416:	e1 2c       	mov	r14, r1
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:36
      if (codepoint16 < 0x10) {  // 0x10000
        *(p++) = char(codepoint16 | 0xE0);
      } else {
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
        codepoint16 = uint16_t(codepoint16 >> 6);
        *(p++) = char(codepoint16 | 0xF0);
    2418:	70 ef       	ldi	r23, 0xF0	; 240
    241a:	a7 2e       	mov	r10, r23
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:360

    move();
    for (;;) {
      char c = current();
    241c:	c8 01       	movw	r24, r16
    241e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    2422:	f8 01       	movw	r30, r16
    2424:	10 86       	std	Z+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:362
      move();
      if (c == stopChar)
    2426:	b8 16       	cp	r11, r24
    2428:	09 f4       	brne	.+2      	; 0x242c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x46>
    242a:	cb c0       	rjmp	.+406    	; 0x25c2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1dc>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:365
        break;

      if (c == '\0') {
    242c:	81 11       	cpse	r24, r1
    242e:	19 c0       	rjmp	.+50     	; 0x2462 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x7c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:366
        _error = DeserializationError::IncompleteInput;
    2430:	f8 01       	movw	r30, r16
    2432:	e5 5b       	subi	r30, 0xB5	; 181
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	90 e0       	ldi	r25, 0x00	; 0
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:521
        _error = DeserializationError::IncompleteInput;
        return false;
      }
      uint8_t value = decodeHex(digit);
      if (value > 0x0F) {
        _error = DeserializationError::InvalidInput;
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:383
        if (c == 'u') {
#if ARDUINOJSON_DECODE_UNICODE
          move();
          uint16_t codeunit;
          if (!parseHex4(codeunit))
            return false;
    243e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:410
      _error = DeserializationError::NoMemory;
      return false;
    }

    return true;
  }
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	df 90       	pop	r13
    2458:	cf 90       	pop	r12
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	9f 90       	pop	r9
    2460:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:370
      if (c == '\0') {
        _error = DeserializationError::IncompleteInput;
        return false;
      }

      if (c == '\\') {
    2462:	8c 35       	cpi	r24, 0x5C	; 92
    2464:	09 f0       	breq	.+2      	; 0x2468 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x82>
    2466:	a2 c0       	rjmp	.+324    	; 0x25ac <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1c6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:371
        c = current();
    2468:	c8 01       	movw	r24, r16
    246a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:373

        if (c == '\0') {
    246e:	88 23       	and	r24, r24
    2470:	f9 f2       	breq	.-66     	; 0x2430 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x4a>
_ZN17ArduinoJson6194_114EscapeSequence12unescapeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:24
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(false);
    2472:	ee e2       	ldi	r30, 0x2E	; 46
    2474:	f1 e0       	ldi	r31, 0x01	; 1
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:378
          _error = DeserializationError::IncompleteInput;
          return false;
        }

        if (c == 'u') {
    2476:	85 37       	cpi	r24, 0x75	; 117
    2478:	09 f0       	breq	.+2      	; 0x247c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x96>
    247a:	8c c0       	rjmp	.+280    	; 0x2594 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1ae>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    247c:	d8 01       	movw	r26, r16
    247e:	18 96       	adiw	r26, 0x08	; 8
    2480:	1c 92       	st	X, r1
    2482:	64 e0       	ldi	r22, 0x04	; 4
    2484:	96 2e       	mov	r9, r22
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:512
    }
    return true;
  }

  bool parseHex4(uint16_t &result) {
    result = 0;
    2486:	d1 2c       	mov	r13, r1
    2488:	c1 2c       	mov	r12, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:514
    for (uint8_t i = 0; i < 4; ++i) {
      char digit = current();
    248a:	c8 01       	movw	r24, r16
    248c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:515
      if (!digit) {
    2490:	88 23       	and	r24, r24
    2492:	71 f2       	breq	.-100    	; 0x2430 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x4a>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9decodeHexEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:544
  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  static inline uint8_t decodeHex(char c) {
    if (c < 'A')
    2494:	81 34       	cpi	r24, 0x41	; 65
    2496:	4c f4       	brge	.+18     	; 0x24aa <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xc4>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:545
      return uint8_t(c - '0');
    2498:	80 53       	subi	r24, 0x30	; 48
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:520
      if (!digit) {
        _error = DeserializationError::IncompleteInput;
        return false;
      }
      uint8_t value = decodeHex(digit);
      if (value > 0x0F) {
    249a:	80 31       	cpi	r24, 0x10	; 16
    249c:	48 f0       	brcs	.+18     	; 0x24b0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xca>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:521
        _error = DeserializationError::InvalidInput;
    249e:	f8 01       	movw	r30, r16
    24a0:	e5 5b       	subi	r30, 0xB5	; 181
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	83 e0       	ldi	r24, 0x03	; 3
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	c8 cf       	rjmp	.-112    	; 0x243a <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x54>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9decodeHexEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:546
  }

  static inline uint8_t decodeHex(char c) {
    if (c < 'A')
      return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    24aa:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:547
    return uint8_t(c - 'A' + 10);
    24ac:	87 53       	subi	r24, 0x37	; 55
    24ae:	f5 cf       	rjmp	.-22     	; 0x249a <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xb4>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:524
      uint8_t value = decodeHex(digit);
      if (value > 0x0F) {
        _error = DeserializationError::InvalidInput;
        return false;
      }
      result = uint16_t((result << 4) | value);
    24b0:	54 e0       	ldi	r21, 0x04	; 4
    24b2:	cc 0c       	add	r12, r12
    24b4:	dd 1c       	adc	r13, r13
    24b6:	5a 95       	dec	r21
    24b8:	e1 f7       	brne	.-8      	; 0x24b2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xcc>
    24ba:	c8 2a       	or	r12, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    24bc:	f8 01       	movw	r30, r16
    24be:	10 86       	std	Z+8, r1	; 0x08
    24c0:	9a 94       	dec	r9
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:513
    return true;
  }

  bool parseHex4(uint16_t &result) {
    result = 0;
    for (uint8_t i = 0; i < 4; ++i) {
    24c2:	91 10       	cpse	r9, r1
    24c4:	e2 cf       	rjmp	.-60     	; 0x248a <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xa4>
_ZN17ArduinoJson6194_15Utf1615isHighSurrogateEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:25

namespace ARDUINOJSON_NAMESPACE {

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
  return codeunit >= 0xD800 && codeunit < 0xDC00;
    24c6:	c6 01       	movw	r24, r12
    24c8:	98 5d       	subi	r25, 0xD8	; 216
_ZN17ArduinoJson6194_15Utf169Codepoint6appendEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:37
class Codepoint {
 public:
  Codepoint() : _highSurrogate(0), _codepoint(0) {}

  bool append(uint16_t codeunit) {
    if (isHighSurrogate(codeunit)) {
    24ca:	81 15       	cp	r24, r1
    24cc:	94 40       	sbci	r25, 0x04	; 4
    24ce:	20 f4       	brcc	.+8      	; 0x24d8 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xf2>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:38
      _highSurrogate = codeunit & 0x3FF;
    24d0:	76 01       	movw	r14, r12
    24d2:	23 e0       	ldi	r18, 0x03	; 3
    24d4:	f2 22       	and	r15, r18
    24d6:	a2 cf       	rjmp	.-188    	; 0x241c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
_ZN17ArduinoJson6194_15Utf1614isLowSurrogateEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:29
inline bool isHighSurrogate(uint16_t codeunit) {
  return codeunit >= 0xD800 && codeunit < 0xDC00;
}

inline bool isLowSurrogate(uint16_t codeunit) {
  return codeunit >= 0xDC00 && codeunit < 0xE000;
    24d8:	c6 01       	movw	r24, r12
    24da:	9c 5d       	subi	r25, 0xDC	; 220
_ZN17ArduinoJson6194_15Utf169Codepoint6appendEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:42
    if (isHighSurrogate(codeunit)) {
      _highSurrogate = codeunit & 0x3FF;
      return false;
    }

    if (isLowSurrogate(codeunit)) {
    24dc:	81 15       	cp	r24, r1
    24de:	94 40       	sbci	r25, 0x04	; 4
    24e0:	78 f5       	brcc	.+94     	; 0x2540 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x15a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:44
      _codepoint =
          uint32_t(0x10000 + ((_highSurrogate << 10) | (codeunit & 0x3FF)));
    24e2:	b3 e0       	ldi	r27, 0x03	; 3
    24e4:	db 22       	and	r13, r27
    24e6:	c7 01       	movw	r24, r14
    24e8:	98 2f       	mov	r25, r24
    24ea:	88 27       	eor	r24, r24
    24ec:	99 0f       	add	r25, r25
    24ee:	99 0f       	add	r25, r25
    24f0:	8c 29       	or	r24, r12
    24f2:	9d 29       	or	r25, r13
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	a0 e0       	ldi	r26, 0x00	; 0
    24f8:	11 96       	adiw	r26, 0x01	; 1
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:23
  } else {
    // a buffer to store the string in reverse
    char buf[5];
    char* p = buf;

    *(p++) = 0;
    24fa:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:24
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
    24fc:	28 2f       	mov	r18, r24
    24fe:	2f 73       	andi	r18, 0x3F	; 63
    2500:	20 68       	ori	r18, 0x80	; 128
    2502:	2a 83       	std	Y+2, r18	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:25
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
    2504:	36 e0       	ldi	r19, 0x06	; 6
    2506:	b6 95       	lsr	r27
    2508:	a7 95       	ror	r26
    250a:	97 95       	ror	r25
    250c:	87 95       	ror	r24
    250e:	3a 95       	dec	r19
    2510:	d1 f7       	brne	.-12     	; 0x2506 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x120>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:26
    if (codepoint16 < 0x20) {  // 0x800
    2512:	80 32       	cpi	r24, 0x20	; 32
    2514:	91 05       	cpc	r25, r1
    2516:	30 f5       	brcc	.+76     	; 0x2564 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x17e>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:27
      *(p++) = char(codepoint16 | 0xC0);
    2518:	80 6c       	ori	r24, 0xC0	; 192
    251a:	8b 83       	std	Y+3, r24	; 0x03
    251c:	fe 01       	movw	r30, r28
    251e:	34 96       	adiw	r30, 0x04	; 4
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:40
        codepoint16 = uint16_t(codepoint16 >> 6);
        *(p++) = char(codepoint16 | 0xF0);
      }
    }

    while (*(--p)) {
    2520:	82 91       	ld	r24, -Z
    2522:	88 23       	and	r24, r24
    2524:	09 f4       	brne	.+2      	; 0x2528 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x142>
    2526:	7a cf       	rjmp	.-268    	; 0x241c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    _writePtr++;
    return s;
  }

  void append(char c) {
    *_writePtr++ = c;
    2528:	d8 01       	movw	r26, r16
    252a:	4d 91       	ld	r20, X+
    252c:	5c 91       	ld	r21, X
    252e:	11 97       	sbiw	r26, 0x01	; 1
    2530:	9a 01       	movw	r18, r20
    2532:	2f 5f       	subi	r18, 0xFF	; 255
    2534:	3f 4f       	sbci	r19, 0xFF	; 255
    2536:	2d 93       	st	X+, r18
    2538:	3c 93       	st	X, r19
    253a:	da 01       	movw	r26, r20
    253c:	8c 93       	st	X, r24
    253e:	f0 cf       	rjmp	.-32     	; 0x2520 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x13a>
_ZN17ArduinoJson6194_15Utf169Codepoint6appendEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:48
      return true;
    }

    _codepoint = codeunit;
    2540:	c6 01       	movw	r24, r12
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	a0 e0       	ldi	r26, 0x00	; 0
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:16
namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
    2546:	80 38       	cpi	r24, 0x80	; 128
    2548:	91 05       	cpc	r25, r1
    254a:	a1 05       	cpc	r26, r1
    254c:	b1 05       	cpc	r27, r1
    254e:	a8 f6       	brcc	.-86     	; 0x24fa <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x114>
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    2550:	d8 01       	movw	r26, r16
    2552:	ed 91       	ld	r30, X+
    2554:	fc 91       	ld	r31, X
    2556:	11 97       	sbiw	r26, 0x01	; 1
    2558:	cf 01       	movw	r24, r30
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	8d 93       	st	X+, r24
    255e:	9c 93       	st	X, r25
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:17
    str.append(char(codepoint32));
    2560:	c0 82       	st	Z, r12
    2562:	5c cf       	rjmp	.-328    	; 0x241c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:29
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
    if (codepoint16 < 0x20) {  // 0x800
      *(p++) = char(codepoint16 | 0xC0);
    } else {
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
    2564:	28 2f       	mov	r18, r24
    2566:	2f 73       	andi	r18, 0x3F	; 63
    2568:	20 68       	ori	r18, 0x80	; 128
    256a:	2b 83       	std	Y+3, r18	; 0x03
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:30
      codepoint16 = uint16_t(codepoint16 >> 6);
    256c:	26 e0       	ldi	r18, 0x06	; 6
    256e:	96 95       	lsr	r25
    2570:	87 95       	ror	r24
    2572:	2a 95       	dec	r18
    2574:	e1 f7       	brne	.-8      	; 0x256e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x188>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:31
      if (codepoint16 < 0x10) {  // 0x10000
    2576:	80 31       	cpi	r24, 0x10	; 16
    2578:	91 05       	cpc	r25, r1
    257a:	28 f4       	brcc	.+10     	; 0x2586 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1a0>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:32
        *(p++) = char(codepoint16 | 0xE0);
    257c:	80 6e       	ori	r24, 0xE0	; 224
    257e:	8c 83       	std	Y+4, r24	; 0x04
    2580:	fe 01       	movw	r30, r28
    2582:	35 96       	adiw	r30, 0x05	; 5
    2584:	cd cf       	rjmp	.-102    	; 0x2520 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x13a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:34
      } else {
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
    2586:	80 68       	ori	r24, 0x80	; 128
    2588:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:36
        codepoint16 = uint16_t(codepoint16 >> 6);
        *(p++) = char(codepoint16 | 0xF0);
    258a:	ad 82       	std	Y+5, r10	; 0x05
    258c:	fe 01       	movw	r30, r28
    258e:	36 96       	adiw	r30, 0x06	; 6
    2590:	c7 cf       	rjmp	.-114    	; 0x2520 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x13a>
_ZN17ArduinoJson6194_114EscapeSequence12unescapeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:30
    for (;;) {
      if (p[0] == '\0')
        return 0;
      if (p[0] == c)
        return p[1];
      p += 2;
    2592:	32 96       	adiw	r30, 0x02	; 2
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:26

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(false);
    for (;;) {
      if (p[0] == '\0')
    2594:	90 81       	ld	r25, Z
    2596:	99 23       	and	r25, r25
    2598:	09 f4       	brne	.+2      	; 0x259c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1b6>
    259a:	81 cf       	rjmp	.-254    	; 0x249e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xb8>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:28
        return 0;
      if (p[0] == c)
    259c:	89 13       	cpse	r24, r25
    259e:	f9 cf       	rjmp	.-14     	; 0x2592 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1ac>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:29
        return p[1];
    25a0:	81 81       	ldd	r24, Z+1	; 0x01
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:394
          continue;
        }

        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') {
    25a2:	88 23       	and	r24, r24
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1c2>
    25a6:	7b cf       	rjmp	.-266    	; 0x249e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xb8>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    25a8:	f8 01       	movw	r30, r16
    25aa:	10 86       	std	Z+8, r1	; 0x08
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    25ac:	d8 01       	movw	r26, r16
    25ae:	ed 91       	ld	r30, X+
    25b0:	fc 91       	ld	r31, X
    25b2:	11 97       	sbiw	r26, 0x01	; 1
    25b4:	9f 01       	movw	r18, r30
    25b6:	2f 5f       	subi	r18, 0xFF	; 255
    25b8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ba:	2d 93       	st	X+, r18
    25bc:	3c 93       	st	X, r19
    25be:	80 83       	st	Z, r24
    25c0:	2d cf       	rjmp	.-422    	; 0x241c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:409
    if (!_stringStorage.isValid()) {
      _error = DeserializationError::NoMemory;
      return false;
    }

    return true;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	3d cf       	rjmp	.-390    	; 0x2440 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x5a>

000025c6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9isBetweenEccc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:531
    }
    return true;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    25c6:	80 33       	cpi	r24, 0x30	; 48
    25c8:	9c f0       	brlt	.+38     	; 0x25f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x2a>
    25ca:	8a 33       	cpi	r24, 0x3A	; 58
    25cc:	24 f0       	brlt	.+8      	; 0x25d6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x10>
    25ce:	8f 35       	cpi	r24, 0x5F	; 95
    25d0:	24 f0       	brlt	.+8      	; 0x25da <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x14>
    25d2:	8b 37       	cpi	r24, 0x7B	; 123
    25d4:	24 f4       	brge	.+8      	; 0x25de <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x18>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE22canBeInNonQuotedStringEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:536
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    25d6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:537
  }
    25d8:	08 95       	ret
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9isBetweenEccc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:531
    }
    return true;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    25da:	81 34       	cpi	r24, 0x41	; 65
    25dc:	4c f0       	brlt	.+18     	; 0x25f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x2a>
    25de:	8b 35       	cpi	r24, 0x5B	; 91
    25e0:	d4 f3       	brlt	.-12     	; 0x25d6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x10>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE22canBeInNonQuotedStringEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:536
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    25e2:	93 ed       	ldi	r25, 0xD3	; 211
    25e4:	98 0f       	add	r25, r24
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	92 30       	cpi	r25, 0x02	; 2
    25ea:	b0 f3       	brcs	.-20     	; 0x25d8 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x12>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	08 95       	ret
    25f0:	8b 32       	cpi	r24, 0x2B	; 43
    25f2:	b9 f7       	brne	.-18     	; 0x25e2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x1c>
    25f4:	f0 cf       	rjmp	.-32     	; 0x25d6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x10>

000025f6 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:61
    move();
    return true;
  }

  template <typename TFilter>
  bool parseVariant(VariantData &variant, TFilter filter,
    25f6:	9f 92       	push	r9
    25f8:	af 92       	push	r10
    25fa:	bf 92       	push	r11
    25fc:	cf 92       	push	r12
    25fe:	df 92       	push	r13
    2600:	ef 92       	push	r14
    2602:	ff 92       	push	r15
    2604:	0f 93       	push	r16
    2606:	1f 93       	push	r17
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	ec 01       	movw	r28, r24
    260e:	8b 01       	movw	r16, r22
    2610:	e2 2e       	mov	r14, r18
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:63
                    NestingLimit nestingLimit) {
    if (!skipSpacesAndComments())
    2612:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    2616:	d8 2e       	mov	r13, r24
    2618:	81 11       	cpse	r24, r1
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x2a>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:473
    c = _buffer[0];
    if (c == 't') {  // true
      result.setBoolean(true);
      if (n != 4) {
        _error = DeserializationError::IncompleteInput;
        return false;
    261c:	f1 2c       	mov	r15, r1
    261e:	69 c0       	rjmp	.+210    	; 0x26f2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfc>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:66
  bool parseVariant(VariantData &variant, TFilter filter,
                    NestingLimit nestingLimit) {
    if (!skipSpacesAndComments())
      return false;

    switch (current()) {
    2620:	ce 01       	movw	r24, r28
    2622:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    2626:	87 32       	cpi	r24, 0x27	; 39
    2628:	09 f4       	brne	.+2      	; 0x262c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x36>
    262a:	9e c0       	rjmp	.+316    	; 0x2768 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x172>
    262c:	14 f5       	brge	.+68     	; 0x2672 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x7c>
    262e:	82 32       	cpi	r24, 0x22	; 34
    2630:	09 f4       	brne	.+2      	; 0x2634 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x3e>
    2632:	9a c0       	rjmp	.+308    	; 0x2768 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x172>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:460
  }

  bool parseNumericValue(VariantData &result) {
    uint8_t n = 0;

    char c = current();
    2634:	ce 01       	movw	r24, r28
    2636:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    263a:	e8 2e       	mov	r14, r24
    263c:	5e 01       	movw	r10, r28
    263e:	fb e0       	ldi	r31, 0x0B	; 11
    2640:	af 0e       	add	r10, r31
    2642:	b1 1c       	adc	r11, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:458

    return true;
  }

  bool parseNumericValue(VariantData &result) {
    uint8_t n = 0;
    2644:	f1 2c       	mov	r15, r1
    2646:	9a 2c       	mov	r9, r10
    2648:	cb 2c       	mov	r12, r11
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:461

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    264a:	8e 2d       	mov	r24, r14
    264c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>
    2650:	88 23       	and	r24, r24
    2652:	09 f4       	brne	.+2      	; 0x2656 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x60>
    2654:	ab c0       	rjmp	.+342    	; 0x27ac <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1b6>
    2656:	8f e3       	ldi	r24, 0x3F	; 63
    2658:	f8 16       	cp	r15, r24
    265a:	09 f4       	brne	.+2      	; 0x265e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x68>
    265c:	a7 c0       	rjmp	.+334    	; 0x27ac <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1b6>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    265e:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:463
      move();
      _buffer[n++] = c;
    2660:	f3 94       	inc	r15
    2662:	f5 01       	movw	r30, r10
    2664:	e1 92       	st	Z+, r14
    2666:	5f 01       	movw	r10, r30
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:464
      c = current();
    2668:	ce 01       	movw	r24, r28
    266a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    266e:	e8 2e       	mov	r14, r24
    2670:	ec cf       	rjmp	.-40     	; 0x264a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x54>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:66
  bool parseVariant(VariantData &variant, TFilter filter,
                    NestingLimit nestingLimit) {
    if (!skipSpacesAndComments())
      return false;

    switch (current()) {
    2672:	8b 35       	cpi	r24, 0x5B	; 91
    2674:	e1 f0       	breq	.+56     	; 0x26ae <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xb8>
    2676:	8b 37       	cpi	r24, 0x7B	; 123
    2678:	e9 f6       	brne	.-70     	; 0x2634 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x3e>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    267a:	f8 01       	movw	r30, r16
    267c:	84 81       	ldd	r24, Z+4	; 0x04
    267e:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    2680:	80 62       	ori	r24, 0x20	; 32
    2682:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:52
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
    2684:	11 82       	std	Z+1, r1	; 0x01
    2686:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:53
  _tail = 0;
    2688:	13 82       	std	Z+3, r1	; 0x03
    268a:	12 82       	std	Z+2, r1	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:75
        else
          return skipArray(nestingLimit);

      case '{':
        if (filter.allowObject())
          return parseObject(variant.toObject(), filter, nestingLimit);
    268c:	2e 2d       	mov	r18, r14
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	b8 01       	movw	r22, r16
    2692:	ce 01       	movw	r24, r28
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:92
        if (filter.allowValue())
          return parseNumericValue(variant);
        else
          return skipNumericValue();
    }
  }
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
    26a4:	bf 90       	pop	r11
    26a6:	af 90       	pop	r10
    26a8:	9f 90       	pop	r9
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:75
        else
          return skipArray(nestingLimit);

      case '{':
        if (filter.allowObject())
          return parseObject(variant.toObject(), filter, nestingLimit);
    26aa:	0c 94 06 14 	jmp	0x280c	; 0x280c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    26ae:	f8 01       	movw	r30, r16
    26b0:	84 81       	ldd	r24, Z+4	; 0x04
    26b2:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    26b4:	80 64       	ori	r24, 0x40	; 64
    26b6:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:52
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
    26b8:	11 82       	std	Z+1, r1	; 0x01
    26ba:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:53
  _tail = 0;
    26bc:	13 82       	std	Z+3, r1	; 0x03
    26be:	12 82       	std	Z+2, r1	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:117
  }

  template <typename TFilter>
  bool parseArray(CollectionData &array, TFilter filter,
                  NestingLimit nestingLimit) {
    if (nestingLimit.reached()) {
    26c0:	e1 10       	cpse	r14, r1
    26c2:	07 c0       	rjmp	.+14     	; 0x26d2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xdc>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:118
      _error = DeserializationError::TooDeep;
    26c4:	c5 5b       	subi	r28, 0xB5	; 181
    26c6:	df 4f       	sbci	r29, 0xFF	; 255
    26c8:	85 e0       	ldi	r24, 0x05	; 5
    26ca:	90 e0       	ldi	r25, 0x00	; 0
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:472

    c = _buffer[0];
    if (c == 't') {  // true
      result.setBoolean(true);
      if (n != 4) {
        _error = DeserializationError::IncompleteInput;
    26cc:	99 83       	std	Y+1, r25	; 0x01
    26ce:	88 83       	st	Y, r24
    26d0:	a5 cf       	rjmp	.-182    	; 0x261c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    26d2:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Skip opening braket
    ARDUINOJSON_ASSERT(current() == '[');
    move();

    // Skip spaces
    if (!skipSpacesAndComments())
    26d4:	ce 01       	movw	r24, r28
    26d6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    26da:	88 23       	and	r24, r24
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xea>
    26de:	9e cf       	rjmp	.-196    	; 0x261c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:131
      return false;

    // Empty array?
    if (eat(']'))
    26e0:	6d e5       	ldi	r22, 0x5D	; 93
    26e2:	ce 01       	movw	r24, r28
    26e4:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    26e8:	f8 2e       	mov	r15, r24
_ZNK17ArduinoJson6194_112NestingLimit9decrementEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/NestingLimit.hpp:19
  NestingLimit() : _value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
  explicit NestingLimit(uint8_t n) : _value(n) {}

  NestingLimit decrement() const {
    ARDUINOJSON_ASSERT(_value > 0);
    return NestingLimit(static_cast<uint8_t>(_value - 1));
    26ea:	ea 94       	dec	r14
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:131
    26ec:	88 23       	and	r24, r24
    26ee:	71 f0       	breq	.+28     	; 0x270c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x116>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:132
      return true;
    26f0:	fd 2c       	mov	r15, r13
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:92
        if (filter.allowValue())
          return parseNumericValue(variant);
        else
          return skipNumericValue();
    }
  }
    26f2:	8f 2d       	mov	r24, r15
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	9f 90       	pop	r9
    270a:	08 95       	ret
_ZN17ArduinoJson6194_114CollectionData10addElementEPNS_10MemoryPoolE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:36
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
  return slotData(addSlot(pool));
    270c:	69 85       	ldd	r22, Y+9	; 0x09
    270e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2710:	c8 01       	movw	r24, r16
    2712:	0e 94 ce 08 	call	0x119c	; 0x119c <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:141
    // Read each value
    for (;;) {
      if (memberFilter.allow()) {
        // Allocate slot in array
        VariantData *value = array.addElement(_pool);
        if (!value) {
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	39 f4       	brne	.+14     	; 0x2728 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x132>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:142
          _error = DeserializationError::NoMemory;
    271a:	c5 5b       	subi	r28, 0xB5	; 181
    271c:	df 4f       	sbci	r29, 0xFF	; 255
    271e:	84 e0       	ldi	r24, 0x04	; 4
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	99 83       	std	Y+1, r25	; 0x01
    2724:	88 83       	st	Y, r24
    2726:	e5 cf       	rjmp	.-54     	; 0x26f2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfc>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:147
          return false;
        }

        // 1 - Parse value
        if (!parseVariant(*value, memberFilter, nestingLimit.decrement()))
    2728:	2e 2d       	mov	r18, r14
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	bc 01       	movw	r22, r24
    272e:	ce 01       	movw	r24, r28
    2730:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
    2734:	88 23       	and	r24, r24
    2736:	09 f4       	brne	.+2      	; 0x273a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x144>
    2738:	71 cf       	rjmp	.-286    	; 0x261c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:155
        if (!skipVariant(nestingLimit.decrement()))
          return false;
      }

      // 2 - Skip spaces
      if (!skipSpacesAndComments())
    273a:	ce 01       	movw	r24, r28
    273c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    2740:	88 23       	and	r24, r24
    2742:	09 f4       	brne	.+2      	; 0x2746 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x150>
    2744:	6b cf       	rjmp	.-298    	; 0x261c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:159
        return false;

      // 3 - More values?
      if (eat(']'))
    2746:	6d e5       	ldi	r22, 0x5D	; 93
    2748:	ce 01       	movw	r24, r28
    274a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    274e:	81 11       	cpse	r24, r1
    2750:	cf cf       	rjmp	.-98     	; 0x26f0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:161
        return true;
      if (!eat(',')) {
    2752:	6c e2       	ldi	r22, 0x2C	; 44
    2754:	ce 01       	movw	r24, r28
    2756:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    275a:	81 11       	cpse	r24, r1
    275c:	d7 cf       	rjmp	.-82     	; 0x270c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x116>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:162
        _error = DeserializationError::InvalidInput;
    275e:	c5 5b       	subi	r28, 0xB5	; 181
    2760:	df 4f       	sbci	r29, 0xFF	; 255
    2762:	83 e0       	ldi	r24, 0x03	; 3
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	b2 cf       	rjmp	.-156    	; 0x26cc <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xd6>
_ZN17ArduinoJson6194_111StringMover11startStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:17
class StringMover {
 public:
  StringMover(char* ptr) : _writePtr(ptr) {}

  void startString() {
    _startPtr = _writePtr;
    2768:	88 81       	ld	r24, Y
    276a:	99 81       	ldd	r25, Y+1	; 0x01
    276c:	9b 83       	std	Y+3, r25	; 0x03
    276e:	8a 83       	std	Y+2, r24	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE16parseStringValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:346
    }
  }

  bool parseStringValue(VariantData &variant) {
    _stringStorage.startString();
    if (!parseQuotedString())
    2770:	ce 01       	movw	r24, r28
    2772:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()>
    2776:	f8 2e       	mov	r15, r24
    2778:	88 23       	and	r24, r24
    277a:	09 f4       	brne	.+2      	; 0x277e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x188>
    277c:	4f cf       	rjmp	.-354    	; 0x261c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZNK17ArduinoJson6194_111StringMover3strEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:35
  bool isValid() const {
    return true;
  }

  String str() const {
    _writePtr[0] = 0;  // terminator
    277e:	e8 81       	ld	r30, Y
    2780:	f9 81       	ldd	r31, Y+1	; 0x01
    2782:	10 82       	st	Z, r1
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    2784:	28 81       	ld	r18, Y
    2786:	39 81       	ldd	r19, Y+1	; 0x01
    2788:	4a 81       	ldd	r20, Y+2	; 0x02
    278a:	5b 81       	ldd	r21, Y+3	; 0x03
_ZN17ArduinoJson6194_111StringMover4saveEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:22
    _startPtr = _writePtr;
  }

  FORCE_INLINE String save() {
    String s = str();
    _writePtr++;
    278c:	c9 01       	movw	r24, r18
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	99 83       	std	Y+1, r25	; 0x01
    2792:	88 83       	st	Y, r24
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    2794:	f8 01       	movw	r30, r16
    2796:	84 81       	ldd	r24, Z+4	; 0x04
    2798:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    279a:	84 60       	ori	r24, 0x04	; 4
    279c:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData9setStringENS_6StringE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:217
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
      setType(VALUE_IS_LINKED_STRING);
    else
      setType(VALUE_IS_OWNED_STRING);
    _content.asString.data = s.c_str();
    279e:	51 83       	std	Z+1, r21	; 0x01
    27a0:	40 83       	st	Z, r20
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    _writePtr[0] = 0;  // terminator
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    27a2:	24 1b       	sub	r18, r20
    27a4:	35 0b       	sbc	r19, r21
_ZN17ArduinoJson6194_111VariantData9setStringENS_6StringE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:218
    _content.asString.size = s.size();
    27a6:	33 83       	std	Z+3, r19	; 0x03
    27a8:	22 83       	std	Z+2, r18	; 0x02
    27aa:	a3 cf       	rjmp	.-186    	; 0x26f2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfc>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:466
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      _buffer[n++] = c;
      c = current();
    }
    _buffer[n] = 0;
    27ac:	fe 01       	movw	r30, r28
    27ae:	ef 0d       	add	r30, r15
    27b0:	f1 1d       	adc	r31, r1
    27b2:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:468

    c = _buffer[0];
    27b4:	8b 85       	ldd	r24, Y+11	; 0x0b
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:469
    if (c == 't') {  // true
    27b6:	84 37       	cpi	r24, 0x74	; 116
    27b8:	81 f4       	brne	.+32     	; 0x27da <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1e4>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    27ba:	f8 01       	movw	r30, r16
    27bc:	84 81       	ldd	r24, Z+4	; 0x04
    27be:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    27c0:	86 60       	ori	r24, 0x06	; 6
    27c2:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData10setBooleanEb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:163
      _content.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
    _content.asBoolean = value;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	80 83       	st	Z, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:471
      result.setBoolean(true);
      if (n != 4) {
    27c8:	f4 e0       	ldi	r31, 0x04	; 4
    27ca:	ff 16       	cp	r15, r31
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1da>
    27ce:	90 cf       	rjmp	.-224    	; 0x26f0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:472
        _error = DeserializationError::IncompleteInput;
    27d0:	c5 5b       	subi	r28, 0xB5	; 181
    27d2:	df 4f       	sbci	r29, 0xFF	; 255
    27d4:	82 e0       	ldi	r24, 0x02	; 2
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	79 cf       	rjmp	.-270    	; 0x26cc <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xd6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:477
        return false;
      }
      return true;
    }
    if (c == 'f') {  // false
    27da:	86 36       	cpi	r24, 0x66	; 102
    27dc:	41 f4       	brne	.+16     	; 0x27ee <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1f8>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    27de:	f8 01       	movw	r30, r16
    27e0:	84 81       	ldd	r24, Z+4	; 0x04
    27e2:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    27e4:	86 60       	ori	r24, 0x06	; 6
    27e6:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData10setBooleanEb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:163
      _content.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
    _content.asBoolean = value;
    27e8:	10 82       	st	Z, r1
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:479
      result.setBoolean(false);
      if (n != 5) {
    27ea:	f5 e0       	ldi	r31, 0x05	; 5
    27ec:	ee cf       	rjmp	.-36     	; 0x27ca <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1d4>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:485
        _error = DeserializationError::IncompleteInput;
        return false;
      }
      return true;
    }
    if (c == 'n') {  // null
    27ee:	8e 36       	cpi	r24, 0x6E	; 110
    27f0:	21 f4       	brne	.+8      	; 0x27fa <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x204>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:487
      // the variant is already null
      if (n != 4) {
    27f2:	84 e0       	ldi	r24, 0x04	; 4
    27f4:	f8 12       	cpse	r15, r24
    27f6:	ec cf       	rjmp	.-40     	; 0x27d0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1da>
    27f8:	7b cf       	rjmp	.-266    	; 0x26f0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:494
        return false;
      }
      return true;
    }

    if (!parseNumber(_buffer, result)) {
    27fa:	b8 01       	movw	r22, r16
    27fc:	89 2d       	mov	r24, r9
    27fe:	9c 2d       	mov	r25, r12
    2800:	0e 94 76 09 	call	0x12ec	; 0x12ec <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>
    2804:	88 23       	and	r24, r24
    2806:	09 f4       	brne	.+2      	; 0x280a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x214>
    2808:	aa cf       	rjmp	.-172    	; 0x275e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x168>
    280a:	72 cf       	rjmp	.-284    	; 0x26f0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>

0000280c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:199
      }
    }
  }

  template <typename TFilter>
  bool parseObject(CollectionData &object, TFilter filter,
    280c:	af 92       	push	r10
    280e:	bf 92       	push	r11
    2810:	cf 92       	push	r12
    2812:	df 92       	push	r13
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:201
                   NestingLimit nestingLimit) {
    if (nestingLimit.reached()) {
    281e:	21 11       	cpse	r18, r1
    2820:	13 c0       	rjmp	.+38     	; 0x2848 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x3c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:202
      _error = DeserializationError::TooDeep;
    2822:	ec 01       	movw	r28, r24
    2824:	c5 5b       	subi	r28, 0xB5	; 181
    2826:	df 4f       	sbci	r29, 0xFF	; 255
    2828:	85 e0       	ldi	r24, 0x05	; 5
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	99 83       	std	Y+1, r25	; 0x01
    282e:	88 83       	st	Y, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:203
      return false;
    2830:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:281

      // Skip spaces
      if (!skipSpacesAndComments())
        return false;
    }
  }
    2832:	81 2f       	mov	r24, r17
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	1f 91       	pop	r17
    283a:	0f 91       	pop	r16
    283c:	ff 90       	pop	r15
    283e:	df 90       	pop	r13
    2840:	cf 90       	pop	r12
    2842:	bf 90       	pop	r11
    2844:	af 90       	pop	r10
    2846:	08 95       	ret
    2848:	f2 2e       	mov	r15, r18
    284a:	6b 01       	movw	r12, r22
    284c:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    284e:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:211
    // Skip opening brace
    ARDUINOJSON_ASSERT(current() == '{');
    move();

    // Skip spaces
    if (!skipSpacesAndComments())
    2850:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    2854:	18 2f       	mov	r17, r24
    2856:	88 23       	and	r24, r24
    2858:	61 f3       	breq	.-40     	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:215
      return false;

    // Empty object?
    if (eat('}'))
    285a:	6d e7       	ldi	r22, 0x7D	; 125
    285c:	ce 01       	movw	r24, r28
    285e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    2862:	18 2f       	mov	r17, r24
    2864:	81 11       	cpse	r24, r1
    2866:	e5 cf       	rjmp	.-54     	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZNK17ArduinoJson6194_112NestingLimit9decrementEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/NestingLimit.hpp:19
    2868:	fa 94       	dec	r15
_ZN17ArduinoJson6194_111StringMover11startStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:17
class StringMover {
 public:
  StringMover(char* ptr) : _writePtr(ptr) {}

  void startString() {
    _startPtr = _writePtr;
    286a:	88 81       	ld	r24, Y
    286c:	99 81       	ldd	r25, Y+1	; 0x01
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	8a 83       	std	Y+2, r24	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE8parseKeyEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:337
    }
  }

  bool parseKey() {
    _stringStorage.startString();
    if (isQuote(current())) {
    2872:	ce 01       	movw	r24, r28
    2874:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE7isQuoteEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:540
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    2878:	87 32       	cpi	r24, 0x27	; 39
    287a:	89 f0       	breq	.+34     	; 0x289e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x92>
    287c:	82 32       	cpi	r24, 0x22	; 34
    287e:	79 f0       	breq	.+30     	; 0x289e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x92>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE20parseNonQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:413

    return true;
  }

  bool parseNonQuotedString() {
    char c = current();
    2880:	ce 01       	movw	r24, r28
    2882:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    2886:	08 2f       	mov	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:416
    ARDUINOJSON_ASSERT(c);

    if (canBeInNonQuotedString(c)) {  // no quotes
    2888:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>
    288c:	81 11       	cpse	r24, r1
    288e:	3b c0       	rjmp	.+118    	; 0x2906 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:423
        move();
        _stringStorage.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      _error = DeserializationError::InvalidInput;
    2890:	c5 5b       	subi	r28, 0xB5	; 181
    2892:	df 4f       	sbci	r29, 0xFF	; 255
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	90 e0       	ldi	r25, 0x00	; 0
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:248
          key = _stringStorage.save();

          // Allocate slot in object
          VariantSlot *slot = object.addSlot(_pool);
          if (!slot) {
            _error = DeserializationError::NoMemory;
    2898:	99 83       	std	Y+1, r25	; 0x01
    289a:	88 83       	st	Y, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:249
            return false;
    289c:	ca cf       	rjmp	.-108    	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE8parseKeyEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:338
  }

  bool parseKey() {
    _stringStorage.startString();
    if (isQuote(current())) {
      return parseQuotedString();
    289e:	ce 01       	movw	r24, r28
    28a0:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:221
      return true;

    // Read each key value pair
    for (;;) {
      // Parse key
      if (!parseKey())
    28a4:	88 23       	and	r24, r24
    28a6:	29 f2       	breq	.-118    	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:225
        return false;

      // Skip spaces
      if (!skipSpacesAndComments())
    28a8:	ce 01       	movw	r24, r28
    28aa:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    28ae:	88 23       	and	r24, r24
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xa8>
    28b2:	bf cf       	rjmp	.-130    	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:229
        return false;

      // Colon
      if (!eat(':')) {
    28b4:	6a e3       	ldi	r22, 0x3A	; 58
    28b6:	ce 01       	movw	r24, r28
    28b8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    28bc:	88 23       	and	r24, r24
    28be:	41 f3       	breq	.-48     	; 0x2890 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x84>
_ZNK17ArduinoJson6194_111StringMover3strEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:35
  bool isValid() const {
    return true;
  }

  String str() const {
    _writePtr[0] = 0;  // terminator
    28c0:	e8 81       	ld	r30, Y
    28c2:	f9 81       	ldd	r31, Y+1	; 0x01
    28c4:	10 82       	st	Z, r1
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    28c6:	a8 80       	ld	r10, Y
    28c8:	b9 80       	ldd	r11, Y+1	; 0x01
    28ca:	6a 81       	ldd	r22, Y+2	; 0x02
    28cc:	7b 81       	ldd	r23, Y+3	; 0x03
_ZNK17ArduinoJson6194_114CollectionData9getMemberINS_23ZeroTerminatedRamStringEEEPNS_11VariantDataET_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:139
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
    28ce:	c6 01       	movw	r24, r12
    28d0:	0e 94 92 08 	call	0x1124	; 0x1124 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]>
_ZN17ArduinoJson6194_111VariantSlot4dataEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:33
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
    return reinterpret_cast<VariantData*>(&_content);
    28d4:	bc 01       	movw	r22, r24
_ZNK17ArduinoJson6194_114CollectionData9getMemberINS_23ZeroTerminatedRamStringEEEPNS_11VariantDataET_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:140
  return slot ? slot->data() : 0;
    28d6:	89 2b       	or	r24, r25
    28d8:	69 f5       	brne	.+90     	; 0x2934 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x128>
_ZNK17ArduinoJson6194_111StringMover3strEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:35
  bool isValid() const {
    return true;
  }

  String str() const {
    _writePtr[0] = 0;  // terminator
    28da:	f5 01       	movw	r30, r10
    28dc:	10 82       	st	Z, r1
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    28de:	aa 80       	ldd	r10, Y+2	; 0x02
    28e0:	bb 80       	ldd	r11, Y+3	; 0x03
_ZN17ArduinoJson6194_111StringMover4saveEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:22
    _startPtr = _writePtr;
  }

  FORCE_INLINE String save() {
    String s = str();
    _writePtr++;
    28e2:	88 81       	ld	r24, Y
    28e4:	99 81       	ldd	r25, Y+1	; 0x01
    28e6:	01 96       	adiw	r24, 0x01	; 1
    28e8:	99 83       	std	Y+1, r25	; 0x01
    28ea:	88 83       	st	Y, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:246
          // Save key in memory pool.
          // This MUST be done before adding the slot.
          key = _stringStorage.save();

          // Allocate slot in object
          VariantSlot *slot = object.addSlot(_pool);
    28ec:	69 85       	ldd	r22, Y+9	; 0x09
    28ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    28f0:	c6 01       	movw	r24, r12
    28f2:	0e 94 ce 08 	call	0x119c	; 0x119c <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
    28f6:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:247
          if (!slot) {
    28f8:	89 2b       	or	r24, r25
    28fa:	b1 f4       	brne	.+44     	; 0x2928 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x11c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:248
            _error = DeserializationError::NoMemory;
    28fc:	c5 5b       	subi	r28, 0xB5	; 181
    28fe:	df 4f       	sbci	r29, 0xFF	; 255
    2900:	84 e0       	ldi	r24, 0x04	; 4
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	c9 cf       	rjmp	.-110    	; 0x2898 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x8c>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    2906:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    return s;
  }

  void append(char c) {
    *_writePtr++ = c;
    2908:	e8 81       	ld	r30, Y
    290a:	f9 81       	ldd	r31, Y+1	; 0x01
    290c:	cf 01       	movw	r24, r30
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	99 83       	std	Y+1, r25	; 0x01
    2912:	88 83       	st	Y, r24
    2914:	00 83       	st	Z, r16
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE20parseNonQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:420

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        _stringStorage.append(c);
        c = current();
    2916:	ce 01       	movw	r24, r28
    2918:	0e 94 68 11 	call	0x22d0	; 0x22d0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    291c:	08 2f       	mov	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:421
      } while (canBeInNonQuotedString(c));
    291e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>
    2922:	81 11       	cpse	r24, r1
    2924:	f0 cf       	rjmp	.-32     	; 0x2906 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
    2926:	c0 cf       	rjmp	.-128    	; 0x28a8 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x9c>
_ZN17ArduinoJson6194_111VariantSlot6setKeyENS_6StringE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:82
  }

  void setKey(String k) {
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
      _flags &= VALUE_MASK;
    2928:	84 81       	ldd	r24, Z+4	; 0x04
    292a:	8f 77       	andi	r24, 0x7F	; 127
    292c:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:85
    else
      _flags |= OWNED_KEY_BIT;
    _key = k.c_str();
    292e:	b7 82       	std	Z+7, r11	; 0x07
    2930:	a6 82       	std	Z+6, r10	; 0x06
_ZN17ArduinoJson6194_111VariantSlot4dataEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:33
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
    return reinterpret_cast<VariantData*>(&_content);
    2932:	bf 01       	movw	r22, r30
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:258

          variant = slot->data();
        }

        // Parse value
        if (!parseVariant(*variant, memberFilter, nestingLimit.decrement()))
    2934:	2f 2d       	mov	r18, r15
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	ce 01       	movw	r24, r28
    293a:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
    293e:	88 23       	and	r24, r24
    2940:	09 f4       	brne	.+2      	; 0x2944 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x138>
    2942:	77 cf       	rjmp	.-274    	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:266
        if (!skipVariant(nestingLimit.decrement()))
          return false;
      }

      // Skip spaces
      if (!skipSpacesAndComments())
    2944:	ce 01       	movw	r24, r28
    2946:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    294a:	88 23       	and	r24, r24
    294c:	09 f4       	brne	.+2      	; 0x2950 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x144>
    294e:	71 cf       	rjmp	.-286    	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:270
        return false;

      // More keys/values?
      if (eat('}'))
    2950:	6d e7       	ldi	r22, 0x7D	; 125
    2952:	ce 01       	movw	r24, r28
    2954:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    2958:	81 11       	cpse	r24, r1
    295a:	0d c0       	rjmp	.+26     	; 0x2976 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x16a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:272
        return true;
      if (!eat(',')) {
    295c:	6c e2       	ldi	r22, 0x2C	; 44
    295e:	ce 01       	movw	r24, r28
    2960:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    2964:	88 23       	and	r24, r24
    2966:	09 f4       	brne	.+2      	; 0x296a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x15e>
    2968:	93 cf       	rjmp	.-218    	; 0x2890 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x84>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:278
        _error = DeserializationError::InvalidInput;
        return false;
      }

      // Skip spaces
      if (!skipSpacesAndComments())
    296a:	ce 01       	movw	r24, r28
    296c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    2970:	81 11       	cpse	r24, r1
    2972:	7b cf       	rjmp	.-266    	; 0x286a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x5e>
    2974:	5e cf       	rjmp	.-324    	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:271
      if (!skipSpacesAndComments())
        return false;

      // More keys/values?
      if (eat('}'))
        return true;
    2976:	18 2f       	mov	r17, r24
    2978:	5c cf       	rjmp	.-328    	; 0x2832 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>

0000297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>:
_ZNK17ArduinoJson6194_111VariantData9getMemberINS_23ZeroTerminatedRamStringEEEPS0_T_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:278
    return _content.asCollection.getOrAddElement(index, pool);
  }

  template <typename TAdaptedString>
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.getMember(key) : 0;
    297a:	fc 01       	movw	r30, r24
    297c:	24 81       	ldd	r18, Z+4	; 0x04
    297e:	25 fd       	sbrc	r18, 5
_ZNK17ArduinoJson6194_114CollectionData9getMemberINS_23ZeroTerminatedRamStringEEEPNS_11VariantDataET_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:139 (discriminator 1)
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
    2980:	0c 94 92 08 	jmp	0x1124	; 0x1124 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.28]>
_ZNK17ArduinoJson6194_111VariantData9getMemberINS_23ZeroTerminatedRamStringEEEPS0_T_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:279 (discriminator 4)
  }
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	08 95       	ret

0000298a <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>:
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEPKhj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:20

  void write(uint8_t c) {
    _count += _writer.write(c);
  }

  void write(const uint8_t* s, size_t n) {
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_16WriterI14HardwareSerialvE5writeEPKhj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/Writers/PrintWriter.hpp:23
  size_t write(uint8_t c) {
    return _print->write(c);
  }

  size_t write(const uint8_t* s, size_t n) {
    return _print->write(s, n);
    2990:	88 81       	ld	r24, Y
    2992:	99 81       	ldd	r25, Y+1	; 0x01
    2994:	dc 01       	movw	r26, r24
    2996:	ed 91       	ld	r30, X+
    2998:	fc 91       	ld	r31, X
    299a:	02 80       	ldd	r0, Z+2	; 0x02
    299c:	f3 81       	ldd	r31, Z+3	; 0x03
    299e:	e0 2d       	mov	r30, r0
    29a0:	09 95       	icall
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEPKhj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:21
    _count += _writer.write(s, n);
    29a2:	2a 81       	ldd	r18, Y+2	; 0x02
    29a4:	3b 81       	ldd	r19, Y+3	; 0x03
    29a6:	82 0f       	add	r24, r18
    29a8:	93 1f       	adc	r25, r19
    29aa:	9b 83       	std	Y+3, r25	; 0x03
    29ac:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:22
  }
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	08 95       	ret

000029b4 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>:
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:145
    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
    29b4:	fb 01       	movw	r30, r22
    29b6:	01 90       	ld	r0, Z+
    29b8:	00 20       	and	r0, r0
    29ba:	e9 f7       	brne	.-6      	; 0x29b6 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)+0x2>
    29bc:	31 97       	sbiw	r30, 0x01	; 1
    29be:	af 01       	movw	r20, r30
    29c0:	46 1b       	sub	r20, r22
    29c2:	57 0b       	sbc	r21, r23
    29c4:	0c 94 c5 14 	jmp	0x298a	; 0x298a <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>

000029c8 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)>:
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:112
    }
    writeInteger(unsigned_value);
  }

  template <typename T>
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
    29c8:	8f 92       	push	r8
    29ca:	9f 92       	push	r9
    29cc:	af 92       	push	r10
    29ce:	bf 92       	push	r11
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	66 97       	sbiw	r28, 0x16	; 22
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	6c 01       	movw	r12, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:115
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
    29f2:	8e 01       	movw	r16, r28
    29f4:	09 5e       	subi	r16, 0xE9	; 233
    29f6:	1f 4f       	sbci	r17, 0xFF	; 255
    29f8:	78 01       	movw	r14, r16
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:119

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
    29fa:	8a e0       	ldi	r24, 0x0A	; 10
    29fc:	88 2e       	mov	r8, r24
    29fe:	91 2c       	mov	r9, r1
    2a00:	a1 2c       	mov	r10, r1
    2a02:	b1 2c       	mov	r11, r1
    2a04:	cb 01       	movw	r24, r22
    2a06:	ba 01       	movw	r22, r20
    2a08:	a5 01       	movw	r20, r10
    2a0a:	94 01       	movw	r18, r8
    2a0c:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    2a10:	94 2f       	mov	r25, r20
    2a12:	85 2f       	mov	r24, r21
    2a14:	60 5d       	subi	r22, 0xD0	; 208
    2a16:	f8 01       	movw	r30, r16
    2a18:	62 93       	st	-Z, r22
    2a1a:	8f 01       	movw	r16, r30
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:120
      value = T(value / 10);
    2a1c:	a9 01       	movw	r20, r18
    2a1e:	69 2f       	mov	r22, r25
    2a20:	78 2f       	mov	r23, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:118
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
    2a22:	41 15       	cp	r20, r1
    2a24:	51 05       	cpc	r21, r1
    2a26:	61 05       	cpc	r22, r1
    2a28:	71 05       	cpc	r23, r1
    2a2a:	61 f7       	brne	.-40     	; 0x2a04 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)+0x3c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:154
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
                  static_cast<size_t>(end - begin));
    2a2c:	a7 01       	movw	r20, r14
    2a2e:	4e 1b       	sub	r20, r30
    2a30:	5f 0b       	sbc	r21, r31
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:153
  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
    2a32:	bf 01       	movw	r22, r30
    2a34:	c6 01       	movw	r24, r12
    2a36:	0e 94 c5 14 	call	0x298a	; 0x298a <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:125
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
  }
    2a3a:	66 96       	adiw	r28, 0x16	; 22
    2a3c:	0f b6       	in	r0, 0x3f	; 63
    2a3e:	f8 94       	cli
    2a40:	de bf       	out	0x3e, r29	; 62
    2a42:	0f be       	out	0x3f, r0	; 63
    2a44:	cd bf       	out	0x3d, r28	; 61
    2a46:	df 91       	pop	r29
    2a48:	cf 91       	pop	r28
    2a4a:	1f 91       	pop	r17
    2a4c:	0f 91       	pop	r16
    2a4e:	ff 90       	pop	r15
    2a50:	ef 90       	pop	r14
    2a52:	df 90       	pop	r13
    2a54:	cf 90       	pop	r12
    2a56:	bf 90       	pop	r11
    2a58:	af 90       	pop	r10
    2a5a:	9f 90       	pop	r9
    2a5c:	8f 90       	pop	r8
    2a5e:	08 95       	ret

00002a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>:
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:16
template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : _writer(writer), _count(0) {}

  void write(uint8_t c) {
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_16WriterI14HardwareSerialvE5writeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/Writers/PrintWriter.hpp:19
    typename enable_if<is_base_of< ::Print, TDestination>::value>::type> {
 public:
  explicit Writer(::Print& print) : _print(&print) {}

  size_t write(uint8_t c) {
    return _print->write(c);
    2a66:	88 81       	ld	r24, Y
    2a68:	99 81       	ldd	r25, Y+1	; 0x01
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	ed 91       	ld	r30, X+
    2a6e:	fc 91       	ld	r31, X
    2a70:	01 90       	ld	r0, Z+
    2a72:	f0 81       	ld	r31, Z
    2a74:	e0 2d       	mov	r30, r0
    2a76:	09 95       	icall
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:17
    _count += _writer.write(c);
    2a78:	2a 81       	ldd	r18, Y+2	; 0x02
    2a7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2a7c:	82 0f       	add	r24, r18
    2a7e:	93 1f       	adc	r25, r19
    2a80:	9b 83       	std	Y+3, r25	; 0x03
    2a82:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:18
  }
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	08 95       	ret

00002a8a <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)>:
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE9writeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:51
    writeRaw('\"');
    while (n--) writeChar(*value++);
    writeRaw('\"');
  }

  void writeChar(char c) {
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	ee e2       	ldi	r30, 0x2E	; 46
    2a92:	f1 e0       	ldi	r31, 0x01	; 1
_ZN17ArduinoJson6194_114EscapeSequence10escapeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:16
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(true);
    while (p[0] && p[1] != c) {
    2a94:	12 81       	ldd	r17, Z+2	; 0x02
    2a96:	11 23       	and	r17, r17
    2a98:	79 f0       	breq	.+30     	; 0x2ab8 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)+0x2e>
    2a9a:	32 96       	adiw	r30, 0x02	; 2
    2a9c:	21 81       	ldd	r18, Z+1	; 0x01
    2a9e:	62 13       	cpse	r22, r18
    2aa0:	f9 cf       	rjmp	.-14     	; 0x2a94 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)+0xa>
    2aa2:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2aa4:	6c e5       	ldi	r22, 0x5C	; 92
    2aa6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2aaa:	61 2f       	mov	r22, r17
    2aac:	ce 01       	movw	r24, r28
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE9writeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:61
    } else if (c) {
      writeRaw(c);
    } else {
      writeRaw("\\u0000");
    }
  }
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	1f 91       	pop	r17
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2ab4:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE9writeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:56
  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else if (c) {
    2ab8:	61 11       	cpse	r22, r1
    2aba:	f9 cf       	rjmp	.-14     	; 0x2aae <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)+0x24>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:59
      writeRaw(c);
    } else {
      writeRaw("\\u0000");
    2abc:	6f e3       	ldi	r22, 0x3F	; 63
    2abe:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:61
    }
  }
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:59
      writeRaw('\\');
      writeRaw(specialChar);
    } else if (c) {
      writeRaw(c);
    } else {
      writeRaw("\\u0000");
    2ac6:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>

00002aca <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>:
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:41
  void init() {
    _flags = VALUE_IS_NULL;
  }

  template <typename TVisitor>
  typename TVisitor::result_type accept(TVisitor &visitor) const {
    2aca:	2f 92       	push	r2
    2acc:	3f 92       	push	r3
    2ace:	4f 92       	push	r4
    2ad0:	5f 92       	push	r5
    2ad2:	6f 92       	push	r6
    2ad4:	7f 92       	push	r7
    2ad6:	8f 92       	push	r8
    2ad8:	9f 92       	push	r9
    2ada:	af 92       	push	r10
    2adc:	bf 92       	push	r11
    2ade:	cf 92       	push	r12
    2ae0:	df 92       	push	r13
    2ae2:	ef 92       	push	r14
    2ae4:	ff 92       	push	r15
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	6c 97       	sbiw	r28, 0x1c	; 28
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	8c 01       	movw	r16, r24
    2b00:	1b 01       	movw	r2, r22
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    2b02:	dc 01       	movw	r26, r24
    2b04:	14 96       	adiw	r26, 0x04	; 4
    2b06:	8c 91       	ld	r24, X
    2b08:	14 97       	sbiw	r26, 0x04	; 4
    2b0a:	8f 77       	andi	r24, 0x7F	; 127
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:42
    _flags = VALUE_IS_NULL;
  }

  template <typename TVisitor>
  typename TVisitor::result_type accept(TVisitor &visitor) const {
    switch (type()) {
    2b0c:	86 30       	cpi	r24, 0x06	; 6
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48>
    2b10:	92 c2       	rjmp	.+1316   	; 0x3036 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x56c>
    2b12:	68 f5       	brcc	.+90     	; 0x2b6e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xa4>
    2b14:	82 30       	cpi	r24, 0x02	; 2
    2b16:	a0 f1       	brcs	.+104    	; 0x2b80 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
    2b18:	12 96       	adiw	r26, 0x02	; 2
    2b1a:	ed 90       	ld	r14, X+
    2b1c:	fc 90       	ld	r15, X
    2b1e:	13 97       	sbiw	r26, 0x03	; 3
    2b20:	cc 90       	ld	r12, X
    2b22:	11 96       	adiw	r26, 0x01	; 1
    2b24:	dc 90       	ld	r13, X
    2b26:	84 30       	cpi	r24, 0x04	; 4
    2b28:	08 f0       	brcs	.+2      	; 0x2b2c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x62>
    2b2a:	56 c2       	rjmp	.+1196   	; 0x2fd8 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x50e>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:149
  void writeRaw(const char *s) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
    2b2c:	a7 01       	movw	r20, r14
    2b2e:	b6 01       	movw	r22, r12
    2b30:	c1 01       	movw	r24, r2
    2b32:	0e 94 c5 14 	call	0x298a	; 0x298a <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
    2b36:	f1 01       	movw	r30, r2
    2b38:	82 81       	ldd	r24, Z+2	; 0x02
    2b3a:	93 81       	ldd	r25, Z+3	; 0x03
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:74
        return visitor.visitBoolean(_content.asBoolean != 0);

      default:
        return visitor.visitNull();
    }
  }
    2b3c:	6c 96       	adiw	r28, 0x1c	; 28
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	df 90       	pop	r13
    2b56:	cf 90       	pop	r12
    2b58:	bf 90       	pop	r11
    2b5a:	af 90       	pop	r10
    2b5c:	9f 90       	pop	r9
    2b5e:	8f 90       	pop	r8
    2b60:	7f 90       	pop	r7
    2b62:	6f 90       	pop	r6
    2b64:	5f 90       	pop	r5
    2b66:	4f 90       	pop	r4
    2b68:	3f 90       	pop	r3
    2b6a:	2f 90       	pop	r2
    2b6c:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:42
    _flags = VALUE_IS_NULL;
  }

  template <typename TVisitor>
  typename TVisitor::result_type accept(TVisitor &visitor) const {
    switch (type()) {
    2b6e:	8c 30       	cpi	r24, 0x0C	; 12
    2b70:	69 f1       	breq	.+90     	; 0x2bcc <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x102>
    2b72:	60 f4       	brcc	.+24     	; 0x2b8c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xc2>
    2b74:	88 30       	cpi	r24, 0x08	; 8
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb0>
    2b78:	59 c2       	rjmp	.+1202   	; 0x302c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x562>
    2b7a:	8a 30       	cpi	r24, 0x0A	; 10
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
    2b7e:	3f c2       	rjmp	.+1150   	; 0x2ffe <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x534>
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE9visitNullEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:98
    _formatter.writeBoolean(value);
    return bytesWritten();
  }

  size_t visitNull() {
    _formatter.writeRaw("null");
    2b80:	66 e4       	ldi	r22, 0x46	; 70
    2b82:	71 e0       	ldi	r23, 0x01	; 1
    2b84:	c1 01       	movw	r24, r2
    2b86:	0e 94 da 14 	call	0x29b4	; 0x29b4 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>
    2b8a:	e5 c1       	rjmp	.+970    	; 0x2f56 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48c>
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:42
    2b8c:	80 32       	cpi	r24, 0x20	; 32
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xc8>
    2b90:	ec c1       	rjmp	.+984    	; 0x2f6a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4a0>
    2b92:	80 34       	cpi	r24, 0x40	; 64
    2b94:	a9 f7       	brne	.-22     	; 0x2b80 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2b96:	6b e5       	ldi	r22, 0x5B	; 91
    2b98:	c1 01       	movw	r24, r2
    2b9a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	00 81       	ld	r16, Z
    2ba2:	11 81       	ldd	r17, Z+1	; 0x01
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE10visitArrayERKNS_14CollectionDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:27
  FORCE_INLINE size_t visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
    2ba4:	01 15       	cp	r16, r1
    2ba6:	11 05       	cpc	r17, r1
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xe2>
    2baa:	da c1       	rjmp	.+948    	; 0x2f60 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x496>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:28
      slot->data()->accept(*this);
    2bac:	b1 01       	movw	r22, r2
    2bae:	c8 01       	movw	r24, r16
    2bb0:	0e 94 65 15 	call	0x2aca	; 0x2aca <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:30

      slot = slot->next();
    2bb4:	c8 01       	movw	r24, r16
    2bb6:	0e 94 84 08 	call	0x1108	; 0x1108 <ArduinoJson6194_1::VariantSlot::next()>
    2bba:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:31
      if (slot == 0)
    2bbc:	89 2b       	or	r24, r25
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xf8>
    2bc0:	cf c1       	rjmp	.+926    	; 0x2f60 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x496>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
    2bc2:	6c e2       	ldi	r22, 0x2C	; 44
    2bc4:	c1 01       	movw	r24, r2
    2bc6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2bca:	ec cf       	rjmp	.-40     	; 0x2ba4 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xda>
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:44
      case VALUE_IS_FLOAT:
        return visitor.visitFloat(_content.asFloat);
    2bcc:	f8 01       	movw	r30, r16
    2bce:	c0 80       	ld	r12, Z
    2bd0:	d1 80       	ldd	r13, Z+1	; 0x01
    2bd2:	e2 80       	ldd	r14, Z+2	; 0x02
    2bd4:	f3 80       	ldd	r15, Z+3	; 0x03
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:65
    }
  }

  template <typename T>
  void writeFloat(T value) {
    if (isnan(value))
    2bd6:	a7 01       	movw	r20, r14
    2bd8:	96 01       	movw	r18, r12
    2bda:	c7 01       	movw	r24, r14
    2bdc:	b6 01       	movw	r22, r12
    2bde:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    2be2:	81 11       	cpse	r24, r1
    2be4:	cd cf       	rjmp	.-102    	; 0x2b80 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
_ZN17ArduinoJson6194_15isinfIdEEbT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/math.hpp:24
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
  return x != 0.0 && x * 2 == x;
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	a9 01       	movw	r20, r18
    2bec:	c7 01       	movw	r24, r14
    2bee:	b6 01       	movw	r22, r12
    2bf0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	79 f0       	breq	.+30     	; 0x2c16 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x14c>
    2bf8:	a7 01       	movw	r20, r14
    2bfa:	96 01       	movw	r18, r12
    2bfc:	c7 01       	movw	r24, r14
    2bfe:	b6 01       	movw	r22, r12
    2c00:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
    2c08:	c7 01       	movw	r24, r14
    2c0a:	b6 01       	movw	r22, r12
    2c0c:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x14c>
    2c14:	b5 cf       	rjmp	.-150    	; 0x2b80 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:80
      return writeRaw("Infinity");
#else
    if (isinf(value))
      return writeRaw("null");

    if (value < 0.0) {
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	a9 01       	movw	r20, r18
    2c1c:	c7 01       	movw	r24, r14
    2c1e:	b6 01       	movw	r22, r12
    2c20:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    2c24:	87 ff       	sbrs	r24, 7
    2c26:	08 c0       	rjmp	.+16     	; 0x2c38 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x16e>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2c28:	6d e2       	ldi	r22, 0x2D	; 45
    2c2a:	c1 01       	movw	r24, r2
    2c2c:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:82
    if (isinf(value))
      return writeRaw("null");

    if (value < 0.0) {
      writeRaw('-');
      value = -value;
    2c30:	f7 fa       	bst	r15, 7
    2c32:	f0 94       	com	r15
    2c34:	f7 f8       	bld	r15, 7
    2c36:	f0 94       	com	r15
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:64
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
    2c38:	20 e8       	ldi	r18, 0x80	; 128
    2c3a:	36 e9       	ldi	r19, 0x96	; 150
    2c3c:	48 e1       	ldi	r20, 0x18	; 24
    2c3e:	5b e4       	ldi	r21, 0x4B	; 75
    2c40:	c7 01       	movw	r24, r14
    2c42:	b6 01       	movw	r22, r12
    2c44:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2c48:	87 fd       	sbrc	r24, 7
    2c4a:	81 c0       	rjmp	.+258    	; 0x2d4e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x284>
    2c4c:	74 e1       	ldi	r23, 0x14	; 20
    2c4e:	a7 2e       	mov	r10, r23
    2c50:	b1 2c       	mov	r11, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:62
  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
    2c52:	00 e2       	ldi	r16, 0x20	; 32
    2c54:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:59
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
    2c56:	18 8e       	std	Y+24, r1	; 0x18
    2c58:	1f 8a       	std	Y+23, r1	; 0x17
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
}

template <typename T>
typename enable_if<is_same<T, uint32_t>::value, T>::type pgm_read(
    const void* p) {
  return pgm_read_dword(p);
    2c5a:	f5 01       	movw	r30, r10
    2c5c:	e2 5c       	subi	r30, 0xC2	; 194
    2c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c60:	25 91       	lpm	r18, Z+
    2c62:	35 91       	lpm	r19, Z+
    2c64:	45 91       	lpm	r20, Z+
    2c66:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:66
    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
    2c68:	c7 01       	movw	r24, r14
    2c6a:	b6 01       	movw	r22, r12
    2c6c:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2c70:	87 fd       	sbrc	r24, 7
    2c72:	13 c0       	rjmp	.+38     	; 0x2c9a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x1d0>
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    2c74:	f5 01       	movw	r30, r10
    2c76:	ea 5d       	subi	r30, 0xDA	; 218
    2c78:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7a:	25 91       	lpm	r18, Z+
    2c7c:	35 91       	lpm	r19, Z+
    2c7e:	45 91       	lpm	r20, Z+
    2c80:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:67
          value *= traits::negativeBinaryPowerOfTen(index);
    2c82:	c7 01       	movw	r24, r14
    2c84:	b6 01       	movw	r22, r12
    2c86:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    2c8a:	6b 01       	movw	r12, r22
    2c8c:	7c 01       	movw	r14, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:68
          powersOf10 = int16_t(powersOf10 + bit);
    2c8e:	2f 89       	ldd	r18, Y+23	; 0x17
    2c90:	38 8d       	ldd	r19, Y+24	; 0x18
    2c92:	20 0f       	add	r18, r16
    2c94:	31 1f       	adc	r19, r17
    2c96:	38 8f       	std	Y+24, r19	; 0x18
    2c98:	2f 8b       	std	Y+23, r18	; 0x17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:70
        }
        bit >>= 1;
    2c9a:	15 95       	asr	r17
    2c9c:	07 95       	ror	r16
    2c9e:	34 e0       	ldi	r19, 0x04	; 4
    2ca0:	a3 1a       	sub	r10, r19
    2ca2:	b1 08       	sbc	r11, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:65

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
    2ca4:	8c ef       	ldi	r24, 0xFC	; 252
    2ca6:	a8 16       	cp	r10, r24
    2ca8:	8f ef       	ldi	r24, 0xFF	; 255
    2caa:	b8 06       	cpc	r11, r24
    2cac:	b1 f6       	brne	.-84     	; 0x2c5a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x190>
    2cae:	55 24       	eor	r5, r5
    2cb0:	5a 94       	dec	r5
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:74
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	a9 01       	movw	r20, r18
    2cb8:	c7 01       	movw	r24, r14
    2cba:	b6 01       	movw	r22, r12
    2cbc:	0e 94 9f 30 	call	0x613e	; 0x613e <__gesf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	0c f0       	brlt	.+2      	; 0x2cc6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x1fc>
    2cc4:	4b c0       	rjmp	.+150    	; 0x2d5c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x292>
    2cc6:	2c ea       	ldi	r18, 0xAC	; 172
    2cc8:	35 ec       	ldi	r19, 0xC5	; 197
    2cca:	47 e2       	ldi	r20, 0x27	; 39
    2ccc:	57 e3       	ldi	r21, 0x37	; 55
    2cce:	c7 01       	movw	r24, r14
    2cd0:	b6 01       	movw	r22, r12
    2cd2:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	0c f4       	brge	.+2      	; 0x2cdc <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x212>
    2cda:	40 c0       	rjmp	.+128    	; 0x2d5c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x292>
    2cdc:	a5 2d       	mov	r26, r5
    2cde:	b4 e0       	ldi	r27, 0x04	; 4
    2ce0:	ab 02       	muls	r26, r27
    2ce2:	c0 01       	movw	r24, r0
    2ce4:	11 24       	eor	r1, r1
    2ce6:	b1 2c       	mov	r11, r1
    2ce8:	a1 2c       	mov	r10, r1
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    2cea:	fc 01       	movw	r30, r24
    2cec:	e2 5f       	subi	r30, 0xF2	; 242
    2cee:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf0:	3f 01       	movw	r6, r30
    2cf2:	9c 01       	movw	r18, r24
    2cf4:	22 5c       	subi	r18, 0xC2	; 194
    2cf6:	3e 4f       	sbci	r19, 0xFE	; 254
    2cf8:	49 01       	movw	r8, r18
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:75
      for (; index >= 0; index--) {
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	53 16       	cp	r5, r19
    2cfe:	71 f1       	breq	.+92     	; 0x2d5c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x292>
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    2d00:	f3 01       	movw	r30, r6
    2d02:	ea 0d       	add	r30, r10
    2d04:	fb 1d       	adc	r31, r11
    2d06:	25 91       	lpm	r18, Z+
    2d08:	35 91       	lpm	r19, Z+
    2d0a:	45 91       	lpm	r20, Z+
    2d0c:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:76
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
    2d0e:	c7 01       	movw	r24, r14
    2d10:	b6 01       	movw	r22, r12
    2d12:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <__cmpsf2>
    2d16:	87 ff       	sbrs	r24, 7
    2d18:	13 c0       	rjmp	.+38     	; 0x2d40 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x276>
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    2d1a:	f4 01       	movw	r30, r8
    2d1c:	ea 0d       	add	r30, r10
    2d1e:	fb 1d       	adc	r31, r11
    2d20:	25 91       	lpm	r18, Z+
    2d22:	35 91       	lpm	r19, Z+
    2d24:	45 91       	lpm	r20, Z+
    2d26:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:77
          value *= traits::positiveBinaryPowerOfTen(index);
    2d28:	c7 01       	movw	r24, r14
    2d2a:	b6 01       	movw	r22, r12
    2d2c:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    2d30:	6b 01       	movw	r12, r22
    2d32:	7c 01       	movw	r14, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:78
          powersOf10 = int16_t(powersOf10 - bit);
    2d34:	8f 89       	ldd	r24, Y+23	; 0x17
    2d36:	98 8d       	ldd	r25, Y+24	; 0x18
    2d38:	80 1b       	sub	r24, r16
    2d3a:	91 0b       	sbc	r25, r17
    2d3c:	98 8f       	std	Y+24, r25	; 0x18
    2d3e:	8f 8b       	std	Y+23, r24	; 0x17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:80
        }
        bit >>= 1;
    2d40:	15 95       	asr	r17
    2d42:	07 95       	ror	r16
    2d44:	5a 94       	dec	r5
    2d46:	94 e0       	ldi	r25, 0x04	; 4
    2d48:	a9 1a       	sub	r10, r25
    2d4a:	b1 08       	sbc	r11, r1
    2d4c:	d6 cf       	rjmp	.-84     	; 0x2cfa <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x230>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:62
  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
    2d4e:	00 e2       	ldi	r16, 0x20	; 32
    2d50:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:61

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    2d52:	55 e0       	ldi	r21, 0x05	; 5
    2d54:	55 2e       	mov	r5, r21
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:59
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
    2d56:	18 8e       	std	Y+24, r1	; 0x18
    2d58:	1f 8a       	std	Y+23, r1	; 0x17
    2d5a:	ab cf       	rjmp	.-170    	; 0x2cb2 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x1e8>
_ZN17ArduinoJson6194_110FloatPartsIdEC4Ed():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:26
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
    2d5c:	c7 01       	movw	r24, r14
    2d5e:	b6 01       	movw	r22, r12
    2d60:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__fixunssfsi>
    2d64:	4b 01       	movw	r8, r22
    2d66:	5c 01       	movw	r10, r24
    2d68:	2b 01       	movw	r4, r22
    2d6a:	3c 01       	movw	r6, r24
    2d6c:	06 e0       	ldi	r16, 0x06	; 6
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:21
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    2d6e:	80 e4       	ldi	r24, 0x40	; 64
    2d70:	92 e4       	ldi	r25, 0x42	; 66
    2d72:	af e0       	ldi	r26, 0x0F	; 15
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	89 8f       	std	Y+25, r24	; 0x19
    2d78:	9a 8f       	std	Y+26, r25	; 0x1a
    2d7a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d7c:	bc 8f       	std	Y+28, r27	; 0x1c
    2d7e:	10 2f       	mov	r17, r16
    2d80:	01 50       	subi	r16, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:28

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
    2d82:	9a e0       	ldi	r25, 0x0A	; 10
    2d84:	49 16       	cp	r4, r25
    2d86:	51 04       	cpc	r5, r1
    2d88:	61 04       	cpc	r6, r1
    2d8a:	71 04       	cpc	r7, r1
    2d8c:	c8 f0       	brcs	.+50     	; 0x2dc0 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x2f6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:29
      maxDecimalPart /= 10;
    2d8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d96:	2a e0       	ldi	r18, 0x0A	; 10
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    2da2:	29 8f       	std	Y+25, r18	; 0x19
    2da4:	3a 8f       	std	Y+26, r19	; 0x1a
    2da6:	4b 8f       	std	Y+27, r20	; 0x1b
    2da8:	5c 8f       	std	Y+28, r21	; 0x1c
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:28

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
    2daa:	c3 01       	movw	r24, r6
    2dac:	b2 01       	movw	r22, r4
    2dae:	2a e0       	ldi	r18, 0x0A	; 10
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    2dba:	29 01       	movw	r4, r18
    2dbc:	3a 01       	movw	r6, r20
    2dbe:	df cf       	rjmp	.-66     	; 0x2d7e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x2b4>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:33
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
    2dc0:	c5 01       	movw	r24, r10
    2dc2:	b4 01       	movw	r22, r8
    2dc4:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__floatunsisf>
    2dc8:	9b 01       	movw	r18, r22
    2dca:	ac 01       	movw	r20, r24
    2dcc:	c7 01       	movw	r24, r14
    2dce:	b6 01       	movw	r22, r12
    2dd0:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    2dd4:	6b 01       	movw	r12, r22
    2dd6:	7c 01       	movw	r14, r24
    2dd8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ddc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de0:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__floatunsisf>
    2de4:	9b 01       	movw	r18, r22
    2de6:	ac 01       	movw	r20, r24
    2de8:	c7 01       	movw	r24, r14
    2dea:	b6 01       	movw	r22, r12
    2dec:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    2df0:	2b 01       	movw	r4, r22
    2df2:	3c 01       	movw	r6, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:35

    decimal = uint32_t(remainder);
    2df4:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__fixunssfsi>
    2df8:	6b 01       	movw	r12, r22
    2dfa:	7c 01       	movw	r14, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:36
    remainder = remainder - TFloat(decimal);
    2dfc:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <__floatunsisf>
    2e00:	9b 01       	movw	r18, r22
    2e02:	ac 01       	movw	r20, r24
    2e04:	c3 01       	movw	r24, r6
    2e06:	b2 01       	movw	r22, r4
    2e08:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:40

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    2e0c:	9b 01       	movw	r18, r22
    2e0e:	ac 01       	movw	r20, r24
    2e10:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    2e14:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__fixunssfsi>
    2e18:	c6 0e       	add	r12, r22
    2e1a:	d7 1e       	adc	r13, r23
    2e1c:	e8 1e       	adc	r14, r24
    2e1e:	f9 1e       	adc	r15, r25
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:41
    if (decimal >= maxDecimalPart) {
    2e20:	89 8d       	ldd	r24, Y+25	; 0x19
    2e22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e24:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2e26:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2e28:	c8 16       	cp	r12, r24
    2e2a:	d9 06       	cpc	r13, r25
    2e2c:	ea 06       	cpc	r14, r26
    2e2e:	fb 06       	cpc	r15, r27
    2e30:	d8 f0       	brcs	.+54     	; 0x2e68 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x39e>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:43
      decimal = 0;
      integral++;
    2e32:	9f ef       	ldi	r25, 0xFF	; 255
    2e34:	89 1a       	sub	r8, r25
    2e36:	99 0a       	sbc	r9, r25
    2e38:	a9 0a       	sbc	r10, r25
    2e3a:	b9 0a       	sbc	r11, r25
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:44
      if (exponent && integral >= 10) {
    2e3c:	af 89       	ldd	r26, Y+23	; 0x17
    2e3e:	b8 8d       	ldd	r27, Y+24	; 0x18
    2e40:	ab 2b       	or	r26, r27
    2e42:	39 f1       	breq	.+78     	; 0x2e92 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3c8>
    2e44:	ba e0       	ldi	r27, 0x0A	; 10
    2e46:	8b 16       	cp	r8, r27
    2e48:	91 04       	cpc	r9, r1
    2e4a:	a1 04       	cpc	r10, r1
    2e4c:	b1 04       	cpc	r11, r1
    2e4e:	08 f1       	brcs	.+66     	; 0x2e92 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3c8>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:45
        exponent++;
    2e50:	ef 89       	ldd	r30, Y+23	; 0x17
    2e52:	f8 8d       	ldd	r31, Y+24	; 0x18
    2e54:	31 96       	adiw	r30, 0x01	; 1
    2e56:	f8 8f       	std	Y+24, r31	; 0x18
    2e58:	ef 8b       	std	Y+23, r30	; 0x17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:42

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
    2e5a:	c1 2c       	mov	r12, r1
    2e5c:	d1 2c       	mov	r13, r1
    2e5e:	76 01       	movw	r14, r12
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:46
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
        integral = 1;
    2e60:	81 2c       	mov	r8, r1
    2e62:	91 2c       	mov	r9, r1
    2e64:	54 01       	movw	r10, r8
    2e66:	83 94       	inc	r8
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:51
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
    2e68:	2a e0       	ldi	r18, 0x0A	; 10
    2e6a:	42 2e       	mov	r4, r18
    2e6c:	51 2c       	mov	r5, r1
    2e6e:	61 2c       	mov	r6, r1
    2e70:	71 2c       	mov	r7, r1
    2e72:	c7 01       	movw	r24, r14
    2e74:	b6 01       	movw	r22, r12
    2e76:	a3 01       	movw	r20, r6
    2e78:	92 01       	movw	r18, r4
    2e7a:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    2e7e:	67 2b       	or	r22, r23
    2e80:	68 2b       	or	r22, r24
    2e82:	69 2b       	or	r22, r25
    2e84:	51 f4       	brne	.+20     	; 0x2e9a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3d0>
    2e86:	11 16       	cp	r1, r17
    2e88:	44 f4       	brge	.+16     	; 0x2e9a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3d0>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:52
      decimal /= 10;
    2e8a:	69 01       	movw	r12, r18
    2e8c:	7a 01       	movw	r14, r20
    2e8e:	11 50       	subi	r17, 0x01	; 1
    2e90:	f0 cf       	rjmp	.-32     	; 0x2e72 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3a8>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:42

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
    2e92:	c1 2c       	mov	r12, r1
    2e94:	d1 2c       	mov	r13, r1
    2e96:	76 01       	movw	r14, r12
    2e98:	e7 cf       	rjmp	.-50     	; 0x2e68 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x39e>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:88
    }
#endif

    FloatParts<T> parts(value);

    writeInteger(parts.integral);
    2e9a:	b5 01       	movw	r22, r10
    2e9c:	a4 01       	movw	r20, r8
    2e9e:	c1 01       	movw	r24, r2
    2ea0:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:89
    if (parts.decimalPlaces)
    2ea4:	11 23       	and	r17, r17
    2ea6:	71 f1       	breq	.+92     	; 0x2f04 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x43a>
    2ea8:	4e 01       	movw	r8, r28
    2eaa:	f1 e1       	ldi	r31, 0x11	; 17
    2eac:	8f 0e       	add	r8, r31
    2eae:	91 1c       	adc	r9, r1
    2eb0:	01 2f       	mov	r16, r17
    2eb2:	54 01       	movw	r10, r8
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE13writeDecimalsEma():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:135
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
    2eb4:	9a e0       	ldi	r25, 0x0A	; 10
    2eb6:	49 2e       	mov	r4, r25
    2eb8:	51 2c       	mov	r5, r1
    2eba:	61 2c       	mov	r6, r1
    2ebc:	71 2c       	mov	r7, r1
    2ebe:	01 50       	subi	r16, 0x01	; 1
    2ec0:	68 f0       	brcs	.+26     	; 0x2edc <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x412>
    2ec2:	c7 01       	movw	r24, r14
    2ec4:	b6 01       	movw	r22, r12
    2ec6:	a3 01       	movw	r20, r6
    2ec8:	92 01       	movw	r18, r4
    2eca:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    2ece:	60 5d       	subi	r22, 0xD0	; 208
    2ed0:	d4 01       	movw	r26, r8
    2ed2:	6e 93       	st	-X, r22
    2ed4:	4d 01       	movw	r8, r26
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:136
      value /= 10;
    2ed6:	69 01       	movw	r12, r18
    2ed8:	7a 01       	movw	r14, r20
    2eda:	f1 cf       	rjmp	.-30     	; 0x2ebe <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3f4>
    2edc:	81 2f       	mov	r24, r17
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	60 95       	com	r22
    2ee4:	70 95       	com	r23
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:138
    }
    *--begin = '.';
    2ee6:	f5 01       	movw	r30, r10
    2ee8:	e8 1b       	sub	r30, r24
    2eea:	f9 0b       	sbc	r31, r25
    2eec:	31 97       	sbiw	r30, 0x01	; 1
    2eee:	8e e2       	ldi	r24, 0x2E	; 46
    2ef0:	80 83       	st	Z, r24
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:154
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
                  static_cast<size_t>(end - begin));
    2ef2:	44 27       	eor	r20, r20
    2ef4:	55 27       	eor	r21, r21
    2ef6:	46 1b       	sub	r20, r22
    2ef8:	57 0b       	sbc	r21, r23
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:153
  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
    2efa:	6a 0d       	add	r22, r10
    2efc:	7b 1d       	adc	r23, r11
    2efe:	c1 01       	movw	r24, r2
    2f00:	0e 94 c5 14 	call	0x298a	; 0x298a <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:92

    writeInteger(parts.integral);
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent) {
    2f04:	ef 89       	ldd	r30, Y+23	; 0x17
    2f06:	f8 8d       	ldd	r31, Y+24	; 0x18
    2f08:	ef 2b       	or	r30, r31
    2f0a:	29 f1       	breq	.+74     	; 0x2f56 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2f0c:	65 e6       	ldi	r22, 0x65	; 101
    2f0e:	c1 01       	movw	r24, r2
    2f10:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2f14:	0f 89       	ldd	r16, Y+23	; 0x17
    2f16:	18 8d       	ldd	r17, Y+24	; 0x18
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIiEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:102

  template <typename T>
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
    2f18:	17 ff       	sbrs	r17, 7
    2f1a:	07 c0       	rjmp	.+14     	; 0x2f2a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x460>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2f1c:	6d e2       	ldi	r22, 0x2D	; 45
    2f1e:	c1 01       	movw	r24, r2
    2f20:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIiEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:104
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
      writeRaw('-');
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
    2f24:	11 95       	neg	r17
    2f26:	01 95       	neg	r16
    2f28:	11 09       	sbc	r17, r1
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:89
#endif

    FloatParts<T> parts(value);

    writeInteger(parts.integral);
    if (parts.decimalPlaces)
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	77 96       	adiw	r30, 0x17	; 23
    2f2e:	9f 01       	movw	r18, r30
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIjEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:119
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
    2f30:	8a e0       	ldi	r24, 0x0A	; 10
    2f32:	e8 2e       	mov	r14, r24
    2f34:	f1 2c       	mov	r15, r1
    2f36:	c8 01       	movw	r24, r16
    2f38:	b7 01       	movw	r22, r14
    2f3a:	0e 94 96 32 	call	0x652c	; 0x652c <__udivmodhi4>
    2f3e:	80 5d       	subi	r24, 0xD0	; 208
    2f40:	82 93       	st	-Z, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:120
      value = T(value / 10);
    2f42:	8b 01       	movw	r16, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:118
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
    2f44:	67 2b       	or	r22, r23
    2f46:	b9 f7       	brne	.-18     	; 0x2f36 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x46c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:154
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
                  static_cast<size_t>(end - begin));
    2f48:	a9 01       	movw	r20, r18
    2f4a:	4e 1b       	sub	r20, r30
    2f4c:	5f 0b       	sbc	r21, r31
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:153
  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
    2f4e:	bf 01       	movw	r22, r30
    2f50:	c1 01       	movw	r24, r2
    2f52:	0e 94 c5 14 	call	0x298a	; 0x298a <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
    2f56:	d1 01       	movw	r26, r2
    2f58:	12 96       	adiw	r26, 0x02	; 2
    2f5a:	8d 91       	ld	r24, X+
    2f5c:	9c 91       	ld	r25, X
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:72

      case VALUE_IS_BOOLEAN:
        return visitor.visitBoolean(_content.asBoolean != 0);

      default:
        return visitor.visitNull();
    2f5e:	ee cd       	rjmp	.-1060   	; 0x2b3c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x72>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2f60:	6d e5       	ldi	r22, 0x5D	; 93
    2f62:	c1 01       	movw	r24, r2
    2f64:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2f68:	f6 cf       	rjmp	.-20     	; 0x2f56 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48c>
    2f6a:	6b e7       	ldi	r22, 0x7B	; 123
    2f6c:	c1 01       	movw	r24, r2
    2f6e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2f72:	f8 01       	movw	r30, r16
    2f74:	00 81       	ld	r16, Z
    2f76:	11 81       	ldd	r17, Z+1	; 0x01
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE11visitObjectERKNS_14CollectionDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:46
  size_t visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
    2f78:	01 15       	cp	r16, r1
    2f7a:	11 05       	cpc	r17, r1
    2f7c:	59 f1       	breq	.+86     	; 0x2fd4 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x50a>
    2f7e:	d8 01       	movw	r26, r16
    2f80:	16 96       	adiw	r26, 0x06	; 6
    2f82:	cc 90       	ld	r12, X
    2f84:	16 97       	sbiw	r26, 0x06	; 6
    2f86:	17 96       	adiw	r26, 0x07	; 7
    2f88:	dc 90       	ld	r13, X
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
    2f8a:	62 e2       	ldi	r22, 0x22	; 34
    2f8c:	c1 01       	movw	r24, r2
    2f8e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2f92:	76 01       	movw	r14, r12
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE11writeStringEPKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:40
  }

  void writeString(const char *value) {
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
    while (*value) writeChar(*value++);
    2f94:	f7 01       	movw	r30, r14
    2f96:	61 91       	ld	r22, Z+
    2f98:	7f 01       	movw	r14, r30
    2f9a:	66 23       	and	r22, r22
    2f9c:	21 f0       	breq	.+8      	; 0x2fa6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4dc>
    2f9e:	c1 01       	movw	r24, r2
    2fa0:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)>
    2fa4:	f7 cf       	rjmp	.-18     	; 0x2f94 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4ca>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2fa6:	62 e2       	ldi	r22, 0x22	; 34
    2fa8:	c1 01       	movw	r24, r2
    2faa:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2fae:	6a e3       	ldi	r22, 0x3A	; 58
    2fb0:	c1 01       	movw	r24, r2
    2fb2:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE11visitObjectERKNS_14CollectionDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:49
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
    2fb6:	b1 01       	movw	r22, r2
    2fb8:	c8 01       	movw	r24, r16
    2fba:	0e 94 65 15 	call	0x2aca	; 0x2aca <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:51

      slot = slot->next();
    2fbe:	c8 01       	movw	r24, r16
    2fc0:	0e 94 84 08 	call	0x1108	; 0x1108 <ArduinoJson6194_1::VariantSlot::next()>
    2fc4:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:52
      if (slot == 0)
    2fc6:	89 2b       	or	r24, r25
    2fc8:	29 f0       	breq	.+10     	; 0x2fd4 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x50a>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
    2fca:	6c e2       	ldi	r22, 0x2C	; 44
    2fcc:	c1 01       	movw	r24, r2
    2fce:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2fd2:	d2 cf       	rjmp	.-92     	; 0x2f78 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4ae>
    2fd4:	6d e7       	ldi	r22, 0x7D	; 125
    2fd6:	c5 cf       	rjmp	.-118    	; 0x2f62 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x498>
    2fd8:	62 e2       	ldi	r22, 0x22	; 34
    2fda:	c1 01       	movw	r24, r2
    2fdc:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    2fe0:	86 01       	movw	r16, r12
    2fe2:	e0 0e       	add	r14, r16
    2fe4:	f1 1e       	adc	r15, r17
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE11writeStringEPKcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:47
  }

  void writeString(const char *value, size_t n) {
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
    while (n--) writeChar(*value++);
    2fe6:	e0 16       	cp	r14, r16
    2fe8:	f1 06       	cpc	r15, r17
    2fea:	39 f0       	breq	.+14     	; 0x2ffa <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x530>
    2fec:	f8 01       	movw	r30, r16
    2fee:	61 91       	ld	r22, Z+
    2ff0:	8f 01       	movw	r16, r30
    2ff2:	c1 01       	movw	r24, r2
    2ff4:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)>
    2ff8:	f6 cf       	rjmp	.-20     	; 0x2fe6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x51c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    2ffa:	62 e2       	ldi	r22, 0x22	; 34
    2ffc:	b2 cf       	rjmp	.-156    	; 0x2f62 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x498>
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:63
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asString.data,
                                    _content.asString.size);

      case VALUE_IS_SIGNED_INTEGER:
        return visitor.visitSignedInteger(_content.asSignedInteger);
    2ffe:	cd 90       	ld	r12, X+
    3000:	dd 90       	ld	r13, X+
    3002:	ed 90       	ld	r14, X+
    3004:	fc 90       	ld	r15, X
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIlEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:106
    unsigned_type unsigned_value;
    if (value < 0) {
      writeRaw('-');
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
    } else {
      unsigned_value = unsigned_type(value);
    3006:	b7 01       	movw	r22, r14
    3008:	a6 01       	movw	r20, r12
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:102

  template <typename T>
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
    300a:	f7 fe       	sbrs	r15, 7
    300c:	0b c0       	rjmp	.+22     	; 0x3024 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x55a>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    300e:	6d e2       	ldi	r22, 0x2D	; 45
    3010:	c1 01       	movw	r24, r2
    3012:	0e 94 30 15 	call	0x2a60	; 0x2a60 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIlEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:104
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
      writeRaw('-');
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
    3016:	44 27       	eor	r20, r20
    3018:	55 27       	eor	r21, r21
    301a:	ba 01       	movw	r22, r20
    301c:	4c 19       	sub	r20, r12
    301e:	5d 09       	sbc	r21, r13
    3020:	6e 09       	sbc	r22, r14
    3022:	7f 09       	sbc	r23, r15
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE20visitUnsignedIntegerEm():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:88
    _formatter.writeInteger(value);
    return bytesWritten();
  }

  size_t visitUnsignedInteger(UInt value) {
    _formatter.writeInteger(value);
    3024:	c1 01       	movw	r24, r2
    3026:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)>
    302a:	85 cd       	rjmp	.-1270   	; 0x2b36 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x6c>
    302c:	4d 91       	ld	r20, X+
    302e:	5d 91       	ld	r21, X+
    3030:	6d 91       	ld	r22, X+
    3032:	7c 91       	ld	r23, X
    3034:	f7 cf       	rjmp	.-18     	; 0x3024 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x55a>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeBooleanEb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:31
  size_t bytesWritten() const {
    return _writer.count();
  }

  void writeBoolean(bool value) {
    if (value)
    3036:	8c 91       	ld	r24, X
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:32
      writeRaw("true");
    3038:	6b e4       	ldi	r22, 0x4B	; 75
    303a:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:31
  size_t bytesWritten() const {
    return _writer.count();
  }

  void writeBoolean(bool value) {
    if (value)
    303c:	81 11       	cpse	r24, r1
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x57a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:34
      writeRaw("true");
    else
      writeRaw("false");
    3040:	60 e5       	ldi	r22, 0x50	; 80
    3042:	71 e0       	ldi	r23, 0x01	; 1
    3044:	c1 01       	movw	r24, r2
    3046:	0e 94 da 14 	call	0x29b4	; 0x29b4 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>
    304a:	75 cd       	rjmp	.-1302   	; 0x2b36 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x6c>

0000304c <generate_json()>:
_Z13generate_jsonv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:224
        }
    }                
}

//Send data using Serial 1 (TX pin 21/PD3) but send data json
void generate_json(){
    304c:	ff 92       	push	r15
    304e:	0f 93       	push	r16
    3050:	1f 93       	push	r17
    3052:	cf 93       	push	r28
    3054:	df 93       	push	r29
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	c6 52       	subi	r28, 0x26	; 38
    305c:	d4 40       	sbci	r29, 0x04	; 4
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:225
  DateTime now = rtc.now();
    3068:	6b e2       	ldi	r22, 0x2B	; 43
    306a:	73 e0       	ldi	r23, 0x03	; 3
    306c:	ce 01       	movw	r24, r28
    306e:	83 5e       	subi	r24, 0xE3	; 227
    3070:	9b 4f       	sbci	r25, 0xFB	; 251
    3072:	0e 94 c5 22 	call	0x458a	; 0x458a <RTC_DS3231::now()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:226
  StaticJsonDocument<512> outDbg;
    3076:	ce 01       	movw	r24, r28
    3078:	81 5f       	subi	r24, 0xF1	; 241
    307a:	9d 4f       	sbci	r25, 0xFD	; 253
    307c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:227
  StaticJsonDocument<512> outBtn;
    3080:	ce 01       	movw	r24, r28
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:228
  if(valuePower2 == 1){
    3088:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <valuePower2>
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	09 f0       	breq	.+2      	; 0x3092 <generate_json()+0x46>
    3090:	7a c1       	rjmp	.+756    	; 0x3386 <generate_json()+0x33a>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool,
                      _data.getOrAddMember(adaptString(key), &_pool,
                                           getStringStoragePolicy(key)));
    3092:	ae 01       	movw	r20, r28
    3094:	41 5f       	subi	r20, 0xF1	; 241
    3096:	5d 4f       	sbci	r21, 0xFD	; 253
    3098:	66 e5       	ldi	r22, 0x56	; 86
    309a:	71 e0       	ldi	r23, 0x01	; 1
    309c:	ca 01       	movw	r24, r20
    309e:	09 96       	adiw	r24, 0x09	; 9
    30a0:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
}

inline VariantRef VariantRef::getOrAddElement(size_t index) const {
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
    30a4:	ae 01       	movw	r20, r28
    30a6:	41 5f       	subi	r20, 0xF1	; 241
    30a8:	5d 4f       	sbci	r21, 0xFD	; 253
    30aa:	70 e0       	ldi	r23, 0x00	; 0
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    30b2:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIfvE6toJsonEfNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:100

template <typename T>
struct Converter<T, typename enable_if<is_floating_point<T>::value>::type> {
  static void toJson(T src, VariantRef dst) {
    VariantData* data = getData(dst);
    if (data)
    30b4:	89 2b       	or	r24, r25
    30b6:	81 f0       	breq	.+32     	; 0x30d8 <generate_json()+0x8c>
_ZNK17ArduinoJson6194_110VariantRef3setIfEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    return variantSetNull(_data);
  }

  template <typename T>
  FORCE_INLINE bool set(const T &value) const {
    Converter<T>::toJson(value, *this);
    30b8:	40 91 9b 04 	lds	r20, 0x049B	; 0x80049b <chamberTemp0>
    30bc:	50 91 9c 04 	lds	r21, 0x049C	; 0x80049c <chamberTemp0+0x1>
    30c0:	60 91 9d 04 	lds	r22, 0x049D	; 0x80049d <chamberTemp0+0x2>
    30c4:	70 91 9e 04 	lds	r23, 0x049E	; 0x80049e <chamberTemp0+0x3>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    30c8:	94 81       	ldd	r25, Z+4	; 0x04
    30ca:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    30cc:	9c 60       	ori	r25, 0x0C	; 12
    30ce:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:168
    _content.asBoolean = value;
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
    _content.asFloat = value;
    30d0:	40 83       	st	Z, r20
    30d2:	51 83       	std	Z+1, r21	; 0x01
    30d4:	62 83       	std	Z+2, r22	; 0x02
    30d6:	73 83       	std	Z+3, r23	; 0x03
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    30d8:	ae 01       	movw	r20, r28
    30da:	41 5f       	subi	r20, 0xF1	; 241
    30dc:	5d 4f       	sbci	r21, 0xFD	; 253
    30de:	66 e5       	ldi	r22, 0x56	; 86
    30e0:	71 e0       	ldi	r23, 0x01	; 1
    30e2:	ca 01       	movw	r24, r20
    30e4:	09 96       	adiw	r24, 0x09	; 9
    30e6:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    30ea:	ae 01       	movw	r20, r28
    30ec:	41 5f       	subi	r20, 0xF1	; 241
    30ee:	5d 4f       	sbci	r21, 0xFD	; 253
    30f0:	61 e0       	ldi	r22, 0x01	; 1
    30f2:	70 e0       	ldi	r23, 0x00	; 0
    30f4:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    30f8:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIfvE6toJsonEfNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:100
    30fa:	89 2b       	or	r24, r25
    30fc:	81 f0       	breq	.+32     	; 0x311e <generate_json()+0xd2>
_ZNK17ArduinoJson6194_110VariantRef3setIfEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    30fe:	40 91 a3 04 	lds	r20, 0x04A3	; 0x8004a3 <babySkinTemp0>
    3102:	50 91 a4 04 	lds	r21, 0x04A4	; 0x8004a4 <babySkinTemp0+0x1>
    3106:	60 91 a5 04 	lds	r22, 0x04A5	; 0x8004a5 <babySkinTemp0+0x2>
    310a:	70 91 a6 04 	lds	r23, 0x04A6	; 0x8004a6 <babySkinTemp0+0x3>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    310e:	94 81       	ldd	r25, Z+4	; 0x04
    3110:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3112:	9c 60       	ori	r25, 0x0C	; 12
    3114:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:168
    _content.asBoolean = value;
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
    _content.asFloat = value;
    3116:	40 83       	st	Z, r20
    3118:	51 83       	std	Z+1, r21	; 0x01
    311a:	62 83       	std	Z+2, r22	; 0x02
    311c:	73 83       	std	Z+3, r23	; 0x03
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    311e:	ae 01       	movw	r20, r28
    3120:	41 5f       	subi	r20, 0xF1	; 241
    3122:	5d 4f       	sbci	r21, 0xFD	; 253
    3124:	66 e5       	ldi	r22, 0x56	; 86
    3126:	71 e0       	ldi	r23, 0x01	; 1
    3128:	ca 01       	movw	r24, r20
    312a:	09 96       	adiw	r24, 0x09	; 9
    312c:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3130:	ae 01       	movw	r20, r28
    3132:	41 5f       	subi	r20, 0xF1	; 241
    3134:	5d 4f       	sbci	r21, 0xFD	; 253
    3136:	62 e0       	ldi	r22, 0x02	; 2
    3138:	70 e0       	ldi	r23, 0x00	; 0
    313a:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    313e:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIfvE6toJsonEfNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:100
    3140:	89 2b       	or	r24, r25
    3142:	81 f0       	breq	.+32     	; 0x3164 <generate_json()+0x118>
_ZNK17ArduinoJson6194_110VariantRef3setIfEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3144:	40 91 9f 04 	lds	r20, 0x049F	; 0x80049f <babySkinTemp1>
    3148:	50 91 a0 04 	lds	r21, 0x04A0	; 0x8004a0 <babySkinTemp1+0x1>
    314c:	60 91 a1 04 	lds	r22, 0x04A1	; 0x8004a1 <babySkinTemp1+0x2>
    3150:	70 91 a2 04 	lds	r23, 0x04A2	; 0x8004a2 <babySkinTemp1+0x3>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3154:	94 81       	ldd	r25, Z+4	; 0x04
    3156:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3158:	9c 60       	ori	r25, 0x0C	; 12
    315a:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:168
    _content.asBoolean = value;
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
    _content.asFloat = value;
    315c:	40 83       	st	Z, r20
    315e:	51 83       	std	Z+1, r21	; 0x01
    3160:	62 83       	std	Z+2, r22	; 0x02
    3162:	73 83       	std	Z+3, r23	; 0x03
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    3164:	ae 01       	movw	r20, r28
    3166:	41 5f       	subi	r20, 0xF1	; 241
    3168:	5d 4f       	sbci	r21, 0xFD	; 253
    316a:	66 e5       	ldi	r22, 0x56	; 86
    316c:	71 e0       	ldi	r23, 0x01	; 1
    316e:	ca 01       	movw	r24, r20
    3170:	09 96       	adiw	r24, 0x09	; 9
    3172:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3176:	ae 01       	movw	r20, r28
    3178:	41 5f       	subi	r20, 0xF1	; 241
    317a:	5d 4f       	sbci	r21, 0xFD	; 253
    317c:	63 e0       	ldi	r22, 0x03	; 3
    317e:	70 e0       	ldi	r23, 0x00	; 0
    3180:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    3184:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIfvE6toJsonEfNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:100
    3186:	89 2b       	or	r24, r25
    3188:	81 f0       	breq	.+32     	; 0x31aa <generate_json()+0x15e>
_ZNK17ArduinoJson6194_110VariantRef3setIfEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    318a:	40 91 97 04 	lds	r20, 0x0497	; 0x800497 <humidityMid>
    318e:	50 91 98 04 	lds	r21, 0x0498	; 0x800498 <humidityMid+0x1>
    3192:	60 91 99 04 	lds	r22, 0x0499	; 0x800499 <humidityMid+0x2>
    3196:	70 91 9a 04 	lds	r23, 0x049A	; 0x80049a <humidityMid+0x3>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    319a:	94 81       	ldd	r25, Z+4	; 0x04
    319c:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    319e:	9c 60       	ori	r25, 0x0C	; 12
    31a0:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:168
    _content.asBoolean = value;
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
    _content.asFloat = value;
    31a2:	40 83       	st	Z, r20
    31a4:	51 83       	std	Z+1, r21	; 0x01
    31a6:	62 83       	std	Z+2, r22	; 0x02
    31a8:	73 83       	std	Z+3, r23	; 0x03
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    31aa:	0f e0       	ldi	r16, 0x0F	; 15
    31ac:	12 e0       	ldi	r17, 0x02	; 2
    31ae:	0c 0f       	add	r16, r28
    31b0:	1d 1f       	adc	r17, r29
    31b2:	07 5f       	subi	r16, 0xF7	; 247
    31b4:	1f 4f       	sbci	r17, 0xFF	; 255
    31b6:	ae 01       	movw	r20, r28
    31b8:	41 5f       	subi	r20, 0xF1	; 241
    31ba:	5d 4f       	sbci	r21, 0xFD	; 253
    31bc:	6b e5       	ldi	r22, 0x5B	; 91
    31be:	71 e0       	ldi	r23, 0x01	; 1
    31c0:	c8 01       	movw	r24, r16
    31c2:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    31c6:	ae 01       	movw	r20, r28
    31c8:	41 5f       	subi	r20, 0xF1	; 241
    31ca:	5d 4f       	sbci	r21, 0xFD	; 253
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    31d4:	bc 01       	movw	r22, r24
    31d6:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <heaterPwm>
    31da:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
    31de:	c0 5e       	subi	r28, 0xE0	; 224
    31e0:	db 4f       	sbci	r29, 0xFB	; 251
    31e2:	f8 80       	ld	r15, Y
    31e4:	c0 52       	subi	r28, 0x20	; 32
    31e6:	d4 40       	sbci	r29, 0x04	; 4
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    31e8:	ae 01       	movw	r20, r28
    31ea:	41 5f       	subi	r20, 0xF1	; 241
    31ec:	5d 4f       	sbci	r21, 0xFD	; 253
    31ee:	6f e5       	ldi	r22, 0x5F	; 95
    31f0:	71 e0       	ldi	r23, 0x01	; 1
    31f2:	c8 01       	movw	r24, r16
    31f4:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    31f8:	ae 01       	movw	r20, r28
    31fa:	41 5f       	subi	r20, 0xF1	; 241
    31fc:	5d 4f       	sbci	r21, 0xFD	; 253
    31fe:	70 e0       	ldi	r23, 0x00	; 0
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3206:	bc 01       	movw	r22, r24
    3208:	8f 2d       	mov	r24, r15
    320a:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
    320e:	cf 5d       	subi	r28, 0xDF	; 223
    3210:	db 4f       	sbci	r29, 0xFB	; 251
    3212:	f8 80       	ld	r15, Y
    3214:	c1 52       	subi	r28, 0x21	; 33
    3216:	d4 40       	sbci	r29, 0x04	; 4
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    3218:	ae 01       	movw	r20, r28
    321a:	41 5f       	subi	r20, 0xF1	; 241
    321c:	5d 4f       	sbci	r21, 0xFD	; 253
    321e:	6f e5       	ldi	r22, 0x5F	; 95
    3220:	71 e0       	ldi	r23, 0x01	; 1
    3222:	c8 01       	movw	r24, r16
    3224:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3228:	ae 01       	movw	r20, r28
    322a:	41 5f       	subi	r20, 0xF1	; 241
    322c:	5d 4f       	sbci	r21, 0xFD	; 253
    322e:	61 e0       	ldi	r22, 0x01	; 1
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3236:	bc 01       	movw	r22, r24
    3238:	8f 2d       	mov	r24, r15
    323a:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    323e:	ae 01       	movw	r20, r28
    3240:	41 5f       	subi	r20, 0xF1	; 241
    3242:	5d 4f       	sbci	r21, 0xFD	; 253
    3244:	63 e6       	ldi	r22, 0x63	; 99
    3246:	71 e0       	ldi	r23, 0x01	; 1
    3248:	c8 01       	movw	r24, r16
    324a:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    324e:	ae 01       	movw	r20, r28
    3250:	41 5f       	subi	r20, 0xF1	; 241
    3252:	5d 4f       	sbci	r21, 0xFD	; 253
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    325c:	bc 01       	movw	r22, r24
    325e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <error0>
    3262:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    3266:	ae 01       	movw	r20, r28
    3268:	41 5f       	subi	r20, 0xF1	; 241
    326a:	5d 4f       	sbci	r21, 0xFD	; 253
    326c:	63 e6       	ldi	r22, 0x63	; 99
    326e:	71 e0       	ldi	r23, 0x01	; 1
    3270:	c8 01       	movw	r24, r16
    3272:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3276:	ae 01       	movw	r20, r28
    3278:	41 5f       	subi	r20, 0xF1	; 241
    327a:	5d 4f       	sbci	r21, 0xFD	; 253
    327c:	61 e0       	ldi	r22, 0x01	; 1
    327e:	70 e0       	ldi	r23, 0x00	; 0
    3280:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3284:	bc 01       	movw	r22, r24
    3286:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <error1>
    328a:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    328e:	ae 01       	movw	r20, r28
    3290:	41 5f       	subi	r20, 0xF1	; 241
    3292:	5d 4f       	sbci	r21, 0xFD	; 253
    3294:	63 e6       	ldi	r22, 0x63	; 99
    3296:	71 e0       	ldi	r23, 0x01	; 1
    3298:	c8 01       	movw	r24, r16
    329a:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    329e:	ae 01       	movw	r20, r28
    32a0:	41 5f       	subi	r20, 0xF1	; 241
    32a2:	5d 4f       	sbci	r21, 0xFD	; 253
    32a4:	62 e0       	ldi	r22, 0x02	; 2
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    32ac:	bc 01       	movw	r22, r24
    32ae:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <error2>
    32b2:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    32b6:	ae 01       	movw	r20, r28
    32b8:	41 5f       	subi	r20, 0xF1	; 241
    32ba:	5d 4f       	sbci	r21, 0xFD	; 253
    32bc:	63 e6       	ldi	r22, 0x63	; 99
    32be:	71 e0       	ldi	r23, 0x01	; 1
    32c0:	c8 01       	movw	r24, r16
    32c2:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    32c6:	ae 01       	movw	r20, r28
    32c8:	41 5f       	subi	r20, 0xF1	; 241
    32ca:	5d 4f       	sbci	r21, 0xFD	; 253
    32cc:	63 e0       	ldi	r22, 0x03	; 3
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    32d4:	bc 01       	movw	r22, r24
    32d6:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <error3>
    32da:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    32de:	ae 01       	movw	r20, r28
    32e0:	41 5f       	subi	r20, 0xF1	; 241
    32e2:	5d 4f       	sbci	r21, 0xFD	; 253
    32e4:	63 e6       	ldi	r22, 0x63	; 99
    32e6:	71 e0       	ldi	r23, 0x01	; 1
    32e8:	c8 01       	movw	r24, r16
    32ea:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    32ee:	ae 01       	movw	r20, r28
    32f0:	41 5f       	subi	r20, 0xF1	; 241
    32f2:	5d 4f       	sbci	r21, 0xFD	; 253
    32f4:	64 e0       	ldi	r22, 0x04	; 4
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    32fc:	bc 01       	movw	r22, r24
    32fe:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <error4>
    3302:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    3306:	ae 01       	movw	r20, r28
    3308:	41 5f       	subi	r20, 0xF1	; 241
    330a:	5d 4f       	sbci	r21, 0xFD	; 253
    330c:	63 e6       	ldi	r22, 0x63	; 99
    330e:	71 e0       	ldi	r23, 0x01	; 1
    3310:	c8 01       	movw	r24, r16
    3312:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3316:	ae 01       	movw	r20, r28
    3318:	41 5f       	subi	r20, 0xF1	; 241
    331a:	5d 4f       	sbci	r21, 0xFD	; 253
    331c:	65 e0       	ldi	r22, 0x05	; 5
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3324:	bc 01       	movw	r22, r24
    3326:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <error5>
    332a:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_112JsonDocument14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:251
    332e:	ae 01       	movw	r20, r28
    3330:	41 5f       	subi	r20, 0xF1	; 241
    3332:	5d 4f       	sbci	r21, 0xFD	; 253
    3334:	63 e6       	ldi	r22, 0x63	; 99
    3336:	71 e0       	ldi	r23, 0x01	; 1
    3338:	c8 01       	movw	r24, r16
    333a:	0e 94 3c 09 	call	0x1278	; 0x1278 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.46]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    333e:	ae 01       	movw	r20, r28
    3340:	41 5f       	subi	r20, 0xF1	; 241
    3342:	5d 4f       	sbci	r21, 0xFD	; 253
    3344:	66 e0       	ldi	r22, 0x06	; 6
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	0e 94 03 09 	call	0x1206	; 0x1206 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    334c:	bc 01       	movw	r22, r24
    334e:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <powerIn>
    3352:	0e 94 75 08 	call	0x10ea	; 0x10ea <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.33]>
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEEC4ERS3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:14
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : _writer(writer), _count(0) {}
    3356:	85 e5       	ldi	r24, 0x55	; 85
    3358:	96 e0       	ldi	r25, 0x06	; 6
    335a:	cd 5d       	subi	r28, 0xDD	; 221
    335c:	db 4f       	sbci	r29, 0xFB	; 251
    335e:	99 83       	std	Y+1, r25	; 0x01
    3360:	88 83       	st	Y, r24
    3362:	c3 52       	subi	r28, 0x23	; 35
    3364:	d4 40       	sbci	r29, 0x04	; 4
    3366:	cb 5d       	subi	r28, 0xDB	; 219
    3368:	db 4f       	sbci	r29, 0xFB	; 251
    336a:	19 82       	std	Y+1, r1	; 0x01
    336c:	18 82       	st	Y, r1
    336e:	c5 52       	subi	r28, 0x25	; 37
    3370:	d4 40       	sbci	r29, 0x04	; 4
_ZN17ArduinoJson6194_113variantAcceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeEPKNS_11VariantDataERS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantFunctions.hpp:17

template <typename TVisitor>
inline typename TVisitor::result_type variantAccept(const VariantData *var,
                                                    TVisitor &visitor) {
  if (var != 0)
    return var->accept(visitor);
    3372:	be 01       	movw	r22, r28
    3374:	6d 5d       	subi	r22, 0xDD	; 221
    3376:	7b 4f       	sbci	r23, 0xFB	; 251
    3378:	c8 01       	movw	r24, r16
    337a:	0e 94 65 15 	call	0x2aca	; 0x2aca <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>
_Z13generate_jsonv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:245
        outDbg["err"][3] = error3;
        outDbg["err"][4] = error4;
        outDbg["err"][5] = error5;
        outDbg["err"][6] = powerIn;
        serializeJson(outDbg, Serial1);
        Serial1.println();
    337e:	85 e5       	ldi	r24, 0x55	; 85
    3380:	96 e0       	ldi	r25, 0x06	; 6
    3382:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <Print::println()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:249
        // serializeJson(outDbg, Serial);
        // Serial.println();    
    }  
}
    3386:	ca 5d       	subi	r28, 0xDA	; 218
    3388:	db 4f       	sbci	r29, 0xFB	; 251
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	ff 90       	pop	r15
    339e:	08 95       	ret

000033a0 <_GLOBAL__sub_I_babySkinTemp0>:
_GLOBAL__sub_I_babySkinTemp0():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:146
char in = 1;
int g = 0;
float h;
int i = 0;

Xbaby Xinfant;
    33a0:	8d e2       	ldi	r24, 0x2D	; 45
    33a2:	93 e0       	ldi	r25, 0x03	; 3
    33a4:	0e 94 42 01 	call	0x284	; 0x284 <Xbaby::Xbaby()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:148
RTC_DS3231 rtc;
SHT1x sht15(shtData, shtClock);
    33a8:	41 e1       	ldi	r20, 0x11	; 17
    33aa:	50 e0       	ldi	r21, 0x00	; 0
    33ac:	60 e1       	ldi	r22, 0x10	; 16
    33ae:	70 e0       	ldi	r23, 0x00	; 0
    33b0:	85 e2       	ldi	r24, 0x25	; 37
    33b2:	93 e0       	ldi	r25, 0x03	; 3
    33b4:	0e 94 a4 1b 	call	0x3748	; 0x3748 <SHT1x::SHT1x(int, int)>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:149
SoftwareSerial mySerial(6, 24); // RX, TX // Only Use RX
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	48 e1       	ldi	r20, 0x18	; 24
    33bc:	66 e0       	ldi	r22, 0x06	; 6
    33be:	86 e0       	ldi	r24, 0x06	; 6
    33c0:	93 e0       	ldi	r25, 0x03	; 3
    33c2:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:150
SimpleTimer timer0;
    33c6:	8a e5       	ldi	r24, 0x5A	; 90
    33c8:	92 e0       	ldi	r25, 0x02	; 2
    33ca:	0e 94 76 1d 	call	0x3aec	; 0x3aec <SimpleTimer::SimpleTimer()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:151
SimpleTimer timer1;
    33ce:	8e ea       	ldi	r24, 0xAE	; 174
    33d0:	91 e0       	ldi	r25, 0x01	; 1
    33d2:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <SimpleTimer::SimpleTimer()>

000033d6 <_GLOBAL__sub_D_babySkinTemp0>:
_GLOBAL__sub_D_babySkinTemp0():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:149
int i = 0;

Xbaby Xinfant;
RTC_DS3231 rtc;
SHT1x sht15(shtData, shtClock);
SoftwareSerial mySerial(6, 24); // RX, TX // Only Use RX
    33d6:	86 e0       	ldi	r24, 0x06	; 6
    33d8:	93 e0       	ldi	r25, 0x03	; 3
    33da:	0c 94 ec 25 	jmp	0x4bd8	; 0x4bd8 <SoftwareSerial::~SoftwareSerial()>

000033de <communication_serial()>:
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:200
    // doremi();
}

/*Communication Data*/////////////////////////////////////////////////////////////////////////////////////////
//Read data com input using mySerial (RX pin 6)
void communication_serial(){
    33de:	4f 92       	push	r4
    33e0:	5f 92       	push	r5
    33e2:	6f 92       	push	r6
    33e4:	7f 92       	push	r7
    33e6:	af 92       	push	r10
    33e8:	bf 92       	push	r11
    33ea:	cf 92       	push	r12
    33ec:	df 92       	push	r13
    33ee:	ef 92       	push	r14
    33f0:	ff 92       	push	r15
    33f2:	0f 93       	push	r16
    33f4:	1f 93       	push	r17
    33f6:	cf 93       	push	r28
    33f8:	df 93       	push	r29
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	ca 55       	subi	r28, 0x5A	; 90
    3400:	d1 40       	sbci	r29, 0x01	; 1
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:202
    while(mySerial.available()>0){
        userInput[x2] = mySerial.read();
    340c:	98 e6       	ldi	r25, 0x68	; 104
    340e:	c9 2e       	mov	r12, r25
    3410:	93 e0       	ldi	r25, 0x03	; 3
    3412:	d9 2e       	mov	r13, r25
_ZN17ArduinoJson6194_110MemoryPoolC4EPcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:34
    3414:	8e 01       	movw	r16, r28
    3416:	01 5f       	subi	r16, 0xF1	; 241
    3418:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEEC4ERNS_10MemoryPoolES3_S4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:29
                   TStringStorage stringStorage)
      : _stringStorage(stringStorage),
        _foundSomething(false),
        _latch(reader),
        _pool(&pool),
        _error(DeserializationError::Ok) {}
    341a:	ce 01       	movw	r24, r28
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	5c 01       	movw	r10, r24
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:208
        x2++;
        if(userInput[x2-1] == '\n'){
            // Serial.println(userInput); // check the data if it was received or not
            StaticJsonDocument<255>in;
            DeserializationError error = deserializeJson(in, userInput);
            if(!error){
    3420:	24 e7       	ldi	r18, 0x74	; 116
    3422:	e2 2e       	mov	r14, r18
    3424:	28 e0       	ldi	r18, 0x08	; 8
    3426:	f2 2e       	mov	r15, r18
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:201
}

/*Communication Data*/////////////////////////////////////////////////////////////////////////////////////////
//Read data com input using mySerial (RX pin 6)
void communication_serial(){
    while(mySerial.available()>0){
    3428:	86 e0       	ldi	r24, 0x06	; 6
    342a:	93 e0       	ldi	r25, 0x03	; 3
    342c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <SoftwareSerial::available()>
    3430:	18 16       	cp	r1, r24
    3432:	19 06       	cpc	r1, r25
    3434:	0c f0       	brlt	.+2      	; 0x3438 <communication_serial()+0x5a>
    3436:	54 c1       	rjmp	.+680    	; 0x36e0 <communication_serial()+0x302>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:202
        userInput[x2] = mySerial.read();
    3438:	86 e0       	ldi	r24, 0x06	; 6
    343a:	93 e0       	ldi	r25, 0x03	; 3
    343c:	0e 94 01 25 	call	0x4a02	; 0x4a02 <SoftwareSerial::read()>
    3440:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <x2>
    3444:	ae 2f       	mov	r26, r30
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	a8 59       	subi	r26, 0x98	; 152
    344a:	bc 4f       	sbci	r27, 0xFC	; 252
    344c:	8c 93       	st	X, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:203
        x2++;
    344e:	ef 5f       	subi	r30, 0xFF	; 255
    3450:	e0 93 67 03 	sts	0x0367, r30	; 0x800367 <x2>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:204
        if(userInput[x2-1] == '\n'){
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	e9 59       	subi	r30, 0x99	; 153
    3458:	fc 4f       	sbci	r31, 0xFC	; 252
    345a:	80 81       	ld	r24, Z
    345c:	8a 30       	cpi	r24, 0x0A	; 10
    345e:	21 f7       	brne	.-56     	; 0x3428 <communication_serial()+0x4a>
_ZN17ArduinoJson6194_110MemoryPoolC4EPcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:34
    3460:	1a 83       	std	Y+2, r17	; 0x02
    3462:	09 83       	std	Y+1, r16	; 0x01
    3464:	1c 83       	std	Y+4, r17	; 0x04
    3466:	0b 83       	std	Y+3, r16	; 0x03
    3468:	8e e0       	ldi	r24, 0x0E	; 14
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	8c 0f       	add	r24, r28
    346e:	9d 1f       	adc	r25, r29
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	98 87       	std	Y+8, r25	; 0x08
    3476:	8f 83       	std	Y+7, r24	; 0x07
    3478:	19 86       	std	Y+9, r1	; 0x09
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    347a:	1e 86       	std	Y+14, r1	; 0x0e
    347c:	88 e6       	ldi	r24, 0x68	; 104
    347e:	48 2e       	mov	r4, r24
    3480:	83 e0       	ldi	r24, 0x03	; 3
    3482:	58 2e       	mov	r5, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEEC4ERNS_10MemoryPoolES3_S4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:29
    3484:	c2 5f       	subi	r28, 0xF2	; 242
    3486:	de 4f       	sbci	r29, 0xFE	; 254
    3488:	48 82       	st	Y, r4
    348a:	59 82       	std	Y+1, r5	; 0x01
    348c:	6a 82       	std	Y+2, r6	; 0x02
    348e:	7b 82       	std	Y+3, r7	; 0x03
    3490:	ce 50       	subi	r28, 0x0E	; 14
    3492:	d1 40       	sbci	r29, 0x01	; 1
    3494:	ce 5e       	subi	r28, 0xEE	; 238
    3496:	de 4f       	sbci	r29, 0xFE	; 254
    3498:	18 82       	st	Y, r1
    349a:	c2 51       	subi	r28, 0x12	; 18
    349c:	d1 40       	sbci	r29, 0x01	; 1
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEEC4ES3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:14
namespace ARDUINOJSON_NAMESPACE {

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : _reader(reader), _loaded(false) {
    349e:	cd 5e       	subi	r28, 0xED	; 237
    34a0:	de 4f       	sbci	r29, 0xFE	; 254
    34a2:	d9 82       	std	Y+1, r13	; 0x01
    34a4:	c8 82       	st	Y, r12
    34a6:	c3 51       	subi	r28, 0x13	; 19
    34a8:	d1 40       	sbci	r29, 0x01	; 1
    34aa:	ca 5e       	subi	r28, 0xEA	; 234
    34ac:	de 4f       	sbci	r29, 0xFE	; 254
    34ae:	18 82       	st	Y, r1
    34b0:	c6 51       	subi	r28, 0x16	; 22
    34b2:	d1 40       	sbci	r29, 0x01	; 1
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEEC4ERNS_10MemoryPoolES3_S4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:29
    34b4:	c9 5e       	subi	r28, 0xE9	; 233
    34b6:	de 4f       	sbci	r29, 0xFE	; 254
    34b8:	b9 82       	std	Y+1, r11	; 0x01
    34ba:	a8 82       	st	Y, r10
    34bc:	c7 51       	subi	r28, 0x17	; 23
    34be:	d1 40       	sbci	r29, 0x01	; 1
_ZN17ArduinoJson6194_120DeserializationErrorC4ENS0_4CodeE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/DeserializationError.hpp:30
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
    34c0:	c7 5a       	subi	r28, 0xA7	; 167
    34c2:	de 4f       	sbci	r29, 0xFE	; 254
    34c4:	19 82       	std	Y+1, r1	; 0x01
    34c6:	18 82       	st	Y, r1
    34c8:	c9 55       	subi	r28, 0x59	; 89
    34ca:	d1 40       	sbci	r29, 0x01	; 1
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE5parseINS_14AllowAllFilterEEENS_20DeserializationErrorERNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:34

  template <typename TFilter>
  DeserializationError parse(VariantData &variant, TFilter filter,
                             NestingLimit nestingLimit) {
    parseVariant(variant, filter, nestingLimit);
    34cc:	2a e0       	ldi	r18, 0x0A	; 10
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	be 01       	movw	r22, r28
    34d2:	66 5f       	subi	r22, 0xF6	; 246
    34d4:	7f 4f       	sbci	r23, 0xFF	; 255
    34d6:	ce 01       	movw	r24, r28
    34d8:	82 5f       	subi	r24, 0xF2	; 242
    34da:	9e 4f       	sbci	r25, 0xFE	; 254
    34dc:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
_ZNK17ArduinoJson6194_120DeserializationErrorcvMS0_KFvvEEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/DeserializationError.hpp:58
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
    return _code != Ok ? safe_true() : safe_false();
    34e0:	c7 5a       	subi	r28, 0xA7	; 167
    34e2:	de 4f       	sbci	r29, 0xFE	; 254
    34e4:	88 81       	ld	r24, Y
    34e6:	99 81       	ldd	r25, Y+1	; 0x01
    34e8:	c9 55       	subi	r28, 0x59	; 89
    34ea:	d1 40       	sbci	r29, 0x01	; 1
    34ec:	00 97       	sbiw	r24, 0x00	; 0
    34ee:	19 f0       	breq	.+6      	; 0x34f6 <communication_serial()+0x118>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE5parseINS_14AllowAllFilterEEENS_20DeserializationErrorERNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:36

    if (!_error && _latch.last() != 0 && !variant.isEnclosed()) {
    34f0:	e1 14       	cp	r14, r1
    34f2:	f1 04       	cpc	r15, r1
    34f4:	61 f4       	brne	.+24     	; 0x350e <communication_serial()+0x130>
    34f6:	cb 5e       	subi	r28, 0xEB	; 235
    34f8:	de 4f       	sbci	r29, 0xFE	; 254
    34fa:	28 81       	ld	r18, Y
    34fc:	c5 51       	subi	r28, 0x15	; 21
    34fe:	d1 40       	sbci	r29, 0x01	; 1
    3500:	22 23       	and	r18, r18
    3502:	19 f0       	breq	.+6      	; 0x350a <communication_serial()+0x12c>
    3504:	2e 85       	ldd	r18, Y+14	; 0x0e
    3506:	23 fd       	sbrc	r18, 3
    3508:	02 c0       	rjmp	.+4      	; 0x350e <communication_serial()+0x130>
_ZNK17ArduinoJson6194_120DeserializationErrorcvMS0_KFvvEEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/DeserializationError.hpp:58
    350a:	89 2b       	or	r24, r25
    350c:	21 f0       	breq	.+8      	; 0x3516 <communication_serial()+0x138>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:208
            // Serial.println(userInput); // check the data if it was received or not
            StaticJsonDocument<255>in;
            DeserializationError error = deserializeJson(in, userInput);
            if(!error){
    350e:	e1 14       	cp	r14, r1
    3510:	f1 04       	cpc	r15, r1
    3512:	09 f0       	breq	.+2      	; 0x3516 <communication_serial()+0x138>
    3514:	7d c0       	rjmp	.+250    	; 0x3610 <communication_serial()+0x232>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233 (discriminator 1)
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
    3516:	67 e6       	ldi	r22, 0x67	; 103
    3518:	71 e0       	ldi	r23, 0x01	; 1
    351a:	ce 01       	movw	r24, r28
    351c:	0a 96       	adiw	r24, 0x0a	; 10
    351e:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145 (discriminator 1)
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	09 f0       	breq	.+2      	; 0x3528 <communication_serial()+0x14a>
    3526:	77 c0       	rjmp	.+238    	; 0x3616 <communication_serial()+0x238>
_ZN17ArduinoJson6194_19ConverterIfvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:106
      data->setFloat(static_cast<Float>(src));
  }

  static T fromJson(VariantConstRef src) {
    const VariantData* data = getData(src);
    return data ? data->asFloat<T>() : false;
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	cb 01       	movw	r24, r22
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:209
                setTemp = in["data1"]["sn"][0];
    352e:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <setTemp>
    3532:	70 93 18 01 	sts	0x0118, r23	; 0x800118 <setTemp+0x1>
    3536:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <setTemp+0x2>
    353a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <setTemp+0x3>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    353e:	67 e6       	ldi	r22, 0x67	; 103
    3540:	71 e0       	ldi	r23, 0x01	; 1
    3542:	ce 01       	movw	r24, r28
    3544:	0a 96       	adiw	r24, 0x0a	; 10
    3546:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	09 f0       	breq	.+2      	; 0x3550 <communication_serial()+0x172>
    354e:	74 c0       	rjmp	.+232    	; 0x3638 <communication_serial()+0x25a>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	80 e0       	ldi	r24, 0x00	; 0
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
  template <typename T>
  FORCE_INLINE
      typename enable_if<!is_same<T, char *>::value && !is_same<T, char>::value,
                         T>::type
      as() const {
    return Converter<T>::fromJson(*this);
    3554:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:210
                setHumidity = in["data1"]["sn"][1];
    3558:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <setHumidity>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    355c:	67 e6       	ldi	r22, 0x67	; 103
    355e:	71 e0       	ldi	r23, 0x01	; 1
    3560:	ce 01       	movw	r24, r28
    3562:	0a 96       	adiw	r24, 0x0a	; 10
    3564:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	09 f0       	breq	.+2      	; 0x356e <communication_serial()+0x190>
    356c:	71 c0       	rjmp	.+226    	; 0x3650 <communication_serial()+0x272>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	80 e0       	ldi	r24, 0x00	; 0
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    3572:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:211
                skinMode = in["data1"]["mode"][0];
    3576:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <skinMode>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    357a:	67 e6       	ldi	r22, 0x67	; 103
    357c:	71 e0       	ldi	r23, 0x01	; 1
    357e:	ce 01       	movw	r24, r28
    3580:	0a 96       	adiw	r24, 0x0a	; 10
    3582:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3586:	00 97       	sbiw	r24, 0x00	; 0
    3588:	09 f0       	breq	.+2      	; 0x358c <communication_serial()+0x1ae>
    358a:	6e c0       	rjmp	.+220    	; 0x3668 <communication_serial()+0x28a>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	80 e0       	ldi	r24, 0x00	; 0
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    3590:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:212
                humiMode = in["data1"]["mode"][1];
    3594:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <humiMode>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    3598:	67 e6       	ldi	r22, 0x67	; 103
    359a:	71 e0       	ldi	r23, 0x01	; 1
    359c:	ce 01       	movw	r24, r28
    359e:	0a 96       	adiw	r24, 0x0a	; 10
    35a0:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    35a4:	00 97       	sbiw	r24, 0x00	; 0
    35a6:	09 f0       	breq	.+2      	; 0x35aa <communication_serial()+0x1cc>
    35a8:	6b c0       	rjmp	.+214    	; 0x3680 <communication_serial()+0x2a2>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	80 e0       	ldi	r24, 0x00	; 0
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    35ae:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:213
                highTemp = in["data1"]["mode"][2];
    35b2:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <highTemp>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    35b6:	67 e6       	ldi	r22, 0x67	; 103
    35b8:	71 e0       	ldi	r23, 0x01	; 1
    35ba:	ce 01       	movw	r24, r28
    35bc:	0a 96       	adiw	r24, 0x0a	; 10
    35be:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    35c2:	00 97       	sbiw	r24, 0x00	; 0
    35c4:	09 f0       	breq	.+2      	; 0x35c8 <communication_serial()+0x1ea>
    35c6:	68 c0       	rjmp	.+208    	; 0x3698 <communication_serial()+0x2ba>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	80 e0       	ldi	r24, 0x00	; 0
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    35cc:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:214
                alarmValue = in["data1"]["mode"][3];
    35d0:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <alarmValue>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    35d4:	67 e6       	ldi	r22, 0x67	; 103
    35d6:	71 e0       	ldi	r23, 0x01	; 1
    35d8:	ce 01       	movw	r24, r28
    35da:	0a 96       	adiw	r24, 0x0a	; 10
    35dc:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <communication_serial()+0x208>
    35e4:	65 c0       	rjmp	.+202    	; 0x36b0 <communication_serial()+0x2d2>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	80 e0       	ldi	r24, 0x00	; 0
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    35ea:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:215
                sunyiValue = in["data1"]["mode"][4];
    35ee:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <sunyiValue>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    35f2:	67 e6       	ldi	r22, 0x67	; 103
    35f4:	71 e0       	ldi	r23, 0x01	; 1
    35f6:	ce 01       	movw	r24, r28
    35f8:	0a 96       	adiw	r24, 0x0a	; 10
    35fa:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	09 f0       	breq	.+2      	; 0x3604 <communication_serial()+0x226>
    3602:	62 c0       	rjmp	.+196    	; 0x36c8 <communication_serial()+0x2ea>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	80 e0       	ldi	r24, 0x00	; 0
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    3608:	0e 94 08 11 	call	0x2210	; 0x2210 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:216
                timeMode = in["data1"]["mode"][5];
    360c:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <timeMode>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:218
            }
            x2 = 0;
    3610:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <x2>
    3614:	09 cf       	rjmp	.-494    	; 0x3428 <communication_serial()+0x4a>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3616:	6d e6       	ldi	r22, 0x6D	; 109
    3618:	71 e0       	ldi	r23, 0x01	; 1
    361a:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    361e:	00 97       	sbiw	r24, 0x00	; 0
    3620:	09 f4       	brne	.+2      	; 0x3624 <communication_serial()+0x246>
    3622:	82 cf       	rjmp	.-252    	; 0x3528 <communication_serial()+0x14a>
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZN17ArduinoJson6194_19ConverterIfvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:106
    362c:	00 97       	sbiw	r24, 0x00	; 0
    362e:	09 f4       	brne	.+2      	; 0x3632 <communication_serial()+0x254>
    3630:	7b cf       	rjmp	.-266    	; 0x3528 <communication_serial()+0x14a>
    3632:	0e 94 9d 11 	call	0x233a	; 0x233a <float ArduinoJson6194_1::VariantData::asFloat<float>() const>
    3636:	7b cf       	rjmp	.-266    	; 0x352e <communication_serial()+0x150>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3638:	6d e6       	ldi	r22, 0x6D	; 109
    363a:	71 e0       	ldi	r23, 0x01	; 1
    363c:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	09 f4       	brne	.+2      	; 0x3646 <communication_serial()+0x268>
    3644:	85 cf       	rjmp	.-246    	; 0x3550 <communication_serial()+0x172>
    3646:	61 e0       	ldi	r22, 0x01	; 1
    3648:	70 e0       	ldi	r23, 0x00	; 0
    364a:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
    364e:	82 cf       	rjmp	.-252    	; 0x3554 <communication_serial()+0x176>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3650:	60 e7       	ldi	r22, 0x70	; 112
    3652:	71 e0       	ldi	r23, 0x01	; 1
    3654:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    3658:	00 97       	sbiw	r24, 0x00	; 0
    365a:	09 f4       	brne	.+2      	; 0x365e <communication_serial()+0x280>
    365c:	88 cf       	rjmp	.-240    	; 0x356e <communication_serial()+0x190>
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
    3666:	85 cf       	rjmp	.-246    	; 0x3572 <communication_serial()+0x194>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3668:	60 e7       	ldi	r22, 0x70	; 112
    366a:	71 e0       	ldi	r23, 0x01	; 1
    366c:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    3670:	00 97       	sbiw	r24, 0x00	; 0
    3672:	09 f4       	brne	.+2      	; 0x3676 <communication_serial()+0x298>
    3674:	8b cf       	rjmp	.-234    	; 0x358c <communication_serial()+0x1ae>
    3676:	61 e0       	ldi	r22, 0x01	; 1
    3678:	70 e0       	ldi	r23, 0x00	; 0
    367a:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
    367e:	88 cf       	rjmp	.-240    	; 0x3590 <communication_serial()+0x1b2>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3680:	60 e7       	ldi	r22, 0x70	; 112
    3682:	71 e0       	ldi	r23, 0x01	; 1
    3684:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	09 f4       	brne	.+2      	; 0x368e <communication_serial()+0x2b0>
    368c:	8e cf       	rjmp	.-228    	; 0x35aa <communication_serial()+0x1cc>
    368e:	62 e0       	ldi	r22, 0x02	; 2
    3690:	70 e0       	ldi	r23, 0x00	; 0
    3692:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
    3696:	8b cf       	rjmp	.-234    	; 0x35ae <communication_serial()+0x1d0>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    3698:	60 e7       	ldi	r22, 0x70	; 112
    369a:	71 e0       	ldi	r23, 0x01	; 1
    369c:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    36a0:	00 97       	sbiw	r24, 0x00	; 0
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <communication_serial()+0x2c8>
    36a4:	91 cf       	rjmp	.-222    	; 0x35c8 <communication_serial()+0x1ea>
    36a6:	63 e0       	ldi	r22, 0x03	; 3
    36a8:	70 e0       	ldi	r23, 0x00	; 0
    36aa:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
    36ae:	8e cf       	rjmp	.-228    	; 0x35cc <communication_serial()+0x1ee>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    36b0:	60 e7       	ldi	r22, 0x70	; 112
    36b2:	71 e0       	ldi	r23, 0x01	; 1
    36b4:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    36b8:	00 97       	sbiw	r24, 0x00	; 0
    36ba:	09 f4       	brne	.+2      	; 0x36be <communication_serial()+0x2e0>
    36bc:	94 cf       	rjmp	.-216    	; 0x35e6 <communication_serial()+0x208>
    36be:	64 e0       	ldi	r22, 0x04	; 4
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
    36c6:	91 cf       	rjmp	.-222    	; 0x35ea <communication_serial()+0x20c>
_ZNK17ArduinoJson6194_110VariantRef9getMemberIKcEES0_PT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:145
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
}

template <typename TChar>
inline VariantRef VariantRef::getMember(TChar *key) const {
  return VariantRef(_pool, _data != 0 ? _data->getMember(adaptString(key)) : 0);
    36c8:	60 e7       	ldi	r22, 0x70	; 112
    36ca:	71 e0       	ldi	r23, 0x01	; 1
    36cc:	0e 94 bd 14 	call	0x297a	; 0x297a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	09 f4       	brne	.+2      	; 0x36d6 <communication_serial()+0x2f8>
    36d4:	97 cf       	rjmp	.-210    	; 0x3604 <communication_serial()+0x226>
    36d6:	65 e0       	ldi	r22, 0x05	; 5
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	0e 94 b3 08 	call	0x1166	; 0x1166 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
    36de:	94 cf       	rjmp	.-216    	; 0x3608 <communication_serial()+0x22a>
_Z20communication_serialv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:221
        }
    }                
}
    36e0:	c6 5a       	subi	r28, 0xA6	; 166
    36e2:	de 4f       	sbci	r29, 0xFE	; 254
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	0f 91       	pop	r16
    36f6:	ff 90       	pop	r15
    36f8:	ef 90       	pop	r14
    36fa:	df 90       	pop	r13
    36fc:	cf 90       	pop	r12
    36fe:	bf 90       	pop	r11
    3700:	af 90       	pop	r10
    3702:	7f 90       	pop	r7
    3704:	6f 90       	pop	r6
    3706:	5f 90       	pop	r5
    3708:	4f 90       	pop	r4
    370a:	08 95       	ret

0000370c <run_program()>:
_Z11run_programv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:183
void loop(){
    run_program();
}

void run_program(){
    timer0.run();
    370c:	8a e5       	ldi	r24, 0x5A	; 90
    370e:	92 e0       	ldi	r25, 0x02	; 2
    3710:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <SimpleTimer::run()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:184
    communication_serial();
    3714:	0e 94 ef 19 	call	0x33de	; 0x33de <communication_serial()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:186
//    digitalWrite(pinLamp, HIGH);
    digitalWrite(26, LOW); 
    3718:	60 e0       	ldi	r22, 0x00	; 0
    371a:	8a e1       	ldi	r24, 0x1A	; 26
    371c:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:187
    read_skin_temperature();
    3720:	0e 94 98 0b 	call	0x1730	; 0x1730 <read_skin_temperature()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:188
    read_temperature();
    3724:	0e 94 33 0b 	call	0x1666	; 0x1666 <read_temperature()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:189
    run_warmer();
    3728:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <run_warmer()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:190
    run_control();
    372c:	0e 94 89 0c 	call	0x1912	; 0x1912 <run_control()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:191
    read_error();
    3730:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <read_error()>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:194
//    alarm();
//    pewaktu();
    Serial.println(1);
    3734:	4a e0       	ldi	r20, 0x0A	; 10
    3736:	50 e0       	ldi	r21, 0x00	; 0
    3738:	61 e0       	ldi	r22, 0x01	; 1
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	88 eb       	ldi	r24, 0xB8	; 184
    373e:	95 e0       	ldi	r25, 0x05	; 5
    3740:	0c 94 24 2e 	jmp	0x5c48	; 0x5c48 <Print::println(int, int)>

00003744 <loop>:
loop():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant/Xinfant.ino:179
    analogWrite(warmerPin, 0);
}
////////////////////////////////////////////////////////////////////////////////////////

void loop(){
    run_program();
    3744:	0c 94 86 1b 	jmp	0x370c	; 0x370c <run_program()>

00003748 <SHT1x::SHT1x(int, int)>:
_ZN5SHT1xC2Eii():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:68

  // Convert raw value to degrees Fahrenheit
  _temperature = (_val * D2) + D1;

  return (_temperature);
}
    3748:	fc 01       	movw	r30, r24
    374a:	71 83       	std	Z+1, r23	; 0x01
    374c:	60 83       	st	Z, r22
    374e:	53 83       	std	Z+3, r21	; 0x03
    3750:	42 83       	std	Z+2, r20	; 0x02
    3752:	08 95       	ret

00003754 <SHT1x::shiftIn(int, int, int)>:
_ZN5SHT1x7shiftInEiii():
    3754:	cf 92       	push	r12
    3756:	df 92       	push	r13
    3758:	ef 92       	push	r14
    375a:	ff 92       	push	r15
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    3764:	e6 2e       	mov	r14, r22
    3766:	f4 2e       	mov	r15, r20
    3768:	69 01       	movw	r12, r18
    376a:	d0 e0       	ldi	r29, 0x00	; 0
    376c:	c0 e0       	ldi	r28, 0x00	; 0
    376e:	10 e0       	ldi	r17, 0x00	; 0
    3770:	00 e0       	ldi	r16, 0x00	; 0
    3772:	0c 15       	cp	r16, r12
    3774:	1d 05       	cpc	r17, r13
    3776:	c4 f4       	brge	.+48     	; 0x37a8 <SHT1x::shiftIn(int, int, int)+0x54>
    3778:	61 e0       	ldi	r22, 0x01	; 1
    377a:	8f 2d       	mov	r24, r15
    377c:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    3780:	63 e0       	ldi	r22, 0x03	; 3
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	0e 94 06 29 	call	0x520c	; 0x520c <delay>
    378c:	8e 2d       	mov	r24, r14
    378e:	0e 94 8a 2a 	call	0x5514	; 0x5514 <digitalRead>
    3792:	cc 0f       	add	r28, r28
    3794:	dd 1f       	adc	r29, r29
    3796:	c8 0f       	add	r28, r24
    3798:	d9 1f       	adc	r29, r25
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	8f 2d       	mov	r24, r15
    379e:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    37a2:	0f 5f       	subi	r16, 0xFF	; 255
    37a4:	1f 4f       	sbci	r17, 0xFF	; 255
    37a6:	e5 cf       	rjmp	.-54     	; 0x3772 <SHT1x::shiftIn(int, int, int)+0x1e>
    37a8:	ce 01       	movw	r24, r28
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
    37b2:	ff 90       	pop	r15
    37b4:	ef 90       	pop	r14
    37b6:	df 90       	pop	r13
    37b8:	cf 90       	pop	r12
    37ba:	08 95       	ret

000037bc <SHT1x::sendCommandSHT(int, int, int)>:
_ZN5SHT1x14sendCommandSHTEiii():
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	16 2f       	mov	r17, r22
    37c4:	c4 2f       	mov	r28, r20
    37c6:	d2 2f       	mov	r29, r18
    37c8:	61 e0       	ldi	r22, 0x01	; 1
    37ca:	84 2f       	mov	r24, r20
    37cc:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    37d0:	61 e0       	ldi	r22, 0x01	; 1
    37d2:	8d 2f       	mov	r24, r29
    37d4:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    37d8:	61 e0       	ldi	r22, 0x01	; 1
    37da:	8c 2f       	mov	r24, r28
    37dc:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    37e0:	61 e0       	ldi	r22, 0x01	; 1
    37e2:	8d 2f       	mov	r24, r29
    37e4:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	8c 2f       	mov	r24, r28
    37ec:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	8d 2f       	mov	r24, r29
    37f4:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	8d 2f       	mov	r24, r29
    37fc:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    3800:	61 e0       	ldi	r22, 0x01	; 1
    3802:	8c 2f       	mov	r24, r28
    3804:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	8d 2f       	mov	r24, r29
    380c:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    3810:	21 2f       	mov	r18, r17
    3812:	41 e0       	ldi	r20, 0x01	; 1
    3814:	6d 2f       	mov	r22, r29
    3816:	8c 2f       	mov	r24, r28
    3818:	0e 94 b3 2a 	call	0x5566	; 0x5566 <shiftOut>
    381c:	61 e0       	ldi	r22, 0x01	; 1
    381e:	8d 2f       	mov	r24, r29
    3820:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	8c 2f       	mov	r24, r28
    3828:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    382c:	8c 2f       	mov	r24, r28
    382e:	0e 94 8a 2a 	call	0x5514	; 0x5514 <digitalRead>
    3832:	60 e0       	ldi	r22, 0x00	; 0
    3834:	8d 2f       	mov	r24, r29
    3836:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    383a:	8c 2f       	mov	r24, r28
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0c 94 8a 2a 	jmp	0x5514	; 0x5514 <digitalRead>

00003846 <SHT1x::waitForResultSHT(int)>:
_ZN5SHT1x16waitForResultSHTEi():
    3846:	1f 93       	push	r17
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	16 2f       	mov	r17, r22
    384e:	60 e0       	ldi	r22, 0x00	; 0
    3850:	81 2f       	mov	r24, r17
    3852:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    3856:	c0 ea       	ldi	r28, 0xA0	; 160
    3858:	d0 e0       	ldi	r29, 0x00	; 0
    385a:	8e ea       	ldi	r24, 0xAE	; 174
    385c:	91 e0       	ldi	r25, 0x01	; 1
    385e:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <SimpleTimer::run()>
    3862:	62 e0       	ldi	r22, 0x02	; 2
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0e 94 06 29 	call	0x520c	; 0x520c <delay>
    386e:	81 2f       	mov	r24, r17
    3870:	0e 94 8a 2a 	call	0x5514	; 0x5514 <digitalRead>
    3874:	89 2b       	or	r24, r25
    3876:	11 f0       	breq	.+4      	; 0x387c <SHT1x::waitForResultSHT(int)+0x36>
    3878:	21 97       	sbiw	r28, 0x01	; 1
    387a:	79 f7       	brne	.-34     	; 0x385a <SHT1x::waitForResultSHT(int)+0x14>
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	1f 91       	pop	r17
    3882:	08 95       	ret

00003884 <SHT1x::getData16SHT(int, int)>:
_ZN5SHT1x12getData16SHTEii():
    3884:	cf 92       	push	r12
    3886:	df 92       	push	r13
    3888:	ef 92       	push	r14
    388a:	ff 92       	push	r15
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	7c 01       	movw	r14, r24
    3896:	c6 2f       	mov	r28, r22
    3898:	d7 2e       	mov	r13, r23
    389a:	d4 2f       	mov	r29, r20
    389c:	c5 2e       	mov	r12, r21
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	8c 2f       	mov	r24, r28
    38a2:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    38a6:	61 e0       	ldi	r22, 0x01	; 1
    38a8:	8d 2f       	mov	r24, r29
    38aa:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    38ae:	28 e0       	ldi	r18, 0x08	; 8
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	4d 2f       	mov	r20, r29
    38b4:	5c 2d       	mov	r21, r12
    38b6:	6c 2f       	mov	r22, r28
    38b8:	7d 2d       	mov	r23, r13
    38ba:	c7 01       	movw	r24, r14
    38bc:	0e 94 aa 1b 	call	0x3754	; 0x3754 <SHT1x::shiftIn(int, int, int)>
    38c0:	00 e0       	ldi	r16, 0x00	; 0
    38c2:	18 2f       	mov	r17, r24
    38c4:	61 e0       	ldi	r22, 0x01	; 1
    38c6:	8c 2f       	mov	r24, r28
    38c8:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	8c 2f       	mov	r24, r28
    38d0:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	8c 2f       	mov	r24, r28
    38d8:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    38dc:	61 e0       	ldi	r22, 0x01	; 1
    38de:	8d 2f       	mov	r24, r29
    38e0:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	8d 2f       	mov	r24, r29
    38e8:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	8c 2f       	mov	r24, r28
    38f0:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    38f4:	28 e0       	ldi	r18, 0x08	; 8
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	4d 2f       	mov	r20, r29
    38fa:	5c 2d       	mov	r21, r12
    38fc:	6c 2f       	mov	r22, r28
    38fe:	7d 2d       	mov	r23, r13
    3900:	c7 01       	movw	r24, r14
    3902:	0e 94 aa 1b 	call	0x3754	; 0x3754 <SHT1x::shiftIn(int, int, int)>
    3906:	80 2b       	or	r24, r16
    3908:	91 2b       	or	r25, r17
    390a:	df 91       	pop	r29
    390c:	cf 91       	pop	r28
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	ff 90       	pop	r15
    3914:	ef 90       	pop	r14
    3916:	df 90       	pop	r13
    3918:	cf 90       	pop	r12
    391a:	08 95       	ret

0000391c <SHT1x::skipCrcSHT(int, int)>:
_ZN5SHT1x10skipCrcSHTEii():
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
    3920:	d6 2f       	mov	r29, r22
    3922:	c4 2f       	mov	r28, r20
    3924:	61 e0       	ldi	r22, 0x01	; 1
    3926:	8d 2f       	mov	r24, r29
    3928:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    392c:	61 e0       	ldi	r22, 0x01	; 1
    392e:	8c 2f       	mov	r24, r28
    3930:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    3934:	61 e0       	ldi	r22, 0x01	; 1
    3936:	8d 2f       	mov	r24, r29
    3938:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    393c:	61 e0       	ldi	r22, 0x01	; 1
    393e:	8c 2f       	mov	r24, r28
    3940:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	8c 2f       	mov	r24, r28
    3948:	df 91       	pop	r29
    394a:	cf 91       	pop	r28
    394c:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <digitalWrite>

00003950 <SHT1x::readTemperatureRaw()>:
_ZN5SHT1x18readTemperatureRawEv():
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	ec 01       	movw	r28, r24
    395a:	2a 81       	ldd	r18, Y+2	; 0x02
    395c:	3b 81       	ldd	r19, Y+3	; 0x03
    395e:	48 81       	ld	r20, Y
    3960:	59 81       	ldd	r21, Y+1	; 0x01
    3962:	63 e0       	ldi	r22, 0x03	; 3
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	0e 94 de 1b 	call	0x37bc	; 0x37bc <SHT1x::sendCommandSHT(int, int, int)>
    396a:	68 81       	ld	r22, Y
    396c:	79 81       	ldd	r23, Y+1	; 0x01
    396e:	ce 01       	movw	r24, r28
    3970:	0e 94 23 1c 	call	0x3846	; 0x3846 <SHT1x::waitForResultSHT(int)>
    3974:	4a 81       	ldd	r20, Y+2	; 0x02
    3976:	5b 81       	ldd	r21, Y+3	; 0x03
    3978:	68 81       	ld	r22, Y
    397a:	79 81       	ldd	r23, Y+1	; 0x01
    397c:	ce 01       	movw	r24, r28
    397e:	0e 94 42 1c 	call	0x3884	; 0x3884 <SHT1x::getData16SHT(int, int)>
    3982:	8c 01       	movw	r16, r24
    3984:	4a 81       	ldd	r20, Y+2	; 0x02
    3986:	5b 81       	ldd	r21, Y+3	; 0x03
    3988:	68 81       	ld	r22, Y
    398a:	79 81       	ldd	r23, Y+1	; 0x01
    398c:	ce 01       	movw	r24, r28
    398e:	0e 94 8e 1c 	call	0x391c	; 0x391c <SHT1x::skipCrcSHT(int, int)>
    3992:	b8 01       	movw	r22, r16
    3994:	11 0f       	add	r17, r17
    3996:	88 0b       	sbc	r24, r24
    3998:	99 0b       	sbc	r25, r25
    399a:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__floatsisf>
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	1f 91       	pop	r17
    39a4:	0f 91       	pop	r16
    39a6:	08 95       	ret

000039a8 <SHT1x::readTemperatureC()>:
_ZN5SHT1x16readTemperatureCEv():
    39a8:	0e 94 a8 1c 	call	0x3950	; 0x3950 <SHT1x::readTemperatureRaw()>
    39ac:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__fixsfsi>
    39b0:	07 2e       	mov	r0, r23
    39b2:	00 0c       	add	r0, r0
    39b4:	88 0b       	sbc	r24, r24
    39b6:	99 0b       	sbc	r25, r25
    39b8:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__floatsisf>
    39bc:	2a e0       	ldi	r18, 0x0A	; 10
    39be:	37 ed       	ldi	r19, 0xD7	; 215
    39c0:	43 e2       	ldi	r20, 0x23	; 35
    39c2:	5c e3       	ldi	r21, 0x3C	; 60
    39c4:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	40 e2       	ldi	r20, 0x20	; 32
    39ce:	52 e4       	ldi	r21, 0x42	; 66
    39d0:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    39d4:	08 95       	ret

000039d6 <SHT1x::readHumidity()>:
_ZN5SHT1x12readHumidityEv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:72
////////////////////////////////////////////////////////////////////////
//Reads current temperature-corrected relative humidity
float SHT1x::readHumidity()
{
    39d6:	4f 92       	push	r4
    39d8:	5f 92       	push	r5
    39da:	6f 92       	push	r6
    39dc:	7f 92       	push	r7
    39de:	8f 92       	push	r8
    39e0:	9f 92       	push	r9
    39e2:	af 92       	push	r10
    39e4:	bf 92       	push	r11
    39e6:	cf 92       	push	r12
    39e8:	df 92       	push	r13
    39ea:	ef 92       	push	r14
    39ec:	ff 92       	push	r15
    39ee:	cf 93       	push	r28
    39f0:	df 93       	push	r29
    39f2:	ec 01       	movw	r28, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:92

  // Command to send to the SHT1x to request humidity
  int _gHumidCmd = 0b00000101;

  // Fetch the value from the sensor
  sendCommandSHT(_gHumidCmd, _dataPin, _clockPin);
    39f4:	2a 81       	ldd	r18, Y+2	; 0x02
    39f6:	3b 81       	ldd	r19, Y+3	; 0x03
    39f8:	48 81       	ld	r20, Y
    39fa:	59 81       	ldd	r21, Y+1	; 0x01
    39fc:	65 e0       	ldi	r22, 0x05	; 5
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	0e 94 de 1b 	call	0x37bc	; 0x37bc <SHT1x::sendCommandSHT(int, int, int)>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:93
  waitForResultSHT(_dataPin);
    3a04:	68 81       	ld	r22, Y
    3a06:	79 81       	ldd	r23, Y+1	; 0x01
    3a08:	ce 01       	movw	r24, r28
    3a0a:	0e 94 23 1c 	call	0x3846	; 0x3846 <SHT1x::waitForResultSHT(int)>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:94
  _val = getData16SHT(_dataPin, _clockPin);
    3a0e:	4a 81       	ldd	r20, Y+2	; 0x02
    3a10:	5b 81       	ldd	r21, Y+3	; 0x03
    3a12:	68 81       	ld	r22, Y
    3a14:	79 81       	ldd	r23, Y+1	; 0x01
    3a16:	ce 01       	movw	r24, r28
    3a18:	0e 94 42 1c 	call	0x3884	; 0x3884 <SHT1x::getData16SHT(int, int)>
    3a1c:	7c 01       	movw	r14, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:95
  skipCrcSHT(_dataPin, _clockPin);
    3a1e:	4a 81       	ldd	r20, Y+2	; 0x02
    3a20:	5b 81       	ldd	r21, Y+3	; 0x03
    3a22:	68 81       	ld	r22, Y
    3a24:	79 81       	ldd	r23, Y+1	; 0x01
    3a26:	ce 01       	movw	r24, r28
    3a28:	0e 94 8e 1c 	call	0x391c	; 0x391c <SHT1x::skipCrcSHT(int, int)>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:98

  // Apply linear conversion to raw value
  _linearHumidity = C1 + C2 * _val + C3 * _val * _val;
    3a2c:	b7 01       	movw	r22, r14
    3a2e:	ff 0c       	add	r15, r15
    3a30:	88 0b       	sbc	r24, r24
    3a32:	99 0b       	sbc	r25, r25
    3a34:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__floatsisf>
    3a38:	6b 01       	movw	r12, r22
    3a3a:	7c 01       	movw	r14, r24
    3a3c:	2d eb       	ldi	r18, 0xBD	; 189
    3a3e:	32 e5       	ldi	r19, 0x52	; 82
    3a40:	46 e1       	ldi	r20, 0x16	; 22
    3a42:	5d e3       	ldi	r21, 0x3D	; 61
    3a44:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    3a48:	25 ec       	ldi	r18, 0xC5	; 197
    3a4a:	3e ef       	ldi	r19, 0xFE	; 254
    3a4c:	42 e0       	ldi	r20, 0x02	; 2
    3a4e:	50 e4       	ldi	r21, 0x40	; 64
    3a50:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    3a54:	4b 01       	movw	r8, r22
    3a56:	5c 01       	movw	r10, r24
    3a58:	26 ef       	ldi	r18, 0xF6	; 246
    3a5a:	34 e2       	ldi	r19, 0x24	; 36
    3a5c:	46 ed       	ldi	r20, 0xD6	; 214
    3a5e:	55 eb       	ldi	r21, 0xB5	; 181
    3a60:	c7 01       	movw	r24, r14
    3a62:	b6 01       	movw	r22, r12
    3a64:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    3a68:	a7 01       	movw	r20, r14
    3a6a:	96 01       	movw	r18, r12
    3a6c:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    3a70:	9b 01       	movw	r18, r22
    3a72:	ac 01       	movw	r20, r24
    3a74:	c5 01       	movw	r24, r10
    3a76:	b4 01       	movw	r22, r8
    3a78:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    3a7c:	4b 01       	movw	r8, r22
    3a7e:	5c 01       	movw	r10, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:101

  // Get current temperature for humidity correction
  _temperature = readTemperatureC();
    3a80:	ce 01       	movw	r24, r28
    3a82:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <SHT1x::readTemperatureC()>
    3a86:	2b 01       	movw	r4, r22
    3a88:	3c 01       	movw	r6, r24
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:104

  // Correct humidity value for current temperature
  _correctedHumidity = (_temperature - 25.0 ) * (T1 + T2 * _val) + _linearHumidity;
    3a8a:	2c ea       	ldi	r18, 0xAC	; 172
    3a8c:	35 ec       	ldi	r19, 0xC5	; 197
    3a8e:	47 ea       	ldi	r20, 0xA7	; 167
    3a90:	58 e3       	ldi	r21, 0x38	; 56
    3a92:	c7 01       	movw	r24, r14
    3a94:	b6 01       	movw	r22, r12
    3a96:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    3a9a:	2a e0       	ldi	r18, 0x0A	; 10
    3a9c:	37 ed       	ldi	r19, 0xD7	; 215
    3a9e:	43 e2       	ldi	r20, 0x23	; 35
    3aa0:	5c e3       	ldi	r21, 0x3C	; 60
    3aa2:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    3aa6:	6b 01       	movw	r12, r22
    3aa8:	7c 01       	movw	r14, r24
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	48 ec       	ldi	r20, 0xC8	; 200
    3ab0:	51 e4       	ldi	r21, 0x41	; 65
    3ab2:	c3 01       	movw	r24, r6
    3ab4:	b2 01       	movw	r22, r4
    3ab6:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <__subsf3>
    3aba:	9b 01       	movw	r18, r22
    3abc:	ac 01       	movw	r20, r24
    3abe:	c7 01       	movw	r24, r14
    3ac0:	b6 01       	movw	r22, r12
    3ac2:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    3ac6:	a5 01       	movw	r20, r10
    3ac8:	94 01       	movw	r18, r8
    3aca:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SHT15/SHT1X.cpp:107

  return (_correctedHumidity);
}
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	ff 90       	pop	r15
    3ad4:	ef 90       	pop	r14
    3ad6:	df 90       	pop	r13
    3ad8:	cf 90       	pop	r12
    3ada:	bf 90       	pop	r11
    3adc:	af 90       	pop	r10
    3ade:	9f 90       	pop	r9
    3ae0:	8f 90       	pop	r8
    3ae2:	7f 90       	pop	r7
    3ae4:	6f 90       	pop	r6
    3ae6:	5f 90       	pop	r5
    3ae8:	4f 90       	pop	r4
    3aea:	08 95       	ret

00003aec <SimpleTimer::SimpleTimer()>:
_ZN11SimpleTimerC2Ev():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:165
}


int SimpleTimer::setTimeout(long d, timer_callback f) {
    return setTimer(d, f, RUN_ONCE);
}
    3aec:	cf 92       	push	r12
    3aee:	df 92       	push	r13
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	ec 01       	movw	r28, r24
elapsed():
    3afa:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <millis>
    3afe:	7e 01       	movw	r14, r28
    3b00:	2c e8       	ldi	r18, 0x8C	; 140
    3b02:	e2 0e       	add	r14, r18
    3b04:	f1 1c       	adc	r15, r1
    3b06:	fe 01       	movw	r30, r28
    3b08:	b8 96       	adiw	r30, 0x28	; 40
    3b0a:	6e 01       	movw	r12, r28
    3b0c:	9e 01       	movw	r18, r28
    3b0e:	24 5c       	subi	r18, 0xC4	; 196
    3b10:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11SimpleTimerC2Ev():
    3b12:	d7 01       	movw	r26, r14
    3b14:	1d 92       	st	X+, r1
    3b16:	7d 01       	movw	r14, r26
    3b18:	11 92       	st	Z+, r1
    3b1a:	11 92       	st	Z+, r1
    3b1c:	d6 01       	movw	r26, r12
    3b1e:	6d 93       	st	X+, r22
    3b20:	7d 93       	st	X+, r23
    3b22:	8d 93       	st	X+, r24
    3b24:	9d 93       	st	X+, r25
    3b26:	6d 01       	movw	r12, r26
    3b28:	af 01       	movw	r20, r30
    3b2a:	42 5b       	subi	r20, 0xB2	; 178
    3b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b2e:	da 01       	movw	r26, r20
    3b30:	1d 92       	st	X+, r1
    3b32:	1c 92       	st	X, r1
    3b34:	e2 17       	cp	r30, r18
    3b36:	f3 07       	cpc	r31, r19
    3b38:	61 f7       	brne	.-40     	; 0x3b12 <SimpleTimer::SimpleTimer()+0x26>
    3b3a:	c6 55       	subi	r28, 0x56	; 86
    3b3c:	df 4f       	sbci	r29, 0xFF	; 255
    3b3e:	19 82       	std	Y+1, r1	; 0x01
    3b40:	18 82       	st	Y, r1
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	ff 90       	pop	r15
    3b48:	ef 90       	pop	r14
    3b4a:	df 90       	pop	r13
    3b4c:	cf 90       	pop	r12
    3b4e:	08 95       	ret

00003b50 <SimpleTimer::findFirstFreeSlot()>:
_ZN11SimpleTimer17findFirstFreeSlotEv():
    3b50:	fc 01       	movw	r30, r24
    3b52:	e6 55       	subi	r30, 0x56	; 86
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	20 81       	ld	r18, Z
    3b58:	31 81       	ldd	r19, Z+1	; 0x01
    3b5a:	2a 30       	cpi	r18, 0x0A	; 10
    3b5c:	31 05       	cpc	r19, r1
    3b5e:	64 f4       	brge	.+24     	; 0x3b78 <SimpleTimer::findFirstFreeSlot()+0x28>
    3b60:	e2 58       	subi	r30, 0x82	; 130
    3b62:	f1 09       	sbc	r31, r1
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	21 91       	ld	r18, Z+
    3b6a:	31 91       	ld	r19, Z+
    3b6c:	23 2b       	or	r18, r19
    3b6e:	31 f0       	breq	.+12     	; 0x3b7c <SimpleTimer::findFirstFreeSlot()+0x2c>
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	8a 30       	cpi	r24, 0x0A	; 10
    3b74:	91 05       	cpc	r25, r1
    3b76:	c1 f7       	brne	.-16     	; 0x3b68 <SimpleTimer::findFirstFreeSlot()+0x18>
    3b78:	8f ef       	ldi	r24, 0xFF	; 255
    3b7a:	9f ef       	ldi	r25, 0xFF	; 255
    3b7c:	08 95       	ret

00003b7e <SimpleTimer::setTimer(long, void (*)(), int)>:
_ZN11SimpleTimer8setTimerElPFvvEi():
    3b7e:	4f 92       	push	r4
    3b80:	5f 92       	push	r5
    3b82:	6f 92       	push	r6
    3b84:	7f 92       	push	r7
    3b86:	af 92       	push	r10
    3b88:	bf 92       	push	r11
    3b8a:	cf 92       	push	r12
    3b8c:	df 92       	push	r13
    3b8e:	ef 92       	push	r14
    3b90:	ff 92       	push	r15
    3b92:	0f 93       	push	r16
    3b94:	1f 93       	push	r17
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
    3b9a:	ec 01       	movw	r28, r24
    3b9c:	2a 01       	movw	r4, r20
    3b9e:	3b 01       	movw	r6, r22
    3ba0:	79 01       	movw	r14, r18
    3ba2:	68 01       	movw	r12, r16
    3ba4:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <SimpleTimer::findFirstFreeSlot()>
    3ba8:	8c 01       	movw	r16, r24
    3baa:	97 fd       	sbrc	r25, 7
    3bac:	3f c0       	rjmp	.+126    	; 0x3c2c <SimpleTimer::setTimer(long, void (*)(), int)+0xae>
    3bae:	e1 14       	cp	r14, r1
    3bb0:	f1 04       	cpc	r15, r1
    3bb2:	e1 f1       	breq	.+120    	; 0x3c2c <SimpleTimer::setTimer(long, void (*)(), int)+0xae>
    3bb4:	5c 01       	movw	r10, r24
    3bb6:	aa 0c       	add	r10, r10
    3bb8:	bb 1c       	adc	r11, r11
    3bba:	aa 0c       	add	r10, r10
    3bbc:	bb 1c       	adc	r11, r11
    3bbe:	ac 0e       	add	r10, r28
    3bc0:	bd 1e       	adc	r11, r29
    3bc2:	f5 01       	movw	r30, r10
    3bc4:	44 ae       	std	Z+60, r4	; 0x3c
    3bc6:	55 ae       	std	Z+61, r5	; 0x3d
    3bc8:	66 ae       	std	Z+62, r6	; 0x3e
    3bca:	77 ae       	std	Z+63, r7	; 0x3f
    3bcc:	f8 01       	movw	r30, r16
    3bce:	ee 0f       	add	r30, r30
    3bd0:	ff 1f       	adc	r31, r31
    3bd2:	ec 0f       	add	r30, r28
    3bd4:	fd 1f       	adc	r31, r29
    3bd6:	f1 a6       	std	Z+41, r15	; 0x29
    3bd8:	e0 a6       	std	Z+40, r14	; 0x28
    3bda:	ec 59       	subi	r30, 0x9C	; 156
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	d1 82       	std	Z+1, r13	; 0x01
    3be0:	c0 82       	st	Z, r12
    3be2:	fe 01       	movw	r30, r28
    3be4:	e0 0f       	add	r30, r16
    3be6:	f1 1f       	adc	r31, r17
    3be8:	e4 57       	subi	r30, 0x74	; 116
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	80 83       	st	Z, r24
elapsed():
    3bf0:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <millis>
_ZN11SimpleTimer8setTimerElPFvvEi():
    3bf4:	f5 01       	movw	r30, r10
    3bf6:	60 83       	st	Z, r22
    3bf8:	71 83       	std	Z+1, r23	; 0x01
    3bfa:	82 83       	std	Z+2, r24	; 0x02
    3bfc:	93 83       	std	Z+3, r25	; 0x03
    3bfe:	c6 55       	subi	r28, 0x56	; 86
    3c00:	df 4f       	sbci	r29, 0xFF	; 255
    3c02:	88 81       	ld	r24, Y
    3c04:	99 81       	ldd	r25, Y+1	; 0x01
    3c06:	01 96       	adiw	r24, 0x01	; 1
    3c08:	99 83       	std	Y+1, r25	; 0x01
    3c0a:	88 83       	st	Y, r24
    3c0c:	c8 01       	movw	r24, r16
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	bf 90       	pop	r11
    3c20:	af 90       	pop	r10
    3c22:	7f 90       	pop	r7
    3c24:	6f 90       	pop	r6
    3c26:	5f 90       	pop	r5
    3c28:	4f 90       	pop	r4
    3c2a:	08 95       	ret
    3c2c:	0f ef       	ldi	r16, 0xFF	; 255
    3c2e:	1f ef       	ldi	r17, 0xFF	; 255
    3c30:	ed cf       	rjmp	.-38     	; 0x3c0c <SimpleTimer::setTimer(long, void (*)(), int)+0x8e>

00003c32 <SimpleTimer::setInterval(long, void (*)())>:
_ZN11SimpleTimer11setIntervalElPFvvE():
    3c32:	0f 93       	push	r16
    3c34:	1f 93       	push	r17
    3c36:	10 e0       	ldi	r17, 0x00	; 0
    3c38:	00 e0       	ldi	r16, 0x00	; 0
    3c3a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <SimpleTimer::setTimer(long, void (*)(), int)>
    3c3e:	1f 91       	pop	r17
    3c40:	0f 91       	pop	r16
    3c42:	08 95       	ret

00003c44 <SimpleTimer::deleteTimer(int)>:
_ZN11SimpleTimer11deleteTimerEi():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:168


void SimpleTimer::deleteTimer(int timerId) {
    3c44:	cf 93       	push	r28
    3c46:	df 93       	push	r29
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:169
    if (timerId >= MAX_TIMERS) {
    3c48:	6a 30       	cpi	r22, 0x0A	; 10
    3c4a:	71 05       	cpc	r23, r1
    3c4c:	a4 f5       	brge	.+104    	; 0x3cb6 <SimpleTimer::deleteTimer(int)+0x72>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:174
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    3c4e:	dc 01       	movw	r26, r24
    3c50:	a6 55       	subi	r26, 0x56	; 86
    3c52:	bf 4f       	sbci	r27, 0xFF	; 255
    3c54:	2d 91       	ld	r18, X+
    3c56:	3c 91       	ld	r19, X
    3c58:	11 97       	sbiw	r26, 0x01	; 1
    3c5a:	21 15       	cp	r18, r1
    3c5c:	31 05       	cpc	r19, r1
    3c5e:	59 f1       	breq	.+86     	; 0x3cb6 <SimpleTimer::deleteTimer(int)+0x72>
    3c60:	fb 01       	movw	r30, r22
    3c62:	ee 0f       	add	r30, r30
    3c64:	ff 1f       	adc	r31, r31
    3c66:	e8 0f       	add	r30, r24
    3c68:	f9 1f       	adc	r31, r25
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:180
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    3c6a:	40 a5       	ldd	r20, Z+40	; 0x28
    3c6c:	51 a5       	ldd	r21, Z+41	; 0x29
    3c6e:	45 2b       	or	r20, r21
    3c70:	11 f1       	breq	.+68     	; 0x3cb6 <SimpleTimer::deleteTimer(int)+0x72>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:181
        callbacks[timerId] = 0;
    3c72:	11 a6       	std	Z+41, r1	; 0x29
    3c74:	10 a6       	std	Z+40, r1	; 0x28
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:182
        enabled[timerId] = false;
    3c76:	ec 01       	movw	r28, r24
    3c78:	c6 0f       	add	r28, r22
    3c7a:	d7 1f       	adc	r29, r23
    3c7c:	c4 57       	subi	r28, 0x74	; 116
    3c7e:	df 4f       	sbci	r29, 0xFF	; 255
    3c80:	18 82       	st	Y, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:183
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    3c82:	ef 01       	movw	r28, r30
    3c84:	ca 56       	subi	r28, 0x6A	; 106
    3c86:	df 4f       	sbci	r29, 0xFF	; 255
    3c88:	19 82       	std	Y+1, r1	; 0x01
    3c8a:	18 82       	st	Y, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:184
        delays[timerId] = 0;
    3c8c:	61 5f       	subi	r22, 0xF1	; 241
    3c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c90:	66 0f       	add	r22, r22
    3c92:	77 1f       	adc	r23, r23
    3c94:	66 0f       	add	r22, r22
    3c96:	77 1f       	adc	r23, r23
    3c98:	68 0f       	add	r22, r24
    3c9a:	79 1f       	adc	r23, r25
    3c9c:	eb 01       	movw	r28, r22
    3c9e:	18 82       	st	Y, r1
    3ca0:	19 82       	std	Y+1, r1	; 0x01
    3ca2:	1a 82       	std	Y+2, r1	; 0x02
    3ca4:	1b 82       	std	Y+3, r1	; 0x03
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:185
        numRuns[timerId] = 0;
    3ca6:	e8 58       	subi	r30, 0x88	; 136
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	11 82       	std	Z+1, r1	; 0x01
    3cac:	10 82       	st	Z, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:188

        // update number of timers
        numTimers--;
    3cae:	21 50       	subi	r18, 0x01	; 1
    3cb0:	31 09       	sbc	r19, r1
    3cb2:	2d 93       	st	X+, r18
    3cb4:	3c 93       	st	X, r19
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:190
    }
}
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	08 95       	ret

00003cbc <SimpleTimer::run()>:
_ZN11SimpleTimer3runEv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:49

    numTimers = 0;
}


void SimpleTimer::run() {
    3cbc:	2f 92       	push	r2
    3cbe:	3f 92       	push	r3
    3cc0:	4f 92       	push	r4
    3cc2:	5f 92       	push	r5
    3cc4:	6f 92       	push	r6
    3cc6:	7f 92       	push	r7
    3cc8:	8f 92       	push	r8
    3cca:	9f 92       	push	r9
    3ccc:	af 92       	push	r10
    3cce:	bf 92       	push	r11
    3cd0:	cf 92       	push	r12
    3cd2:	df 92       	push	r13
    3cd4:	ef 92       	push	r14
    3cd6:	ff 92       	push	r15
    3cd8:	0f 93       	push	r16
    3cda:	1f 93       	push	r17
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	ec 01       	movw	r28, r24
elapsed():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:32
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    3ce2:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <millis>
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	b8 96       	adiw	r30, 0x28	; 40
    3cea:	4e 01       	movw	r8, r28
_ZN11SimpleTimer3runEv():
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:56
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    3cec:	b1 2c       	mov	r11, r1
    3cee:	a1 2c       	mov	r10, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:81
                    if (maxNumRuns[i] == RUN_FOREVER) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
    3cf0:	41 e0       	ldi	r20, 0x01	; 1
    3cf2:	50 e0       	ldi	r21, 0x00	; 0
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:86
                        numRuns[i]++;

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    3cf4:	22 e0       	ldi	r18, 0x02	; 2
    3cf6:	22 2e       	mov	r2, r18
    3cf8:	31 2c       	mov	r3, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:58
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        toBeCalled[i] = DEFCALL_DONTRUN;
    3cfa:	8f 01       	movw	r16, r30
    3cfc:	02 59       	subi	r16, 0x92	; 146
    3cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3d00:	d8 01       	movw	r26, r16
    3d02:	1d 92       	st	X+, r1
    3d04:	1c 92       	st	X, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:61

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    3d06:	20 81       	ld	r18, Z
    3d08:	31 81       	ldd	r19, Z+1	; 0x01
    3d0a:	32 96       	adiw	r30, 0x02	; 2
    3d0c:	23 2b       	or	r18, r19
    3d0e:	a1 f1       	breq	.+104    	; 0x3d78 <SimpleTimer::run()+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:66

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    3d10:	d4 01       	movw	r26, r8
    3d12:	0d 91       	ld	r16, X+
    3d14:	1d 91       	ld	r17, X+
    3d16:	2d 91       	ld	r18, X+
    3d18:	3c 91       	ld	r19, X
    3d1a:	13 97       	sbiw	r26, 0x03	; 3
    3d1c:	dc 96       	adiw	r26, 0x3c	; 60
    3d1e:	cd 90       	ld	r12, X+
    3d20:	dd 90       	ld	r13, X+
    3d22:	ed 90       	ld	r14, X+
    3d24:	fc 90       	ld	r15, X
    3d26:	df 97       	sbiw	r26, 0x3f	; 63
    3d28:	2b 01       	movw	r4, r22
    3d2a:	3c 01       	movw	r6, r24
    3d2c:	40 1a       	sub	r4, r16
    3d2e:	51 0a       	sbc	r5, r17
    3d30:	62 0a       	sbc	r6, r18
    3d32:	73 0a       	sbc	r7, r19
    3d34:	4c 14       	cp	r4, r12
    3d36:	5d 04       	cpc	r5, r13
    3d38:	6e 04       	cpc	r6, r14
    3d3a:	7f 04       	cpc	r7, r15
    3d3c:	e8 f0       	brcs	.+58     	; 0x3d78 <SimpleTimer::run()+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:70

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    3d3e:	0c 0d       	add	r16, r12
    3d40:	1d 1d       	adc	r17, r13
    3d42:	2e 1d       	adc	r18, r14
    3d44:	3f 1d       	adc	r19, r15
    3d46:	0d 93       	st	X+, r16
    3d48:	1d 93       	st	X+, r17
    3d4a:	2d 93       	st	X+, r18
    3d4c:	3c 93       	st	X, r19
    3d4e:	13 97       	sbiw	r26, 0x03	; 3
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:73

                // check if the timer callback has to be executed
                if (enabled[i]) {
    3d50:	95 01       	movw	r18, r10
    3d52:	24 57       	subi	r18, 0x74	; 116
    3d54:	3f 4f       	sbci	r19, 0xFF	; 255
    3d56:	2c 0f       	add	r18, r28
    3d58:	3d 1f       	adc	r19, r29
    3d5a:	d9 01       	movw	r26, r18
    3d5c:	2c 91       	ld	r18, X
    3d5e:	22 23       	and	r18, r18
    3d60:	59 f0       	breq	.+22     	; 0x3d78 <SimpleTimer::run()+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:76

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    3d62:	22 ad       	ldd	r18, Z+58	; 0x3a
    3d64:	33 ad       	ldd	r19, Z+59	; 0x3b
    3d66:	21 15       	cp	r18, r1
    3d68:	31 05       	cpc	r19, r1
    3d6a:	c1 f5       	brne	.+112    	; 0x3ddc <SimpleTimer::run()+0x120>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:77
                        toBeCalled[i] = DEFCALL_RUNONLY;
    3d6c:	9f 01       	movw	r18, r30
    3d6e:	24 59       	subi	r18, 0x94	; 148
    3d70:	3f 4f       	sbci	r19, 0xFF	; 255
    3d72:	d9 01       	movw	r26, r18
    3d74:	4d 93       	st	X+, r20
    3d76:	5c 93       	st	X, r21
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:56 (discriminator 2)
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    3d78:	bf ef       	ldi	r27, 0xFF	; 255
    3d7a:	ab 1a       	sub	r10, r27
    3d7c:	bb 0a       	sbc	r11, r27
    3d7e:	24 e0       	ldi	r18, 0x04	; 4
    3d80:	82 0e       	add	r8, r18
    3d82:	91 1c       	adc	r9, r1
    3d84:	aa e0       	ldi	r26, 0x0A	; 10
    3d86:	aa 16       	cp	r10, r26
    3d88:	b1 04       	cpc	r11, r1
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <SimpleTimer::run()+0xd2>
    3d8c:	b6 cf       	rjmp	.-148    	; 0x3cfa <SimpleTimer::run()+0x3e>
    3d8e:	7e 01       	movw	r14, r28
    3d90:	b6 e9       	ldi	r27, 0x96	; 150
    3d92:	eb 0e       	add	r14, r27
    3d94:	f1 1c       	adc	r15, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:94
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    3d96:	10 e0       	ldi	r17, 0x00	; 0
    3d98:	00 e0       	ldi	r16, 0x00	; 0
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:95
        switch(toBeCalled[i]) {
    3d9a:	f7 01       	movw	r30, r14
    3d9c:	81 91       	ld	r24, Z+
    3d9e:	91 91       	ld	r25, Z+
    3da0:	7f 01       	movw	r14, r30
    3da2:	81 30       	cpi	r24, 0x01	; 1
    3da4:	91 05       	cpc	r25, r1
    3da6:	c1 f1       	breq	.+112    	; 0x3e18 <SimpleTimer::run()+0x15c>
    3da8:	02 97       	sbiw	r24, 0x02	; 2
    3daa:	e9 f1       	breq	.+122    	; 0x3e26 <SimpleTimer::run()+0x16a>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:94 (discriminator 2)
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    3dac:	0f 5f       	subi	r16, 0xFF	; 255
    3dae:	1f 4f       	sbci	r17, 0xFF	; 255
    3db0:	0a 30       	cpi	r16, 0x0A	; 10
    3db2:	11 05       	cpc	r17, r1
    3db4:	91 f7       	brne	.-28     	; 0x3d9a <SimpleTimer::run()+0xde>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:109
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    3db6:	df 91       	pop	r29
    3db8:	cf 91       	pop	r28
    3dba:	1f 91       	pop	r17
    3dbc:	0f 91       	pop	r16
    3dbe:	ff 90       	pop	r15
    3dc0:	ef 90       	pop	r14
    3dc2:	df 90       	pop	r13
    3dc4:	cf 90       	pop	r12
    3dc6:	bf 90       	pop	r11
    3dc8:	af 90       	pop	r10
    3dca:	9f 90       	pop	r9
    3dcc:	8f 90       	pop	r8
    3dce:	7f 90       	pop	r7
    3dd0:	6f 90       	pop	r6
    3dd2:	5f 90       	pop	r5
    3dd4:	4f 90       	pop	r4
    3dd6:	3f 90       	pop	r3
    3dd8:	2f 90       	pop	r2
    3dda:	08 95       	ret
    3ddc:	6f 01       	movw	r12, r30
    3dde:	be e4       	ldi	r27, 0x4E	; 78
    3de0:	cb 0e       	add	r12, r27
    3de2:	d1 1c       	adc	r13, r1
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:80
                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    3de4:	d6 01       	movw	r26, r12
    3de6:	ed 90       	ld	r14, X+
    3de8:	fc 90       	ld	r15, X
    3dea:	e2 16       	cp	r14, r18
    3dec:	f3 06       	cpc	r15, r19
    3dee:	24 f6       	brge	.-120    	; 0x3d78 <SimpleTimer::run()+0xbc>
    3df0:	8f 01       	movw	r16, r30
    3df2:	04 59       	subi	r16, 0x94	; 148
    3df4:	1f 4f       	sbci	r17, 0xFF	; 255
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:81
                        toBeCalled[i] = DEFCALL_RUNONLY;
    3df6:	d8 01       	movw	r26, r16
    3df8:	4d 93       	st	X+, r20
    3dfa:	5c 93       	st	X, r21
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:82
                        numRuns[i]++;
    3dfc:	bf ef       	ldi	r27, 0xFF	; 255
    3dfe:	eb 1a       	sub	r14, r27
    3e00:	fb 0a       	sbc	r15, r27
    3e02:	d6 01       	movw	r26, r12
    3e04:	ed 92       	st	X+, r14
    3e06:	fc 92       	st	X, r15
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:85

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    3e08:	e2 16       	cp	r14, r18
    3e0a:	f3 06       	cpc	r15, r19
    3e0c:	0c f4       	brge	.+2      	; 0x3e10 <SimpleTimer::run()+0x154>
    3e0e:	b4 cf       	rjmp	.-152    	; 0x3d78 <SimpleTimer::run()+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:86
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    3e10:	d8 01       	movw	r26, r16
    3e12:	2d 92       	st	X+, r2
    3e14:	3c 92       	st	X, r3
    3e16:	b0 cf       	rjmp	.-160    	; 0x3d78 <SimpleTimer::run()+0xbc>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:100
        switch(toBeCalled[i]) {
            case DEFCALL_DONTRUN:
                break;

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    3e18:	e0 57       	subi	r30, 0x70	; 112
    3e1a:	f1 09       	sbc	r31, r1
    3e1c:	01 90       	ld	r0, Z+
    3e1e:	f0 81       	ld	r31, Z
    3e20:	e0 2d       	mov	r30, r0
    3e22:	09 95       	icall
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:101
                break;
    3e24:	c3 cf       	rjmp	.-122    	; 0x3dac <SimpleTimer::run()+0xf0>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:104

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    3e26:	e0 57       	subi	r30, 0x70	; 112
    3e28:	f1 09       	sbc	r31, r1
    3e2a:	01 90       	ld	r0, Z+
    3e2c:	f0 81       	ld	r31, Z
    3e2e:	e0 2d       	mov	r30, r0
    3e30:	09 95       	icall
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:105
                deleteTimer(i);
    3e32:	b8 01       	movw	r22, r16
    3e34:	ce 01       	movw	r24, r28
    3e36:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <SimpleTimer::deleteTimer(int)>
D:\Inkubator\Program\NewInkubator\Inkubator\Xinfant\src\library\SimpleTimer/SimpleTimer.cpp:106
                break;
    3e3a:	b8 cf       	rjmp	.-144    	; 0x3dac <SimpleTimer::run()+0xf0>

00003e3c <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:331

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	08 95       	ret

00003e42 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    3e42:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <TwoWire::rxBufferLength>
    3e46:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <TwoWire::rxBufferIndex>
    3e4a:	89 1b       	sub	r24, r25
    3e4c:	99 0b       	sbc	r25, r25
    3e4e:	08 95       	ret

00003e50 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    3e50:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <TwoWire::rxBufferIndex>
    3e54:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <TwoWire::rxBufferLength>
    3e58:	2f ef       	ldi	r18, 0xFF	; 255
    3e5a:	3f ef       	ldi	r19, 0xFF	; 255
    3e5c:	98 17       	cp	r25, r24
    3e5e:	48 f4       	brcc	.+18     	; 0x3e72 <TwoWire::read()+0x22>
    3e60:	e9 2f       	mov	r30, r25
    3e62:	f0 e0       	ldi	r31, 0x00	; 0
    3e64:	e3 52       	subi	r30, 0x23	; 35
    3e66:	fb 4f       	sbci	r31, 0xFB	; 251
    3e68:	20 81       	ld	r18, Z
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	9f 5f       	subi	r25, 0xFF	; 255
    3e6e:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <TwoWire::rxBufferIndex>
    3e72:	c9 01       	movw	r24, r18
    3e74:	08 95       	ret

00003e76 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    3e76:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <TwoWire::rxBufferIndex>
    3e7a:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <TwoWire::rxBufferLength>
    3e7e:	e8 17       	cp	r30, r24
    3e80:	30 f4       	brcc	.+12     	; 0x3e8e <TwoWire::peek()+0x18>
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	e3 52       	subi	r30, 0x23	; 35
    3e86:	fb 4f       	sbci	r31, 0xFB	; 251
    3e88:	80 81       	ld	r24, Z
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	08 95       	ret
    3e8e:	8f ef       	ldi	r24, 0xFF	; 255
    3e90:	9f ef       	ldi	r25, 0xFF	; 255
    3e92:	08 95       	ret

00003e94 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    3e94:	08 95       	ret

00003e96 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    3e96:	cf 93       	push	r28
    3e98:	df 93       	push	r29
    3e9a:	ec 01       	movw	r28, r24
    3e9c:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <TwoWire::user_onReceive>
    3ea0:	f0 91 b4 04 	lds	r31, 0x04B4	; 0x8004b4 <TwoWire::user_onReceive+0x1>
    3ea4:	30 97       	sbiw	r30, 0x00	; 0
    3ea6:	f1 f0       	breq	.+60     	; 0x3ee4 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    3ea8:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <TwoWire::rxBufferIndex>
    3eac:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <TwoWire::rxBufferLength>
    3eb0:	98 17       	cp	r25, r24
    3eb2:	c0 f0       	brcs	.+48     	; 0x3ee4 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	29 2f       	mov	r18, r25
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	26 17       	cp	r18, r22
    3ebc:	37 07       	cpc	r19, r23
    3ebe:	54 f4       	brge	.+20     	; 0x3ed4 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    3ec0:	de 01       	movw	r26, r28
    3ec2:	a2 0f       	add	r26, r18
    3ec4:	b3 1f       	adc	r27, r19
    3ec6:	4c 91       	ld	r20, X
    3ec8:	23 52       	subi	r18, 0x23	; 35
    3eca:	3b 4f       	sbci	r19, 0xFB	; 251
    3ecc:	d9 01       	movw	r26, r18
    3ece:	4c 93       	st	X, r20
    3ed0:	9f 5f       	subi	r25, 0xFF	; 255
    3ed2:	f1 cf       	rjmp	.-30     	; 0x3eb6 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    3ed4:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <TwoWire::rxBufferIndex>
    3ed8:	60 93 db 04 	sts	0x04DB, r22	; 0x8004db <TwoWire::rxBufferLength>
    3edc:	cb 01       	movw	r24, r22
    3ede:	df 91       	pop	r29
    3ee0:	cf 91       	pop	r28
    3ee2:	09 94       	ijmp
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    3eea:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <TwoWire::user_onRequest>
    3eee:	f0 91 b6 04 	lds	r31, 0x04B6	; 0x8004b6 <TwoWire::user_onRequest+0x1>
    3ef2:	30 97       	sbiw	r30, 0x00	; 0
    3ef4:	29 f0       	breq	.+10     	; 0x3f00 <TwoWire::onRequestService()+0x16>
    3ef6:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <TwoWire::txBufferIndex>
    3efa:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <TwoWire::txBufferLength>
    3efe:	09 94       	ijmp
    3f00:	08 95       	ret

00003f02 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    3f02:	cf 93       	push	r28
    3f04:	df 93       	push	r29
    3f06:	1f 92       	push	r1
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	69 83       	std	Y+1, r22	; 0x01
    3f0e:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <TwoWire::transmitting>
    3f12:	22 23       	and	r18, r18
    3f14:	f9 f0       	breq	.+62     	; 0x3f54 <TwoWire::write(unsigned char)+0x52>
    3f16:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <TwoWire::txBufferLength>
    3f1a:	20 32       	cpi	r18, 0x20	; 32
    3f1c:	58 f0       	brcs	.+22     	; 0x3f34 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    3f1e:	21 e0       	ldi	r18, 0x01	; 1
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	fc 01       	movw	r30, r24
    3f24:	33 83       	std	Z+3, r19	; 0x03
    3f26:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	80 e0       	ldi	r24, 0x00	; 0
    3f2c:	0f 90       	pop	r0
    3f2e:	df 91       	pop	r29
    3f30:	cf 91       	pop	r28
    3f32:	08 95       	ret
    3f34:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <TwoWire::txBufferIndex>
    3f38:	e8 2f       	mov	r30, r24
    3f3a:	f0 e0       	ldi	r31, 0x00	; 0
    3f3c:	e6 54       	subi	r30, 0x46	; 70
    3f3e:	fb 4f       	sbci	r31, 0xFB	; 251
    3f40:	99 81       	ldd	r25, Y+1	; 0x01
    3f42:	90 83       	st	Z, r25
    3f44:	8f 5f       	subi	r24, 0xFF	; 255
    3f46:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <TwoWire::txBufferIndex>
    3f4a:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <TwoWire::txBufferLength>
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	90 e0       	ldi	r25, 0x00	; 0
    3f52:	ec cf       	rjmp	.-40     	; 0x3f2c <TwoWire::write(unsigned char)+0x2a>
    3f54:	61 e0       	ldi	r22, 0x01	; 1
    3f56:	ce 01       	movw	r24, r28
    3f58:	01 96       	adiw	r24, 0x01	; 1
    3f5a:	0e 94 3d 21 	call	0x427a	; 0x427a <twi_transmit>
    3f5e:	f7 cf       	rjmp	.-18     	; 0x3f4e <TwoWire::write(unsigned char)+0x4c>

00003f60 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    3f60:	cf 92       	push	r12
    3f62:	df 92       	push	r13
    3f64:	ef 92       	push	r14
    3f66:	ff 92       	push	r15
    3f68:	0f 93       	push	r16
    3f6a:	1f 93       	push	r17
    3f6c:	cf 93       	push	r28
    3f6e:	df 93       	push	r29
    3f70:	7c 01       	movw	r14, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	8a 01       	movw	r16, r20
    3f76:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <TwoWire::transmitting>
    3f7a:	22 23       	and	r18, r18
    3f7c:	89 f0       	breq	.+34     	; 0x3fa0 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    3f7e:	eb 01       	movw	r28, r22
    3f80:	6b 01       	movw	r12, r22
    3f82:	c4 0e       	add	r12, r20
    3f84:	d5 1e       	adc	r13, r21
    3f86:	cc 15       	cp	r28, r12
    3f88:	dd 05       	cpc	r29, r13
    3f8a:	69 f0       	breq	.+26     	; 0x3fa6 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    3f8c:	69 91       	ld	r22, Y+
    3f8e:	d7 01       	movw	r26, r14
    3f90:	ed 91       	ld	r30, X+
    3f92:	fc 91       	ld	r31, X
    3f94:	01 90       	ld	r0, Z+
    3f96:	f0 81       	ld	r31, Z
    3f98:	e0 2d       	mov	r30, r0
    3f9a:	c7 01       	movw	r24, r14
    3f9c:	09 95       	icall
    3f9e:	f3 cf       	rjmp	.-26     	; 0x3f86 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    3fa0:	64 2f       	mov	r22, r20
    3fa2:	0e 94 3d 21 	call	0x427a	; 0x427a <twi_transmit>
    3fa6:	c8 01       	movw	r24, r16
    3fa8:	df 91       	pop	r29
    3faa:	cf 91       	pop	r28
    3fac:	1f 91       	pop	r17
    3fae:	0f 91       	pop	r16
    3fb0:	ff 90       	pop	r15
    3fb2:	ef 90       	pop	r14
    3fb4:	df 90       	pop	r13
    3fb6:	cf 90       	pop	r12
    3fb8:	08 95       	ret

00003fba <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    3fba:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <TwoWire::rxBufferIndex>
    3fbe:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <TwoWire::rxBufferLength>
    3fc2:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <TwoWire::txBufferIndex>
    3fc6:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <TwoWire::txBufferLength>
    3fca:	0e 94 83 20 	call	0x4106	; 0x4106 <twi_init>
    3fce:	85 e7       	ldi	r24, 0x75	; 117
    3fd0:	9f e1       	ldi	r25, 0x1F	; 31
    3fd2:	0e 94 69 21 	call	0x42d2	; 0x42d2 <twi_attachSlaveTxEvent>
    3fd6:	8b e4       	ldi	r24, 0x4B	; 75
    3fd8:	9f e1       	ldi	r25, 0x1F	; 31
    3fda:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <twi_attachSlaveRxEvent>

00003fde <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <TwoWire::transmitting>
    3fe4:	60 93 da 04 	sts	0x04DA, r22	; 0x8004da <TwoWire::txAddress>
    3fe8:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <TwoWire::txBufferIndex>
    3fec:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <TwoWire::txBufferLength>
    3ff0:	08 95       	ret

00003ff2 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    3ff2:	0f 93       	push	r16
    3ff4:	06 2f       	mov	r16, r22
    3ff6:	21 e0       	ldi	r18, 0x01	; 1
    3ff8:	40 91 b8 04 	lds	r20, 0x04B8	; 0x8004b8 <TwoWire::txBufferLength>
    3ffc:	6a eb       	ldi	r22, 0xBA	; 186
    3ffe:	74 e0       	ldi	r23, 0x04	; 4
    4000:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <TwoWire::txAddress>
    4004:	0e 94 e6 20 	call	0x41cc	; 0x41cc <twi_writeTo>
    4008:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <TwoWire::txBufferIndex>
    400c:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <TwoWire::txBufferLength>
    4010:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <TwoWire::transmitting>
    4014:	0f 91       	pop	r16
    4016:	08 95       	ret

00004018 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    4018:	4f 92       	push	r4
    401a:	5f 92       	push	r5
    401c:	6f 92       	push	r6
    401e:	7f 92       	push	r7
    4020:	af 92       	push	r10
    4022:	bf 92       	push	r11
    4024:	cf 92       	push	r12
    4026:	ef 92       	push	r14
    4028:	ff 92       	push	r15
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	5c 01       	movw	r10, r24
    4034:	f6 2e       	mov	r15, r22
    4036:	d4 2f       	mov	r29, r20
    4038:	28 01       	movw	r4, r16
    403a:	39 01       	movw	r6, r18
    403c:	ee 20       	and	r14, r14
    403e:	19 f1       	breq	.+70     	; 0x4086 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    4040:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <TwoWire::beginTransmission(unsigned char)>
    4044:	ce 2d       	mov	r28, r14
    4046:	c4 30       	cpi	r28, 0x04	; 4
    4048:	08 f0       	brcs	.+2      	; 0x404c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    404a:	c3 e0       	ldi	r28, 0x03	; 3
    404c:	c1 50       	subi	r28, 0x01	; 1
    404e:	b8 f0       	brcs	.+46     	; 0x407e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    4050:	28 e0       	ldi	r18, 0x08	; 8
    4052:	c2 9f       	mul	r28, r18
    4054:	c0 01       	movw	r24, r0
    4056:	11 24       	eor	r1, r1
    4058:	a3 01       	movw	r20, r6
    405a:	92 01       	movw	r18, r4
    405c:	04 c0       	rjmp	.+8      	; 0x4066 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    405e:	56 95       	lsr	r21
    4060:	47 95       	ror	r20
    4062:	37 95       	ror	r19
    4064:	27 95       	ror	r18
    4066:	8a 95       	dec	r24
    4068:	d2 f7       	brpl	.-12     	; 0x405e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    406a:	b9 01       	movw	r22, r18
    406c:	d5 01       	movw	r26, r10
    406e:	ed 91       	ld	r30, X+
    4070:	fc 91       	ld	r31, X
    4072:	01 90       	ld	r0, Z+
    4074:	f0 81       	ld	r31, Z
    4076:	e0 2d       	mov	r30, r0
    4078:	c5 01       	movw	r24, r10
    407a:	09 95       	icall
    407c:	e7 cf       	rjmp	.-50     	; 0x404c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    407e:	60 e0       	ldi	r22, 0x00	; 0
    4080:	c5 01       	movw	r24, r10
    4082:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <TwoWire::endTransmission(unsigned char)>
    4086:	4d 2f       	mov	r20, r29
    4088:	d1 32       	cpi	r29, 0x21	; 33
    408a:	08 f0       	brcs	.+2      	; 0x408e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    408c:	40 e2       	ldi	r20, 0x20	; 32
    408e:	2c 2d       	mov	r18, r12
    4090:	6d ed       	ldi	r22, 0xDD	; 221
    4092:	74 e0       	ldi	r23, 0x04	; 4
    4094:	8f 2d       	mov	r24, r15
    4096:	0e 94 9e 20 	call	0x413c	; 0x413c <twi_readFrom>
    409a:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <TwoWire::rxBufferIndex>
    409e:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <TwoWire::rxBufferLength>
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	1f 91       	pop	r17
    40a8:	0f 91       	pop	r16
    40aa:	ff 90       	pop	r15
    40ac:	ef 90       	pop	r14
    40ae:	cf 90       	pop	r12
    40b0:	bf 90       	pop	r11
    40b2:	af 90       	pop	r10
    40b4:	7f 90       	pop	r7
    40b6:	6f 90       	pop	r6
    40b8:	5f 90       	pop	r5
    40ba:	4f 90       	pop	r4
    40bc:	08 95       	ret

000040be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    40be:	cf 92       	push	r12
    40c0:	ef 92       	push	r14
    40c2:	0f 93       	push	r16
    40c4:	1f 93       	push	r17
    40c6:	c2 2e       	mov	r12, r18
    40c8:	e1 2c       	mov	r14, r1
    40ca:	00 e0       	ldi	r16, 0x00	; 0
    40cc:	10 e0       	ldi	r17, 0x00	; 0
    40ce:	98 01       	movw	r18, r16
    40d0:	0e 94 0c 20 	call	0x4018	; 0x4018 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	ef 90       	pop	r14
    40da:	cf 90       	pop	r12
    40dc:	08 95       	ret

000040de <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    40de:	61 e0       	ldi	r22, 0x01	; 1
    40e0:	0c 94 f9 1f 	jmp	0x3ff2	; 0x3ff2 <TwoWire::endTransmission(unsigned char)>

000040e4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    40e4:	e7 ea       	ldi	r30, 0xA7	; 167
    40e6:	f4 e0       	ldi	r31, 0x04	; 4
    40e8:	13 82       	std	Z+3, r1	; 0x03
    40ea:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    40ec:	88 ee       	ldi	r24, 0xE8	; 232
    40ee:	93 e0       	ldi	r25, 0x03	; 3
    40f0:	a0 e0       	ldi	r26, 0x00	; 0
    40f2:	b0 e0       	ldi	r27, 0x00	; 0
    40f4:	84 83       	std	Z+4, r24	; 0x04
    40f6:	95 83       	std	Z+5, r25	; 0x05
    40f8:	a6 83       	std	Z+6, r26	; 0x06
    40fa:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:54
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    40fc:	89 e7       	ldi	r24, 0x79	; 121
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire/TwoWire.cpp:335
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4104:	08 95       	ret

00004106 <twi_init>:
twi_init():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4106:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <twi_state>
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <twi_sendStop>
    4110:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <twi_inRepStart>
    4114:	61 e0       	ldi	r22, 0x01	; 1
    4116:	83 e1       	ldi	r24, 0x13	; 19
    4118:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    411c:	61 e0       	ldi	r22, 0x01	; 1
    411e:	82 e1       	ldi	r24, 0x12	; 18
    4120:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    4124:	e1 e7       	ldi	r30, 0x71	; 113
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	80 81       	ld	r24, Z
    412a:	8c 7f       	andi	r24, 0xFC	; 252
    412c:	80 83       	st	Z, r24
    412e:	88 e4       	ldi	r24, 0x48	; 72
    4130:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    4134:	85 e4       	ldi	r24, 0x45	; 69
    4136:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
    413a:	08 95       	ret

0000413c <twi_readFrom>:
twi_readFrom():
    413c:	41 32       	cpi	r20, 0x21	; 33
    413e:	08 f0       	brcs	.+2      	; 0x4142 <twi_readFrom+0x6>
    4140:	43 c0       	rjmp	.+134    	; 0x41c8 <twi_readFrom+0x8c>
    4142:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <twi_state>
    4146:	91 11       	cpse	r25, r1
    4148:	fc cf       	rjmp	.-8      	; 0x4142 <twi_readFrom+0x6>
    414a:	91 e0       	ldi	r25, 0x01	; 1
    414c:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <twi_state>
    4150:	20 93 68 05 	sts	0x0568, r18	; 0x800568 <twi_sendStop>
    4154:	2f ef       	ldi	r18, 0xFF	; 255
    4156:	20 93 fd 04 	sts	0x04FD, r18	; 0x8004fd <twi_error>
    415a:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <twi_masterBufferIndex>
    415e:	24 0f       	add	r18, r20
    4160:	20 93 41 05 	sts	0x0541, r18	; 0x800541 <twi_masterBufferLength>
    4164:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <twi_slarw>
    4168:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <twi_slarw>
    416c:	88 0f       	add	r24, r24
    416e:	89 2b       	or	r24, r25
    4170:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_slarw>
    4174:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <twi_inRepStart>
    4178:	81 30       	cpi	r24, 0x01	; 1
    417a:	09 f5       	brne	.+66     	; 0x41be <twi_readFrom+0x82>
    417c:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <twi_inRepStart>
    4180:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <twi_slarw>
    4184:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
    4188:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
    418c:	83 fd       	sbrc	r24, 3
    418e:	f8 cf       	rjmp	.-16     	; 0x4180 <twi_readFrom+0x44>
    4190:	85 ec       	ldi	r24, 0xC5	; 197
    4192:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
    4196:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <twi_state>
    419a:	81 30       	cpi	r24, 0x01	; 1
    419c:	e1 f3       	breq	.-8      	; 0x4196 <twi_readFrom+0x5a>
    419e:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <twi_masterBufferIndex>
    41a2:	84 17       	cp	r24, r20
    41a4:	10 f4       	brcc	.+4      	; 0x41aa <twi_readFrom+0x6e>
    41a6:	40 91 42 05 	lds	r20, 0x0542	; 0x800542 <twi_masterBufferIndex>
    41aa:	a3 e4       	ldi	r26, 0x43	; 67
    41ac:	b5 e0       	ldi	r27, 0x05	; 5
    41ae:	96 2f       	mov	r25, r22
    41b0:	fb 01       	movw	r30, r22
    41b2:	8e 2f       	mov	r24, r30
    41b4:	89 1b       	sub	r24, r25
    41b6:	84 17       	cp	r24, r20
    41b8:	20 f0       	brcs	.+8      	; 0x41c2 <twi_readFrom+0x86>
    41ba:	84 2f       	mov	r24, r20
    41bc:	08 95       	ret
    41be:	85 ee       	ldi	r24, 0xE5	; 229
    41c0:	e8 cf       	rjmp	.-48     	; 0x4192 <twi_readFrom+0x56>
    41c2:	8d 91       	ld	r24, X+
    41c4:	81 93       	st	Z+, r24
    41c6:	f5 cf       	rjmp	.-22     	; 0x41b2 <twi_readFrom+0x76>
    41c8:	40 e0       	ldi	r20, 0x00	; 0
    41ca:	f7 cf       	rjmp	.-18     	; 0x41ba <twi_readFrom+0x7e>

000041cc <twi_writeTo>:
twi_writeTo():
    41cc:	0f 93       	push	r16
    41ce:	41 32       	cpi	r20, 0x21	; 33
    41d0:	08 f0       	brcs	.+2      	; 0x41d4 <twi_writeTo+0x8>
    41d2:	4b c0       	rjmp	.+150    	; 0x426a <twi_writeTo+0x9e>
    41d4:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <twi_state>
    41d8:	91 11       	cpse	r25, r1
    41da:	fc cf       	rjmp	.-8      	; 0x41d4 <twi_writeTo+0x8>
    41dc:	92 e0       	ldi	r25, 0x02	; 2
    41de:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <twi_state>
    41e2:	00 93 68 05 	sts	0x0568, r16	; 0x800568 <twi_sendStop>
    41e6:	9f ef       	ldi	r25, 0xFF	; 255
    41e8:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <twi_error>
    41ec:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <twi_masterBufferIndex>
    41f0:	40 93 41 05 	sts	0x0541, r20	; 0x800541 <twi_masterBufferLength>
    41f4:	36 2f       	mov	r19, r22
    41f6:	a3 e4       	ldi	r26, 0x43	; 67
    41f8:	b5 e0       	ldi	r27, 0x05	; 5
    41fa:	fb 01       	movw	r30, r22
    41fc:	9e 2f       	mov	r25, r30
    41fe:	93 1b       	sub	r25, r19
    4200:	94 17       	cp	r25, r20
    4202:	70 f1       	brcs	.+92     	; 0x4260 <twi_writeTo+0x94>
    4204:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <twi_slarw>
    4208:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <twi_slarw>
    420c:	88 0f       	add	r24, r24
    420e:	89 2b       	or	r24, r25
    4210:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi_slarw>
    4214:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <twi_inRepStart>
    4218:	81 30       	cpi	r24, 0x01	; 1
    421a:	29 f5       	brne	.+74     	; 0x4266 <twi_writeTo+0x9a>
    421c:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <twi_inRepStart>
    4220:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <twi_slarw>
    4224:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
    4228:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
    422c:	83 fd       	sbrc	r24, 3
    422e:	f8 cf       	rjmp	.-16     	; 0x4220 <twi_writeTo+0x54>
    4230:	85 ec       	ldi	r24, 0xC5	; 197
    4232:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
    4236:	22 23       	and	r18, r18
    4238:	21 f0       	breq	.+8      	; 0x4242 <twi_writeTo+0x76>
    423a:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <twi_state>
    423e:	82 30       	cpi	r24, 0x02	; 2
    4240:	d1 f3       	breq	.-12     	; 0x4236 <twi_writeTo+0x6a>
    4242:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <twi_error>
    4246:	8f 3f       	cpi	r24, 0xFF	; 255
    4248:	91 f0       	breq	.+36     	; 0x426e <twi_writeTo+0xa2>
    424a:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <twi_error>
    424e:	80 32       	cpi	r24, 0x20	; 32
    4250:	81 f0       	breq	.+32     	; 0x4272 <twi_writeTo+0xa6>
    4252:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <twi_error>
    4256:	80 33       	cpi	r24, 0x30	; 48
    4258:	71 f0       	breq	.+28     	; 0x4276 <twi_writeTo+0xaa>
    425a:	84 e0       	ldi	r24, 0x04	; 4
    425c:	0f 91       	pop	r16
    425e:	08 95       	ret
    4260:	91 91       	ld	r25, Z+
    4262:	9d 93       	st	X+, r25
    4264:	cb cf       	rjmp	.-106    	; 0x41fc <twi_writeTo+0x30>
    4266:	85 ee       	ldi	r24, 0xE5	; 229
    4268:	e4 cf       	rjmp	.-56     	; 0x4232 <twi_writeTo+0x66>
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	f7 cf       	rjmp	.-18     	; 0x425c <twi_writeTo+0x90>
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	f5 cf       	rjmp	.-22     	; 0x425c <twi_writeTo+0x90>
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	f3 cf       	rjmp	.-26     	; 0x425c <twi_writeTo+0x90>
    4276:	83 e0       	ldi	r24, 0x03	; 3
    4278:	f1 cf       	rjmp	.-30     	; 0x425c <twi_writeTo+0x90>

0000427a <twi_transmit>:
twi_transmit():
    427a:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <twi_txBufferLength>
    427e:	26 0f       	add	r18, r22
    4280:	33 27       	eor	r19, r19
    4282:	33 1f       	adc	r19, r19
    4284:	21 32       	cpi	r18, 0x21	; 33
    4286:	31 05       	cpc	r19, r1
    4288:	ec f4       	brge	.+58     	; 0x42c4 <twi_transmit+0x4a>
    428a:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <twi_state>
    428e:	fc 01       	movw	r30, r24
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	24 30       	cpi	r18, 0x04	; 4
    4296:	69 f0       	breq	.+26     	; 0x42b2 <twi_transmit+0x38>
    4298:	82 e0       	ldi	r24, 0x02	; 2
    429a:	08 95       	ret
    429c:	a0 91 1f 05 	lds	r26, 0x051F	; 0x80051f <twi_txBufferLength>
    42a0:	21 91       	ld	r18, Z+
    42a2:	ac 01       	movw	r20, r24
    42a4:	4f 5d       	subi	r20, 0xDF	; 223
    42a6:	5a 4f       	sbci	r21, 0xFA	; 250
    42a8:	a4 0f       	add	r26, r20
    42aa:	b5 2f       	mov	r27, r21
    42ac:	b1 1d       	adc	r27, r1
    42ae:	2c 93       	st	X, r18
    42b0:	01 96       	adiw	r24, 0x01	; 1
    42b2:	86 17       	cp	r24, r22
    42b4:	98 f3       	brcs	.-26     	; 0x429c <twi_transmit+0x22>
    42b6:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <twi_txBufferLength>
    42ba:	68 0f       	add	r22, r24
    42bc:	60 93 1f 05 	sts	0x051F, r22	; 0x80051f <twi_txBufferLength>
    42c0:	80 e0       	ldi	r24, 0x00	; 0
    42c2:	08 95       	ret
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	08 95       	ret

000042c8 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    42c8:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <twi_onSlaveReceive+0x1>
    42cc:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <twi_onSlaveReceive>
    42d0:	08 95       	ret

000042d2 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    42d2:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <twi_onSlaveTransmit+0x1>
    42d6:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <twi_onSlaveTransmit>
    42da:	08 95       	ret

000042dc <twi_stop>:
twi_stop():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:368
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    42dc:	85 ed       	ldi	r24, 0xD5	; 213
    42de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:372

  // wait for stop condition to be executed on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    42e2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
    42e6:	84 fd       	sbrc	r24, 4
    42e8:	fc cf       	rjmp	.-8      	; 0x42e2 <twi_stop+0x6>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:377
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    42ea:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <twi_state>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:378
}
    42ee:	08 95       	ret

000042f0 <twi_releaseBus>:
twi_releaseBus():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:389
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    42f0:	85 ec       	ldi	r24, 0xC5	; 197
    42f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:392

  // update twi state
  twi_state = TWI_READY;
    42f6:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <twi_state>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:393
}
    42fa:	08 95       	ret

000042fc <__vector_33>:
__vector_33():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:396

ISR(TWI_vect)
{
    42fc:	1f 92       	push	r1
    42fe:	0f 92       	push	r0
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	0f 92       	push	r0
    4304:	11 24       	eor	r1, r1
    4306:	2f 93       	push	r18
    4308:	3f 93       	push	r19
    430a:	4f 93       	push	r20
    430c:	5f 93       	push	r21
    430e:	6f 93       	push	r22
    4310:	7f 93       	push	r23
    4312:	8f 93       	push	r24
    4314:	9f 93       	push	r25
    4316:	af 93       	push	r26
    4318:	bf 93       	push	r27
    431a:	ef 93       	push	r30
    431c:	ff 93       	push	r31
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  switch(TW_STATUS){
    431e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    4322:	88 7f       	andi	r24, 0xF8	; 248
    4324:	80 36       	cpi	r24, 0x60	; 96
    4326:	09 f4       	brne	.+2      	; 0x432a <__vector_33+0x2e>
    4328:	4c c0       	rjmp	.+152    	; 0x43c2 <__vector_33+0xc6>
    432a:	08 f0       	brcs	.+2      	; 0x432e <__vector_33+0x32>
    432c:	3f c0       	rjmp	.+126    	; 0x43ac <__vector_33+0xb0>
    432e:	88 32       	cpi	r24, 0x28	; 40
    4330:	09 f4       	brne	.+2      	; 0x4334 <__vector_33+0x38>
    4332:	a8 c0       	rjmp	.+336    	; 0x4484 <__vector_33+0x188>
    4334:	18 f5       	brcc	.+70     	; 0x437c <__vector_33+0x80>
    4336:	80 31       	cpi	r24, 0x10	; 16
    4338:	09 f4       	brne	.+2      	; 0x433c <__vector_33+0x40>
    433a:	9c c0       	rjmp	.+312    	; 0x4474 <__vector_33+0x178>
    433c:	b8 f4       	brcc	.+46     	; 0x436c <__vector_33+0x70>
    433e:	88 23       	and	r24, r24
    4340:	09 f4       	brne	.+2      	; 0x4344 <__vector_33+0x48>
    4342:	f9 c0       	rjmp	.+498    	; 0x4536 <__vector_33+0x23a>
    4344:	88 30       	cpi	r24, 0x08	; 8
    4346:	09 f4       	brne	.+2      	; 0x434a <__vector_33+0x4e>
    4348:	95 c0       	rjmp	.+298    	; 0x4474 <__vector_33+0x178>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    434a:	ff 91       	pop	r31
    434c:	ef 91       	pop	r30
    434e:	bf 91       	pop	r27
    4350:	af 91       	pop	r26
    4352:	9f 91       	pop	r25
    4354:	8f 91       	pop	r24
    4356:	7f 91       	pop	r23
    4358:	6f 91       	pop	r22
    435a:	5f 91       	pop	r21
    435c:	4f 91       	pop	r20
    435e:	3f 91       	pop	r19
    4360:	2f 91       	pop	r18
    4362:	0f 90       	pop	r0
    4364:	0f be       	out	0x3f, r0	; 63
    4366:	0f 90       	pop	r0
    4368:	1f 90       	pop	r1
    436a:	18 95       	reti
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    436c:	88 31       	cpi	r24, 0x18	; 24
    436e:	09 f4       	brne	.+2      	; 0x4372 <__vector_33+0x76>
    4370:	89 c0       	rjmp	.+274    	; 0x4484 <__vector_33+0x188>
    4372:	80 32       	cpi	r24, 0x20	; 32
    4374:	51 f7       	brne	.-44     	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:432
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4376:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <twi_error>
    437a:	15 c0       	rjmp	.+42     	; 0x43a6 <__vector_33+0xaa>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    437c:	80 34       	cpi	r24, 0x40	; 64
    437e:	09 f4       	brne	.+2      	; 0x4382 <__vector_33+0x86>
    4380:	9e c0       	rjmp	.+316    	; 0x44be <__vector_33+0x1c2>
    4382:	48 f4       	brcc	.+18     	; 0x4396 <__vector_33+0x9a>
    4384:	80 33       	cpi	r24, 0x30	; 48
    4386:	b9 f3       	breq	.-18     	; 0x4376 <__vector_33+0x7a>
    4388:	88 33       	cpi	r24, 0x38	; 56
    438a:	f9 f6       	brne	.-66     	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:436
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    438c:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <twi_error>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:437
      twi_releaseBus();
    4390:	0e 94 78 21 	call	0x42f0	; 0x42f0 <twi_releaseBus>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:438
      break;
    4394:	da cf       	rjmp	.-76     	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4396:	80 35       	cpi	r24, 0x50	; 80
    4398:	09 f4       	brne	.+2      	; 0x439c <__vector_33+0xa0>
    439a:	85 c0       	rjmp	.+266    	; 0x44a6 <__vector_33+0x1aa>
    439c:	88 35       	cpi	r24, 0x58	; 88
    439e:	09 f4       	brne	.+2      	; 0x43a2 <__vector_33+0xa6>
    43a0:	96 c0       	rjmp	.+300    	; 0x44ce <__vector_33+0x1d2>
    43a2:	88 34       	cpi	r24, 0x48	; 72
    43a4:	91 f6       	brne	.-92     	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:555
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    43a6:	0e 94 6e 21 	call	0x42dc	; 0x42dc <twi_stop>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:558
      break;
  }
}
    43aa:	cf cf       	rjmp	.-98     	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    43ac:	88 39       	cpi	r24, 0x98	; 152
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <__vector_33+0xb6>
    43b0:	8c c0       	rjmp	.+280    	; 0x44ca <__vector_33+0x1ce>
    43b2:	38 f5       	brcc	.+78     	; 0x4402 <__vector_33+0x106>
    43b4:	88 37       	cpi	r24, 0x78	; 120
    43b6:	29 f0       	breq	.+10     	; 0x43c2 <__vector_33+0xc6>
    43b8:	50 f4       	brcc	.+20     	; 0x43ce <__vector_33+0xd2>
    43ba:	88 36       	cpi	r24, 0x68	; 104
    43bc:	11 f0       	breq	.+4      	; 0x43c2 <__vector_33+0xc6>
    43be:	80 37       	cpi	r24, 0x70	; 112
    43c0:	21 f6       	brne	.-120    	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:478
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    43c2:	83 e0       	ldi	r24, 0x03	; 3
    43c4:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <twi_state>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:480
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    43c8:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <twi_rxBufferIndex>
    43cc:	57 c0       	rjmp	.+174    	; 0x447c <__vector_33+0x180>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    43ce:	88 38       	cpi	r24, 0x88	; 136
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <__vector_33+0xd8>
    43d2:	7b c0       	rjmp	.+246    	; 0x44ca <__vector_33+0x1ce>
    43d4:	80 39       	cpi	r24, 0x90	; 144
    43d6:	19 f0       	breq	.+6      	; 0x43de <__vector_33+0xe2>
    43d8:	80 38       	cpi	r24, 0x80	; 128
    43da:	09 f0       	breq	.+2      	; 0x43de <__vector_33+0xe2>
    43dc:	b6 cf       	rjmp	.-148    	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:486
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    43de:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <twi_rxBufferIndex>
    43e2:	80 32       	cpi	r24, 0x20	; 32
    43e4:	08 f0       	brcs	.+2      	; 0x43e8 <__vector_33+0xec>
    43e6:	71 c0       	rjmp	.+226    	; 0x44ca <__vector_33+0x1ce>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:488
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    43e8:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twi_rxBufferIndex>
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	8e 0f       	add	r24, r30
    43f0:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <twi_rxBufferIndex>
    43f4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	e1 50       	subi	r30, 0x01	; 1
    43fc:	fb 4f       	sbci	r31, 0xFB	; 251
    43fe:	80 83       	st	Z, r24
    4400:	3d c0       	rjmp	.+122    	; 0x447c <__vector_33+0x180>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4402:	80 3b       	cpi	r24, 0xB0	; 176
    4404:	39 f0       	breq	.+14     	; 0x4414 <__vector_33+0x118>
    4406:	e0 f4       	brcc	.+56     	; 0x4440 <__vector_33+0x144>
    4408:	80 3a       	cpi	r24, 0xA0	; 160
    440a:	09 f4       	brne	.+2      	; 0x440e <__vector_33+0x112>
    440c:	79 c0       	rjmp	.+242    	; 0x4500 <__vector_33+0x204>
    440e:	88 3a       	cpi	r24, 0xA8	; 168
    4410:	09 f0       	breq	.+2      	; 0x4414 <__vector_33+0x118>
    4412:	9b cf       	rjmp	.-202    	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:517

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4414:	84 e0       	ldi	r24, 0x04	; 4
    4416:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <twi_state>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:519
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    441a:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <twi_txBufferIndex>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:521
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    441e:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <twi_txBufferLength>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:524
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4422:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <twi_onSlaveTransmit>
    4426:	f0 91 66 05 	lds	r31, 0x0566	; 0x800566 <twi_onSlaveTransmit+0x1>
    442a:	09 95       	icall
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:526
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    442c:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <twi_txBufferLength>
    4430:	81 11       	cpse	r24, r1
    4432:	0f c0       	rjmp	.+30     	; 0x4452 <__vector_33+0x156>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:527
        twi_txBufferLength = 1;
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <twi_txBufferLength>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:528
        twi_txBuffer[0] = 0x00;
    443a:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <twi_txBuffer>
    443e:	09 c0       	rjmp	.+18     	; 0x4452 <__vector_33+0x156>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:397
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4440:	80 3c       	cpi	r24, 0xC0	; 192
    4442:	09 f4       	brne	.+2      	; 0x4446 <__vector_33+0x14a>
    4444:	76 c0       	rjmp	.+236    	; 0x4532 <__vector_33+0x236>
    4446:	88 3c       	cpi	r24, 0xC8	; 200
    4448:	09 f4       	brne	.+2      	; 0x444c <__vector_33+0x150>
    444a:	73 c0       	rjmp	.+230    	; 0x4532 <__vector_33+0x236>
    444c:	88 3b       	cpi	r24, 0xB8	; 184
    444e:	09 f0       	breq	.+2      	; 0x4452 <__vector_33+0x156>
    4450:	7c cf       	rjmp	.-264    	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:534
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4452:	e0 91 20 05 	lds	r30, 0x0520	; 0x800520 <twi_txBufferIndex>
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	8e 0f       	add	r24, r30
    445a:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <twi_txBufferIndex>
    445e:	f0 e0       	ldi	r31, 0x00	; 0
    4460:	ef 5d       	subi	r30, 0xDF	; 223
    4462:	fa 4f       	sbci	r31, 0xFA	; 250
    4464:	80 81       	ld	r24, Z
    4466:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    446a:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <twi_txBufferIndex>
    446e:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <twi_txBufferLength>
    4472:	29 c0       	rjmp	.+82     	; 0x44c6 <__vector_33+0x1ca>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:402
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4474:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <twi_slarw>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4478:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
twi_reply():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    447c:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    447e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
    4482:	63 cf       	rjmp	.-314    	; 0x434a <__vector_33+0x4e>
__vector_33():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:410

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4484:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <twi_masterBufferIndex>
    4488:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <twi_masterBufferLength>
    448c:	98 17       	cp	r25, r24
    448e:	58 f5       	brcc	.+86     	; 0x44e6 <__vector_33+0x1ea>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:412
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4490:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <twi_masterBufferIndex>
    4494:	81 e0       	ldi	r24, 0x01	; 1
    4496:	8e 0f       	add	r24, r30
    4498:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <twi_masterBufferIndex>
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	ed 5b       	subi	r30, 0xBD	; 189
    44a0:	fa 4f       	sbci	r31, 0xFA	; 250
    44a2:	80 81       	ld	r24, Z
    44a4:	e9 cf       	rjmp	.-46     	; 0x4478 <__vector_33+0x17c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:443
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    44a6:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <twi_masterBufferIndex>
    44aa:	81 e0       	ldi	r24, 0x01	; 1
    44ac:	8e 0f       	add	r24, r30
    44ae:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <twi_masterBufferIndex>
    44b2:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
    44b6:	f0 e0       	ldi	r31, 0x00	; 0
    44b8:	ed 5b       	subi	r30, 0xBD	; 189
    44ba:	fa 4f       	sbci	r31, 0xFA	; 250
    44bc:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:447
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    44be:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <twi_masterBufferIndex>
    44c2:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <twi_masterBufferLength>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:536
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    44c6:	98 17       	cp	r25, r24
    44c8:	c8 f2       	brcs	.-78     	; 0x447c <__vector_33+0x180>
twi_reply():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:355
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    44ca:	85 e8       	ldi	r24, 0x85	; 133
    44cc:	d8 cf       	rjmp	.-80     	; 0x447e <__vector_33+0x182>
__vector_33():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:455
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    44ce:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <twi_masterBufferIndex>
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	8e 0f       	add	r24, r30
    44d6:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <twi_masterBufferIndex>
    44da:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__DATA_REGION_ORIGIN__+0x13>
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	ed 5b       	subi	r30, 0xBD	; 189
    44e2:	fa 4f       	sbci	r31, 0xFA	; 250
    44e4:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:456
  if (twi_sendStop)
    44e6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <twi_sendStop>
    44ea:	81 11       	cpse	r24, r1
    44ec:	5c cf       	rjmp	.-328    	; 0x43a6 <__vector_33+0xaa>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:459
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <twi_inRepStart>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:463
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    44f4:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    44f6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__DATA_REGION_ORIGIN__+0x14>
__vector_33():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:547
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    44fa:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <twi_state>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:548
      break;
    44fe:	25 cf       	rjmp	.-438    	; 0x434a <__vector_33+0x4e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:497
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4500:	0e 94 78 21 	call	0x42f0	; 0x42f0 <twi_releaseBus>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:499
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    4504:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <twi_rxBufferIndex>
    4508:	80 32       	cpi	r24, 0x20	; 32
    450a:	30 f4       	brcc	.+12     	; 0x4518 <__vector_33+0x21c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:500
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    450c:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <twi_rxBufferIndex>
    4510:	f0 e0       	ldi	r31, 0x00	; 0
    4512:	e1 50       	subi	r30, 0x01	; 1
    4514:	fb 4f       	sbci	r31, 0xFB	; 251
    4516:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:503
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4518:	60 91 fe 04 	lds	r22, 0x04FE	; 0x8004fe <twi_rxBufferIndex>
    451c:	70 e0       	ldi	r23, 0x00	; 0
    451e:	e0 91 63 05 	lds	r30, 0x0563	; 0x800563 <twi_onSlaveReceive>
    4522:	f0 91 64 05 	lds	r31, 0x0564	; 0x800564 <twi_onSlaveReceive+0x1>
    4526:	8f ef       	ldi	r24, 0xFF	; 255
    4528:	94 e0       	ldi	r25, 0x04	; 4
    452a:	09 95       	icall
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:505
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    452c:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <twi_rxBufferIndex>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:506
      break;
    4530:	0c cf       	rjmp	.-488    	; 0x434a <__vector_33+0x4e>
twi_reply():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:353
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4532:	85 ec       	ldi	r24, 0xC5	; 197
    4534:	e0 cf       	rjmp	.-64     	; 0x44f6 <__vector_33+0x1fa>
__vector_33():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\Wire\src\TwoWire\utility/twi.c:554

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4536:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <twi_error>
    453a:	35 cf       	rjmp	.-406    	; 0x43a6 <__vector_33+0xaa>

0000453c <RTC_DS3231::begin(TwoWire*)>:
_ZN10RTC_DS32315beginEP7TwoWire():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:61
  i2c_dev->write(buffer, 8);

  uint8_t statreg = read_register(DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_register(DS3231_STATUSREG, statreg);
}
    453c:	ef 92       	push	r14
    453e:	ff 92       	push	r15
    4540:	0f 93       	push	r16
    4542:	1f 93       	push	r17
    4544:	cf 93       	push	r28
    4546:	df 93       	push	r29
    4548:	8c 01       	movw	r16, r24
    454a:	7b 01       	movw	r14, r22
    454c:	fc 01       	movw	r30, r24
    454e:	80 81       	ld	r24, Z
    4550:	91 81       	ldd	r25, Z+1	; 0x01
    4552:	00 97       	sbiw	r24, 0x00	; 0
    4554:	21 f0       	breq	.+8      	; 0x455e <RTC_DS3231::begin(TwoWire*)+0x22>
    4556:	66 e0       	ldi	r22, 0x06	; 6
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <operator delete(void*, unsigned int)>
    455e:	86 e0       	ldi	r24, 0x06	; 6
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <operator new(unsigned int)>
    4566:	ec 01       	movw	r28, r24
    4568:	a7 01       	movw	r20, r14
    456a:	68 e6       	ldi	r22, 0x68	; 104
    456c:	0e 94 6d 23 	call	0x46da	; 0x46da <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
    4570:	f8 01       	movw	r30, r16
    4572:	d1 83       	std	Z+1, r29	; 0x01
    4574:	c0 83       	st	Z, r28
    4576:	61 e0       	ldi	r22, 0x01	; 1
    4578:	ce 01       	movw	r24, r28
    457a:	df 91       	pop	r29
    457c:	cf 91       	pop	r28
    457e:	1f 91       	pop	r17
    4580:	0f 91       	pop	r16
    4582:	ff 90       	pop	r15
    4584:	ef 90       	pop	r14
    4586:	0c 94 95 23 	jmp	0x472a	; 0x472a <Adafruit_I2CDevice::begin(bool)>

0000458a <RTC_DS3231::now()>:
_ZN10RTC_DS32313nowEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:69
/*!
    @brief  Get the current date/time
    @return DateTime object with the current date/time
*/
/**************************************************************************/
DateTime RTC_DS3231::now() {
    458a:	8f 92       	push	r8
    458c:	9f 92       	push	r9
    458e:	af 92       	push	r10
    4590:	bf 92       	push	r11
    4592:	cf 92       	push	r12
    4594:	ef 92       	push	r14
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	cf 93       	push	r28
    459c:	df 93       	push	r29
    459e:	00 d0       	rcall	.+0      	; 0x45a0 <RTC_DS3231::now()+0x16>
    45a0:	00 d0       	rcall	.+0      	; 0x45a2 <RTC_DS3231::now()+0x18>
    45a2:	00 d0       	rcall	.+0      	; 0x45a4 <RTC_DS3231::now()+0x1a>
    45a4:	1f 92       	push	r1
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62
    45aa:	5c 01       	movw	r10, r24
    45ac:	fb 01       	movw	r30, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:71
  uint8_t buffer[7];
  buffer[0] = 0;
    45ae:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:72
  i2c_dev->write_then_read(buffer, 1, buffer, 7);
    45b0:	e1 2c       	mov	r14, r1
    45b2:	07 e0       	ldi	r16, 0x07	; 7
    45b4:	10 e0       	ldi	r17, 0x00	; 0
    45b6:	9e 01       	movw	r18, r28
    45b8:	2f 5f       	subi	r18, 0xFF	; 255
    45ba:	3f 4f       	sbci	r19, 0xFF	; 255
    45bc:	41 e0       	ldi	r20, 0x01	; 1
    45be:	50 e0       	ldi	r21, 0x00	; 0
    45c0:	b9 01       	movw	r22, r18
    45c2:	80 81       	ld	r24, Z
    45c4:	91 81       	ldd	r25, Z+1	; 0x01
    45c6:	0e 94 76 24 	call	0x48ec	; 0x48ec <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:76

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    45ca:	29 81       	ldd	r18, Y+1	; 0x01
    45cc:	2f 77       	andi	r18, 0x7F	; 127
    45ce:	fa 81       	ldd	r31, Y+2	; 0x02
    45d0:	7b 81       	ldd	r23, Y+3	; 0x03
    45d2:	6d 81       	ldd	r22, Y+5	; 0x05
    45d4:	5e 81       	ldd	r21, Y+6	; 0x06
    45d6:	5f 77       	andi	r21, 0x7F	; 127
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:74
DateTime RTC_DS3231::now() {
  uint8_t buffer[7];
  buffer[0] = 0;
  i2c_dev->write_then_read(buffer, 1, buffer, 7);

  return DateTime(bcd2bin(buffer[6]) + 2000U, bcd2bin(buffer[5] & 0x7F),
    45d8:	3f 81       	ldd	r19, Y+7	; 0x07
_ZN7RTC_I2C7bcd2binEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.h:334
      @brief  Convert a binary coded decimal value to binary. RTC stores
    time/date values as BCD.
      @param val BCD value
      @return Binary value
  */
  static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    45da:	82 2f       	mov	r24, r18
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	44 e0       	ldi	r20, 0x04	; 4
    45e0:	95 95       	asr	r25
    45e2:	87 95       	ror	r24
    45e4:	4a 95       	dec	r20
    45e6:	e1 f7       	brne	.-8      	; 0x45e0 <RTC_DS3231::now()+0x56>
    45e8:	98 2f       	mov	r25, r24
    45ea:	99 0f       	add	r25, r25
    45ec:	99 0f       	add	r25, r25
    45ee:	c8 2e       	mov	r12, r24
    45f0:	c9 1a       	sub	r12, r25
    45f2:	cc 0c       	add	r12, r12
    45f4:	c2 0e       	add	r12, r18
    45f6:	8f 2f       	mov	r24, r31
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	e4 e0       	ldi	r30, 0x04	; 4
    45fc:	95 95       	asr	r25
    45fe:	87 95       	ror	r24
    4600:	ea 95       	dec	r30
    4602:	e1 f7       	brne	.-8      	; 0x45fc <RTC_DS3231::now()+0x72>
    4604:	98 2f       	mov	r25, r24
    4606:	99 0f       	add	r25, r25
    4608:	99 0f       	add	r25, r25
    460a:	e8 2e       	mov	r14, r24
    460c:	e9 1a       	sub	r14, r25
    460e:	ee 0c       	add	r14, r14
    4610:	ef 0e       	add	r14, r31
    4612:	87 2e       	mov	r8, r23
    4614:	91 2c       	mov	r9, r1
    4616:	f4 e0       	ldi	r31, 0x04	; 4
    4618:	95 94       	asr	r9
    461a:	87 94       	ror	r8
    461c:	fa 95       	dec	r31
    461e:	e1 f7       	brne	.-8      	; 0x4618 <RTC_DS3231::now()+0x8e>
    4620:	88 2d       	mov	r24, r8
    4622:	88 0f       	add	r24, r24
    4624:	88 0f       	add	r24, r24
    4626:	08 2d       	mov	r16, r8
    4628:	08 1b       	sub	r16, r24
    462a:	00 0f       	add	r16, r16
    462c:	07 0f       	add	r16, r23
    462e:	a6 2f       	mov	r26, r22
    4630:	b0 e0       	ldi	r27, 0x00	; 0
    4632:	14 e0       	ldi	r17, 0x04	; 4
    4634:	b5 95       	asr	r27
    4636:	a7 95       	ror	r26
    4638:	1a 95       	dec	r17
    463a:	e1 f7       	brne	.-8      	; 0x4634 <RTC_DS3231::now()+0xaa>
    463c:	8a 2f       	mov	r24, r26
    463e:	88 0f       	add	r24, r24
    4640:	88 0f       	add	r24, r24
    4642:	2a 2f       	mov	r18, r26
    4644:	28 1b       	sub	r18, r24
    4646:	22 0f       	add	r18, r18
    4648:	26 0f       	add	r18, r22
    464a:	e5 2f       	mov	r30, r21
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	84 e0       	ldi	r24, 0x04	; 4
    4650:	f5 95       	asr	r31
    4652:	e7 95       	ror	r30
    4654:	8a 95       	dec	r24
    4656:	e1 f7       	brne	.-8      	; 0x4650 <RTC_DS3231::now()+0xc6>
    4658:	8e 2f       	mov	r24, r30
    465a:	88 0f       	add	r24, r24
    465c:	88 0f       	add	r24, r24
    465e:	4e 2f       	mov	r20, r30
    4660:	48 1b       	sub	r20, r24
    4662:	44 0f       	add	r20, r20
    4664:	45 0f       	add	r20, r21
    4666:	83 2f       	mov	r24, r19
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	54 e0       	ldi	r21, 0x04	; 4
    466c:	95 95       	asr	r25
    466e:	87 95       	ror	r24
    4670:	5a 95       	dec	r21
    4672:	e1 f7       	brne	.-8      	; 0x466c <RTC_DS3231::now()+0xe2>
    4674:	98 2f       	mov	r25, r24
    4676:	99 0f       	add	r25, r25
    4678:	99 0f       	add	r25, r25
    467a:	68 2f       	mov	r22, r24
    467c:	69 1b       	sub	r22, r25
    467e:	66 0f       	add	r22, r22
    4680:	63 0f       	add	r22, r19
_ZN10RTC_DS32313nowEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:74
    4682:	70 e0       	ldi	r23, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:76
                  bcd2bin(buffer[4]), bcd2bin(buffer[2]), bcd2bin(buffer[1]),
                  bcd2bin(buffer[0] & 0x7F));
    4684:	60 53       	subi	r22, 0x30	; 48
    4686:	78 4f       	sbci	r23, 0xF8	; 248
    4688:	c5 01       	movw	r24, r10
    468a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTC_DS3231.cpp:77
}
    468e:	c5 01       	movw	r24, r10
    4690:	27 96       	adiw	r28, 0x07	; 7
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	de bf       	out	0x3e, r29	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	cd bf       	out	0x3d, r28	; 61
    469c:	df 91       	pop	r29
    469e:	cf 91       	pop	r28
    46a0:	1f 91       	pop	r17
    46a2:	0f 91       	pop	r16
    46a4:	ef 90       	pop	r14
    46a6:	cf 90       	pop	r12
    46a8:	bf 90       	pop	r11
    46aa:	af 90       	pop	r10
    46ac:	9f 90       	pop	r9
    46ae:	8f 90       	pop	r8
    46b0:	08 95       	ret

000046b2 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN8DateTimeC2Ejhhhhh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:202
    @param month Month number (1--12).
    @param day Day of the month (1--31).
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
    46b2:	cf 92       	push	r12
    46b4:	ef 92       	push	r14
    46b6:	0f 93       	push	r16
    46b8:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:204
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
    46ba:	60 3d       	cpi	r22, 0xD0	; 208
    46bc:	87 e0       	ldi	r24, 0x07	; 7
    46be:	78 07       	cpc	r23, r24
    46c0:	10 f0       	brcs	.+4      	; 0x46c6 <DateTime::DateTime(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x14>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:205
    year -= 2000U;
    46c2:	60 5d       	subi	r22, 0xD0	; 208
    46c4:	77 40       	sbci	r23, 0x07	; 7
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:206
  yOff = year;
    46c6:	60 83       	st	Z, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:207
  m = month;
    46c8:	41 83       	std	Z+1, r20	; 0x01
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:208
  d = day;
    46ca:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:209
  hh = hour;
    46cc:	03 83       	std	Z+3, r16	; 0x03
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:210
  mm = min;
    46ce:	e4 82       	std	Z+4, r14	; 0x04
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:211
  ss = sec;
    46d0:	c5 82       	std	Z+5, r12	; 0x05
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\RTClib\src/RTClib.cpp:212
}
    46d2:	0f 91       	pop	r16
    46d4:	ef 90       	pop	r14
    46d6:	cf 90       	pop	r12
    46d8:	08 95       	ret

000046da <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
_ZN18Adafruit_I2CDeviceC2EhP7TwoWire():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:55
      (defined(ARDUINO_ARCH_AVR) && !defined(WIRE_HAS_END)) ||                 \
      defined(ARDUINO_ARCH_ESP32))
  _wire->end();
  _begun = false;
#endif
}
    46da:	fc 01       	movw	r30, r24
    46dc:	60 83       	st	Z, r22
    46de:	52 83       	std	Z+2, r21	; 0x02
    46e0:	41 83       	std	Z+1, r20	; 0x01
    46e2:	13 82       	std	Z+3, r1	; 0x03
    46e4:	80 e2       	ldi	r24, 0x20	; 32
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	95 83       	std	Z+5, r25	; 0x05
    46ea:	84 83       	std	Z+4, r24	; 0x04
    46ec:	08 95       	ret

000046ee <Adafruit_I2CDevice::detected()>:
_ZN18Adafruit_I2CDevice8detectedEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:62
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
    46ee:	cf 93       	push	r28
    46f0:	df 93       	push	r29
    46f2:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    46f4:	8b 81       	ldd	r24, Y+3	; 0x03
    46f6:	88 23       	and	r24, r24
    46f8:	81 f0       	breq	.+32     	; 0x471a <Adafruit_I2CDevice::detected()+0x2c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:69
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
    46fa:	68 81       	ld	r22, Y
    46fc:	89 81       	ldd	r24, Y+1	; 0x01
    46fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4700:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <TwoWire::beginTransmission(unsigned char)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:70
  if (_wire->endTransmission() == 0) {
    4704:	89 81       	ldd	r24, Y+1	; 0x01
    4706:	9a 81       	ldd	r25, Y+2	; 0x02
    4708:	0e 94 6f 20 	call	0x40de	; 0x40de <TwoWire::endTransmission()>
    470c:	91 e0       	ldi	r25, 0x01	; 1
    470e:	81 11       	cpse	r24, r1
    4710:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:80
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
    4712:	89 2f       	mov	r24, r25
    4714:	df 91       	pop	r29
    4716:	cf 91       	pop	r28
    4718:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:64 (discriminator 1)
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
  // Init I2C if not done yet
  if (!_begun && !begin()) {
    471a:	61 e0       	ldi	r22, 0x01	; 1
    471c:	ce 01       	movw	r24, r28
    471e:	0e 94 95 23 	call	0x472a	; 0x472a <Adafruit_I2CDevice::begin(bool)>
    4722:	98 2f       	mov	r25, r24
    4724:	81 11       	cpse	r24, r1
    4726:	e9 cf       	rjmp	.-46     	; 0x46fa <Adafruit_I2CDevice::detected()+0xc>
    4728:	f4 cf       	rjmp	.-24     	; 0x4712 <Adafruit_I2CDevice::detected()+0x24>

0000472a <Adafruit_I2CDevice::begin(bool)>:
_ZN18Adafruit_I2CDevice5beginEb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:30
 *    @param  addr_detect Whether we should attempt to detect the I2C address
 * with a scan. 99% of sensors/devices don't mind but once in a while, they spaz
 * on a scan!
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    472a:	1f 93       	push	r17
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	ec 01       	movw	r28, r24
    4732:	16 2f       	mov	r17, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:31
  _wire->begin();
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	9a 81       	ldd	r25, Y+2	; 0x02
    4738:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <TwoWire::begin()>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:32
  _begun = true;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:34

  if (addr_detect) {
    4740:	11 23       	and	r17, r17
    4742:	31 f0       	breq	.+12     	; 0x4750 <Adafruit_I2CDevice::begin(bool)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35
    return detected();
    4744:	ce 01       	movw	r24, r28
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:38
  }
  return true;
}
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	1f 91       	pop	r17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:35
bool Adafruit_I2CDevice::begin(bool addr_detect) {
  _wire->begin();
  _begun = true;

  if (addr_detect) {
    return detected();
    474c:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <Adafruit_I2CDevice::detected()>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:38
  }
  return true;
}
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	1f 91       	pop	r17
    4758:	08 95       	ret

0000475a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:97
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    475a:	8f 92       	push	r8
    475c:	9f 92       	push	r9
    475e:	bf 92       	push	r11
    4760:	cf 92       	push	r12
    4762:	df 92       	push	r13
    4764:	ef 92       	push	r14
    4766:	ff 92       	push	r15
    4768:	0f 93       	push	r16
    476a:	1f 93       	push	r17
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:98
  if ((len + prefix_len) > maxBufferSize()) {
    4770:	da 01       	movw	r26, r20
    4772:	ae 0d       	add	r26, r14
    4774:	bf 1d       	adc	r27, r15
    4776:	ec 01       	movw	r28, r24
    4778:	ec 81       	ldd	r30, Y+4	; 0x04
    477a:	fd 81       	ldd	r31, Y+5	; 0x05
    477c:	ea 17       	cp	r30, r26
    477e:	fb 07       	cpc	r31, r27
    4780:	10 f4       	brcc	.+4      	; 0x4786 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x2c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:154
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	21 c0       	rjmp	.+66     	; 0x47c8 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x6e>
    4786:	b2 2e       	mov	r11, r18
    4788:	6a 01       	movw	r12, r20
    478a:	4b 01       	movw	r8, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:108
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    478c:	68 81       	ld	r22, Y
    478e:	89 81       	ldd	r24, Y+1	; 0x01
    4790:	9a 81       	ldd	r25, Y+2	; 0x02
    4792:	0e 94 ef 1f 	call	0x3fde	; 0x3fde <TwoWire::beginTransmission(unsigned char)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:111

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    4796:	e1 14       	cp	r14, r1
    4798:	f1 04       	cpc	r15, r1
    479a:	19 f5       	brne	.+70     	; 0x47e2 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x88>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:121
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
    479c:	89 81       	ldd	r24, Y+1	; 0x01
    479e:	9a 81       	ldd	r25, Y+2	; 0x02
    47a0:	dc 01       	movw	r26, r24
    47a2:	ed 91       	ld	r30, X+
    47a4:	fc 91       	ld	r31, X
    47a6:	02 80       	ldd	r0, Z+2	; 0x02
    47a8:	f3 81       	ldd	r31, Z+3	; 0x03
    47aa:	e0 2d       	mov	r30, r0
    47ac:	a6 01       	movw	r20, r12
    47ae:	b4 01       	movw	r22, r8
    47b0:	09 95       	icall
    47b2:	c8 16       	cp	r12, r24
    47b4:	d9 06       	cpc	r13, r25
    47b6:	29 f7       	brne	.-54     	; 0x4782 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x28>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:154
  if (stop) {
    DEBUG_SERIAL.print("\tSTOP");
  }
#endif

  if (_wire->endTransmission(stop) == 0) {
    47b8:	6b 2d       	mov	r22, r11
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	9a 81       	ldd	r25, Y+2	; 0x02
    47be:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <TwoWire::endTransmission(unsigned char)>
    47c2:	91 e0       	ldi	r25, 0x01	; 1
    47c4:	81 11       	cpse	r24, r1
    47c6:	dd cf       	rjmp	.-70     	; 0x4782 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x28>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:166
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    47c8:	89 2f       	mov	r24, r25
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	1f 91       	pop	r17
    47d0:	0f 91       	pop	r16
    47d2:	ff 90       	pop	r15
    47d4:	ef 90       	pop	r14
    47d6:	df 90       	pop	r13
    47d8:	cf 90       	pop	r12
    47da:	bf 90       	pop	r11
    47dc:	9f 90       	pop	r9
    47de:	8f 90       	pop	r8
    47e0:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:111 (discriminator 1)
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    47e2:	01 15       	cp	r16, r1
    47e4:	11 05       	cpc	r17, r1
    47e6:	d1 f2       	breq	.-76     	; 0x479c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x42>
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:112
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    47ec:	dc 01       	movw	r26, r24
    47ee:	ed 91       	ld	r30, X+
    47f0:	fc 91       	ld	r31, X
    47f2:	02 80       	ldd	r0, Z+2	; 0x02
    47f4:	f3 81       	ldd	r31, Z+3	; 0x03
    47f6:	e0 2d       	mov	r30, r0
    47f8:	a7 01       	movw	r20, r14
    47fa:	b8 01       	movw	r22, r16
    47fc:	09 95       	icall
    47fe:	8e 15       	cp	r24, r14
    4800:	9f 05       	cpc	r25, r15
    4802:	09 f0       	breq	.+2      	; 0x4806 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0xac>
    4804:	be cf       	rjmp	.-132    	; 0x4782 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x28>
    4806:	ca cf       	rjmp	.-108    	; 0x479c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x42>

00004808 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
_ZN18Adafruit_I2CDevice5_readEPhjb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:189
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    4808:	cf 92       	push	r12
    480a:	df 92       	push	r13
    480c:	ef 92       	push	r14
    480e:	ff 92       	push	r15
    4810:	0f 93       	push	r16
    4812:	1f 93       	push	r17
    4814:	cf 93       	push	r28
    4816:	df 93       	push	r29
    4818:	7c 01       	movw	r14, r24
    481a:	6b 01       	movw	r12, r22
    481c:	8a 01       	movw	r16, r20
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:195
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    481e:	dc 01       	movw	r26, r24
    4820:	6c 91       	ld	r22, X
    4822:	11 96       	adiw	r26, 0x01	; 1
    4824:	8d 91       	ld	r24, X+
    4826:	9c 91       	ld	r25, X
    4828:	0e 94 5f 20 	call	0x40be	; 0x40be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:198
#endif

  if (recv != len) {
    482c:	80 17       	cp	r24, r16
    482e:	11 06       	cpc	r1, r17
    4830:	91 f4       	brne	.+36     	; 0x4856 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4e>
    4832:	e6 01       	movw	r28, r12
    4834:	0c 0d       	add	r16, r12
    4836:	1d 1d       	adc	r17, r13
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:207
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    4838:	c0 17       	cp	r28, r16
    483a:	d1 07       	cpc	r29, r17
    483c:	b1 f0       	breq	.+44     	; 0x486a <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:208
    buffer[i] = _wire->read();
    483e:	f7 01       	movw	r30, r14
    4840:	81 81       	ldd	r24, Z+1	; 0x01
    4842:	92 81       	ldd	r25, Z+2	; 0x02
    4844:	dc 01       	movw	r26, r24
    4846:	ed 91       	ld	r30, X+
    4848:	fc 91       	ld	r31, X
    484a:	02 84       	ldd	r0, Z+10	; 0x0a
    484c:	f3 85       	ldd	r31, Z+11	; 0x0b
    484e:	e0 2d       	mov	r30, r0
    4850:	09 95       	icall
    4852:	89 93       	st	Y+, r24
    4854:	f1 cf       	rjmp	.-30     	; 0x4838 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x30>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:204
    // Not enough data available to fulfill our obligation!
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.print(F("\tI2CDevice did not receive enough data: "));
    DEBUG_SERIAL.println(recv);
#endif
    return false;
    4856:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:227
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    4858:	df 91       	pop	r29
    485a:	cf 91       	pop	r28
    485c:	1f 91       	pop	r17
    485e:	0f 91       	pop	r16
    4860:	ff 90       	pop	r15
    4862:	ef 90       	pop	r14
    4864:	df 90       	pop	r13
    4866:	cf 90       	pop	r12
    4868:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:207
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	f5 cf       	rjmp	.-22     	; 0x4858 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x50>

0000486e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)>:
_ZN18Adafruit_I2CDevice4readEPhjb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:176
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
    486e:	9f 92       	push	r9
    4870:	af 92       	push	r10
    4872:	bf 92       	push	r11
    4874:	cf 92       	push	r12
    4876:	df 92       	push	r13
    4878:	ef 92       	push	r14
    487a:	ff 92       	push	r15
    487c:	0f 93       	push	r16
    487e:	1f 93       	push	r17
    4880:	cf 93       	push	r28
    4882:	df 93       	push	r29
    4884:	6c 01       	movw	r12, r24
    4886:	5b 01       	movw	r10, r22
    4888:	7a 01       	movw	r14, r20
    488a:	92 2e       	mov	r9, r18
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:177
  size_t pos = 0;
    488c:	d0 e0       	ldi	r29, 0x00	; 0
    488e:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:178
  while (pos < len) {
    4890:	ce 15       	cp	r28, r14
    4892:	df 05       	cpc	r29, r15
    4894:	f0 f4       	brcc	.+60     	; 0x48d2 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x64>
    4896:	f6 01       	movw	r30, r12
    4898:	84 81       	ldd	r24, Z+4	; 0x04
    489a:	95 81       	ldd	r25, Z+5	; 0x05
    489c:	87 01       	movw	r16, r14
    489e:	0c 1b       	sub	r16, r28
    48a0:	1d 0b       	sbc	r17, r29
    48a2:	80 17       	cp	r24, r16
    48a4:	91 07       	cpc	r25, r17
    48a6:	08 f4       	brcc	.+2      	; 0x48aa <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x3c>
    48a8:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:181
    size_t read_len =
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    48aa:	c7 01       	movw	r24, r14
    48ac:	80 1b       	sub	r24, r16
    48ae:	91 0b       	sbc	r25, r17
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	c8 17       	cp	r28, r24
    48b4:	d9 07       	cpc	r29, r25
    48b6:	08 f0       	brcs	.+2      	; 0x48ba <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x4c>
    48b8:	29 2d       	mov	r18, r9
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:182 (discriminator 6)
    if (!_read(buffer + pos, read_len, read_stop))
    48ba:	a8 01       	movw	r20, r16
    48bc:	b5 01       	movw	r22, r10
    48be:	6c 0f       	add	r22, r28
    48c0:	7d 1f       	adc	r23, r29
    48c2:	c6 01       	movw	r24, r12
    48c4:	0e 94 04 24 	call	0x4808	; 0x4808 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    48c8:	88 23       	and	r24, r24
    48ca:	21 f0       	breq	.+8      	; 0x48d4 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x66>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:184
      return false;
    pos += read_len;
    48cc:	c0 0f       	add	r28, r16
    48ce:	d1 1f       	adc	r29, r17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:178
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  size_t pos = 0;
  while (pos < len) {
    48d0:	df cf       	rjmp	.-66     	; 0x4890 <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)+0x22>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:186
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    if (!_read(buffer + pos, read_len, read_stop))
      return false;
    pos += read_len;
  }
  return true;
    48d2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:187
}
    48d4:	df 91       	pop	r29
    48d6:	cf 91       	pop	r28
    48d8:	1f 91       	pop	r17
    48da:	0f 91       	pop	r16
    48dc:	ff 90       	pop	r15
    48de:	ef 90       	pop	r14
    48e0:	df 90       	pop	r13
    48e2:	cf 90       	pop	r12
    48e4:	bf 90       	pop	r11
    48e6:	af 90       	pop	r10
    48e8:	9f 90       	pop	r9
    48ea:	08 95       	ret

000048ec <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:242
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    48ec:	af 92       	push	r10
    48ee:	bf 92       	push	r11
    48f0:	cf 92       	push	r12
    48f2:	df 92       	push	r13
    48f4:	ef 92       	push	r14
    48f6:	ff 92       	push	r15
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	ec 01       	movw	r28, r24
    4902:	69 01       	movw	r12, r18
    4904:	58 01       	movw	r10, r16
    4906:	2e 2d       	mov	r18, r14
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:243
  if (!write(write_buffer, write_len, stop)) {
    4908:	f1 2c       	mov	r15, r1
    490a:	e1 2c       	mov	r14, r1
    490c:	10 e0       	ldi	r17, 0x00	; 0
    490e:	00 e0       	ldi	r16, 0x00	; 0
    4910:	0e 94 ad 23 	call	0x475a	; 0x475a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    4914:	88 23       	and	r24, r24
    4916:	81 f0       	breq	.+32     	; 0x4938 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x4c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:247
    return false;
  }

  return read(read_buffer, read_len);
    4918:	21 e0       	ldi	r18, 0x01	; 1
    491a:	a5 01       	movw	r20, r10
    491c:	b6 01       	movw	r22, r12
    491e:	ce 01       	movw	r24, r28
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:248
}
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
    4924:	1f 91       	pop	r17
    4926:	0f 91       	pop	r16
    4928:	ff 90       	pop	r15
    492a:	ef 90       	pop	r14
    492c:	df 90       	pop	r13
    492e:	cf 90       	pop	r12
    4930:	bf 90       	pop	r11
    4932:	af 90       	pop	r10
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:247
                                         size_t read_len, bool stop) {
  if (!write(write_buffer, write_len, stop)) {
    return false;
  }

  return read(read_buffer, read_len);
    4934:	0c 94 37 24 	jmp	0x486e	; 0x486e <Adafruit_I2CDevice::read(unsigned char*, unsigned int, bool)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\Adafruit_BusIO/Adafruit_I2CDevice.cpp:248
}
    4938:	80 e0       	ldi	r24, 0x00	; 0
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	1f 91       	pop	r17
    4940:	0f 91       	pop	r16
    4942:	ff 90       	pop	r15
    4944:	ef 90       	pop	r14
    4946:	df 90       	pop	r13
    4948:	cf 90       	pop	r12
    494a:	bf 90       	pop	r11
    494c:	af 90       	pop	r10
    494e:	08 95       	ret

00004950 <isr()>:
_ZN14SoftwareSerial16handle_interruptEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:308
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    4950:	e0 91 ad 05 	lds	r30, 0x05AD	; 0x8005ad <SoftwareSerial::active_object>
    4954:	f0 91 ae 05 	lds	r31, 0x05AE	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4958:	30 97       	sbiw	r30, 0x00	; 0
    495a:	09 f4       	brne	.+2      	; 0x495e <isr()+0xe>
    495c:	4d c0       	rjmp	.+154    	; 0x49f8 <isr()+0xa8>
    495e:	a6 85       	ldd	r26, Z+14	; 0x0e
    4960:	b7 85       	ldd	r27, Z+15	; 0x0f
    4962:	85 85       	ldd	r24, Z+13	; 0x0d
_ZN14SoftwareSerial4recvEv():
    4964:	96 8d       	ldd	r25, Z+30	; 0x1e
    4966:	91 ff       	sbrs	r25, 1
    4968:	04 c0       	rjmp	.+8      	; 0x4972 <isr()+0x22>
_ZN14SoftwareSerial11rx_pin_readEv():
    496a:	9c 91       	ld	r25, X
    496c:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    496e:	29 f4       	brne	.+10     	; 0x497a <isr()+0x2a>
    4970:	08 95       	ret
_ZN14SoftwareSerial11rx_pin_readEv():
    4972:	9c 91       	ld	r25, X
    4974:	89 23       	and	r24, r25
_ZN14SoftwareSerial4recvEv():
    4976:	09 f0       	breq	.+2      	; 0x497a <isr()+0x2a>
    4978:	3f c0       	rjmp	.+126    	; 0x49f8 <isr()+0xa8>
_ZN14SoftwareSerial11setRxIntMskEb():
    497a:	a3 89       	ldd	r26, Z+19	; 0x13
    497c:	b4 89       	ldd	r27, Z+20	; 0x14
    497e:	9c 91       	ld	r25, X
    4980:	85 89       	ldd	r24, Z+21	; 0x15
    4982:	80 95       	com	r24
    4984:	89 23       	and	r24, r25
    4986:	8c 93       	st	X, r24
_delay_loop_2():
    4988:	86 89       	ldd	r24, Z+22	; 0x16
    498a:	97 89       	ldd	r25, Z+23	; 0x17
    498c:	01 97       	sbiw	r24, 0x01	; 1
    498e:	f1 f7       	brne	.-4      	; 0x498c <isr()+0x3c>
_ZN14SoftwareSerial4recvEv():
    4990:	60 8d       	ldd	r22, Z+24	; 0x18
    4992:	71 8d       	ldd	r23, Z+25	; 0x19
_ZN14SoftwareSerial11rx_pin_readEv():
    4994:	a6 85       	ldd	r26, Z+14	; 0x0e
    4996:	b7 85       	ldd	r27, Z+15	; 0x0f
    4998:	55 85       	ldd	r21, Z+13	; 0x0d
    499a:	38 e0       	ldi	r19, 0x08	; 8
_ZN14SoftwareSerial4recvEv():
    499c:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
    499e:	cb 01       	movw	r24, r22
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	f1 f7       	brne	.-4      	; 0x49a0 <isr()+0x50>
_ZN14SoftwareSerial4recvEv():
    49a4:	82 2f       	mov	r24, r18
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	95 95       	asr	r25
    49aa:	87 95       	ror	r24
    49ac:	28 2f       	mov	r18, r24
_ZN14SoftwareSerial11rx_pin_readEv():
    49ae:	4c 91       	ld	r20, X
    49b0:	45 23       	and	r20, r21
_ZN14SoftwareSerial4recvEv():
    49b2:	09 f0       	breq	.+2      	; 0x49b6 <isr()+0x66>
    49b4:	20 68       	ori	r18, 0x80	; 128
    49b6:	31 50       	subi	r19, 0x01	; 1
    49b8:	91 f7       	brne	.-28     	; 0x499e <isr()+0x4e>
    49ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    49bc:	81 fd       	sbrc	r24, 1
    49be:	20 95       	com	r18
    49c0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <SoftwareSerial::_receive_buffer_tail>
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	01 96       	adiw	r24, 0x01	; 1
    49c8:	8f 73       	andi	r24, 0x3F	; 63
    49ca:	99 27       	eor	r25, r25
    49cc:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    49d0:	38 17       	cp	r19, r24
    49d2:	99 f0       	breq	.+38     	; 0x49fa <isr()+0xaa>
    49d4:	a0 91 6c 05 	lds	r26, 0x056C	; 0x80056c <SoftwareSerial::_receive_buffer_tail>
    49d8:	b0 e0       	ldi	r27, 0x00	; 0
    49da:	a3 59       	subi	r26, 0x93	; 147
    49dc:	ba 4f       	sbci	r27, 0xFA	; 250
    49de:	2c 93       	st	X, r18
    49e0:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <SoftwareSerial::_receive_buffer_tail>
_delay_loop_2():
    49e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    49e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    49e8:	01 97       	sbiw	r24, 0x01	; 1
    49ea:	f1 f7       	brne	.-4      	; 0x49e8 <isr()+0x98>
_ZN14SoftwareSerial11setRxIntMskEb():
    49ec:	a3 89       	ldd	r26, Z+19	; 0x13
    49ee:	b4 89       	ldd	r27, Z+20	; 0x14
    49f0:	8c 91       	ld	r24, X
    49f2:	95 89       	ldd	r25, Z+21	; 0x15
    49f4:	89 2b       	or	r24, r25
    49f6:	8c 93       	st	X, r24
_ZL3isrv():
    49f8:	08 95       	ret
_ZN14SoftwareSerial4recvEv():
    49fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    49fc:	81 60       	ori	r24, 0x01	; 1
    49fe:	86 8f       	std	Z+30, r24	; 0x1e
    4a00:	f1 cf       	rjmp	.-30     	; 0x49e4 <isr()+0x94>

00004a02 <SoftwareSerial::read()>:
_ZN14SoftwareSerial4readEv():
    4a02:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <SoftwareSerial::active_object>
    4a06:	30 91 ae 05 	lds	r19, 0x05AE	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4a0a:	28 17       	cp	r18, r24
    4a0c:	39 07       	cpc	r19, r25
    4a0e:	b9 f4       	brne	.+46     	; 0x4a3e <SoftwareSerial::read()+0x3c>
    4a10:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4a14:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <SoftwareSerial::_receive_buffer_tail>
    4a18:	98 17       	cp	r25, r24
    4a1a:	89 f0       	breq	.+34     	; 0x4a3e <SoftwareSerial::read()+0x3c>
    4a1c:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4a20:	f0 e0       	ldi	r31, 0x00	; 0
    4a22:	e3 59       	subi	r30, 0x93	; 147
    4a24:	fa 4f       	sbci	r31, 0xFA	; 250
    4a26:	80 81       	ld	r24, Z
    4a28:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	2f 5f       	subi	r18, 0xFF	; 255
    4a30:	3f 4f       	sbci	r19, 0xFF	; 255
    4a32:	2f 73       	andi	r18, 0x3F	; 63
    4a34:	33 27       	eor	r19, r19
    4a36:	20 93 6b 05 	sts	0x056B, r18	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	08 95       	ret
    4a3e:	8f ef       	ldi	r24, 0xFF	; 255
    4a40:	9f ef       	ldi	r25, 0xFF	; 255
    4a42:	08 95       	ret

00004a44 <SoftwareSerial::write(unsigned char)>:
_ZN14SoftwareSerial5writeEh():
    4a44:	ef 92       	push	r14
    4a46:	ff 92       	push	r15
    4a48:	0f 93       	push	r16
    4a4a:	1f 93       	push	r17
    4a4c:	cf 93       	push	r28
    4a4e:	df 93       	push	r29
    4a50:	dc 01       	movw	r26, r24
    4a52:	5c 96       	adiw	r26, 0x1c	; 28
    4a54:	ed 90       	ld	r14, X+
    4a56:	fc 90       	ld	r15, X
    4a58:	5d 97       	sbiw	r26, 0x1d	; 29
    4a5a:	e1 14       	cp	r14, r1
    4a5c:	f1 04       	cpc	r15, r1
    4a5e:	79 f4       	brne	.+30     	; 0x4a7e <SoftwareSerial::write(unsigned char)+0x3a>
_ZN5Print13setWriteErrorEi():
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	13 96       	adiw	r26, 0x03	; 3
    4a66:	9c 93       	st	X, r25
    4a68:	8e 93       	st	-X, r24
    4a6a:	12 97       	sbiw	r26, 0x02	; 2
_ZN14SoftwareSerial5writeEh():
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	df 91       	pop	r29
    4a72:	cf 91       	pop	r28
    4a74:	1f 91       	pop	r17
    4a76:	0f 91       	pop	r16
    4a78:	ff 90       	pop	r15
    4a7a:	ef 90       	pop	r14
    4a7c:	08 95       	ret
    4a7e:	51 96       	adiw	r26, 0x11	; 17
    4a80:	ed 91       	ld	r30, X+
    4a82:	fc 91       	ld	r31, X
    4a84:	52 97       	sbiw	r26, 0x12	; 18
    4a86:	50 96       	adiw	r26, 0x10	; 16
    4a88:	8c 91       	ld	r24, X
    4a8a:	50 97       	sbiw	r26, 0x10	; 16
    4a8c:	98 2f       	mov	r25, r24
    4a8e:	90 95       	com	r25
    4a90:	0f b7       	in	r16, 0x3f	; 63
    4a92:	5e 96       	adiw	r26, 0x1e	; 30
    4a94:	2c 91       	ld	r18, X
    4a96:	5e 97       	sbiw	r26, 0x1e	; 30
    4a98:	12 2f       	mov	r17, r18
    4a9a:	12 70       	andi	r17, 0x02	; 2
    4a9c:	21 fd       	sbrc	r18, 1
    4a9e:	60 95       	com	r22
    4aa0:	f8 94       	cli
    4aa2:	20 81       	ld	r18, Z
    4aa4:	11 23       	and	r17, r17
    4aa6:	19 f1       	breq	.+70     	; 0x4aee <SoftwareSerial::write(unsigned char)+0xaa>
    4aa8:	28 2b       	or	r18, r24
    4aaa:	20 83       	st	Z, r18
_delay_loop_2():
    4aac:	e7 01       	movw	r28, r14
    4aae:	21 97       	sbiw	r28, 0x01	; 1
    4ab0:	f1 f7       	brne	.-4      	; 0x4aae <SoftwareSerial::write(unsigned char)+0x6a>
    4ab2:	28 e0       	ldi	r18, 0x08	; 8
_ZN14SoftwareSerial5writeEh():
    4ab4:	46 2f       	mov	r20, r22
    4ab6:	50 e0       	ldi	r21, 0x00	; 0
    4ab8:	30 81       	ld	r19, Z
    4aba:	60 ff       	sbrs	r22, 0
    4abc:	1a c0       	rjmp	.+52     	; 0x4af2 <SoftwareSerial::write(unsigned char)+0xae>
    4abe:	38 2b       	or	r19, r24
    4ac0:	30 83       	st	Z, r19
_delay_loop_2():
    4ac2:	e7 01       	movw	r28, r14
    4ac4:	21 97       	sbiw	r28, 0x01	; 1
    4ac6:	f1 f7       	brne	.-4      	; 0x4ac4 <SoftwareSerial::write(unsigned char)+0x80>
_ZN14SoftwareSerial5writeEh():
    4ac8:	ba 01       	movw	r22, r20
    4aca:	75 95       	asr	r23
    4acc:	67 95       	ror	r22
    4ace:	21 50       	subi	r18, 0x01	; 1
    4ad0:	89 f7       	brne	.-30     	; 0x4ab4 <SoftwareSerial::write(unsigned char)+0x70>
    4ad2:	11 23       	and	r17, r17
    4ad4:	81 f0       	breq	.+32     	; 0x4af6 <SoftwareSerial::write(unsigned char)+0xb2>
    4ad6:	80 81       	ld	r24, Z
    4ad8:	89 23       	and	r24, r25
    4ada:	80 83       	st	Z, r24
    4adc:	0f bf       	out	0x3f, r16	; 63
_delay_loop_2():
    4ade:	5c 96       	adiw	r26, 0x1c	; 28
    4ae0:	8d 91       	ld	r24, X+
    4ae2:	9c 91       	ld	r25, X
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	f1 f7       	brne	.-4      	; 0x4ae4 <SoftwareSerial::write(unsigned char)+0xa0>
_ZN14SoftwareSerial5writeEh():
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	c1 cf       	rjmp	.-126    	; 0x4a70 <SoftwareSerial::write(unsigned char)+0x2c>
    4aee:	29 23       	and	r18, r25
    4af0:	dc cf       	rjmp	.-72     	; 0x4aaa <SoftwareSerial::write(unsigned char)+0x66>
    4af2:	39 23       	and	r19, r25
    4af4:	e5 cf       	rjmp	.-54     	; 0x4ac0 <SoftwareSerial::write(unsigned char)+0x7c>
    4af6:	90 81       	ld	r25, Z
    4af8:	89 2b       	or	r24, r25
    4afa:	ef cf       	rjmp	.-34     	; 0x4ada <SoftwareSerial::write(unsigned char)+0x96>

00004afc <SoftwareSerial::flush()>:
_ZN14SoftwareSerial5flushEv():
    4afc:	08 95       	ret

00004afe <SoftwareSerial::peek()>:
_ZN14SoftwareSerial4peekEv():
    4afe:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <SoftwareSerial::active_object>
    4b02:	30 91 ae 05 	lds	r19, 0x05AE	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4b06:	28 17       	cp	r18, r24
    4b08:	39 07       	cpc	r19, r25
    4b0a:	71 f4       	brne	.+28     	; 0x4b28 <SoftwareSerial::peek()+0x2a>
    4b0c:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4b10:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <SoftwareSerial::_receive_buffer_tail>
    4b14:	98 17       	cp	r25, r24
    4b16:	41 f0       	breq	.+16     	; 0x4b28 <SoftwareSerial::peek()+0x2a>
    4b18:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	e3 59       	subi	r30, 0x93	; 147
    4b20:	fa 4f       	sbci	r31, 0xFA	; 250
    4b22:	80 81       	ld	r24, Z
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	08 95       	ret
    4b28:	8f ef       	ldi	r24, 0xFF	; 255
    4b2a:	9f ef       	ldi	r25, 0xFF	; 255
    4b2c:	08 95       	ret

00004b2e <SoftwareSerial::available()>:
_ZN14SoftwareSerial9availableEv():
    4b2e:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <SoftwareSerial::active_object>
    4b32:	30 91 ae 05 	lds	r19, 0x05AE	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4b36:	28 17       	cp	r18, r24
    4b38:	39 07       	cpc	r19, r25
    4b3a:	61 f4       	brne	.+24     	; 0x4b54 <SoftwareSerial::available()+0x26>
    4b3c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <SoftwareSerial::_receive_buffer_tail>
    4b40:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	80 5c       	subi	r24, 0xC0	; 192
    4b48:	9f 4f       	sbci	r25, 0xFF	; 255
    4b4a:	82 1b       	sub	r24, r18
    4b4c:	91 09       	sbc	r25, r1
    4b4e:	8f 73       	andi	r24, 0x3F	; 63
    4b50:	99 27       	eor	r25, r25
    4b52:	08 95       	ret
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	80 e0       	ldi	r24, 0x00	; 0
    4b58:	08 95       	ret

00004b5a <SoftwareSerial::stopListening()>:
_ZN14SoftwareSerial13stopListeningEv():
    4b5a:	e0 91 ad 05 	lds	r30, 0x05AD	; 0x8005ad <SoftwareSerial::active_object>
    4b5e:	f0 91 ae 05 	lds	r31, 0x05AE	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4b62:	e8 17       	cp	r30, r24
    4b64:	f9 07       	cpc	r31, r25
    4b66:	69 f4       	brne	.+26     	; 0x4b82 <SoftwareSerial::stopListening()+0x28>
_ZN14SoftwareSerial11setRxIntMskEb():
    4b68:	a3 89       	ldd	r26, Z+19	; 0x13
    4b6a:	b4 89       	ldd	r27, Z+20	; 0x14
    4b6c:	9c 91       	ld	r25, X
    4b6e:	85 89       	ldd	r24, Z+21	; 0x15
    4b70:	80 95       	com	r24
    4b72:	89 23       	and	r24, r25
    4b74:	8c 93       	st	X, r24
_ZN14SoftwareSerial13stopListeningEv():
    4b76:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4b7a:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <SoftwareSerial::active_object>
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	08 95       	ret
    4b82:	80 e0       	ldi	r24, 0x00	; 0
    4b84:	08 95       	ret

00004b86 <SoftwareSerial::listen()>:
_ZN14SoftwareSerial6listenEv():
    4b86:	cf 93       	push	r28
    4b88:	df 93       	push	r29
    4b8a:	ec 01       	movw	r28, r24
    4b8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4b90:	89 2b       	or	r24, r25
    4b92:	01 f1       	breq	.+64     	; 0x4bd4 <SoftwareSerial::listen()+0x4e>
    4b94:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <SoftwareSerial::active_object>
    4b98:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4b9c:	8c 17       	cp	r24, r28
    4b9e:	9d 07       	cpc	r25, r29
    4ba0:	c9 f0       	breq	.+50     	; 0x4bd4 <SoftwareSerial::listen()+0x4e>
    4ba2:	00 97       	sbiw	r24, 0x00	; 0
    4ba4:	11 f0       	breq	.+4      	; 0x4baa <SoftwareSerial::listen()+0x24>
    4ba6:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <SoftwareSerial::stopListening()>
    4baa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bac:	8e 7f       	andi	r24, 0xFE	; 254
    4bae:	8e 8f       	std	Y+30, r24	; 0x1e
    4bb0:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <SoftwareSerial::_receive_buffer_tail>
    4bb4:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <SoftwareSerial::_receive_buffer_head>
    4bb8:	d0 93 ae 05 	sts	0x05AE, r29	; 0x8005ae <SoftwareSerial::active_object+0x1>
    4bbc:	c0 93 ad 05 	sts	0x05AD, r28	; 0x8005ad <SoftwareSerial::active_object>
_ZN14SoftwareSerial11setRxIntMskEb():
    4bc0:	eb 89       	ldd	r30, Y+19	; 0x13
    4bc2:	fc 89       	ldd	r31, Y+20	; 0x14
    4bc4:	80 81       	ld	r24, Z
    4bc6:	9d 89       	ldd	r25, Y+21	; 0x15
    4bc8:	89 2b       	or	r24, r25
    4bca:	80 83       	st	Z, r24
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
_ZN14SoftwareSerial6listenEv():
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	08 95       	ret
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	fb cf       	rjmp	.-10     	; 0x4bce <SoftwareSerial::listen()+0x48>

00004bd8 <SoftwareSerial::~SoftwareSerial()>:
_ZN14SoftwareSerialD2Ev():
    4bd8:	2b e8       	ldi	r18, 0x8B	; 139
    4bda:	31 e0       	ldi	r19, 0x01	; 1
    4bdc:	fc 01       	movw	r30, r24
    4bde:	31 83       	std	Z+1, r19	; 0x01
    4be0:	20 83       	st	Z, r18
_ZN14SoftwareSerial3endEv():
    4be2:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <SoftwareSerial::stopListening()>

00004be6 <SoftwareSerial::setTX(signed char)>:
_ZN14SoftwareSerial5setTXEa():
    4be6:	1f 93       	push	r17
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
    4bec:	ec 01       	movw	r28, r24
    4bee:	16 2f       	mov	r17, r22
    4bf0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4bf2:	66 95       	lsr	r22
    4bf4:	61 70       	andi	r22, 0x01	; 1
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	68 27       	eor	r22, r24
    4bfa:	81 2f       	mov	r24, r17
    4bfc:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    4c00:	61 e0       	ldi	r22, 0x01	; 1
    4c02:	81 2f       	mov	r24, r17
    4c04:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    4c08:	81 2f       	mov	r24, r17
    4c0a:	11 0f       	add	r17, r17
    4c0c:	99 0b       	sbc	r25, r25
    4c0e:	fc 01       	movw	r30, r24
    4c10:	e5 57       	subi	r30, 0x75	; 117
    4c12:	fe 4f       	sbci	r31, 0xFE	; 254
    4c14:	e4 91       	lpm	r30, Z
    4c16:	e8 8b       	std	Y+16, r30	; 0x10
    4c18:	fc 01       	movw	r30, r24
    4c1a:	e0 54       	subi	r30, 0x40	; 64
    4c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c1e:	e4 91       	lpm	r30, Z
    4c20:	f0 e0       	ldi	r31, 0x00	; 0
    4c22:	ee 0f       	add	r30, r30
    4c24:	ff 1f       	adc	r31, r31
    4c26:	eb 5f       	subi	r30, 0xFB	; 251
    4c28:	fd 4f       	sbci	r31, 0xFD	; 253
    4c2a:	85 91       	lpm	r24, Z+
    4c2c:	94 91       	lpm	r25, Z
    4c2e:	9a 8b       	std	Y+18, r25	; 0x12
    4c30:	89 8b       	std	Y+17, r24	; 0x11
    4c32:	df 91       	pop	r29
    4c34:	cf 91       	pop	r28
    4c36:	1f 91       	pop	r17
    4c38:	08 95       	ret

00004c3a <SoftwareSerial::setRX(signed char)>:
_ZN14SoftwareSerial5setRXEa():
    4c3a:	1f 93       	push	r17
    4c3c:	cf 93       	push	r28
    4c3e:	df 93       	push	r29
    4c40:	ec 01       	movw	r28, r24
    4c42:	16 2f       	mov	r17, r22
    4c44:	60 e0       	ldi	r22, 0x00	; 0
    4c46:	81 2f       	mov	r24, r17
    4c48:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
    4c4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c4e:	81 fd       	sbrc	r24, 1
    4c50:	04 c0       	rjmp	.+8      	; 0x4c5a <SoftwareSerial::setRX(signed char)+0x20>
    4c52:	61 e0       	ldi	r22, 0x01	; 1
    4c54:	81 2f       	mov	r24, r17
    4c56:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    4c5a:	1c 87       	std	Y+12, r17	; 0x0c
    4c5c:	81 2f       	mov	r24, r17
    4c5e:	11 0f       	add	r17, r17
    4c60:	99 0b       	sbc	r25, r25
    4c62:	fc 01       	movw	r30, r24
    4c64:	e5 57       	subi	r30, 0x75	; 117
    4c66:	fe 4f       	sbci	r31, 0xFE	; 254
    4c68:	e4 91       	lpm	r30, Z
    4c6a:	ed 87       	std	Y+13, r30	; 0x0d
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	e0 54       	subi	r30, 0x40	; 64
    4c70:	fe 4f       	sbci	r31, 0xFE	; 254
    4c72:	e4 91       	lpm	r30, Z
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	ee 0f       	add	r30, r30
    4c78:	ff 1f       	adc	r31, r31
    4c7a:	eb 50       	subi	r30, 0x0B	; 11
    4c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c7e:	85 91       	lpm	r24, Z+
    4c80:	94 91       	lpm	r25, Z
    4c82:	9f 87       	std	Y+15, r25	; 0x0f
    4c84:	8e 87       	std	Y+14, r24	; 0x0e
    4c86:	df 91       	pop	r29
    4c88:	cf 91       	pop	r28
    4c8a:	1f 91       	pop	r17
    4c8c:	08 95       	ret

00004c8e <SoftwareSerial::SoftwareSerial(signed char, signed char, bool)>:
_ZN14SoftwareSerialC2Eaab():
    4c8e:	1f 93       	push	r17
    4c90:	cf 93       	push	r28
    4c92:	df 93       	push	r29
    4c94:	ec 01       	movw	r28, r24
    4c96:	16 2f       	mov	r17, r22
_ZN5PrintC4Ev():
    4c98:	1b 82       	std	Y+3, r1	; 0x03
    4c9a:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC4Ev():
    4c9c:	88 ee       	ldi	r24, 0xE8	; 232
    4c9e:	93 e0       	ldi	r25, 0x03	; 3
    4ca0:	a0 e0       	ldi	r26, 0x00	; 0
    4ca2:	b0 e0       	ldi	r27, 0x00	; 0
    4ca4:	8c 83       	std	Y+4, r24	; 0x04
    4ca6:	9d 83       	std	Y+5, r25	; 0x05
    4ca8:	ae 83       	std	Y+6, r26	; 0x06
    4caa:	bf 83       	std	Y+7, r27	; 0x07
_ZN14SoftwareSerialC2Eaab():
    4cac:	8b e8       	ldi	r24, 0x8B	; 139
    4cae:	91 e0       	ldi	r25, 0x01	; 1
    4cb0:	99 83       	std	Y+1, r25	; 0x01
    4cb2:	88 83       	st	Y, r24
    4cb4:	1f 8a       	std	Y+23, r1	; 0x17
    4cb6:	1e 8a       	std	Y+22, r1	; 0x16
    4cb8:	19 8e       	std	Y+25, r1	; 0x19
    4cba:	18 8e       	std	Y+24, r1	; 0x18
    4cbc:	1b 8e       	std	Y+27, r1	; 0x1b
    4cbe:	1a 8e       	std	Y+26, r1	; 0x1a
    4cc0:	1d 8e       	std	Y+29, r1	; 0x1d
    4cc2:	1c 8e       	std	Y+28, r1	; 0x1c
    4cc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4cc6:	8e 7f       	andi	r24, 0xFE	; 254
    4cc8:	20 fb       	bst	r18, 0
    4cca:	81 f9       	bld	r24, 1
    4ccc:	8e 8f       	std	Y+30, r24	; 0x1e
    4cce:	64 2f       	mov	r22, r20
    4cd0:	ce 01       	movw	r24, r28
    4cd2:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <SoftwareSerial::setTX(signed char)>
    4cd6:	61 2f       	mov	r22, r17
    4cd8:	ce 01       	movw	r24, r28
    4cda:	df 91       	pop	r29
    4cdc:	cf 91       	pop	r28
    4cde:	1f 91       	pop	r17
    4ce0:	0c 94 1d 26 	jmp	0x4c3a	; 0x4c3a <SoftwareSerial::setRX(signed char)>

00004ce4 <SoftwareSerial::begin(long)>:
_ZN14SoftwareSerial5beginEl():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:315
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    4ce4:	cf 92       	push	r12
    4ce6:	df 92       	push	r13
    4ce8:	ef 92       	push	r14
    4cea:	ff 92       	push	r15
    4cec:	0f 93       	push	r16
    4cee:	1f 93       	push	r17
    4cf0:	cf 93       	push	r28
    4cf2:	df 93       	push	r29
    4cf4:	ec 01       	movw	r28, r24
    4cf6:	9a 01       	movw	r18, r20
    4cf8:	ab 01       	movw	r20, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:316
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    4cfa:	1b 8e       	std	Y+27, r1	; 0x1b
    4cfc:	1a 8e       	std	Y+26, r1	; 0x1a
    4cfe:	19 8e       	std	Y+25, r1	; 0x19
    4d00:	18 8e       	std	Y+24, r1	; 0x18
    4d02:	1f 8a       	std	Y+23, r1	; 0x17
    4d04:	1e 8a       	std	Y+22, r1	; 0x16
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:319

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	79 e0       	ldi	r23, 0x09	; 9
    4d0a:	8d e3       	ldi	r24, 0x3D	; 61
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	0e 94 cc 32 	call	0x6598	; 0x6598 <__divmodsi4>
    4d12:	69 01       	movw	r12, r18
    4d14:	89 01       	movw	r16, r18
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    4d16:	c9 01       	movw	r24, r18
    4d18:	03 97       	sbiw	r24, 0x03	; 3
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4d1a:	24 30       	cpi	r18, 0x04	; 4
    4d1c:	31 05       	cpc	r19, r1
    4d1e:	10 f4       	brcc	.+4      	; 0x4d24 <SoftwareSerial::begin(long)+0x40>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    4d20:	81 e0       	ldi	r24, 0x01	; 1
    4d22:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:326
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    4d24:	9d 8f       	std	Y+29, r25	; 0x1d
    4d26:	8c 8f       	std	Y+28, r24	; 0x1c
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387
  else
#endif
#if defined(INT_ONLY) || defined(INT_AND_PCINT)
  {
     // Direct interrupts
     attachInterrupt(digitalPinToInterrupt(_receivePin), isr, CHANGE);
    4d28:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d2a:	9c ef       	ldi	r25, 0xFC	; 252
    4d2c:	98 0f       	add	r25, r24
    4d2e:	94 30       	cpi	r25, 0x04	; 4
    4d30:	20 f0       	brcs	.+8      	; 0x4d3a <SoftwareSerial::begin(long)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 2)
    4d32:	82 51       	subi	r24, 0x12	; 18
    4d34:	84 30       	cpi	r24, 0x04	; 4
    4d36:	08 f0       	brcs	.+2      	; 0x4d3a <SoftwareSerial::begin(long)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387
    4d38:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:387 (discriminator 8)
    4d3a:	41 e0       	ldi	r20, 0x01	; 1
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	68 ea       	ldi	r22, 0xA8	; 168
    4d40:	74 e2       	ldi	r23, 0x24	; 36
    4d42:	0e 94 db 26 	call	0x4db6	; 0x4db6 <attachInterrupt>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:403 (discriminator 8)
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4d46:	c6 01       	movw	r24, r12
    4d48:	96 95       	lsr	r25
    4d4a:	87 95       	ror	r24
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304 (discriminator 8)
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4d4c:	84 31       	cpi	r24, 0x14	; 20
    4d4e:	91 05       	cpc	r25, r1
    4d50:	58 f1       	brcs	.+86     	; 0x4da8 <SoftwareSerial::begin(long)+0xc4>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    4d52:	43 97       	sbiw	r24, 0x13	; 19
_ZN14SoftwareSerial5beginEl():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:403
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    4d54:	9f 8b       	std	Y+23, r25	; 0x17
    4d56:	8e 8b       	std	Y+22, r24	; 0x16
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
    4d58:	c6 01       	movw	r24, r12
    4d5a:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4d5c:	06 30       	cpi	r16, 0x06	; 6
    4d5e:	11 05       	cpc	r17, r1
    4d60:	10 f4       	brcc	.+4      	; 0x4d66 <SoftwareSerial::begin(long)+0x82>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307
    return num - sub;
  else
    return 1;
    4d62:	81 e0       	ldi	r24, 0x01	; 1
    4d64:	90 e0       	ldi	r25, 0x00	; 0
_ZN14SoftwareSerial5beginEl():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:406
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    4d66:	99 8f       	std	Y+25, r25	; 0x19
    4d68:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:415
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4d6a:	96 01       	movw	r18, r12
    4d6c:	22 0f       	add	r18, r18
    4d6e:	33 1f       	adc	r19, r19
    4d70:	2c 0d       	add	r18, r12
    4d72:	3d 1d       	adc	r19, r13
    4d74:	36 95       	lsr	r19
    4d76:	27 95       	ror	r18
    4d78:	36 95       	lsr	r19
    4d7a:	27 95       	ror	r18
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:304
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    4d7c:	2d 30       	cpi	r18, 0x0D	; 13
    4d7e:	31 05       	cpc	r19, r1
    4d80:	b0 f0       	brcs	.+44     	; 0x4dae <SoftwareSerial::begin(long)+0xca>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:305
    return num - sub;
    4d82:	2c 50       	subi	r18, 0x0C	; 12
    4d84:	31 09       	sbc	r19, r1
_ZN14SoftwareSerial5beginEl():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:415
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    4d86:	3b 8f       	std	Y+27, r19	; 0x1b
    4d88:	2a 8f       	std	Y+26, r18	; 0x1a
_delay_loop_2():
c:\users\xirka (throwaway)\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    4d8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4d8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4d8e:	01 97       	sbiw	r24, 0x01	; 1
    4d90:	f1 f7       	brne	.-4      	; 0x4d8e <SoftwareSerial::begin(long)+0xaa>
_ZN14SoftwareSerial5beginEl():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:434
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4d92:	ce 01       	movw	r24, r28
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:435
}
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	1f 91       	pop	r17
    4d9a:	0f 91       	pop	r16
    4d9c:	ff 90       	pop	r15
    4d9e:	ef 90       	pop	r14
    4da0:	df 90       	pop	r13
    4da2:	cf 90       	pop	r12
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:434
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    4da4:	0c 94 c3 25 	jmp	0x4b86	; 0x4b86 <SoftwareSerial::listen()>
_ZN14SoftwareSerial12subtract_capEjj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\libraries\SoftwareSerial\src/SoftwareSerial.cpp:307

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	d3 cf       	rjmp	.-90     	; 0x4d54 <SoftwareSerial::begin(long)+0x70>
    4dae:	21 e0       	ldi	r18, 0x01	; 1
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	e9 cf       	rjmp	.-46     	; 0x4d86 <SoftwareSerial::begin(long)+0xa2>

00004db4 <nothing>:
nothing():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:295
          break;
        case 6:
          EIMSK &= ~(1 << INT6);
          break;
        case 7:
          EIMSK &= ~(1 << INT7);
    4db4:	08 95       	ret

00004db6 <attachInterrupt>:
attachInterrupt():
    4db6:	88 30       	cpi	r24, 0x08	; 8
    4db8:	08 f5       	brcc	.+66     	; 0x4dfc <attachInterrupt+0x46>
    4dba:	e8 2f       	mov	r30, r24
    4dbc:	f0 e0       	ldi	r31, 0x00	; 0
    4dbe:	ee 0f       	add	r30, r30
    4dc0:	ff 1f       	adc	r31, r31
    4dc2:	e4 5e       	subi	r30, 0xE4	; 228
    4dc4:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc6:	71 83       	std	Z+1, r23	; 0x01
    4dc8:	60 83       	st	Z, r22
    4dca:	81 50       	subi	r24, 0x01	; 1
    4dcc:	87 30       	cpi	r24, 0x07	; 7
    4dce:	68 f4       	brcc	.+26     	; 0x4dea <attachInterrupt+0x34>
    4dd0:	e8 2f       	mov	r30, r24
    4dd2:	f0 e0       	ldi	r31, 0x00	; 0
    4dd4:	e2 51       	subi	r30, 0x12	; 18
    4dd6:	f9 4d       	sbci	r31, 0xD9	; 217
    4dd8:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__tablejump2__>
    4ddc:	ff 26       	eor	r15, r31
    4dde:	0c 27       	eor	r16, r28
    4de0:	1a 27       	eor	r17, r26
    4de2:	28 27       	eor	r18, r24
    4de4:	2f 27       	eor	r18, r31
    4de6:	3a 27       	eor	r19, r26
    4de8:	46 27       	eor	r20, r22
    4dea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4dee:	8c 7f       	andi	r24, 0xFC	; 252
    4df0:	48 2b       	or	r20, r24
    4df2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4df6:	89 b7       	in	r24, 0x39	; 57
    4df8:	81 60       	ori	r24, 0x01	; 1
    4dfa:	89 bf       	out	0x39, r24	; 57
    4dfc:	08 95       	ret
    4dfe:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4e02:	83 7f       	andi	r24, 0xF3	; 243
    4e04:	44 0f       	add	r20, r20
    4e06:	55 1f       	adc	r21, r21
    4e08:	44 0f       	add	r20, r20
    4e0a:	55 1f       	adc	r21, r21
    4e0c:	48 2b       	or	r20, r24
    4e0e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4e12:	89 b7       	in	r24, 0x39	; 57
    4e14:	82 60       	ori	r24, 0x02	; 2
    4e16:	f1 cf       	rjmp	.-30     	; 0x4dfa <attachInterrupt+0x44>
    4e18:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4e1c:	8f 7c       	andi	r24, 0xCF	; 207
    4e1e:	74 e0       	ldi	r23, 0x04	; 4
    4e20:	44 0f       	add	r20, r20
    4e22:	55 1f       	adc	r21, r21
    4e24:	7a 95       	dec	r23
    4e26:	e1 f7       	brne	.-8      	; 0x4e20 <attachInterrupt+0x6a>
    4e28:	48 2b       	or	r20, r24
    4e2a:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4e2e:	89 b7       	in	r24, 0x39	; 57
    4e30:	84 60       	ori	r24, 0x04	; 4
    4e32:	e3 cf       	rjmp	.-58     	; 0x4dfa <attachInterrupt+0x44>
    4e34:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4e38:	8f 73       	andi	r24, 0x3F	; 63
    4e3a:	66 e0       	ldi	r22, 0x06	; 6
    4e3c:	44 0f       	add	r20, r20
    4e3e:	55 1f       	adc	r21, r21
    4e40:	6a 95       	dec	r22
    4e42:	e1 f7       	brne	.-8      	; 0x4e3c <attachInterrupt+0x86>
    4e44:	48 2b       	or	r20, r24
    4e46:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    4e4a:	89 b7       	in	r24, 0x39	; 57
    4e4c:	88 60       	ori	r24, 0x08	; 8
    4e4e:	d5 cf       	rjmp	.-86     	; 0x4dfa <attachInterrupt+0x44>
    4e50:	8a b7       	in	r24, 0x3a	; 58
    4e52:	8c 7f       	andi	r24, 0xFC	; 252
    4e54:	48 2b       	or	r20, r24
    4e56:	4a bf       	out	0x3a, r20	; 58
    4e58:	89 b7       	in	r24, 0x39	; 57
    4e5a:	80 61       	ori	r24, 0x10	; 16
    4e5c:	ce cf       	rjmp	.-100    	; 0x4dfa <attachInterrupt+0x44>
    4e5e:	8a b7       	in	r24, 0x3a	; 58
    4e60:	83 7f       	andi	r24, 0xF3	; 243
    4e62:	44 0f       	add	r20, r20
    4e64:	55 1f       	adc	r21, r21
    4e66:	44 0f       	add	r20, r20
    4e68:	55 1f       	adc	r21, r21
    4e6a:	48 2b       	or	r20, r24
    4e6c:	4a bf       	out	0x3a, r20	; 58
    4e6e:	89 b7       	in	r24, 0x39	; 57
    4e70:	80 62       	ori	r24, 0x20	; 32
    4e72:	c3 cf       	rjmp	.-122    	; 0x4dfa <attachInterrupt+0x44>
    4e74:	8a b7       	in	r24, 0x3a	; 58
    4e76:	8f 7c       	andi	r24, 0xCF	; 207
    4e78:	24 e0       	ldi	r18, 0x04	; 4
    4e7a:	44 0f       	add	r20, r20
    4e7c:	55 1f       	adc	r21, r21
    4e7e:	2a 95       	dec	r18
    4e80:	e1 f7       	brne	.-8      	; 0x4e7a <attachInterrupt+0xc4>
    4e82:	48 2b       	or	r20, r24
    4e84:	4a bf       	out	0x3a, r20	; 58
    4e86:	89 b7       	in	r24, 0x39	; 57
    4e88:	80 64       	ori	r24, 0x40	; 64
    4e8a:	b7 cf       	rjmp	.-146    	; 0x4dfa <attachInterrupt+0x44>
    4e8c:	8a b7       	in	r24, 0x3a	; 58
    4e8e:	8f 73       	andi	r24, 0x3F	; 63
    4e90:	96 e0       	ldi	r25, 0x06	; 6
    4e92:	44 0f       	add	r20, r20
    4e94:	55 1f       	adc	r21, r21
    4e96:	9a 95       	dec	r25
    4e98:	e1 f7       	brne	.-8      	; 0x4e92 <attachInterrupt+0xdc>
    4e9a:	48 2b       	or	r20, r24
    4e9c:	4a bf       	out	0x3a, r20	; 58
    4e9e:	89 b7       	in	r24, 0x39	; 57
    4ea0:	80 68       	ori	r24, 0x80	; 128
    4ea2:	ab cf       	rjmp	.-170    	; 0x4dfa <attachInterrupt+0x44>

00004ea4 <__vector_1>:
__vector_1():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:427
  }

// ATmega64, ATmega128, ATmega1281, ATmega2561, AT90CAN32, AT90CAN64, AT90CAN128
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2561__) \
 || defined(__AVR_AT90CAN32__) || defined(__AVR_AT90CAN64__) || defined(__AVR_AT90CAN128__)
  IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    4ea4:	1f 92       	push	r1
    4ea6:	0f 92       	push	r0
    4ea8:	0f b6       	in	r0, 0x3f	; 63
    4eaa:	0f 92       	push	r0
    4eac:	11 24       	eor	r1, r1
    4eae:	2f 93       	push	r18
    4eb0:	3f 93       	push	r19
    4eb2:	4f 93       	push	r20
    4eb4:	5f 93       	push	r21
    4eb6:	6f 93       	push	r22
    4eb8:	7f 93       	push	r23
    4eba:	8f 93       	push	r24
    4ebc:	9f 93       	push	r25
    4ebe:	af 93       	push	r26
    4ec0:	bf 93       	push	r27
    4ec2:	ef 93       	push	r30
    4ec4:	ff 93       	push	r31
    4ec6:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <intFunc>
    4eca:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <intFunc+0x1>
    4ece:	09 95       	icall
    4ed0:	ff 91       	pop	r31
    4ed2:	ef 91       	pop	r30
    4ed4:	bf 91       	pop	r27
    4ed6:	af 91       	pop	r26
    4ed8:	9f 91       	pop	r25
    4eda:	8f 91       	pop	r24
    4edc:	7f 91       	pop	r23
    4ede:	6f 91       	pop	r22
    4ee0:	5f 91       	pop	r21
    4ee2:	4f 91       	pop	r20
    4ee4:	3f 91       	pop	r19
    4ee6:	2f 91       	pop	r18
    4ee8:	0f 90       	pop	r0
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	0f 90       	pop	r0
    4eee:	1f 90       	pop	r1
    4ef0:	18 95       	reti

00004ef2 <__vector_2>:
__vector_2():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:428
  IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    4ef2:	1f 92       	push	r1
    4ef4:	0f 92       	push	r0
    4ef6:	0f b6       	in	r0, 0x3f	; 63
    4ef8:	0f 92       	push	r0
    4efa:	11 24       	eor	r1, r1
    4efc:	2f 93       	push	r18
    4efe:	3f 93       	push	r19
    4f00:	4f 93       	push	r20
    4f02:	5f 93       	push	r21
    4f04:	6f 93       	push	r22
    4f06:	7f 93       	push	r23
    4f08:	8f 93       	push	r24
    4f0a:	9f 93       	push	r25
    4f0c:	af 93       	push	r26
    4f0e:	bf 93       	push	r27
    4f10:	ef 93       	push	r30
    4f12:	ff 93       	push	r31
    4f14:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <intFunc+0x2>
    4f18:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <intFunc+0x3>
    4f1c:	09 95       	icall
    4f1e:	ff 91       	pop	r31
    4f20:	ef 91       	pop	r30
    4f22:	bf 91       	pop	r27
    4f24:	af 91       	pop	r26
    4f26:	9f 91       	pop	r25
    4f28:	8f 91       	pop	r24
    4f2a:	7f 91       	pop	r23
    4f2c:	6f 91       	pop	r22
    4f2e:	5f 91       	pop	r21
    4f30:	4f 91       	pop	r20
    4f32:	3f 91       	pop	r19
    4f34:	2f 91       	pop	r18
    4f36:	0f 90       	pop	r0
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	0f 90       	pop	r0
    4f3c:	1f 90       	pop	r1
    4f3e:	18 95       	reti

00004f40 <__vector_3>:
__vector_3():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:429
  IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    4f40:	1f 92       	push	r1
    4f42:	0f 92       	push	r0
    4f44:	0f b6       	in	r0, 0x3f	; 63
    4f46:	0f 92       	push	r0
    4f48:	11 24       	eor	r1, r1
    4f4a:	2f 93       	push	r18
    4f4c:	3f 93       	push	r19
    4f4e:	4f 93       	push	r20
    4f50:	5f 93       	push	r21
    4f52:	6f 93       	push	r22
    4f54:	7f 93       	push	r23
    4f56:	8f 93       	push	r24
    4f58:	9f 93       	push	r25
    4f5a:	af 93       	push	r26
    4f5c:	bf 93       	push	r27
    4f5e:	ef 93       	push	r30
    4f60:	ff 93       	push	r31
    4f62:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <intFunc+0x4>
    4f66:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <intFunc+0x5>
    4f6a:	09 95       	icall
    4f6c:	ff 91       	pop	r31
    4f6e:	ef 91       	pop	r30
    4f70:	bf 91       	pop	r27
    4f72:	af 91       	pop	r26
    4f74:	9f 91       	pop	r25
    4f76:	8f 91       	pop	r24
    4f78:	7f 91       	pop	r23
    4f7a:	6f 91       	pop	r22
    4f7c:	5f 91       	pop	r21
    4f7e:	4f 91       	pop	r20
    4f80:	3f 91       	pop	r19
    4f82:	2f 91       	pop	r18
    4f84:	0f 90       	pop	r0
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	0f 90       	pop	r0
    4f8a:	1f 90       	pop	r1
    4f8c:	18 95       	reti

00004f8e <__vector_4>:
__vector_4():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:430
  IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    4f8e:	1f 92       	push	r1
    4f90:	0f 92       	push	r0
    4f92:	0f b6       	in	r0, 0x3f	; 63
    4f94:	0f 92       	push	r0
    4f96:	11 24       	eor	r1, r1
    4f98:	2f 93       	push	r18
    4f9a:	3f 93       	push	r19
    4f9c:	4f 93       	push	r20
    4f9e:	5f 93       	push	r21
    4fa0:	6f 93       	push	r22
    4fa2:	7f 93       	push	r23
    4fa4:	8f 93       	push	r24
    4fa6:	9f 93       	push	r25
    4fa8:	af 93       	push	r26
    4faa:	bf 93       	push	r27
    4fac:	ef 93       	push	r30
    4fae:	ff 93       	push	r31
    4fb0:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <intFunc+0x6>
    4fb4:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <intFunc+0x7>
    4fb8:	09 95       	icall
    4fba:	ff 91       	pop	r31
    4fbc:	ef 91       	pop	r30
    4fbe:	bf 91       	pop	r27
    4fc0:	af 91       	pop	r26
    4fc2:	9f 91       	pop	r25
    4fc4:	8f 91       	pop	r24
    4fc6:	7f 91       	pop	r23
    4fc8:	6f 91       	pop	r22
    4fca:	5f 91       	pop	r21
    4fcc:	4f 91       	pop	r20
    4fce:	3f 91       	pop	r19
    4fd0:	2f 91       	pop	r18
    4fd2:	0f 90       	pop	r0
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	0f 90       	pop	r0
    4fd8:	1f 90       	pop	r1
    4fda:	18 95       	reti

00004fdc <__vector_5>:
__vector_5():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:431
  IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_4)
    4fdc:	1f 92       	push	r1
    4fde:	0f 92       	push	r0
    4fe0:	0f b6       	in	r0, 0x3f	; 63
    4fe2:	0f 92       	push	r0
    4fe4:	11 24       	eor	r1, r1
    4fe6:	2f 93       	push	r18
    4fe8:	3f 93       	push	r19
    4fea:	4f 93       	push	r20
    4fec:	5f 93       	push	r21
    4fee:	6f 93       	push	r22
    4ff0:	7f 93       	push	r23
    4ff2:	8f 93       	push	r24
    4ff4:	9f 93       	push	r25
    4ff6:	af 93       	push	r26
    4ff8:	bf 93       	push	r27
    4ffa:	ef 93       	push	r30
    4ffc:	ff 93       	push	r31
    4ffe:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc+0x8>
    5002:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x9>
    5006:	09 95       	icall
    5008:	ff 91       	pop	r31
    500a:	ef 91       	pop	r30
    500c:	bf 91       	pop	r27
    500e:	af 91       	pop	r26
    5010:	9f 91       	pop	r25
    5012:	8f 91       	pop	r24
    5014:	7f 91       	pop	r23
    5016:	6f 91       	pop	r22
    5018:	5f 91       	pop	r21
    501a:	4f 91       	pop	r20
    501c:	3f 91       	pop	r19
    501e:	2f 91       	pop	r18
    5020:	0f 90       	pop	r0
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	0f 90       	pop	r0
    5026:	1f 90       	pop	r1
    5028:	18 95       	reti

0000502a <__vector_6>:
__vector_6():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:432
  IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_5)
    502a:	1f 92       	push	r1
    502c:	0f 92       	push	r0
    502e:	0f b6       	in	r0, 0x3f	; 63
    5030:	0f 92       	push	r0
    5032:	11 24       	eor	r1, r1
    5034:	2f 93       	push	r18
    5036:	3f 93       	push	r19
    5038:	4f 93       	push	r20
    503a:	5f 93       	push	r21
    503c:	6f 93       	push	r22
    503e:	7f 93       	push	r23
    5040:	8f 93       	push	r24
    5042:	9f 93       	push	r25
    5044:	af 93       	push	r26
    5046:	bf 93       	push	r27
    5048:	ef 93       	push	r30
    504a:	ff 93       	push	r31
    504c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <intFunc+0xa>
    5050:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <intFunc+0xb>
    5054:	09 95       	icall
    5056:	ff 91       	pop	r31
    5058:	ef 91       	pop	r30
    505a:	bf 91       	pop	r27
    505c:	af 91       	pop	r26
    505e:	9f 91       	pop	r25
    5060:	8f 91       	pop	r24
    5062:	7f 91       	pop	r23
    5064:	6f 91       	pop	r22
    5066:	5f 91       	pop	r21
    5068:	4f 91       	pop	r20
    506a:	3f 91       	pop	r19
    506c:	2f 91       	pop	r18
    506e:	0f 90       	pop	r0
    5070:	0f be       	out	0x3f, r0	; 63
    5072:	0f 90       	pop	r0
    5074:	1f 90       	pop	r1
    5076:	18 95       	reti

00005078 <__vector_7>:
__vector_7():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:433
  IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
    5078:	1f 92       	push	r1
    507a:	0f 92       	push	r0
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	0f 92       	push	r0
    5080:	11 24       	eor	r1, r1
    5082:	2f 93       	push	r18
    5084:	3f 93       	push	r19
    5086:	4f 93       	push	r20
    5088:	5f 93       	push	r21
    508a:	6f 93       	push	r22
    508c:	7f 93       	push	r23
    508e:	8f 93       	push	r24
    5090:	9f 93       	push	r25
    5092:	af 93       	push	r26
    5094:	bf 93       	push	r27
    5096:	ef 93       	push	r30
    5098:	ff 93       	push	r31
    509a:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <intFunc+0xc>
    509e:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <intFunc+0xd>
    50a2:	09 95       	icall
    50a4:	ff 91       	pop	r31
    50a6:	ef 91       	pop	r30
    50a8:	bf 91       	pop	r27
    50aa:	af 91       	pop	r26
    50ac:	9f 91       	pop	r25
    50ae:	8f 91       	pop	r24
    50b0:	7f 91       	pop	r23
    50b2:	6f 91       	pop	r22
    50b4:	5f 91       	pop	r21
    50b6:	4f 91       	pop	r20
    50b8:	3f 91       	pop	r19
    50ba:	2f 91       	pop	r18
    50bc:	0f 90       	pop	r0
    50be:	0f be       	out	0x3f, r0	; 63
    50c0:	0f 90       	pop	r0
    50c2:	1f 90       	pop	r1
    50c4:	18 95       	reti

000050c6 <__vector_8>:
__vector_8():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WInterrupts.c:434
  IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
    50c6:	1f 92       	push	r1
    50c8:	0f 92       	push	r0
    50ca:	0f b6       	in	r0, 0x3f	; 63
    50cc:	0f 92       	push	r0
    50ce:	11 24       	eor	r1, r1
    50d0:	2f 93       	push	r18
    50d2:	3f 93       	push	r19
    50d4:	4f 93       	push	r20
    50d6:	5f 93       	push	r21
    50d8:	6f 93       	push	r22
    50da:	7f 93       	push	r23
    50dc:	8f 93       	push	r24
    50de:	9f 93       	push	r25
    50e0:	af 93       	push	r26
    50e2:	bf 93       	push	r27
    50e4:	ef 93       	push	r30
    50e6:	ff 93       	push	r31
    50e8:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <intFunc+0xe>
    50ec:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <intFunc+0xf>
    50f0:	09 95       	icall
    50f2:	ff 91       	pop	r31
    50f4:	ef 91       	pop	r30
    50f6:	bf 91       	pop	r27
    50f8:	af 91       	pop	r26
    50fa:	9f 91       	pop	r25
    50fc:	8f 91       	pop	r24
    50fe:	7f 91       	pop	r23
    5100:	6f 91       	pop	r22
    5102:	5f 91       	pop	r21
    5104:	4f 91       	pop	r20
    5106:	3f 91       	pop	r19
    5108:	2f 91       	pop	r18
    510a:	0f 90       	pop	r0
    510c:	0f be       	out	0x3f, r0	; 63
    510e:	0f 90       	pop	r0
    5110:	1f 90       	pop	r1
    5112:	18 95       	reti

00005114 <__vector_16>:
__vector_16():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    5114:	1f 92       	push	r1
    5116:	0f 92       	push	r0
    5118:	0f b6       	in	r0, 0x3f	; 63
    511a:	0f 92       	push	r0
    511c:	11 24       	eor	r1, r1
    511e:	2f 93       	push	r18
    5120:	3f 93       	push	r19
    5122:	8f 93       	push	r24
    5124:	9f 93       	push	r25
    5126:	af 93       	push	r26
    5128:	bf 93       	push	r27
    512a:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <timer0_millis>
    512e:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <timer0_millis+0x1>
    5132:	a0 91 b6 05 	lds	r26, 0x05B6	; 0x8005b6 <timer0_millis+0x2>
    5136:	b0 91 b7 05 	lds	r27, 0x05B7	; 0x8005b7 <timer0_millis+0x3>
    513a:	30 91 b3 05 	lds	r19, 0x05B3	; 0x8005b3 <timer0_fract>
    513e:	23 e0       	ldi	r18, 0x03	; 3
    5140:	23 0f       	add	r18, r19
    5142:	2d 37       	cpi	r18, 0x7D	; 125
    5144:	68 f1       	brcs	.+90     	; 0x51a0 <__vector_16+0x8c>
    5146:	26 e8       	ldi	r18, 0x86	; 134
    5148:	23 0f       	add	r18, r19
    514a:	02 96       	adiw	r24, 0x02	; 2
    514c:	a1 1d       	adc	r26, r1
    514e:	b1 1d       	adc	r27, r1
    5150:	20 93 b3 05 	sts	0x05B3, r18	; 0x8005b3 <timer0_fract>
    5154:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <timer0_millis>
    5158:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <timer0_millis+0x1>
    515c:	a0 93 b6 05 	sts	0x05B6, r26	; 0x8005b6 <timer0_millis+0x2>
    5160:	b0 93 b7 05 	sts	0x05B7, r27	; 0x8005b7 <timer0_millis+0x3>
    5164:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <timer0_overflow_count>
    5168:	90 91 b0 05 	lds	r25, 0x05B0	; 0x8005b0 <timer0_overflow_count+0x1>
    516c:	a0 91 b1 05 	lds	r26, 0x05B1	; 0x8005b1 <timer0_overflow_count+0x2>
    5170:	b0 91 b2 05 	lds	r27, 0x05B2	; 0x8005b2 <timer0_overflow_count+0x3>
    5174:	01 96       	adiw	r24, 0x01	; 1
    5176:	a1 1d       	adc	r26, r1
    5178:	b1 1d       	adc	r27, r1
    517a:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <timer0_overflow_count>
    517e:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <timer0_overflow_count+0x1>
    5182:	a0 93 b1 05 	sts	0x05B1, r26	; 0x8005b1 <timer0_overflow_count+0x2>
    5186:	b0 93 b2 05 	sts	0x05B2, r27	; 0x8005b2 <timer0_overflow_count+0x3>
    518a:	bf 91       	pop	r27
    518c:	af 91       	pop	r26
    518e:	9f 91       	pop	r25
    5190:	8f 91       	pop	r24
    5192:	3f 91       	pop	r19
    5194:	2f 91       	pop	r18
    5196:	0f 90       	pop	r0
    5198:	0f be       	out	0x3f, r0	; 63
    519a:	0f 90       	pop	r0
    519c:	1f 90       	pop	r1
    519e:	18 95       	reti
    51a0:	01 96       	adiw	r24, 0x01	; 1
    51a2:	a1 1d       	adc	r26, r1
    51a4:	b1 1d       	adc	r27, r1
    51a6:	d4 cf       	rjmp	.-88     	; 0x5150 <__vector_16+0x3c>

000051a8 <millis>:
millis():
    51a8:	2f b7       	in	r18, 0x3f	; 63
    51aa:	f8 94       	cli
    51ac:	60 91 b4 05 	lds	r22, 0x05B4	; 0x8005b4 <timer0_millis>
    51b0:	70 91 b5 05 	lds	r23, 0x05B5	; 0x8005b5 <timer0_millis+0x1>
    51b4:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <timer0_millis+0x2>
    51b8:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <timer0_millis+0x3>
    51bc:	2f bf       	out	0x3f, r18	; 63
    51be:	08 95       	ret

000051c0 <micros>:
micros():
    51c0:	3f b7       	in	r19, 0x3f	; 63
    51c2:	f8 94       	cli
    51c4:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <timer0_overflow_count>
    51c8:	90 91 b0 05 	lds	r25, 0x05B0	; 0x8005b0 <timer0_overflow_count+0x1>
    51cc:	a0 91 b1 05 	lds	r26, 0x05B1	; 0x8005b1 <timer0_overflow_count+0x2>
    51d0:	b0 91 b2 05 	lds	r27, 0x05B2	; 0x8005b2 <timer0_overflow_count+0x3>
    51d4:	22 b7       	in	r18, 0x32	; 50
    51d6:	06 b6       	in	r0, 0x36	; 54
    51d8:	00 fe       	sbrs	r0, 0
    51da:	05 c0       	rjmp	.+10     	; 0x51e6 <micros+0x26>
    51dc:	2f 3f       	cpi	r18, 0xFF	; 255
    51de:	19 f0       	breq	.+6      	; 0x51e6 <micros+0x26>
    51e0:	01 96       	adiw	r24, 0x01	; 1
    51e2:	a1 1d       	adc	r26, r1
    51e4:	b1 1d       	adc	r27, r1
    51e6:	3f bf       	out	0x3f, r19	; 63
    51e8:	ba 2f       	mov	r27, r26
    51ea:	a9 2f       	mov	r26, r25
    51ec:	98 2f       	mov	r25, r24
    51ee:	88 27       	eor	r24, r24
    51f0:	bc 01       	movw	r22, r24
    51f2:	cd 01       	movw	r24, r26
    51f4:	62 0f       	add	r22, r18
    51f6:	71 1d       	adc	r23, r1
    51f8:	81 1d       	adc	r24, r1
    51fa:	91 1d       	adc	r25, r1
    51fc:	42 e0       	ldi	r20, 0x02	; 2
    51fe:	66 0f       	add	r22, r22
    5200:	77 1f       	adc	r23, r23
    5202:	88 1f       	adc	r24, r24
    5204:	99 1f       	adc	r25, r25
    5206:	4a 95       	dec	r20
    5208:	d1 f7       	brne	.-12     	; 0x51fe <micros+0x3e>
    520a:	08 95       	ret

0000520c <delay>:
delay():
    520c:	8f 92       	push	r8
    520e:	9f 92       	push	r9
    5210:	af 92       	push	r10
    5212:	bf 92       	push	r11
    5214:	cf 92       	push	r12
    5216:	df 92       	push	r13
    5218:	ef 92       	push	r14
    521a:	ff 92       	push	r15
    521c:	6b 01       	movw	r12, r22
    521e:	7c 01       	movw	r14, r24
    5220:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <micros>
    5224:	4b 01       	movw	r8, r22
    5226:	5c 01       	movw	r10, r24
    5228:	c1 14       	cp	r12, r1
    522a:	d1 04       	cpc	r13, r1
    522c:	e1 04       	cpc	r14, r1
    522e:	f1 04       	cpc	r15, r1
    5230:	e9 f0       	breq	.+58     	; 0x526c <delay+0x60>
    5232:	0e 94 d2 2e 	call	0x5da4	; 0x5da4 <yield>
    5236:	0e 94 e0 28 	call	0x51c0	; 0x51c0 <micros>
    523a:	68 19       	sub	r22, r8
    523c:	79 09       	sbc	r23, r9
    523e:	8a 09       	sbc	r24, r10
    5240:	9b 09       	sbc	r25, r11
    5242:	68 3e       	cpi	r22, 0xE8	; 232
    5244:	73 40       	sbci	r23, 0x03	; 3
    5246:	81 05       	cpc	r24, r1
    5248:	91 05       	cpc	r25, r1
    524a:	70 f3       	brcs	.-36     	; 0x5228 <delay+0x1c>
    524c:	21 e0       	ldi	r18, 0x01	; 1
    524e:	c2 1a       	sub	r12, r18
    5250:	d1 08       	sbc	r13, r1
    5252:	e1 08       	sbc	r14, r1
    5254:	f1 08       	sbc	r15, r1
    5256:	88 ee       	ldi	r24, 0xE8	; 232
    5258:	88 0e       	add	r8, r24
    525a:	83 e0       	ldi	r24, 0x03	; 3
    525c:	98 1e       	adc	r9, r24
    525e:	a1 1c       	adc	r10, r1
    5260:	b1 1c       	adc	r11, r1
    5262:	c1 14       	cp	r12, r1
    5264:	d1 04       	cpc	r13, r1
    5266:	e1 04       	cpc	r14, r1
    5268:	f1 04       	cpc	r15, r1
    526a:	29 f7       	brne	.-54     	; 0x5236 <delay+0x2a>
    526c:	ff 90       	pop	r15
    526e:	ef 90       	pop	r14
    5270:	df 90       	pop	r13
    5272:	cf 90       	pop	r12
    5274:	bf 90       	pop	r11
    5276:	af 90       	pop	r10
    5278:	9f 90       	pop	r9
    527a:	8f 90       	pop	r8
    527c:	08 95       	ret

0000527e <init>:
init():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    527e:	78 94       	sei
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
    5280:	83 b7       	in	r24, 0x33	; 51
    5282:	8c 64       	ori	r24, 0x4C	; 76
    5284:	83 bf       	out	0x33, r24	; 51
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    5286:	87 b7       	in	r24, 0x37	; 55
    5288:	81 60       	ori	r24, 0x01	; 1
    528a:	87 bf       	out	0x37, r24	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    528c:	82 e0       	ldi	r24, 0x02	; 2
    528e:	8e bd       	out	0x2e, r24	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    5290:	8e b5       	in	r24, 0x2e	; 46
    5292:	81 60       	ori	r24, 0x01	; 1
    5294:	8e bd       	out	0x2e, r24	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    5296:	8f b5       	in	r24, 0x2f	; 47
    5298:	81 60       	ori	r24, 0x01	; 1
    529a:	8f bd       	out	0x2f, r24	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    529c:	85 b5       	in	r24, 0x25	; 37
    529e:	84 60       	ori	r24, 0x04	; 4
    52a0:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    52a2:	85 b5       	in	r24, 0x25	; 37
    52a4:	80 64       	ori	r24, 0x40	; 64
    52a6:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    52a8:	ea e8       	ldi	r30, 0x8A	; 138
    52aa:	f0 e0       	ldi	r31, 0x00	; 0
    52ac:	80 81       	ld	r24, Z
    52ae:	83 60       	ori	r24, 0x03	; 3
    52b0:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    52b2:	eb e8       	ldi	r30, 0x8B	; 139
    52b4:	f0 e0       	ldi	r31, 0x00	; 0
    52b6:	80 81       	ld	r24, Z
    52b8:	81 60       	ori	r24, 0x01	; 1
    52ba:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    52bc:	87 e8       	ldi	r24, 0x87	; 135
    52be:	86 b9       	out	0x06, r24	; 6
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    52c0:	1a b8       	out	0x0a, r1	; 10
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    52c2:	08 95       	ret

000052c4 <analogRead>:
analogRead():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    52c4:	88 30       	cpi	r24, 0x08	; 8
    52c6:	20 f0       	brcs	.+8      	; 0x52d0 <analogRead+0xc>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    52c8:	8c 32       	cpi	r24, 0x2C	; 44
    52ca:	08 f4       	brcc	.+2      	; 0x52ce <analogRead+0xa>
    52cc:	8c e2       	ldi	r24, 0x2C	; 44
    52ce:	8d 52       	subi	r24, 0x2D	; 45
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    52d0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <analog_reference>
    52d4:	90 e4       	ldi	r25, 0x40	; 64
    52d6:	29 9f       	mul	r18, r25
    52d8:	90 01       	movw	r18, r0
    52da:	11 24       	eor	r1, r1
    52dc:	87 70       	andi	r24, 0x07	; 7
    52de:	82 2b       	or	r24, r18
    52e0:	87 b9       	out	0x07, r24	; 7
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    52e2:	36 9a       	sbi	0x06, 6	; 6
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    52e4:	36 99       	sbic	0x06, 6	; 6
    52e6:	fe cf       	rjmp	.-4      	; 0x52e4 <analogRead+0x20>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    52e8:	84 b1       	in	r24, 0x04	; 4
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    52ea:	95 b1       	in	r25, 0x05	; 5
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    52ec:	08 95       	ret

000052ee <analogWrite>:
analogWrite():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:104
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    52ee:	1f 93       	push	r17
    52f0:	cf 93       	push	r28
    52f2:	df 93       	push	r29
    52f4:	18 2f       	mov	r17, r24
    52f6:	eb 01       	movw	r28, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:110
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    52f8:	61 e0       	ldi	r22, 0x01	; 1
    52fa:	0e 94 20 2a 	call	0x5440	; 0x5440 <pinMode>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:111
  if (val == 0)
    52fe:	20 97       	sbiw	r28, 0x00	; 0
    5300:	39 f4       	brne	.+14     	; 0x5310 <analogWrite+0x22>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:113
  {
    digitalWrite(pin, LOW);
    5302:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:117
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    5304:	81 2f       	mov	r24, r17
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    5306:	df 91       	pop	r29
    5308:	cf 91       	pop	r28
    530a:	1f 91       	pop	r17
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    530c:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <digitalWrite>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:115
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    5310:	cf 3f       	cpi	r28, 0xFF	; 255
    5312:	d1 05       	cpc	r29, r1
    5314:	11 f4       	brne	.+4      	; 0x531a <analogWrite+0x2c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, HIGH);
    5316:	61 e0       	ldi	r22, 0x01	; 1
    5318:	f5 cf       	rjmp	.-22     	; 0x5304 <analogWrite+0x16>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:121
  }
  else
  {
    switch(digitalPinToTimer(pin))
    531a:	e1 2f       	mov	r30, r17
    531c:	f0 e0       	ldi	r31, 0x00	; 0
    531e:	ea 5a       	subi	r30, 0xAA	; 170
    5320:	fe 4f       	sbci	r31, 0xFE	; 254
    5322:	e4 91       	lpm	r30, Z
    5324:	e1 50       	subi	r30, 0x01	; 1
    5326:	ec 30       	cpi	r30, 0x0C	; 12
    5328:	08 f0       	brcs	.+2      	; 0x532c <analogWrite+0x3e>
    532a:	50 c0       	rjmp	.+160    	; 0x53cc <analogWrite+0xde>
    532c:	f0 e0       	ldi	r31, 0x00	; 0
    532e:	e5 56       	subi	r30, 0x65	; 101
    5330:	f6 4d       	sbci	r31, 0xD6	; 214
    5332:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__tablejump2__>
    5336:	a7 29       	or	r26, r7
    5338:	a7 29       	or	r26, r7
    533a:	e6 29       	or	r30, r6
    533c:	af 29       	or	r26, r15
    533e:	b5 29       	or	r27, r5
    5340:	bb 29       	or	r27, r11
    5342:	c3 29       	or	r28, r3
    5344:	e6 29       	or	r30, r6
    5346:	e6 29       	or	r30, r6
    5348:	c8 29       	or	r28, r8
    534a:	d2 29       	or	r29, r2
    534c:	dc 29       	or	r29, r12
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:133
        break;
        
      case TIMER0A:
        // connect pwm to pin on timer 0
        // this combination is for the ATmega8535, ATmega16 and ATmega32
        TCCR0 |= _BV(COM01);
    534e:	83 b7       	in	r24, 0x33	; 51
    5350:	80 62       	ori	r24, 0x20	; 32
    5352:	83 bf       	out	0x33, r24	; 51
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:134
        OCR0 = val; // set pwm duty
    5354:	c1 bf       	out	0x31, r28	; 49
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    5356:	df 91       	pop	r29
    5358:	cf 91       	pop	r28
    535a:	1f 91       	pop	r17
    535c:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:157
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    535e:	8f b5       	in	r24, 0x2f	; 47
    5360:	80 68       	ori	r24, 0x80	; 128
    5362:	8f bd       	out	0x2f, r24	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:158
        OCR1A = val; // set pwm duty
    5364:	db bd       	out	0x2b, r29	; 43
    5366:	ca bd       	out	0x2a, r28	; 42
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:159
        break;
    5368:	f6 cf       	rjmp	.-20     	; 0x5356 <analogWrite+0x68>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:165
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    536a:	8f b5       	in	r24, 0x2f	; 47
    536c:	80 62       	ori	r24, 0x20	; 32
    536e:	8f bd       	out	0x2f, r24	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:166
        OCR1B = val; // set pwm duty
    5370:	d9 bd       	out	0x29, r29	; 41
    5372:	c8 bd       	out	0x28, r28	; 40
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:167
        break;
    5374:	f0 cf       	rjmp	.-32     	; 0x5356 <analogWrite+0x68>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:173
      #endif

      #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1C1);
    5376:	8f b5       	in	r24, 0x2f	; 47
    5378:	88 60       	ori	r24, 0x08	; 8
    537a:	8f bd       	out	0x2f, r24	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:174
        OCR1C = val; // set pwm duty
    537c:	d0 93 79 00 	sts	0x0079, r29	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    5380:	c0 93 78 00 	sts	0x0078, r28	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:175
        break;
    5384:	e8 cf       	rjmp	.-48     	; 0x5356 <analogWrite+0x68>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:181
      #endif

      #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        // connect pwm to pin on timer 2
        TCCR2 |= _BV(COM21);
    5386:	85 b5       	in	r24, 0x25	; 37
    5388:	80 62       	ori	r24, 0x20	; 32
    538a:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:182
        OCR2 = val; // set pwm duty
    538c:	c3 bd       	out	0x23, r28	; 35
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:183
        break;
    538e:	e3 cf       	rjmp	.-58     	; 0x5356 <analogWrite+0x68>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:205
      #endif

      #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        // connect pwm to pin on timer 3, channel A
        TCCR3A |= _BV(COM3A1);
    5390:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    5394:	80 68       	ori	r24, 0x80	; 128
    5396:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:206
        OCR3A = val; // set pwm duty
    539a:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
    539e:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:207
        break;
    53a2:	d9 cf       	rjmp	.-78     	; 0x5356 <analogWrite+0x68>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:218
        #if defined(__AVR_ATmega328PB__) // Fix 324PB/328PB silicon bug
          PORTD |= _BV(PD2);
        #elif defined(__AVR_ATmega324PB__)
          PORTB |= _BV(PB7);
        #endif
        TCCR3A |= _BV(COM3B1);
    53a4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    53a8:	80 62       	ori	r24, 0x20	; 32
    53aa:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:219
        OCR3B = val; // set pwm duty
    53ae:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    53b2:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:220
        break;
    53b6:	cf cf       	rjmp	.-98     	; 0x5356 <analogWrite+0x68>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:226
      #endif

      #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        // connect pwm to pin on timer 3, channel C
        TCCR3A |= _BV(COM3C1);
    53b8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    53bc:	88 60       	ori	r24, 0x08	; 8
    53be:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:227
        OCR3C = val; // set pwm duty
    53c2:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <__DATA_REGION_ORIGIN__+0x23>
    53c6:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:228
        break;
    53ca:	c5 cf       	rjmp	.-118    	; 0x5356 <analogWrite+0x68>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:301
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    53cc:	c0 38       	cpi	r28, 0x80	; 128
    53ce:	d1 05       	cpc	r29, r1
    53d0:	0c f0       	brlt	.+2      	; 0x53d4 <analogWrite+0xe6>
    53d2:	a1 cf       	rjmp	.-190    	; 0x5316 <analogWrite+0x28>
    53d4:	96 cf       	rjmp	.-212    	; 0x5302 <analogWrite+0x14>

000053d6 <turnOffPWM>:
turnOffPWM():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    53d6:	81 50       	subi	r24, 0x01	; 1
    53d8:	8c 30       	cpi	r24, 0x0C	; 12
    53da:	88 f5       	brcc	.+98     	; 0x543e <turnOffPWM+0x68>
    53dc:	e8 2f       	mov	r30, r24
    53de:	f0 e0       	ldi	r31, 0x00	; 0
    53e0:	ec 50       	subi	r30, 0x0C	; 12
    53e2:	f6 4d       	sbci	r31, 0xD6	; 214
    53e4:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__tablejump2__>
    53e8:	1c 2a       	or	r1, r28
    53ea:	1c 2a       	or	r1, r28
    53ec:	1f 2a       	or	r1, r31
    53ee:	00 2a       	or	r0, r16
    53f0:	04 2a       	or	r0, r20
    53f2:	07 2a       	or	r0, r23
    53f4:	0a 2a       	or	r0, r26
    53f6:	1f 2a       	or	r1, r31
    53f8:	1f 2a       	or	r1, r31
    53fa:	0e 2a       	or	r0, r30
    53fc:	14 2a       	or	r1, r20
    53fe:	18 2a       	or	r1, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    5400:	8f b5       	in	r24, 0x2f	; 47
    5402:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    5404:	8f bd       	out	0x2f, r24	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    5406:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    5408:	8f b5       	in	r24, 0x2f	; 47
    540a:	8f 7d       	andi	r24, 0xDF	; 223
    540c:	fb cf       	rjmp	.-10     	; 0x5404 <turnOffPWM+0x2e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    540e:	8f b5       	in	r24, 0x2f	; 47
    5410:	87 7f       	andi	r24, 0xF7	; 247
    5412:	f8 cf       	rjmp	.-16     	; 0x5404 <turnOffPWM+0x2e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    5414:	85 b5       	in	r24, 0x25	; 37
    5416:	8f 7d       	andi	r24, 0xDF	; 223
    5418:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:100
        break;
    541a:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    541c:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    5420:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    5422:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    5426:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    5428:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    542c:	8f 7d       	andi	r24, 0xDF	; 223
    542e:	f9 cf       	rjmp	.-14     	; 0x5422 <turnOffPWM+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    5430:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    5434:	87 7f       	andi	r24, 0xF7	; 247
    5436:	f5 cf       	rjmp	.-22     	; 0x5422 <turnOffPWM+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
    5438:	83 b7       	in	r24, 0x33	; 51
    543a:	8f 7d       	andi	r24, 0xDF	; 223
    543c:	83 bf       	out	0x33, r24	; 51
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    543e:	08 95       	ret

00005440 <pinMode>:
pinMode():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5440:	cf 93       	push	r28
    5442:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	fc 01       	movw	r30, r24
    5448:	e5 57       	subi	r30, 0x75	; 117
    544a:	fe 4f       	sbci	r31, 0xFE	; 254
    544c:	24 91       	lpm	r18, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    544e:	80 54       	subi	r24, 0x40	; 64
    5450:	9e 4f       	sbci	r25, 0xFE	; 254
    5452:	fc 01       	movw	r30, r24
    5454:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    5456:	88 23       	and	r24, r24
    5458:	c9 f0       	breq	.+50     	; 0x548c <pinMode+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	88 0f       	add	r24, r24
    545e:	99 1f       	adc	r25, r25
    5460:	fc 01       	movw	r30, r24
    5462:	eb 5e       	subi	r30, 0xEB	; 235
    5464:	fd 4f       	sbci	r31, 0xFD	; 253
    5466:	a5 91       	lpm	r26, Z+
    5468:	b4 91       	lpm	r27, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    546a:	fc 01       	movw	r30, r24
    546c:	eb 5f       	subi	r30, 0xFB	; 251
    546e:	fd 4f       	sbci	r31, 0xFD	; 253
    5470:	c5 91       	lpm	r28, Z+
    5472:	d4 91       	lpm	r29, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    5474:	61 11       	cpse	r22, r1
    5476:	0d c0       	rjmp	.+26     	; 0x5492 <pinMode+0x52>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    5478:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    547a:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    547c:	8c 91       	ld	r24, X
    547e:	20 95       	com	r18
    5480:	82 23       	and	r24, r18
    5482:	8c 93       	st	X, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    5484:	88 81       	ld	r24, Y
    5486:	28 23       	and	r18, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    5488:	28 83       	st	Y, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    548a:	9f bf       	out	0x3f, r25	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    548c:	df 91       	pop	r29
    548e:	cf 91       	pop	r28
    5490:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    5492:	62 30       	cpi	r22, 0x02	; 2
    5494:	51 f4       	brne	.+20     	; 0x54aa <pinMode+0x6a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    5496:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    5498:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    549a:	3c 91       	ld	r19, X
    549c:	82 2f       	mov	r24, r18
    549e:	80 95       	com	r24
    54a0:	83 23       	and	r24, r19
    54a2:	8c 93       	st	X, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    54a4:	e8 81       	ld	r30, Y
    54a6:	2e 2b       	or	r18, r30
    54a8:	ef cf       	rjmp	.-34     	; 0x5488 <pinMode+0x48>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    54aa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    54ac:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    54ae:	ec 91       	ld	r30, X
    54b0:	2e 2b       	or	r18, r30
    54b2:	2c 93       	st	X, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    54b4:	8f bf       	out	0x3f, r24	; 63
    54b6:	ea cf       	rjmp	.-44     	; 0x548c <pinMode+0x4c>

000054b8 <digitalWrite>:
digitalWrite():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    54b8:	1f 93       	push	r17
    54ba:	cf 93       	push	r28
    54bc:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    54be:	28 2f       	mov	r18, r24
    54c0:	30 e0       	ldi	r19, 0x00	; 0
    54c2:	f9 01       	movw	r30, r18
    54c4:	ea 5a       	subi	r30, 0xAA	; 170
    54c6:	fe 4f       	sbci	r31, 0xFE	; 254
    54c8:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    54ca:	f9 01       	movw	r30, r18
    54cc:	e5 57       	subi	r30, 0x75	; 117
    54ce:	fe 4f       	sbci	r31, 0xFE	; 254
    54d0:	d4 91       	lpm	r29, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    54d2:	f9 01       	movw	r30, r18
    54d4:	e0 54       	subi	r30, 0x40	; 64
    54d6:	fe 4f       	sbci	r31, 0xFE	; 254
    54d8:	c4 91       	lpm	r28, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    54da:	cc 23       	and	r28, r28
    54dc:	a9 f0       	breq	.+42     	; 0x5508 <digitalWrite+0x50>
    54de:	16 2f       	mov	r17, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    54e0:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    54e2:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <turnOffPWM>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    54e6:	ec 2f       	mov	r30, r28
    54e8:	f0 e0       	ldi	r31, 0x00	; 0
    54ea:	ee 0f       	add	r30, r30
    54ec:	ff 1f       	adc	r31, r31
    54ee:	eb 5f       	subi	r30, 0xFB	; 251
    54f0:	fd 4f       	sbci	r31, 0xFD	; 253
    54f2:	a5 91       	lpm	r26, Z+
    54f4:	b4 91       	lpm	r27, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    54f6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    54f8:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    54fa:	ec 91       	ld	r30, X
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    54fc:	11 11       	cpse	r17, r1
    54fe:	08 c0       	rjmp	.+16     	; 0x5510 <digitalWrite+0x58>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    5500:	d0 95       	com	r29
    5502:	de 23       	and	r29, r30
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    5504:	dc 93       	st	X, r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    5506:	8f bf       	out	0x3f, r24	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
    5508:	df 91       	pop	r29
    550a:	cf 91       	pop	r28
    550c:	1f 91       	pop	r17
    550e:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    5510:	de 2b       	or	r29, r30
    5512:	f8 cf       	rjmp	.-16     	; 0x5504 <digitalWrite+0x4c>

00005514 <digitalRead>:
digitalRead():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    5514:	cf 93       	push	r28
    5516:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    5518:	28 2f       	mov	r18, r24
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	f9 01       	movw	r30, r18
    551e:	ea 5a       	subi	r30, 0xAA	; 170
    5520:	fe 4f       	sbci	r31, 0xFE	; 254
    5522:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    5524:	f9 01       	movw	r30, r18
    5526:	e5 57       	subi	r30, 0x75	; 117
    5528:	fe 4f       	sbci	r31, 0xFE	; 254
    552a:	d4 91       	lpm	r29, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    552c:	f9 01       	movw	r30, r18
    552e:	e0 54       	subi	r30, 0x40	; 64
    5530:	fe 4f       	sbci	r31, 0xFE	; 254
    5532:	c4 91       	lpm	r28, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    5534:	cc 23       	and	r28, r28
    5536:	a1 f0       	breq	.+40     	; 0x5560 <digitalRead+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5538:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    553a:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <turnOffPWM>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    553e:	ec 2f       	mov	r30, r28
    5540:	f0 e0       	ldi	r31, 0x00	; 0
    5542:	ee 0f       	add	r30, r30
    5544:	ff 1f       	adc	r31, r31
    5546:	eb 50       	subi	r30, 0x0B	; 11
    5548:	fe 4f       	sbci	r31, 0xFE	; 254
    554a:	a5 91       	lpm	r26, Z+
    554c:	b4 91       	lpm	r27, Z
    554e:	ec 91       	ld	r30, X
    5550:	ed 23       	and	r30, r29
    5552:	81 e0       	ldi	r24, 0x01	; 1
    5554:	90 e0       	ldi	r25, 0x00	; 0
    5556:	09 f4       	brne	.+2      	; 0x555a <digitalRead+0x46>
    5558:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    555a:	df 91       	pop	r29
    555c:	cf 91       	pop	r28
    555e:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    5560:	80 e0       	ldi	r24, 0x00	; 0
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	fa cf       	rjmp	.-12     	; 0x555a <digitalRead+0x46>

00005566 <shiftOut>:
shiftOut():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    5566:	bf 92       	push	r11
    5568:	cf 92       	push	r12
    556a:	df 92       	push	r13
    556c:	ef 92       	push	r14
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	c8 2e       	mov	r12, r24
    557a:	d6 2e       	mov	r13, r22
    557c:	b4 2e       	mov	r11, r20
    557e:	d0 e0       	ldi	r29, 0x00	; 0
    5580:	c0 e0       	ldi	r28, 0x00	; 0
    5582:	02 2f       	mov	r16, r18
    5584:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    5586:	87 e0       	ldi	r24, 0x07	; 7
    5588:	e8 2e       	mov	r14, r24
    558a:	f1 2c       	mov	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    558c:	b8 01       	movw	r22, r16
    558e:	8c 2f       	mov	r24, r28
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    5590:	bb 20       	and	r11, r11
    5592:	19 f0       	breq	.+6      	; 0x559a <shiftOut+0x34>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    5594:	c7 01       	movw	r24, r14
    5596:	8c 1b       	sub	r24, r28
    5598:	9d 0b       	sbc	r25, r29
    559a:	02 c0       	rjmp	.+4      	; 0x55a0 <shiftOut+0x3a>
    559c:	75 95       	asr	r23
    559e:	67 95       	ror	r22
    55a0:	8a 95       	dec	r24
    55a2:	e2 f7       	brpl	.-8      	; 0x559c <shiftOut+0x36>
    55a4:	61 70       	andi	r22, 0x01	; 1
    55a6:	8c 2d       	mov	r24, r12
    55a8:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    55ac:	61 e0       	ldi	r22, 0x01	; 1
    55ae:	8d 2d       	mov	r24, r13
    55b0:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    55b4:	60 e0       	ldi	r22, 0x00	; 0
    55b6:	8d 2d       	mov	r24, r13
    55b8:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <digitalWrite>
    55bc:	21 96       	adiw	r28, 0x01	; 1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    55be:	c8 30       	cpi	r28, 0x08	; 8
    55c0:	d1 05       	cpc	r29, r1
    55c2:	21 f7       	brne	.-56     	; 0x558c <shiftOut+0x26>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    55c4:	df 91       	pop	r29
    55c6:	cf 91       	pop	r28
    55c8:	1f 91       	pop	r17
    55ca:	0f 91       	pop	r16
    55cc:	ff 90       	pop	r15
    55ce:	ef 90       	pop	r14
    55d0:	df 90       	pop	r13
    55d2:	cf 90       	pop	r12
    55d4:	bf 90       	pop	r11
    55d6:	08 95       	ret

000055d8 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    55d8:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    55da:	91 8d       	ldd	r25, Z+25	; 0x19
    55dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    55de:	89 2f       	mov	r24, r25
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	80 5c       	subi	r24, 0xC0	; 192
    55e4:	9f 4f       	sbci	r25, 0xFF	; 255
    55e6:	82 1b       	sub	r24, r18
    55e8:	91 09       	sbc	r25, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    55ea:	8f 73       	andi	r24, 0x3F	; 63
    55ec:	99 27       	eor	r25, r25
    55ee:	08 95       	ret

000055f0 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    55f0:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    55f2:	91 8d       	ldd	r25, Z+25	; 0x19
    55f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    55f6:	98 17       	cp	r25, r24
    55f8:	31 f0       	breq	.+12     	; 0x5606 <HardwareSerial::peek()+0x16>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    55fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    55fc:	e8 0f       	add	r30, r24
    55fe:	f1 1d       	adc	r31, r1
    5600:	85 8d       	ldd	r24, Z+29	; 0x1d
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5606:	8f ef       	ldi	r24, 0xFF	; 255
    5608:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    560a:	08 95       	ret

0000560c <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    560c:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    560e:	91 8d       	ldd	r25, Z+25	; 0x19
    5610:	82 8d       	ldd	r24, Z+26	; 0x1a
    5612:	98 17       	cp	r25, r24
    5614:	61 f0       	breq	.+24     	; 0x562e <HardwareSerial::read()+0x22>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5616:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5618:	ae 0f       	add	r26, r30
    561a:	bf 2f       	mov	r27, r31
    561c:	b1 1d       	adc	r27, r1
    561e:	5d 96       	adiw	r26, 0x1d	; 29
    5620:	8c 91       	ld	r24, X
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5622:	92 8d       	ldd	r25, Z+26	; 0x1a
    5624:	9f 5f       	subi	r25, 0xFF	; 255
    5626:	9f 73       	andi	r25, 0x3F	; 63
    5628:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    562e:	8f ef       	ldi	r24, 0xFF	; 255
    5630:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5632:	08 95       	ret

00005634 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    5634:	fc 01       	movw	r30, r24
    5636:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    5638:	44 8d       	ldd	r20, Z+28	; 0x1c
    563a:	25 2f       	mov	r18, r21
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	84 2f       	mov	r24, r20
    5640:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5642:	82 1b       	sub	r24, r18
    5644:	93 0b       	sbc	r25, r19
    5646:	54 17       	cp	r21, r20
    5648:	10 f0       	brcs	.+4      	; 0x564e <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    564a:	cf 96       	adiw	r24, 0x3f	; 63
    564c:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    564e:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    5650:	08 95       	ret

00005652 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5652:	8c e7       	ldi	r24, 0x7C	; 124
    5654:	9c e2       	ldi	r25, 0x2C	; 44
    5656:	89 2b       	or	r24, r25
    5658:	49 f0       	breq	.+18     	; 0x566c <serialEventRun()+0x1a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	89 2b       	or	r24, r25
    5660:	29 f0       	breq	.+10     	; 0x566c <serialEventRun()+0x1a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    5662:	0e 94 7c 2c 	call	0x58f8	; 0x58f8 <Serial0_available()>
    5666:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    5668:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    566c:	8b e0       	ldi	r24, 0x0B	; 11
    566e:	9d e2       	ldi	r25, 0x2D	; 45
    5670:	89 2b       	or	r24, r25
    5672:	49 f0       	breq	.+18     	; 0x5686 <serialEventRun()+0x34>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    5674:	80 e0       	ldi	r24, 0x00	; 0
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	89 2b       	or	r24, r25
    567a:	29 f0       	breq	.+10     	; 0x5686 <serialEventRun()+0x34>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    567c:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <Serial1_available()>
    5680:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    5682:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    5686:	08 95       	ret

00005688 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5688:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    568a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    568c:	a8 0f       	add	r26, r24
    568e:	b9 2f       	mov	r27, r25
    5690:	b1 1d       	adc	r27, r1
    5692:	a3 5a       	subi	r26, 0xA3	; 163
    5694:	bf 4f       	sbci	r27, 0xFF	; 255
    5696:	2c 91       	ld	r18, X
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5698:	84 8d       	ldd	r24, Z+28	; 0x1c
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	01 96       	adiw	r24, 0x01	; 1
    569e:	8f 73       	andi	r24, 0x3F	; 63
    56a0:	99 27       	eor	r25, r25
    56a2:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    56a4:	a6 89       	ldd	r26, Z+22	; 0x16
    56a6:	b7 89       	ldd	r27, Z+23	; 0x17
    56a8:	2c 93       	st	X, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    56aa:	a0 89       	ldd	r26, Z+16	; 0x10
    56ac:	b1 89       	ldd	r27, Z+17	; 0x11
    56ae:	8c 91       	ld	r24, X
    56b0:	80 64       	ori	r24, 0x40	; 64
    56b2:	8c 93       	st	X, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    56b4:	93 8d       	ldd	r25, Z+27	; 0x1b
    56b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    56b8:	98 13       	cpse	r25, r24
    56ba:	06 c0       	rjmp	.+12     	; 0x56c8 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    56bc:	02 88       	ldd	r0, Z+18	; 0x12
    56be:	f3 89       	ldd	r31, Z+19	; 0x13
    56c0:	e0 2d       	mov	r30, r0
    56c2:	80 81       	ld	r24, Z
    56c4:	8f 7d       	andi	r24, 0xDF	; 223
    56c6:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    56c8:	08 95       	ret

000056ca <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    56d0:	88 8d       	ldd	r24, Y+24	; 0x18
    56d2:	88 23       	and	r24, r24
    56d4:	b9 f0       	breq	.+46     	; 0x5704 <HardwareSerial::flush()+0x3a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    56d6:	aa 89       	ldd	r26, Y+18	; 0x12
    56d8:	bb 89       	ldd	r27, Y+19	; 0x13
    56da:	e8 89       	ldd	r30, Y+16	; 0x10
    56dc:	f9 89       	ldd	r31, Y+17	; 0x11
    56de:	8c 91       	ld	r24, X
    56e0:	85 fd       	sbrc	r24, 5
    56e2:	03 c0       	rjmp	.+6      	; 0x56ea <HardwareSerial::flush()+0x20>
    56e4:	80 81       	ld	r24, Z
    56e6:	86 fd       	sbrc	r24, 6
    56e8:	0d c0       	rjmp	.+26     	; 0x5704 <HardwareSerial::flush()+0x3a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    56ea:	0f b6       	in	r0, 0x3f	; 63
    56ec:	07 fc       	sbrc	r0, 7
    56ee:	f7 cf       	rjmp	.-18     	; 0x56de <HardwareSerial::flush()+0x14>
    56f0:	8c 91       	ld	r24, X
    56f2:	85 ff       	sbrs	r24, 5
    56f4:	f2 cf       	rjmp	.-28     	; 0x56da <HardwareSerial::flush()+0x10>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    56f6:	80 81       	ld	r24, Z
    56f8:	85 ff       	sbrs	r24, 5
    56fa:	ed cf       	rjmp	.-38     	; 0x56d6 <HardwareSerial::flush()+0xc>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    56fc:	ce 01       	movw	r24, r28
    56fe:	0e 94 44 2b 	call	0x5688	; 0x5688 <HardwareSerial::_tx_udr_empty_irq()>
    5702:	e9 cf       	rjmp	.-46     	; 0x56d6 <HardwareSerial::flush()+0xc>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	08 95       	ret

0000570a <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    570a:	ef 92       	push	r14
    570c:	ff 92       	push	r15
    570e:	0f 93       	push	r16
    5710:	1f 93       	push	r17
    5712:	cf 93       	push	r28
    5714:	df 93       	push	r29
    5716:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    571c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    571e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5720:	98 13       	cpse	r25, r24
    5722:	16 c0       	rjmp	.+44     	; 0x5750 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    5724:	e8 89       	ldd	r30, Y+16	; 0x10
    5726:	f9 89       	ldd	r31, Y+17	; 0x11
    5728:	80 81       	ld	r24, Z
    572a:	85 ff       	sbrs	r24, 5
    572c:	11 c0       	rjmp	.+34     	; 0x5750 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    572e:	ee 89       	ldd	r30, Y+22	; 0x16
    5730:	ff 89       	ldd	r31, Y+23	; 0x17
    5732:	60 83       	st	Z, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    5734:	e8 89       	ldd	r30, Y+16	; 0x10
    5736:	f9 89       	ldd	r31, Y+17	; 0x11
    5738:	80 81       	ld	r24, Z
    573a:	80 64       	ori	r24, 0x40	; 64
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    573c:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	df 91       	pop	r29
    5744:	cf 91       	pop	r28
    5746:	1f 91       	pop	r17
    5748:	0f 91       	pop	r16
    574a:	ff 90       	pop	r15
    574c:	ef 90       	pop	r14
    574e:	08 95       	ret
    5750:	f6 2e       	mov	r15, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5752:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5754:	10 e0       	ldi	r17, 0x00	; 0
    5756:	0f 5f       	subi	r16, 0xFF	; 255
    5758:	1f 4f       	sbci	r17, 0xFF	; 255
    575a:	0f 73       	andi	r16, 0x3F	; 63
    575c:	11 27       	eor	r17, r17
    575e:	e0 2e       	mov	r14, r16
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5760:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5762:	8e 11       	cpse	r24, r14
    5764:	0c c0       	rjmp	.+24     	; 0x577e <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    5766:	0f b6       	in	r0, 0x3f	; 63
    5768:	07 fc       	sbrc	r0, 7
    576a:	fa cf       	rjmp	.-12     	; 0x5760 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    576c:	e8 89       	ldd	r30, Y+16	; 0x10
    576e:	f9 89       	ldd	r31, Y+17	; 0x11
    5770:	80 81       	ld	r24, Z
    5772:	85 ff       	sbrs	r24, 5
    5774:	f5 cf       	rjmp	.-22     	; 0x5760 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    5776:	ce 01       	movw	r24, r28
    5778:	0e 94 44 2b 	call	0x5688	; 0x5688 <HardwareSerial::_tx_udr_empty_irq()>
    577c:	f1 cf       	rjmp	.-30     	; 0x5760 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    577e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5780:	ec 0f       	add	r30, r28
    5782:	fd 2f       	mov	r31, r29
    5784:	f1 1d       	adc	r31, r1
    5786:	e3 5a       	subi	r30, 0xA3	; 163
    5788:	ff 4f       	sbci	r31, 0xFF	; 255
    578a:	f0 82       	st	Z, r15
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    578c:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    578e:	ea 89       	ldd	r30, Y+18	; 0x12
    5790:	fb 89       	ldd	r31, Y+19	; 0x13
    5792:	80 81       	ld	r24, Z
    5794:	80 62       	ori	r24, 0x20	; 32
    5796:	d2 cf       	rjmp	.-92     	; 0x573c <HardwareSerial::write(unsigned char)+0x32>

00005798 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5798:	cf 92       	push	r12
    579a:	df 92       	push	r13
    579c:	ef 92       	push	r14
    579e:	ff 92       	push	r15
    57a0:	1f 93       	push	r17
    57a2:	cf 93       	push	r28
    57a4:	df 93       	push	r29
    57a6:	ec 01       	movw	r28, r24
    57a8:	6a 01       	movw	r12, r20
    57aa:	7b 01       	movw	r14, r22
    57ac:	12 2f       	mov	r17, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    57ae:	e8 89       	ldd	r30, Y+16	; 0x10
    57b0:	f9 89       	ldd	r31, Y+17	; 0x11
    57b2:	82 e0       	ldi	r24, 0x02	; 2
    57b4:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    57b6:	c1 14       	cp	r12, r1
    57b8:	81 ee       	ldi	r24, 0xE1	; 225
    57ba:	d8 06       	cpc	r13, r24
    57bc:	e1 04       	cpc	r14, r1
    57be:	f1 04       	cpc	r15, r1
    57c0:	a1 f0       	breq	.+40     	; 0x57ea <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    57c2:	60 e0       	ldi	r22, 0x00	; 0
    57c4:	79 e0       	ldi	r23, 0x09	; 9
    57c6:	8d e3       	ldi	r24, 0x3D	; 61
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	a7 01       	movw	r20, r14
    57cc:	96 01       	movw	r18, r12
    57ce:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    57d2:	21 50       	subi	r18, 0x01	; 1
    57d4:	31 09       	sbc	r19, r1
    57d6:	41 09       	sbc	r20, r1
    57d8:	51 09       	sbc	r21, r1
    57da:	56 95       	lsr	r21
    57dc:	47 95       	ror	r20
    57de:	37 95       	ror	r19
    57e0:	27 95       	ror	r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    57e2:	21 15       	cp	r18, r1
    57e4:	80 e1       	ldi	r24, 0x10	; 16
    57e6:	38 07       	cpc	r19, r24
    57e8:	98 f0       	brcs	.+38     	; 0x5810 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    57ea:	e8 89       	ldd	r30, Y+16	; 0x10
    57ec:	f9 89       	ldd	r31, Y+17	; 0x11
    57ee:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    57f0:	60 e8       	ldi	r22, 0x80	; 128
    57f2:	74 e8       	ldi	r23, 0x84	; 132
    57f4:	8e e1       	ldi	r24, 0x1E	; 30
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	a7 01       	movw	r20, r14
    57fa:	96 01       	movw	r18, r12
    57fc:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
    5800:	21 50       	subi	r18, 0x01	; 1
    5802:	31 09       	sbc	r19, r1
    5804:	41 09       	sbc	r20, r1
    5806:	51 09       	sbc	r21, r1
    5808:	56 95       	lsr	r21
    580a:	47 95       	ror	r20
    580c:	37 95       	ror	r19
    580e:	27 95       	ror	r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    5810:	ec 85       	ldd	r30, Y+12	; 0x0c
    5812:	fd 85       	ldd	r31, Y+13	; 0x0d
    5814:	30 83       	st	Z, r19
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    5816:	ee 85       	ldd	r30, Y+14	; 0x0e
    5818:	ff 85       	ldd	r31, Y+15	; 0x0f
    581a:	20 83       	st	Z, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    581c:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    581e:	ec 89       	ldd	r30, Y+20	; 0x14
    5820:	fd 89       	ldd	r31, Y+21	; 0x15
    5822:	10 83       	st	Z, r17
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    5824:	ea 89       	ldd	r30, Y+18	; 0x12
    5826:	fb 89       	ldd	r31, Y+19	; 0x13
    5828:	80 81       	ld	r24, Z
    582a:	88 69       	ori	r24, 0x98	; 152
    582c:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    582e:	ea 89       	ldd	r30, Y+18	; 0x12
    5830:	fb 89       	ldd	r31, Y+19	; 0x13
    5832:	80 81       	ld	r24, Z
    5834:	8f 7d       	andi	r24, 0xDF	; 223
    5836:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	1f 91       	pop	r17
    583e:	ff 90       	pop	r15
    5840:	ef 90       	pop	r14
    5842:	df 90       	pop	r13
    5844:	cf 90       	pop	r12
    5846:	08 95       	ret

00005848 <__vector_18>:
__vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5848:	1f 92       	push	r1
    584a:	0f 92       	push	r0
    584c:	0f b6       	in	r0, 0x3f	; 63
    584e:	0f 92       	push	r0
    5850:	11 24       	eor	r1, r1
    5852:	2f 93       	push	r18
    5854:	8f 93       	push	r24
    5856:	9f 93       	push	r25
    5858:	ef 93       	push	r30
    585a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    585c:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <Serial+0x10>
    5860:	f0 91 c9 05 	lds	r31, 0x05C9	; 0x8005c9 <Serial+0x11>
    5864:	80 81       	ld	r24, Z
    5866:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <Serial+0x16>
    586a:	f0 91 cf 05 	lds	r31, 0x05CF	; 0x8005cf <Serial+0x17>
    586e:	82 fd       	sbrc	r24, 2
    5870:	1b c0       	rjmp	.+54     	; 0x58a8 <__vector_18+0x60>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5872:	90 81       	ld	r25, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5874:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <Serial+0x19>
    5878:	8f 5f       	subi	r24, 0xFF	; 255
    587a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    587c:	20 91 d2 05 	lds	r18, 0x05D2	; 0x8005d2 <Serial+0x1a>
    5880:	82 17       	cp	r24, r18
    5882:	41 f0       	breq	.+16     	; 0x5894 <__vector_18+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    5884:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <Serial+0x19>
    5888:	f0 e0       	ldi	r31, 0x00	; 0
    588a:	e8 54       	subi	r30, 0x48	; 72
    588c:	fa 4f       	sbci	r31, 0xFA	; 250
    588e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    5890:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <Serial+0x19>
__vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    5894:	ff 91       	pop	r31
    5896:	ef 91       	pop	r30
    5898:	9f 91       	pop	r25
    589a:	8f 91       	pop	r24
    589c:	2f 91       	pop	r18
    589e:	0f 90       	pop	r0
    58a0:	0f be       	out	0x3f, r0	; 63
    58a2:	0f 90       	pop	r0
    58a4:	1f 90       	pop	r1
    58a6:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    58a8:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    58aa:	f4 cf       	rjmp	.-24     	; 0x5894 <__vector_18+0x4c>

000058ac <__vector_19>:
__vector_19():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    58ac:	1f 92       	push	r1
    58ae:	0f 92       	push	r0
    58b0:	0f b6       	in	r0, 0x3f	; 63
    58b2:	0f 92       	push	r0
    58b4:	11 24       	eor	r1, r1
    58b6:	2f 93       	push	r18
    58b8:	3f 93       	push	r19
    58ba:	4f 93       	push	r20
    58bc:	5f 93       	push	r21
    58be:	6f 93       	push	r22
    58c0:	7f 93       	push	r23
    58c2:	8f 93       	push	r24
    58c4:	9f 93       	push	r25
    58c6:	af 93       	push	r26
    58c8:	bf 93       	push	r27
    58ca:	ef 93       	push	r30
    58cc:	ff 93       	push	r31
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    58ce:	88 eb       	ldi	r24, 0xB8	; 184
    58d0:	95 e0       	ldi	r25, 0x05	; 5
    58d2:	0e 94 44 2b 	call	0x5688	; 0x5688 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    58d6:	ff 91       	pop	r31
    58d8:	ef 91       	pop	r30
    58da:	bf 91       	pop	r27
    58dc:	af 91       	pop	r26
    58de:	9f 91       	pop	r25
    58e0:	8f 91       	pop	r24
    58e2:	7f 91       	pop	r23
    58e4:	6f 91       	pop	r22
    58e6:	5f 91       	pop	r21
    58e8:	4f 91       	pop	r20
    58ea:	3f 91       	pop	r19
    58ec:	2f 91       	pop	r18
    58ee:	0f 90       	pop	r0
    58f0:	0f be       	out	0x3f, r0	; 63
    58f2:	0f 90       	pop	r0
    58f4:	1f 90       	pop	r1
    58f6:	18 95       	reti

000058f8 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    58f8:	88 eb       	ldi	r24, 0xB8	; 184
    58fa:	95 e0       	ldi	r25, 0x05	; 5
    58fc:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <HardwareSerial::available()>
    5900:	21 e0       	ldi	r18, 0x01	; 1
    5902:	89 2b       	or	r24, r25
    5904:	09 f4       	brne	.+2      	; 0x5908 <Serial0_available()+0x10>
    5906:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    5908:	82 2f       	mov	r24, r18
    590a:	08 95       	ret

0000590c <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    590c:	e8 eb       	ldi	r30, 0xB8	; 184
    590e:	f5 e0       	ldi	r31, 0x05	; 5
    5910:	13 82       	std	Z+3, r1	; 0x03
    5912:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    5914:	88 ee       	ldi	r24, 0xE8	; 232
    5916:	93 e0       	ldi	r25, 0x03	; 3
    5918:	a0 e0       	ldi	r26, 0x00	; 0
    591a:	b0 e0       	ldi	r27, 0x00	; 0
    591c:	84 83       	std	Z+4, r24	; 0x04
    591e:	95 83       	std	Z+5, r25	; 0x05
    5920:	a6 83       	std	Z+6, r26	; 0x06
    5922:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5924:	8d e9       	ldi	r24, 0x9D	; 157
    5926:	91 e0       	ldi	r25, 0x01	; 1
    5928:	91 83       	std	Z+1, r25	; 0x01
    592a:	80 83       	st	Z, r24
    592c:	80 e9       	ldi	r24, 0x90	; 144
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	95 87       	std	Z+13, r25	; 0x0d
    5932:	84 87       	std	Z+12, r24	; 0x0c
    5934:	89 e2       	ldi	r24, 0x29	; 41
    5936:	90 e0       	ldi	r25, 0x00	; 0
    5938:	97 87       	std	Z+15, r25	; 0x0f
    593a:	86 87       	std	Z+14, r24	; 0x0e
    593c:	8b e2       	ldi	r24, 0x2B	; 43
    593e:	90 e0       	ldi	r25, 0x00	; 0
    5940:	91 8b       	std	Z+17, r25	; 0x11
    5942:	80 8b       	std	Z+16, r24	; 0x10
    5944:	8a e2       	ldi	r24, 0x2A	; 42
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	93 8b       	std	Z+19, r25	; 0x13
    594a:	82 8b       	std	Z+18, r24	; 0x12
    594c:	85 e9       	ldi	r24, 0x95	; 149
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	95 8b       	std	Z+21, r25	; 0x15
    5952:	84 8b       	std	Z+20, r24	; 0x14
    5954:	8c e2       	ldi	r24, 0x2C	; 44
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	97 8b       	std	Z+23, r25	; 0x17
    595a:	86 8b       	std	Z+22, r24	; 0x16
    595c:	11 8e       	std	Z+25, r1	; 0x19
    595e:	12 8e       	std	Z+26, r1	; 0x1a
    5960:	13 8e       	std	Z+27, r1	; 0x1b
    5962:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    5964:	08 95       	ret

00005966 <__vector_30>:
__vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    5966:	1f 92       	push	r1
    5968:	0f 92       	push	r0
    596a:	0f b6       	in	r0, 0x3f	; 63
    596c:	0f 92       	push	r0
    596e:	11 24       	eor	r1, r1
    5970:	2f 93       	push	r18
    5972:	8f 93       	push	r24
    5974:	9f 93       	push	r25
    5976:	ef 93       	push	r30
    5978:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    597a:	e0 91 65 06 	lds	r30, 0x0665	; 0x800665 <Serial1+0x10>
    597e:	f0 91 66 06 	lds	r31, 0x0666	; 0x800666 <Serial1+0x11>
    5982:	80 81       	ld	r24, Z
    5984:	e0 91 6b 06 	lds	r30, 0x066B	; 0x80066b <Serial1+0x16>
    5988:	f0 91 6c 06 	lds	r31, 0x066C	; 0x80066c <Serial1+0x17>
    598c:	82 fd       	sbrc	r24, 2
    598e:	1b c0       	rjmp	.+54     	; 0x59c6 <__vector_30+0x60>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5990:	90 81       	ld	r25, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    5992:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <Serial1+0x19>
    5996:	8f 5f       	subi	r24, 0xFF	; 255
    5998:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    599a:	20 91 6f 06 	lds	r18, 0x066F	; 0x80066f <Serial1+0x1a>
    599e:	82 17       	cp	r24, r18
    59a0:	41 f0       	breq	.+16     	; 0x59b2 <__vector_30+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    59a2:	e0 91 6e 06 	lds	r30, 0x066E	; 0x80066e <Serial1+0x19>
    59a6:	f0 e0       	ldi	r31, 0x00	; 0
    59a8:	eb 5a       	subi	r30, 0xAB	; 171
    59aa:	f9 4f       	sbci	r31, 0xF9	; 249
    59ac:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    59ae:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <Serial1+0x19>
__vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    59b2:	ff 91       	pop	r31
    59b4:	ef 91       	pop	r30
    59b6:	9f 91       	pop	r25
    59b8:	8f 91       	pop	r24
    59ba:	2f 91       	pop	r18
    59bc:	0f 90       	pop	r0
    59be:	0f be       	out	0x3f, r0	; 63
    59c0:	0f 90       	pop	r0
    59c2:	1f 90       	pop	r1
    59c4:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    59c6:	80 81       	ld	r24, Z
__vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    59c8:	f4 cf       	rjmp	.-24     	; 0x59b2 <__vector_30+0x4c>

000059ca <__vector_31>:
__vector_31():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    59ca:	1f 92       	push	r1
    59cc:	0f 92       	push	r0
    59ce:	0f b6       	in	r0, 0x3f	; 63
    59d0:	0f 92       	push	r0
    59d2:	11 24       	eor	r1, r1
    59d4:	2f 93       	push	r18
    59d6:	3f 93       	push	r19
    59d8:	4f 93       	push	r20
    59da:	5f 93       	push	r21
    59dc:	6f 93       	push	r22
    59de:	7f 93       	push	r23
    59e0:	8f 93       	push	r24
    59e2:	9f 93       	push	r25
    59e4:	af 93       	push	r26
    59e6:	bf 93       	push	r27
    59e8:	ef 93       	push	r30
    59ea:	ff 93       	push	r31
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    59ec:	85 e5       	ldi	r24, 0x55	; 85
    59ee:	96 e0       	ldi	r25, 0x06	; 6
    59f0:	0e 94 44 2b 	call	0x5688	; 0x5688 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    59f4:	ff 91       	pop	r31
    59f6:	ef 91       	pop	r30
    59f8:	bf 91       	pop	r27
    59fa:	af 91       	pop	r26
    59fc:	9f 91       	pop	r25
    59fe:	8f 91       	pop	r24
    5a00:	7f 91       	pop	r23
    5a02:	6f 91       	pop	r22
    5a04:	5f 91       	pop	r21
    5a06:	4f 91       	pop	r20
    5a08:	3f 91       	pop	r19
    5a0a:	2f 91       	pop	r18
    5a0c:	0f 90       	pop	r0
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	0f 90       	pop	r0
    5a12:	1f 90       	pop	r1
    5a14:	18 95       	reti

00005a16 <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    5a16:	85 e5       	ldi	r24, 0x55	; 85
    5a18:	96 e0       	ldi	r25, 0x06	; 6
    5a1a:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <HardwareSerial::available()>
    5a1e:	21 e0       	ldi	r18, 0x01	; 1
    5a20:	89 2b       	or	r24, r25
    5a22:	09 f4       	brne	.+2      	; 0x5a26 <Serial1_available()+0x10>
    5a24:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    5a26:	82 2f       	mov	r24, r18
    5a28:	08 95       	ret

00005a2a <_GLOBAL__sub_I___vector_30>:
_ZN5PrintC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    5a2a:	e5 e5       	ldi	r30, 0x55	; 85
    5a2c:	f6 e0       	ldi	r31, 0x06	; 6
    5a2e:	13 82       	std	Z+3, r1	; 0x03
    5a30:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    5a32:	88 ee       	ldi	r24, 0xE8	; 232
    5a34:	93 e0       	ldi	r25, 0x03	; 3
    5a36:	a0 e0       	ldi	r26, 0x00	; 0
    5a38:	b0 e0       	ldi	r27, 0x00	; 0
    5a3a:	84 83       	std	Z+4, r24	; 0x04
    5a3c:	95 83       	std	Z+5, r25	; 0x05
    5a3e:	a6 83       	std	Z+6, r26	; 0x06
    5a40:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5a42:	8d e9       	ldi	r24, 0x9D	; 157
    5a44:	91 e0       	ldi	r25, 0x01	; 1
    5a46:	91 83       	std	Z+1, r25	; 0x01
    5a48:	80 83       	st	Z, r24
    5a4a:	88 e9       	ldi	r24, 0x98	; 152
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
    5a4e:	95 87       	std	Z+13, r25	; 0x0d
    5a50:	84 87       	std	Z+12, r24	; 0x0c
    5a52:	89 e9       	ldi	r24, 0x99	; 153
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	97 87       	std	Z+15, r25	; 0x0f
    5a58:	86 87       	std	Z+14, r24	; 0x0e
    5a5a:	8b e9       	ldi	r24, 0x9B	; 155
    5a5c:	90 e0       	ldi	r25, 0x00	; 0
    5a5e:	91 8b       	std	Z+17, r25	; 0x11
    5a60:	80 8b       	std	Z+16, r24	; 0x10
    5a62:	8a e9       	ldi	r24, 0x9A	; 154
    5a64:	90 e0       	ldi	r25, 0x00	; 0
    5a66:	93 8b       	std	Z+19, r25	; 0x13
    5a68:	82 8b       	std	Z+18, r24	; 0x12
    5a6a:	8d e9       	ldi	r24, 0x9D	; 157
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	95 8b       	std	Z+21, r25	; 0x15
    5a70:	84 8b       	std	Z+20, r24	; 0x14
    5a72:	8c e9       	ldi	r24, 0x9C	; 156
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	97 8b       	std	Z+23, r25	; 0x17
    5a78:	86 8b       	std	Z+22, r24	; 0x16
    5a7a:	11 8e       	std	Z+25, r1	; 0x19
    5a7c:	12 8e       	std	Z+26, r1	; 0x1a
    5a7e:	13 8e       	std	Z+27, r1	; 0x1b
    5a80:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    5a82:	08 95       	ret

00005a84 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:228

  fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
  fdev_set_udata(&f, this);
  va_start(ap, format);
  return vfprintf_P(&f, (const char *)format, ap);
}
    5a84:	af 92       	push	r10
    5a86:	bf 92       	push	r11
    5a88:	cf 92       	push	r12
    5a8a:	df 92       	push	r13
    5a8c:	ef 92       	push	r14
    5a8e:	ff 92       	push	r15
    5a90:	0f 93       	push	r16
    5a92:	1f 93       	push	r17
    5a94:	cf 93       	push	r28
    5a96:	df 93       	push	r29
    5a98:	6c 01       	movw	r12, r24
    5a9a:	7b 01       	movw	r14, r22
    5a9c:	8b 01       	movw	r16, r22
    5a9e:	04 0f       	add	r16, r20
    5aa0:	15 1f       	adc	r17, r21
    5aa2:	eb 01       	movw	r28, r22
    5aa4:	5e 01       	movw	r10, r28
    5aa6:	ae 18       	sub	r10, r14
    5aa8:	bf 08       	sbc	r11, r15
    5aaa:	c0 17       	cp	r28, r16
    5aac:	d1 07       	cpc	r29, r17
    5aae:	59 f0       	breq	.+22     	; 0x5ac6 <Print::write(unsigned char const*, unsigned int)+0x42>
    5ab0:	69 91       	ld	r22, Y+
    5ab2:	d6 01       	movw	r26, r12
    5ab4:	ed 91       	ld	r30, X+
    5ab6:	fc 91       	ld	r31, X
    5ab8:	01 90       	ld	r0, Z+
    5aba:	f0 81       	ld	r31, Z
    5abc:	e0 2d       	mov	r30, r0
    5abe:	c6 01       	movw	r24, r12
    5ac0:	09 95       	icall
    5ac2:	89 2b       	or	r24, r25
    5ac4:	79 f7       	brne	.-34     	; 0x5aa4 <Print::write(unsigned char const*, unsigned int)+0x20>
    5ac6:	c5 01       	movw	r24, r10
    5ac8:	df 91       	pop	r29
    5aca:	cf 91       	pop	r28
    5acc:	1f 91       	pop	r17
    5ace:	0f 91       	pop	r16
    5ad0:	ff 90       	pop	r15
    5ad2:	ef 90       	pop	r14
    5ad4:	df 90       	pop	r13
    5ad6:	cf 90       	pop	r12
    5ad8:	bf 90       	pop	r11
    5ada:	af 90       	pop	r10
    5adc:	08 95       	ret

00005ade <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    5ade:	fb 01       	movw	r30, r22
    5ae0:	01 90       	ld	r0, Z+
    5ae2:	00 20       	and	r0, r0
    5ae4:	e9 f7       	brne	.-6      	; 0x5ae0 <Print::write(char const*) [clone .part.2]+0x2>
    5ae6:	31 97       	sbiw	r30, 0x01	; 1
    5ae8:	af 01       	movw	r20, r30
    5aea:	46 1b       	sub	r20, r22
    5aec:	57 0b       	sbc	r21, r23
    5aee:	dc 01       	movw	r26, r24
    5af0:	ed 91       	ld	r30, X+
    5af2:	fc 91       	ld	r31, X
    5af4:	02 80       	ldd	r0, Z+2	; 0x02
    5af6:	f3 81       	ldd	r31, Z+3	; 0x03
    5af8:	e0 2d       	mov	r30, r0
    5afa:	09 94       	ijmp

00005afc <Print::print(char)>:
_ZN5Print5printEc():
    5afc:	dc 01       	movw	r26, r24
    5afe:	ed 91       	ld	r30, X+
    5b00:	fc 91       	ld	r31, X
    5b02:	01 90       	ld	r0, Z+
    5b04:	f0 81       	ld	r31, Z
    5b06:	e0 2d       	mov	r30, r0
    5b08:	09 94       	ijmp

00005b0a <Print::println()>:
_ZN5Print5writeEPKc():
    5b0a:	6b ea       	ldi	r22, 0xAB	; 171
    5b0c:	71 e0       	ldi	r23, 0x01	; 1
    5b0e:	0c 94 6f 2d 	jmp	0x5ade	; 0x5ade <Print::write(char const*) [clone .part.2]>

00005b12 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:233

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    5b12:	8f 92       	push	r8
    5b14:	9f 92       	push	r9
    5b16:	af 92       	push	r10
    5b18:	bf 92       	push	r11
    5b1a:	ef 92       	push	r14
    5b1c:	ff 92       	push	r15
    5b1e:	0f 93       	push	r16
    5b20:	1f 93       	push	r17
    5b22:	cf 93       	push	r28
    5b24:	df 93       	push	r29
    5b26:	cd b7       	in	r28, 0x3d	; 61
    5b28:	de b7       	in	r29, 0x3e	; 62
    5b2a:	a1 97       	sbiw	r28, 0x21	; 33
    5b2c:	0f b6       	in	r0, 0x3f	; 63
    5b2e:	f8 94       	cli
    5b30:	de bf       	out	0x3e, r29	; 62
    5b32:	0f be       	out	0x3f, r0	; 63
    5b34:	cd bf       	out	0x3d, r28	; 61
    5b36:	7c 01       	movw	r14, r24
    5b38:	fa 01       	movw	r30, r20
    5b3a:	cb 01       	movw	r24, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:237
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    5b3c:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    5b3e:	22 30       	cpi	r18, 0x02	; 2
    5b40:	08 f4       	brcc	.+2      	; 0x5b44 <Print::printNumber(unsigned long, unsigned char)+0x32>
    5b42:	2a e0       	ldi	r18, 0x0A	; 10
    5b44:	8e 01       	movw	r16, r28
    5b46:	0f 5d       	subi	r16, 0xDF	; 223
    5b48:	1f 4f       	sbci	r17, 0xFF	; 255
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    5b4a:	82 2e       	mov	r8, r18
    5b4c:	91 2c       	mov	r9, r1
    5b4e:	b1 2c       	mov	r11, r1
    5b50:	a1 2c       	mov	r10, r1
    5b52:	bf 01       	movw	r22, r30
    5b54:	a5 01       	movw	r20, r10
    5b56:	94 01       	movw	r18, r8
    5b58:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:244
    n /= base;
    5b5c:	f9 01       	movw	r30, r18
    5b5e:	ca 01       	movw	r24, r20
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    5b60:	6a 30       	cpi	r22, 0x0A	; 10
    5b62:	0c f5       	brge	.+66     	; 0x5ba6 <Print::printNumber(unsigned long, unsigned char)+0x94>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 1)
    5b64:	60 5d       	subi	r22, 0xD0	; 208
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 4)
    5b66:	d8 01       	movw	r26, r16
    5b68:	6e 93       	st	-X, r22
    5b6a:	8d 01       	movw	r16, r26
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:247 (discriminator 4)
  } while(n);
    5b6c:	23 2b       	or	r18, r19
    5b6e:	24 2b       	or	r18, r20
    5b70:	25 2b       	or	r18, r21
    5b72:	79 f7       	brne	.-34     	; 0x5b52 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    5b74:	90 e0       	ldi	r25, 0x00	; 0
    5b76:	80 e0       	ldi	r24, 0x00	; 0
    5b78:	10 97       	sbiw	r26, 0x00	; 0
    5b7a:	21 f0       	breq	.+8      	; 0x5b84 <Print::printNumber(unsigned long, unsigned char)+0x72>
    5b7c:	bd 01       	movw	r22, r26
    5b7e:	c7 01       	movw	r24, r14
    5b80:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    5b84:	a1 96       	adiw	r28, 0x21	; 33
    5b86:	0f b6       	in	r0, 0x3f	; 63
    5b88:	f8 94       	cli
    5b8a:	de bf       	out	0x3e, r29	; 62
    5b8c:	0f be       	out	0x3f, r0	; 63
    5b8e:	cd bf       	out	0x3d, r28	; 61
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	1f 91       	pop	r17
    5b96:	0f 91       	pop	r16
    5b98:	ff 90       	pop	r15
    5b9a:	ef 90       	pop	r14
    5b9c:	bf 90       	pop	r11
    5b9e:	af 90       	pop	r10
    5ba0:	9f 90       	pop	r9
    5ba2:	8f 90       	pop	r8
    5ba4:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:246 (discriminator 2)

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    5ba6:	69 5c       	subi	r22, 0xC9	; 201
    5ba8:	de cf       	rjmp	.-68     	; 0x5b66 <Print::printNumber(unsigned long, unsigned char)+0x54>

00005baa <Print::print(long, int)>:
_ZN5Print5printEli():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:88
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    5baa:	cf 92       	push	r12
    5bac:	df 92       	push	r13
    5bae:	ef 92       	push	r14
    5bb0:	ff 92       	push	r15
    5bb2:	0f 93       	push	r16
    5bb4:	1f 93       	push	r17
    5bb6:	cf 93       	push	r28
    5bb8:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:89
  if (base == 0) {
    5bba:	21 15       	cp	r18, r1
    5bbc:	31 05       	cpc	r19, r1
    5bbe:	81 f4       	brne	.+32     	; 0x5be0 <Print::print(long, int)+0x36>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:90
    return write(n);
    5bc0:	dc 01       	movw	r26, r24
    5bc2:	ed 91       	ld	r30, X+
    5bc4:	fc 91       	ld	r31, X
    5bc6:	01 90       	ld	r0, Z+
    5bc8:	f0 81       	ld	r31, Z
    5bca:	e0 2d       	mov	r30, r0
    5bcc:	64 2f       	mov	r22, r20
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
    5bd2:	1f 91       	pop	r17
    5bd4:	0f 91       	pop	r16
    5bd6:	ff 90       	pop	r15
    5bd8:	ef 90       	pop	r14
    5bda:	df 90       	pop	r13
    5bdc:	cf 90       	pop	r12
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:90
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    5bde:	09 94       	ijmp
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:91
  } else if (base == 10) {
    5be0:	2a 30       	cpi	r18, 0x0A	; 10
    5be2:	31 05       	cpc	r19, r1
    5be4:	01 f5       	brne	.+64     	; 0x5c26 <Print::print(long, int)+0x7c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    5be6:	2a e0       	ldi	r18, 0x0A	; 10
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    5be8:	77 ff       	sbrs	r23, 7
    5bea:	1d c0       	rjmp	.+58     	; 0x5c26 <Print::print(long, int)+0x7c>
    5bec:	6a 01       	movw	r12, r20
    5bee:	7b 01       	movw	r14, r22
    5bf0:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:93
      int t = print('-');
    5bf2:	6d e2       	ldi	r22, 0x2D	; 45
    5bf4:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <Print::print(char)>
    5bf8:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:94
      n = -n;
    5bfa:	44 27       	eor	r20, r20
    5bfc:	55 27       	eor	r21, r21
    5bfe:	ba 01       	movw	r22, r20
    5c00:	4c 19       	sub	r20, r12
    5c02:	5d 09       	sbc	r21, r13
    5c04:	6e 09       	sbc	r22, r14
    5c06:	7f 09       	sbc	r23, r15
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    5c08:	2a e0       	ldi	r18, 0x0A	; 10
    5c0a:	ce 01       	movw	r24, r28
    5c0c:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <Print::printNumber(unsigned long, unsigned char)>
    5c10:	80 0f       	add	r24, r16
    5c12:	91 1f       	adc	r25, r17
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:101
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    5c14:	df 91       	pop	r29
    5c16:	cf 91       	pop	r28
    5c18:	1f 91       	pop	r17
    5c1a:	0f 91       	pop	r16
    5c1c:	ff 90       	pop	r15
    5c1e:	ef 90       	pop	r14
    5c20:	df 90       	pop	r13
    5c22:	cf 90       	pop	r12
    5c24:	08 95       	ret
    5c26:	df 91       	pop	r29
    5c28:	cf 91       	pop	r28
    5c2a:	1f 91       	pop	r17
    5c2c:	0f 91       	pop	r16
    5c2e:	ff 90       	pop	r15
    5c30:	ef 90       	pop	r14
    5c32:	df 90       	pop	r13
    5c34:	cf 90       	pop	r12
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:99
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    5c36:	0c 94 89 2d 	jmp	0x5b12	; 0x5b12 <Print::printNumber(unsigned long, unsigned char)>

00005c3a <Print::print(int, int)>:
_ZN5Print5printEii():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:78
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    5c3a:	9a 01       	movw	r18, r20
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:79
  return print((long) n, base);
    5c3c:	ab 01       	movw	r20, r22
    5c3e:	77 0f       	add	r23, r23
    5c40:	66 0b       	sbc	r22, r22
    5c42:	77 0b       	sbc	r23, r23
    5c44:	0c 94 d5 2d 	jmp	0x5baa	; 0x5baa <Print::print(long, int)>

00005c48 <Print::println(int, int)>:
_ZN5Print7printlnEii():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:160
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    5c48:	0f 93       	push	r16
    5c4a:	1f 93       	push	r17
    5c4c:	cf 93       	push	r28
    5c4e:	df 93       	push	r29
    5c50:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:161
  size_t n = print(num, base);
    5c52:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <Print::print(int, int)>
    5c56:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:162
  n += println();
    5c58:	ce 01       	movw	r24, r28
    5c5a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <Print::println()>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:164
  return n;
}
    5c5e:	80 0f       	add	r24, r16
    5c60:	91 1f       	adc	r25, r17
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	1f 91       	pop	r17
    5c68:	0f 91       	pop	r16
    5c6a:	08 95       	ret

00005c6c <disableTimer(unsigned char)>:
_Z12disableTimerh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:465
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    5c6c:	81 30       	cpi	r24, 0x01	; 1
    5c6e:	31 f0       	breq	.+12     	; 0x5c7c <disableTimer(unsigned char)+0x10>
    5c70:	18 f0       	brcs	.+6      	; 0x5c78 <disableTimer(unsigned char)+0xc>
    5c72:	82 30       	cpi	r24, 0x02	; 2
    5c74:	39 f0       	breq	.+14     	; 0x5c84 <disableTimer(unsigned char)+0x18>
    5c76:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:471
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
    5c78:	17 be       	out	0x37, r1	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:473
      #endif
      break;
    5c7a:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:477

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    5c7c:	87 b7       	in	r24, 0x37	; 55
    5c7e:	8f 7e       	andi	r24, 0xEF	; 239
    5c80:	87 bf       	out	0x37, r24	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:478
      break;
    5c82:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:483
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    5c84:	87 b7       	in	r24, 0x37	; 55
    5c86:	8f 77       	andi	r24, 0x7F	; 127
    5c88:	87 bf       	out	0x37, r24	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:486
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    5c8a:	80 e4       	ldi	r24, 0x40	; 64
    5c8c:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:489
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    5c8e:	85 b5       	in	r24, 0x25	; 37
    5c90:	88 7f       	andi	r24, 0xF8	; 248
    5c92:	84 60       	ori	r24, 0x04	; 4
    5c94:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:492
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    5c96:	13 bc       	out	0x23, r1	; 35
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:514
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
      break;
#endif
  }
}
    5c98:	08 95       	ret

00005c9a <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:518


void noTone(uint8_t _pin)
{
    5c9a:	cf 93       	push	r28
    5c9c:	c8 2f       	mov	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:522
  int8_t _timer = -1;

  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    5c9e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tone_pins>
    5ca2:	c8 13       	cpse	r28, r24
    5ca4:	0d c0       	rjmp	.+26     	; 0x5cc0 <noTone(unsigned char)+0x26>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:523
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    5ca6:	e5 e2       	ldi	r30, 0x25	; 37
    5ca8:	f2 e0       	ldi	r31, 0x02	; 2
    5caa:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:524
      tone_pins[i] = 255;
    5cac:	9f ef       	ldi	r25, 0xFF	; 255
    5cae:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <tone_pins>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:529
      break;
    }
  }

  disableTimer(_timer);
    5cb2:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <disableTimer(unsigned char)>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531

  digitalWrite(_pin, 0);
    5cb6:	60 e0       	ldi	r22, 0x00	; 0
    5cb8:	8c 2f       	mov	r24, r28
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:532
}
    5cba:	cf 91       	pop	r28
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531
    }
  }

  disableTimer(_timer);

  digitalWrite(_pin, 0);
    5cbc:	0c 94 5c 2a 	jmp	0x54b8	; 0x54b8 <digitalWrite>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:519
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    5cc0:	8f ef       	ldi	r24, 0xFF	; 255
    5cc2:	f7 cf       	rjmp	.-18     	; 0x5cb2 <noTone(unsigned char)+0x18>

00005cc4 <__vector_9>:
__vector_9():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:580
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    5cc4:	1f 92       	push	r1
    5cc6:	0f 92       	push	r0
    5cc8:	0f b6       	in	r0, 0x3f	; 63
    5cca:	0f 92       	push	r0
    5ccc:	11 24       	eor	r1, r1
    5cce:	2f 93       	push	r18
    5cd0:	3f 93       	push	r19
    5cd2:	4f 93       	push	r20
    5cd4:	5f 93       	push	r21
    5cd6:	6f 93       	push	r22
    5cd8:	7f 93       	push	r23
    5cda:	8f 93       	push	r24
    5cdc:	9f 93       	push	r25
    5cde:	af 93       	push	r26
    5ce0:	bf 93       	push	r27
    5ce2:	ef 93       	push	r30
    5ce4:	ff 93       	push	r31
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:582

  if (timer2_toggle_count != 0)
    5ce6:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <timer2_toggle_count>
    5cea:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <timer2_toggle_count+0x1>
    5cee:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <timer2_toggle_count+0x2>
    5cf2:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <timer2_toggle_count+0x3>
    5cf6:	89 2b       	or	r24, r25
    5cf8:	8a 2b       	or	r24, r26
    5cfa:	8b 2b       	or	r24, r27
    5cfc:	d1 f1       	breq	.+116    	; 0x5d72 <__vector_9+0xae>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:585
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    5cfe:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <timer2_pin_mask>
    5d02:	e0 91 f3 06 	lds	r30, 0x06F3	; 0x8006f3 <timer2_pin_port>
    5d06:	f0 91 f4 06 	lds	r31, 0x06F4	; 0x8006f4 <timer2_pin_port+0x1>
    5d0a:	80 81       	ld	r24, Z
    5d0c:	89 27       	eor	r24, r25
    5d0e:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:587

    if (timer2_toggle_count > 0)
    5d10:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <timer2_toggle_count>
    5d14:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <timer2_toggle_count+0x1>
    5d18:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <timer2_toggle_count+0x2>
    5d1c:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <timer2_toggle_count+0x3>
    5d20:	18 16       	cp	r1, r24
    5d22:	19 06       	cpc	r1, r25
    5d24:	1a 06       	cpc	r1, r26
    5d26:	1b 06       	cpc	r1, r27
    5d28:	9c f4       	brge	.+38     	; 0x5d50 <__vector_9+0x8c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:588
      timer2_toggle_count--;
    5d2a:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <timer2_toggle_count>
    5d2e:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <timer2_toggle_count+0x1>
    5d32:	a0 91 f7 06 	lds	r26, 0x06F7	; 0x8006f7 <timer2_toggle_count+0x2>
    5d36:	b0 91 f8 06 	lds	r27, 0x06F8	; 0x8006f8 <timer2_toggle_count+0x3>
    5d3a:	01 97       	sbiw	r24, 0x01	; 1
    5d3c:	a1 09       	sbc	r26, r1
    5d3e:	b1 09       	sbc	r27, r1
    5d40:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <timer2_toggle_count>
    5d44:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <timer2_toggle_count+0x1>
    5d48:	a0 93 f7 06 	sts	0x06F7, r26	; 0x8006f7 <timer2_toggle_count+0x2>
    5d4c:	b0 93 f8 06 	sts	0x06F8, r27	; 0x8006f8 <timer2_toggle_count+0x3>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    5d50:	ff 91       	pop	r31
    5d52:	ef 91       	pop	r30
    5d54:	bf 91       	pop	r27
    5d56:	af 91       	pop	r26
    5d58:	9f 91       	pop	r25
    5d5a:	8f 91       	pop	r24
    5d5c:	7f 91       	pop	r23
    5d5e:	6f 91       	pop	r22
    5d60:	5f 91       	pop	r21
    5d62:	4f 91       	pop	r20
    5d64:	3f 91       	pop	r19
    5d66:	2f 91       	pop	r18
    5d68:	0f 90       	pop	r0
    5d6a:	0f be       	out	0x3f, r0	; 63
    5d6c:	0f 90       	pop	r0
    5d6e:	1f 90       	pop	r1
    5d70:	18 95       	reti
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:595
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    5d72:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tone_pins>
    5d76:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <noTone(unsigned char)>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    5d7a:	ea cf       	rjmp	.-44     	; 0x5d50 <__vector_9+0x8c>

00005d7c <initVariant>:
initVariant():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    5d7c:	08 95       	ret

00005d7e <main>:
main():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    5d7e:	0e 94 3f 29 	call	0x527e	; 0x527e <init>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    5d82:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <initVariant>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    5d86:	0e 94 0b 0b 	call	0x1616	; 0x1616 <setup>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    5d8a:	c9 e2       	ldi	r28, 0x29	; 41
    5d8c:	db e2       	ldi	r29, 0x2B	; 43
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    5d8e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <loop>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    5d92:	20 97       	sbiw	r28, 0x00	; 0
    5d94:	e1 f3       	breq	.-8      	; 0x5d8e <main+0x10>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    5d96:	0e 94 29 2b 	call	0x5652	; 0x5652 <serialEventRun()>
    5d9a:	f9 cf       	rjmp	.-14     	; 0x5d8e <main+0x10>

00005d9c <operator new(unsigned int)>:
_Znwj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    5d9c:	0c 94 0b 33 	jmp	0x6616	; 0x6616 <malloc>

00005da0 <operator delete(void*, unsigned int)>:
_ZdlPv():
    5da0:	0c 94 a7 33 	jmp	0x674e	; 0x674e <free>

00005da4 <yield>:
__empty():
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    5da4:	08 95       	ret

00005da6 <__subsf3>:
__subsf3():
    5da6:	50 58       	subi	r21, 0x80	; 128

00005da8 <__addsf3>:
    5da8:	bb 27       	eor	r27, r27
    5daa:	aa 27       	eor	r26, r26
    5dac:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <__addsf3x>
    5db0:	0c 94 65 30 	jmp	0x60ca	; 0x60ca <__fp_round>
__addsf3():
    5db4:	0e 94 57 30 	call	0x60ae	; 0x60ae <__fp_pscA>
    5db8:	38 f0       	brcs	.+14     	; 0x5dc8 <__addsf3+0x20>
    5dba:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fp_pscB>
    5dbe:	20 f0       	brcs	.+8      	; 0x5dc8 <__addsf3+0x20>
    5dc0:	39 f4       	brne	.+14     	; 0x5dd0 <__addsf3+0x28>
    5dc2:	9f 3f       	cpi	r25, 0xFF	; 255
    5dc4:	19 f4       	brne	.+6      	; 0x5dcc <__addsf3+0x24>
    5dc6:	26 f4       	brtc	.+8      	; 0x5dd0 <__addsf3+0x28>
    5dc8:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <__fp_nan>
    5dcc:	0e f4       	brtc	.+2      	; 0x5dd0 <__addsf3+0x28>
    5dce:	e0 95       	com	r30
    5dd0:	e7 fb       	bst	r30, 7
    5dd2:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>

00005dd6 <__addsf3x>:
__addsf3x():
    5dd6:	e9 2f       	mov	r30, r25
    5dd8:	0e 94 76 30 	call	0x60ec	; 0x60ec <__fp_split3>
    5ddc:	58 f3       	brcs	.-42     	; 0x5db4 <__addsf3+0xc>
    5dde:	ba 17       	cp	r27, r26
    5de0:	62 07       	cpc	r22, r18
    5de2:	73 07       	cpc	r23, r19
    5de4:	84 07       	cpc	r24, r20
    5de6:	95 07       	cpc	r25, r21
    5de8:	20 f0       	brcs	.+8      	; 0x5df2 <__addsf3x+0x1c>
    5dea:	79 f4       	brne	.+30     	; 0x5e0a <__addsf3x+0x34>
    5dec:	a6 f5       	brtc	.+104    	; 0x5e56 <__addsf3x+0x80>
    5dee:	0c 94 98 30 	jmp	0x6130	; 0x6130 <__fp_zero>
    5df2:	0e f4       	brtc	.+2      	; 0x5df6 <__addsf3x+0x20>
    5df4:	e0 95       	com	r30
    5df6:	0b 2e       	mov	r0, r27
    5df8:	ba 2f       	mov	r27, r26
    5dfa:	a0 2d       	mov	r26, r0
    5dfc:	0b 01       	movw	r0, r22
    5dfe:	b9 01       	movw	r22, r18
    5e00:	90 01       	movw	r18, r0
    5e02:	0c 01       	movw	r0, r24
    5e04:	ca 01       	movw	r24, r20
    5e06:	a0 01       	movw	r20, r0
    5e08:	11 24       	eor	r1, r1
    5e0a:	ff 27       	eor	r31, r31
    5e0c:	59 1b       	sub	r21, r25
    5e0e:	99 f0       	breq	.+38     	; 0x5e36 <__addsf3x+0x60>
    5e10:	59 3f       	cpi	r21, 0xF9	; 249
    5e12:	50 f4       	brcc	.+20     	; 0x5e28 <__addsf3x+0x52>
    5e14:	50 3e       	cpi	r21, 0xE0	; 224
    5e16:	68 f1       	brcs	.+90     	; 0x5e72 <__addsf3x+0x9c>
    5e18:	1a 16       	cp	r1, r26
    5e1a:	f0 40       	sbci	r31, 0x00	; 0
    5e1c:	a2 2f       	mov	r26, r18
    5e1e:	23 2f       	mov	r18, r19
    5e20:	34 2f       	mov	r19, r20
    5e22:	44 27       	eor	r20, r20
    5e24:	58 5f       	subi	r21, 0xF8	; 248
    5e26:	f3 cf       	rjmp	.-26     	; 0x5e0e <__addsf3x+0x38>
    5e28:	46 95       	lsr	r20
    5e2a:	37 95       	ror	r19
    5e2c:	27 95       	ror	r18
    5e2e:	a7 95       	ror	r26
    5e30:	f0 40       	sbci	r31, 0x00	; 0
    5e32:	53 95       	inc	r21
    5e34:	c9 f7       	brne	.-14     	; 0x5e28 <__addsf3x+0x52>
    5e36:	7e f4       	brtc	.+30     	; 0x5e56 <__addsf3x+0x80>
    5e38:	1f 16       	cp	r1, r31
    5e3a:	ba 0b       	sbc	r27, r26
    5e3c:	62 0b       	sbc	r22, r18
    5e3e:	73 0b       	sbc	r23, r19
    5e40:	84 0b       	sbc	r24, r20
    5e42:	ba f0       	brmi	.+46     	; 0x5e72 <__addsf3x+0x9c>
    5e44:	91 50       	subi	r25, 0x01	; 1
    5e46:	a1 f0       	breq	.+40     	; 0x5e70 <__addsf3x+0x9a>
    5e48:	ff 0f       	add	r31, r31
    5e4a:	bb 1f       	adc	r27, r27
    5e4c:	66 1f       	adc	r22, r22
    5e4e:	77 1f       	adc	r23, r23
    5e50:	88 1f       	adc	r24, r24
    5e52:	c2 f7       	brpl	.-16     	; 0x5e44 <__addsf3x+0x6e>
    5e54:	0e c0       	rjmp	.+28     	; 0x5e72 <__addsf3x+0x9c>
    5e56:	ba 0f       	add	r27, r26
    5e58:	62 1f       	adc	r22, r18
    5e5a:	73 1f       	adc	r23, r19
    5e5c:	84 1f       	adc	r24, r20
    5e5e:	48 f4       	brcc	.+18     	; 0x5e72 <__addsf3x+0x9c>
    5e60:	87 95       	ror	r24
    5e62:	77 95       	ror	r23
    5e64:	67 95       	ror	r22
    5e66:	b7 95       	ror	r27
    5e68:	f7 95       	ror	r31
    5e6a:	9e 3f       	cpi	r25, 0xFE	; 254
    5e6c:	08 f0       	brcs	.+2      	; 0x5e70 <__addsf3x+0x9a>
    5e6e:	b0 cf       	rjmp	.-160    	; 0x5dd0 <__addsf3+0x28>
    5e70:	93 95       	inc	r25
    5e72:	88 0f       	add	r24, r24
    5e74:	08 f0       	brcs	.+2      	; 0x5e78 <__addsf3x+0xa2>
    5e76:	99 27       	eor	r25, r25
    5e78:	ee 0f       	add	r30, r30
    5e7a:	97 95       	ror	r25
    5e7c:	87 95       	ror	r24
    5e7e:	08 95       	ret

00005e80 <__cmpsf2>:
    5e80:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fp_cmp>
    5e84:	08 f4       	brcc	.+2      	; 0x5e88 <__cmpsf2+0x8>
    5e86:	81 e0       	ldi	r24, 0x01	; 1
    5e88:	08 95       	ret

00005e8a <__divsf3>:
    5e8a:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__divsf3x>
    5e8e:	0c 94 65 30 	jmp	0x60ca	; 0x60ca <__fp_round>
    5e92:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fp_pscB>
    5e96:	58 f0       	brcs	.+22     	; 0x5eae <__divsf3+0x24>
    5e98:	0e 94 57 30 	call	0x60ae	; 0x60ae <__fp_pscA>
    5e9c:	40 f0       	brcs	.+16     	; 0x5eae <__divsf3+0x24>
    5e9e:	29 f4       	brne	.+10     	; 0x5eaa <__divsf3+0x20>
    5ea0:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    5ea2:	29 f0       	breq	.+10     	; 0x5eae <__divsf3+0x24>
    5ea4:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>
    5ea8:	51 11       	cpse	r21, r1
    5eaa:	0c 94 99 30 	jmp	0x6132	; 0x6132 <__fp_szero>
    5eae:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <__fp_nan>

00005eb2 <__divsf3x>:
__divsf3x():
    5eb2:	0e 94 76 30 	call	0x60ec	; 0x60ec <__fp_split3>
    5eb6:	68 f3       	brcs	.-38     	; 0x5e92 <__divsf3+0x8>

00005eb8 <__divsf3_pse>:
    5eb8:	99 23       	and	r25, r25
    5eba:	b1 f3       	breq	.-20     	; 0x5ea8 <__divsf3+0x1e>
    5ebc:	55 23       	and	r21, r21
    5ebe:	91 f3       	breq	.-28     	; 0x5ea4 <__divsf3+0x1a>
    5ec0:	95 1b       	sub	r25, r21
    5ec2:	55 0b       	sbc	r21, r21
    5ec4:	bb 27       	eor	r27, r27
    5ec6:	aa 27       	eor	r26, r26
    5ec8:	62 17       	cp	r22, r18
    5eca:	73 07       	cpc	r23, r19
    5ecc:	84 07       	cpc	r24, r20
    5ece:	38 f0       	brcs	.+14     	; 0x5ede <__divsf3_pse+0x26>
    5ed0:	9f 5f       	subi	r25, 0xFF	; 255
    5ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ed4:	22 0f       	add	r18, r18
    5ed6:	33 1f       	adc	r19, r19
    5ed8:	44 1f       	adc	r20, r20
    5eda:	aa 1f       	adc	r26, r26
    5edc:	a9 f3       	breq	.-22     	; 0x5ec8 <__divsf3_pse+0x10>
    5ede:	35 d0       	rcall	.+106    	; 0x5f4a <__divsf3_pse+0x92>
    5ee0:	0e 2e       	mov	r0, r30
    5ee2:	3a f0       	brmi	.+14     	; 0x5ef2 <__divsf3_pse+0x3a>
    5ee4:	e0 e8       	ldi	r30, 0x80	; 128
    5ee6:	32 d0       	rcall	.+100    	; 0x5f4c <__divsf3_pse+0x94>
    5ee8:	91 50       	subi	r25, 0x01	; 1
    5eea:	50 40       	sbci	r21, 0x00	; 0
    5eec:	e6 95       	lsr	r30
    5eee:	00 1c       	adc	r0, r0
    5ef0:	ca f7       	brpl	.-14     	; 0x5ee4 <__divsf3_pse+0x2c>
    5ef2:	2b d0       	rcall	.+86     	; 0x5f4a <__divsf3_pse+0x92>
    5ef4:	fe 2f       	mov	r31, r30
    5ef6:	29 d0       	rcall	.+82     	; 0x5f4a <__divsf3_pse+0x92>
    5ef8:	66 0f       	add	r22, r22
    5efa:	77 1f       	adc	r23, r23
    5efc:	88 1f       	adc	r24, r24
    5efe:	bb 1f       	adc	r27, r27
    5f00:	26 17       	cp	r18, r22
    5f02:	37 07       	cpc	r19, r23
    5f04:	48 07       	cpc	r20, r24
    5f06:	ab 07       	cpc	r26, r27
    5f08:	b0 e8       	ldi	r27, 0x80	; 128
    5f0a:	09 f0       	breq	.+2      	; 0x5f0e <__divsf3_pse+0x56>
    5f0c:	bb 0b       	sbc	r27, r27
    5f0e:	80 2d       	mov	r24, r0
    5f10:	bf 01       	movw	r22, r30
    5f12:	ff 27       	eor	r31, r31
    5f14:	93 58       	subi	r25, 0x83	; 131
    5f16:	5f 4f       	sbci	r21, 0xFF	; 255
    5f18:	3a f0       	brmi	.+14     	; 0x5f28 <__divsf3_pse+0x70>
    5f1a:	9e 3f       	cpi	r25, 0xFE	; 254
    5f1c:	51 05       	cpc	r21, r1
    5f1e:	78 f0       	brcs	.+30     	; 0x5f3e <__divsf3_pse+0x86>
    5f20:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>
    5f24:	0c 94 99 30 	jmp	0x6132	; 0x6132 <__fp_szero>
    5f28:	5f 3f       	cpi	r21, 0xFF	; 255
    5f2a:	e4 f3       	brlt	.-8      	; 0x5f24 <__divsf3_pse+0x6c>
    5f2c:	98 3e       	cpi	r25, 0xE8	; 232
    5f2e:	d4 f3       	brlt	.-12     	; 0x5f24 <__divsf3_pse+0x6c>
    5f30:	86 95       	lsr	r24
    5f32:	77 95       	ror	r23
    5f34:	67 95       	ror	r22
    5f36:	b7 95       	ror	r27
    5f38:	f7 95       	ror	r31
    5f3a:	9f 5f       	subi	r25, 0xFF	; 255
    5f3c:	c9 f7       	brne	.-14     	; 0x5f30 <__divsf3_pse+0x78>
    5f3e:	88 0f       	add	r24, r24
    5f40:	91 1d       	adc	r25, r1
    5f42:	96 95       	lsr	r25
    5f44:	87 95       	ror	r24
    5f46:	97 f9       	bld	r25, 7
    5f48:	08 95       	ret
    5f4a:	e1 e0       	ldi	r30, 0x01	; 1
    5f4c:	66 0f       	add	r22, r22
    5f4e:	77 1f       	adc	r23, r23
    5f50:	88 1f       	adc	r24, r24
    5f52:	bb 1f       	adc	r27, r27
    5f54:	62 17       	cp	r22, r18
    5f56:	73 07       	cpc	r23, r19
    5f58:	84 07       	cpc	r24, r20
    5f5a:	ba 07       	cpc	r27, r26
    5f5c:	20 f0       	brcs	.+8      	; 0x5f66 <__divsf3_pse+0xae>
    5f5e:	62 1b       	sub	r22, r18
    5f60:	73 0b       	sbc	r23, r19
    5f62:	84 0b       	sbc	r24, r20
    5f64:	ba 0b       	sbc	r27, r26
    5f66:	ee 1f       	adc	r30, r30
    5f68:	88 f7       	brcc	.-30     	; 0x5f4c <__divsf3_pse+0x94>
    5f6a:	e0 95       	com	r30
    5f6c:	08 95       	ret

00005f6e <__fixsfsi>:
    5f6e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__fixunssfsi>
    5f72:	68 94       	set
    5f74:	b1 11       	cpse	r27, r1
    5f76:	0c 94 99 30 	jmp	0x6132	; 0x6132 <__fp_szero>
    5f7a:	08 95       	ret

00005f7c <__fixunssfsi>:
    5f7c:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__fp_splitA>
    5f80:	88 f0       	brcs	.+34     	; 0x5fa4 <__fixunssfsi+0x28>
    5f82:	9f 57       	subi	r25, 0x7F	; 127
    5f84:	98 f0       	brcs	.+38     	; 0x5fac <__fixunssfsi+0x30>
    5f86:	b9 2f       	mov	r27, r25
    5f88:	99 27       	eor	r25, r25
    5f8a:	b7 51       	subi	r27, 0x17	; 23
    5f8c:	b0 f0       	brcs	.+44     	; 0x5fba <__fixunssfsi+0x3e>
__fixunssfsi():
    5f8e:	e1 f0       	breq	.+56     	; 0x5fc8 <__fixunssfsi+0x4c>
    5f90:	66 0f       	add	r22, r22
    5f92:	77 1f       	adc	r23, r23
    5f94:	88 1f       	adc	r24, r24
    5f96:	99 1f       	adc	r25, r25
    5f98:	1a f0       	brmi	.+6      	; 0x5fa0 <__fixunssfsi+0x24>
    5f9a:	ba 95       	dec	r27
    5f9c:	c9 f7       	brne	.-14     	; 0x5f90 <__fixunssfsi+0x14>
    5f9e:	14 c0       	rjmp	.+40     	; 0x5fc8 <__fixunssfsi+0x4c>
    5fa0:	b1 30       	cpi	r27, 0x01	; 1
    5fa2:	91 f0       	breq	.+36     	; 0x5fc8 <__fixunssfsi+0x4c>
    5fa4:	0e 94 98 30 	call	0x6130	; 0x6130 <__fp_zero>
    5fa8:	b1 e0       	ldi	r27, 0x01	; 1
    5faa:	08 95       	ret
    5fac:	0c 94 98 30 	jmp	0x6130	; 0x6130 <__fp_zero>
    5fb0:	67 2f       	mov	r22, r23
    5fb2:	78 2f       	mov	r23, r24
    5fb4:	88 27       	eor	r24, r24
    5fb6:	b8 5f       	subi	r27, 0xF8	; 248
    5fb8:	39 f0       	breq	.+14     	; 0x5fc8 <__fixunssfsi+0x4c>
    5fba:	b9 3f       	cpi	r27, 0xF9	; 249
    5fbc:	cc f3       	brlt	.-14     	; 0x5fb0 <__fixunssfsi+0x34>
    5fbe:	86 95       	lsr	r24
    5fc0:	77 95       	ror	r23
    5fc2:	67 95       	ror	r22
    5fc4:	b3 95       	inc	r27
    5fc6:	d9 f7       	brne	.-10     	; 0x5fbe <__fixunssfsi+0x42>
    5fc8:	3e f4       	brtc	.+14     	; 0x5fd8 <__fixunssfsi+0x5c>
    5fca:	90 95       	com	r25
    5fcc:	80 95       	com	r24
    5fce:	70 95       	com	r23
    5fd0:	61 95       	neg	r22
    5fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    5fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fd8:	08 95       	ret

00005fda <__floatunsisf>:
__floatunsisf():
    5fda:	e8 94       	clt
    5fdc:	09 c0       	rjmp	.+18     	; 0x5ff0 <__floatsisf+0x12>

00005fde <__floatsisf>:
    5fde:	97 fb       	bst	r25, 7
    5fe0:	3e f4       	brtc	.+14     	; 0x5ff0 <__floatsisf+0x12>
    5fe2:	90 95       	com	r25
    5fe4:	80 95       	com	r24
    5fe6:	70 95       	com	r23
    5fe8:	61 95       	neg	r22
    5fea:	7f 4f       	sbci	r23, 0xFF	; 255
    5fec:	8f 4f       	sbci	r24, 0xFF	; 255
    5fee:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff0:	99 23       	and	r25, r25
    5ff2:	a9 f0       	breq	.+42     	; 0x601e <__floatsisf+0x40>
    5ff4:	f9 2f       	mov	r31, r25
    5ff6:	96 e9       	ldi	r25, 0x96	; 150
    5ff8:	bb 27       	eor	r27, r27
    5ffa:	93 95       	inc	r25
    5ffc:	f6 95       	lsr	r31
    5ffe:	87 95       	ror	r24
    6000:	77 95       	ror	r23
    6002:	67 95       	ror	r22
    6004:	b7 95       	ror	r27
    6006:	f1 11       	cpse	r31, r1
    6008:	f8 cf       	rjmp	.-16     	; 0x5ffa <__floatsisf+0x1c>
    600a:	fa f4       	brpl	.+62     	; 0x604a <__floatsisf+0x6c>
    600c:	bb 0f       	add	r27, r27
    600e:	11 f4       	brne	.+4      	; 0x6014 <__floatsisf+0x36>
    6010:	60 ff       	sbrs	r22, 0
    6012:	1b c0       	rjmp	.+54     	; 0x604a <__floatsisf+0x6c>
    6014:	6f 5f       	subi	r22, 0xFF	; 255
    6016:	7f 4f       	sbci	r23, 0xFF	; 255
    6018:	8f 4f       	sbci	r24, 0xFF	; 255
    601a:	9f 4f       	sbci	r25, 0xFF	; 255
    601c:	16 c0       	rjmp	.+44     	; 0x604a <__floatsisf+0x6c>
    601e:	88 23       	and	r24, r24
    6020:	11 f0       	breq	.+4      	; 0x6026 <__floatsisf+0x48>
    6022:	96 e9       	ldi	r25, 0x96	; 150
    6024:	11 c0       	rjmp	.+34     	; 0x6048 <__floatsisf+0x6a>
    6026:	77 23       	and	r23, r23
    6028:	21 f0       	breq	.+8      	; 0x6032 <__floatsisf+0x54>
    602a:	9e e8       	ldi	r25, 0x8E	; 142
    602c:	87 2f       	mov	r24, r23
    602e:	76 2f       	mov	r23, r22
    6030:	05 c0       	rjmp	.+10     	; 0x603c <__floatsisf+0x5e>
    6032:	66 23       	and	r22, r22
    6034:	71 f0       	breq	.+28     	; 0x6052 <__floatsisf+0x74>
    6036:	96 e8       	ldi	r25, 0x86	; 134
    6038:	86 2f       	mov	r24, r22
    603a:	70 e0       	ldi	r23, 0x00	; 0
    603c:	60 e0       	ldi	r22, 0x00	; 0
    603e:	2a f0       	brmi	.+10     	; 0x604a <__floatsisf+0x6c>
    6040:	9a 95       	dec	r25
    6042:	66 0f       	add	r22, r22
    6044:	77 1f       	adc	r23, r23
    6046:	88 1f       	adc	r24, r24
    6048:	da f7       	brpl	.-10     	; 0x6040 <__floatsisf+0x62>
    604a:	88 0f       	add	r24, r24
    604c:	96 95       	lsr	r25
    604e:	87 95       	ror	r24
    6050:	97 f9       	bld	r25, 7
    6052:	08 95       	ret

00006054 <__fp_cmp>:
__fp_cmp():
    6054:	99 0f       	add	r25, r25
    6056:	00 08       	sbc	r0, r0
    6058:	55 0f       	add	r21, r21
    605a:	aa 0b       	sbc	r26, r26
    605c:	e0 e8       	ldi	r30, 0x80	; 128
    605e:	fe ef       	ldi	r31, 0xFE	; 254
    6060:	16 16       	cp	r1, r22
    6062:	17 06       	cpc	r1, r23
    6064:	e8 07       	cpc	r30, r24
    6066:	f9 07       	cpc	r31, r25
    6068:	c0 f0       	brcs	.+48     	; 0x609a <__fp_cmp+0x46>
    606a:	12 16       	cp	r1, r18
    606c:	13 06       	cpc	r1, r19
    606e:	e4 07       	cpc	r30, r20
    6070:	f5 07       	cpc	r31, r21
    6072:	98 f0       	brcs	.+38     	; 0x609a <__fp_cmp+0x46>
    6074:	62 1b       	sub	r22, r18
    6076:	73 0b       	sbc	r23, r19
    6078:	84 0b       	sbc	r24, r20
    607a:	95 0b       	sbc	r25, r21
    607c:	39 f4       	brne	.+14     	; 0x608c <__fp_cmp+0x38>
    607e:	0a 26       	eor	r0, r26
    6080:	61 f0       	breq	.+24     	; 0x609a <__fp_cmp+0x46>
    6082:	23 2b       	or	r18, r19
    6084:	24 2b       	or	r18, r20
    6086:	25 2b       	or	r18, r21
    6088:	21 f4       	brne	.+8      	; 0x6092 <__fp_cmp+0x3e>
    608a:	08 95       	ret
    608c:	0a 26       	eor	r0, r26
    608e:	09 f4       	brne	.+2      	; 0x6092 <__fp_cmp+0x3e>
    6090:	a1 40       	sbci	r26, 0x01	; 1
    6092:	a6 95       	lsr	r26
    6094:	8f ef       	ldi	r24, 0xFF	; 255
    6096:	81 1d       	adc	r24, r1
    6098:	81 1d       	adc	r24, r1
    609a:	08 95       	ret

0000609c <__fp_inf>:
__fp_inf():
    609c:	97 f9       	bld	r25, 7
    609e:	9f 67       	ori	r25, 0x7F	; 127
    60a0:	80 e8       	ldi	r24, 0x80	; 128
    60a2:	70 e0       	ldi	r23, 0x00	; 0
    60a4:	60 e0       	ldi	r22, 0x00	; 0
    60a6:	08 95       	ret

000060a8 <__fp_nan>:
__fp_nan():
    60a8:	9f ef       	ldi	r25, 0xFF	; 255
    60aa:	80 ec       	ldi	r24, 0xC0	; 192
    60ac:	08 95       	ret

000060ae <__fp_pscA>:
__fp_pscA():
    60ae:	00 24       	eor	r0, r0
    60b0:	0a 94       	dec	r0
    60b2:	16 16       	cp	r1, r22
    60b4:	17 06       	cpc	r1, r23
    60b6:	18 06       	cpc	r1, r24
    60b8:	09 06       	cpc	r0, r25
    60ba:	08 95       	ret

000060bc <__fp_pscB>:
__fp_pscB():
    60bc:	00 24       	eor	r0, r0
    60be:	0a 94       	dec	r0
    60c0:	12 16       	cp	r1, r18
    60c2:	13 06       	cpc	r1, r19
    60c4:	14 06       	cpc	r1, r20
    60c6:	05 06       	cpc	r0, r21
    60c8:	08 95       	ret

000060ca <__fp_round>:
__fp_round():
    60ca:	09 2e       	mov	r0, r25
    60cc:	03 94       	inc	r0
    60ce:	00 0c       	add	r0, r0
    60d0:	11 f4       	brne	.+4      	; 0x60d6 <__fp_round+0xc>
    60d2:	88 23       	and	r24, r24
    60d4:	52 f0       	brmi	.+20     	; 0x60ea <__fp_round+0x20>
    60d6:	bb 0f       	add	r27, r27
    60d8:	40 f4       	brcc	.+16     	; 0x60ea <__fp_round+0x20>
    60da:	bf 2b       	or	r27, r31
    60dc:	11 f4       	brne	.+4      	; 0x60e2 <__fp_round+0x18>
    60de:	60 ff       	sbrs	r22, 0
    60e0:	04 c0       	rjmp	.+8      	; 0x60ea <__fp_round+0x20>
    60e2:	6f 5f       	subi	r22, 0xFF	; 255
    60e4:	7f 4f       	sbci	r23, 0xFF	; 255
    60e6:	8f 4f       	sbci	r24, 0xFF	; 255
    60e8:	9f 4f       	sbci	r25, 0xFF	; 255
    60ea:	08 95       	ret

000060ec <__fp_split3>:
__fp_split3():
    60ec:	57 fd       	sbrc	r21, 7
    60ee:	90 58       	subi	r25, 0x80	; 128
    60f0:	44 0f       	add	r20, r20
    60f2:	55 1f       	adc	r21, r21
    60f4:	59 f0       	breq	.+22     	; 0x610c <__fp_splitA+0x10>
    60f6:	5f 3f       	cpi	r21, 0xFF	; 255
    60f8:	71 f0       	breq	.+28     	; 0x6116 <__fp_splitA+0x1a>
    60fa:	47 95       	ror	r20

000060fc <__fp_splitA>:
    60fc:	88 0f       	add	r24, r24
    60fe:	97 fb       	bst	r25, 7
    6100:	99 1f       	adc	r25, r25
    6102:	61 f0       	breq	.+24     	; 0x611c <__fp_splitA+0x20>
    6104:	9f 3f       	cpi	r25, 0xFF	; 255
    6106:	79 f0       	breq	.+30     	; 0x6126 <__fp_splitA+0x2a>
    6108:	87 95       	ror	r24
    610a:	08 95       	ret
    610c:	12 16       	cp	r1, r18
    610e:	13 06       	cpc	r1, r19
    6110:	14 06       	cpc	r1, r20
    6112:	55 1f       	adc	r21, r21
    6114:	f2 cf       	rjmp	.-28     	; 0x60fa <__fp_split3+0xe>
    6116:	46 95       	lsr	r20
    6118:	f1 df       	rcall	.-30     	; 0x60fc <__fp_splitA>
    611a:	08 c0       	rjmp	.+16     	; 0x612c <__fp_splitA+0x30>
    611c:	16 16       	cp	r1, r22
    611e:	17 06       	cpc	r1, r23
    6120:	18 06       	cpc	r1, r24
    6122:	99 1f       	adc	r25, r25
    6124:	f1 cf       	rjmp	.-30     	; 0x6108 <__fp_splitA+0xc>
    6126:	86 95       	lsr	r24
    6128:	71 05       	cpc	r23, r1
    612a:	61 05       	cpc	r22, r1
    612c:	08 94       	sec
    612e:	08 95       	ret

00006130 <__fp_zero>:
__fp_zero():
    6130:	e8 94       	clt

00006132 <__fp_szero>:
    6132:	bb 27       	eor	r27, r27
    6134:	66 27       	eor	r22, r22
    6136:	77 27       	eor	r23, r23
    6138:	cb 01       	movw	r24, r22
    613a:	97 f9       	bld	r25, 7
    613c:	08 95       	ret

0000613e <__gesf2>:
__gesf2():
    613e:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fp_cmp>
    6142:	08 f4       	brcc	.+2      	; 0x6146 <__gesf2+0x8>
    6144:	8f ef       	ldi	r24, 0xFF	; 255
    6146:	08 95       	ret

00006148 <__mulsf3>:
__mulsf3():
    6148:	0e 94 b7 30 	call	0x616e	; 0x616e <__mulsf3x>
    614c:	0c 94 65 30 	jmp	0x60ca	; 0x60ca <__fp_round>
    6150:	0e 94 57 30 	call	0x60ae	; 0x60ae <__fp_pscA>
    6154:	38 f0       	brcs	.+14     	; 0x6164 <__mulsf3+0x1c>
    6156:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__fp_pscB>
    615a:	20 f0       	brcs	.+8      	; 0x6164 <__mulsf3+0x1c>
    615c:	95 23       	and	r25, r21
    615e:	11 f0       	breq	.+4      	; 0x6164 <__mulsf3+0x1c>
    6160:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>
    6164:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <__fp_nan>
    6168:	11 24       	eor	r1, r1
    616a:	0c 94 99 30 	jmp	0x6132	; 0x6132 <__fp_szero>

0000616e <__mulsf3x>:
__mulsf3x():
    616e:	0e 94 76 30 	call	0x60ec	; 0x60ec <__fp_split3>
    6172:	70 f3       	brcs	.-36     	; 0x6150 <__mulsf3+0x8>

00006174 <__mulsf3_pse>:
    6174:	95 9f       	mul	r25, r21
    6176:	c1 f3       	breq	.-16     	; 0x6168 <__mulsf3+0x20>
    6178:	95 0f       	add	r25, r21
    617a:	50 e0       	ldi	r21, 0x00	; 0
    617c:	55 1f       	adc	r21, r21
    617e:	62 9f       	mul	r22, r18
    6180:	f0 01       	movw	r30, r0
    6182:	72 9f       	mul	r23, r18
    6184:	bb 27       	eor	r27, r27
    6186:	f0 0d       	add	r31, r0
    6188:	b1 1d       	adc	r27, r1
    618a:	63 9f       	mul	r22, r19
    618c:	aa 27       	eor	r26, r26
    618e:	f0 0d       	add	r31, r0
    6190:	b1 1d       	adc	r27, r1
    6192:	aa 1f       	adc	r26, r26
    6194:	64 9f       	mul	r22, r20
    6196:	66 27       	eor	r22, r22
    6198:	b0 0d       	add	r27, r0
    619a:	a1 1d       	adc	r26, r1
    619c:	66 1f       	adc	r22, r22
    619e:	82 9f       	mul	r24, r18
    61a0:	22 27       	eor	r18, r18
    61a2:	b0 0d       	add	r27, r0
    61a4:	a1 1d       	adc	r26, r1
    61a6:	62 1f       	adc	r22, r18
    61a8:	73 9f       	mul	r23, r19
    61aa:	b0 0d       	add	r27, r0
    61ac:	a1 1d       	adc	r26, r1
    61ae:	62 1f       	adc	r22, r18
    61b0:	83 9f       	mul	r24, r19
    61b2:	a0 0d       	add	r26, r0
    61b4:	61 1d       	adc	r22, r1
    61b6:	22 1f       	adc	r18, r18
    61b8:	74 9f       	mul	r23, r20
    61ba:	33 27       	eor	r19, r19
    61bc:	a0 0d       	add	r26, r0
    61be:	61 1d       	adc	r22, r1
    61c0:	23 1f       	adc	r18, r19
    61c2:	84 9f       	mul	r24, r20
    61c4:	60 0d       	add	r22, r0
    61c6:	21 1d       	adc	r18, r1
    61c8:	82 2f       	mov	r24, r18
    61ca:	76 2f       	mov	r23, r22
    61cc:	6a 2f       	mov	r22, r26
    61ce:	11 24       	eor	r1, r1
    61d0:	9f 57       	subi	r25, 0x7F	; 127
    61d2:	50 40       	sbci	r21, 0x00	; 0
    61d4:	9a f0       	brmi	.+38     	; 0x61fc <__mulsf3_pse+0x88>
    61d6:	f1 f0       	breq	.+60     	; 0x6214 <__mulsf3_pse+0xa0>
    61d8:	88 23       	and	r24, r24
    61da:	4a f0       	brmi	.+18     	; 0x61ee <__mulsf3_pse+0x7a>
    61dc:	ee 0f       	add	r30, r30
    61de:	ff 1f       	adc	r31, r31
    61e0:	bb 1f       	adc	r27, r27
    61e2:	66 1f       	adc	r22, r22
    61e4:	77 1f       	adc	r23, r23
    61e6:	88 1f       	adc	r24, r24
    61e8:	91 50       	subi	r25, 0x01	; 1
    61ea:	50 40       	sbci	r21, 0x00	; 0
    61ec:	a9 f7       	brne	.-22     	; 0x61d8 <__mulsf3_pse+0x64>
    61ee:	9e 3f       	cpi	r25, 0xFE	; 254
    61f0:	51 05       	cpc	r21, r1
    61f2:	80 f0       	brcs	.+32     	; 0x6214 <__mulsf3_pse+0xa0>
    61f4:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>
    61f8:	0c 94 99 30 	jmp	0x6132	; 0x6132 <__fp_szero>
    61fc:	5f 3f       	cpi	r21, 0xFF	; 255
    61fe:	e4 f3       	brlt	.-8      	; 0x61f8 <__mulsf3_pse+0x84>
    6200:	98 3e       	cpi	r25, 0xE8	; 232
    6202:	d4 f3       	brlt	.-12     	; 0x61f8 <__mulsf3_pse+0x84>
    6204:	86 95       	lsr	r24
    6206:	77 95       	ror	r23
    6208:	67 95       	ror	r22
    620a:	b7 95       	ror	r27
    620c:	f7 95       	ror	r31
    620e:	e7 95       	ror	r30
    6210:	9f 5f       	subi	r25, 0xFF	; 255
    6212:	c1 f7       	brne	.-16     	; 0x6204 <__mulsf3_pse+0x90>
    6214:	fe 2b       	or	r31, r30
    6216:	88 0f       	add	r24, r24
    6218:	91 1d       	adc	r25, r1
    621a:	96 95       	lsr	r25
    621c:	87 95       	ror	r24
    621e:	97 f9       	bld	r25, 7
    6220:	08 95       	ret

00006222 <pow>:
    6222:	fa 01       	movw	r30, r20
    6224:	ee 0f       	add	r30, r30
    6226:	ff 1f       	adc	r31, r31
    6228:	30 96       	adiw	r30, 0x00	; 0
    622a:	21 05       	cpc	r18, r1
    622c:	31 05       	cpc	r19, r1
    622e:	a1 f1       	breq	.+104    	; 0x6298 <pow+0x76>
    6230:	61 15       	cp	r22, r1
    6232:	71 05       	cpc	r23, r1
    6234:	61 f4       	brne	.+24     	; 0x624e <pow+0x2c>
    6236:	80 38       	cpi	r24, 0x80	; 128
    6238:	bf e3       	ldi	r27, 0x3F	; 63
    623a:	9b 07       	cpc	r25, r27
    623c:	49 f1       	breq	.+82     	; 0x6290 <pow+0x6e>
    623e:	68 94       	set
pow():
    6240:	90 38       	cpi	r25, 0x80	; 128
    6242:	81 05       	cpc	r24, r1
    6244:	61 f0       	breq	.+24     	; 0x625e <pow+0x3c>
    6246:	80 38       	cpi	r24, 0x80	; 128
    6248:	bf ef       	ldi	r27, 0xFF	; 255
    624a:	9b 07       	cpc	r25, r27
    624c:	41 f0       	breq	.+16     	; 0x625e <pow+0x3c>
    624e:	99 23       	and	r25, r25
    6250:	4a f5       	brpl	.+82     	; 0x62a4 <pow+0x82>
    6252:	ff 3f       	cpi	r31, 0xFF	; 255
    6254:	e1 05       	cpc	r30, r1
    6256:	31 05       	cpc	r19, r1
    6258:	21 05       	cpc	r18, r1
    625a:	19 f1       	breq	.+70     	; 0x62a2 <pow+0x80>
    625c:	e8 94       	clt
    625e:	08 94       	sec
    6260:	e7 95       	ror	r30
    6262:	d9 01       	movw	r26, r18
    6264:	aa 23       	and	r26, r26
    6266:	29 f4       	brne	.+10     	; 0x6272 <pow+0x50>
    6268:	ab 2f       	mov	r26, r27
    626a:	be 2f       	mov	r27, r30
    626c:	f8 5f       	subi	r31, 0xF8	; 248
    626e:	d0 f3       	brcs	.-12     	; 0x6264 <pow+0x42>
    6270:	10 c0       	rjmp	.+32     	; 0x6292 <pow+0x70>
    6272:	ff 5f       	subi	r31, 0xFF	; 255
    6274:	70 f4       	brcc	.+28     	; 0x6292 <pow+0x70>
    6276:	a6 95       	lsr	r26
    6278:	e0 f7       	brcc	.-8      	; 0x6272 <pow+0x50>
    627a:	f7 39       	cpi	r31, 0x97	; 151
    627c:	50 f0       	brcs	.+20     	; 0x6292 <pow+0x70>
    627e:	19 f0       	breq	.+6      	; 0x6286 <pow+0x64>
    6280:	ff 3a       	cpi	r31, 0xAF	; 175
    6282:	38 f4       	brcc	.+14     	; 0x6292 <pow+0x70>
    6284:	9f 77       	andi	r25, 0x7F	; 127
    6286:	9f 93       	push	r25
    6288:	0d d0       	rcall	.+26     	; 0x62a4 <pow+0x82>
    628a:	0f 90       	pop	r0
    628c:	07 fc       	sbrc	r0, 7
    628e:	90 58       	subi	r25, 0x80	; 128
    6290:	08 95       	ret
    6292:	46 f0       	brts	.+16     	; 0x62a4 <pow+0x82>
    6294:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <__fp_nan>
    6298:	60 e0       	ldi	r22, 0x00	; 0
    629a:	70 e0       	ldi	r23, 0x00	; 0
    629c:	80 e8       	ldi	r24, 0x80	; 128
    629e:	9f e3       	ldi	r25, 0x3F	; 63
    62a0:	08 95       	ret
    62a2:	4f e7       	ldi	r20, 0x7F	; 127
    62a4:	9f 77       	andi	r25, 0x7F	; 127
    62a6:	5f 93       	push	r21
    62a8:	4f 93       	push	r20
    62aa:	3f 93       	push	r19
    62ac:	2f 93       	push	r18
    62ae:	0e 94 1a 32 	call	0x6434	; 0x6434 <log>
    62b2:	2f 91       	pop	r18
    62b4:	3f 91       	pop	r19
    62b6:	4f 91       	pop	r20
    62b8:	5f 91       	pop	r21
    62ba:	0e 94 a4 30 	call	0x6148	; 0x6148 <__mulsf3>
    62be:	0c 94 69 31 	jmp	0x62d2	; 0x62d2 <exp>
    62c2:	29 f4       	brne	.+10     	; 0x62ce <pow+0xac>
    62c4:	16 f0       	brts	.+4      	; 0x62ca <pow+0xa8>
    62c6:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>
    62ca:	0c 94 98 30 	jmp	0x6130	; 0x6130 <__fp_zero>
    62ce:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <__fp_nan>

000062d2 <exp>:
exp():
    62d2:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__fp_splitA>
    62d6:	a8 f3       	brcs	.-22     	; 0x62c2 <pow+0xa0>
    62d8:	96 38       	cpi	r25, 0x86	; 134
    62da:	a0 f7       	brcc	.-24     	; 0x62c4 <pow+0xa2>
    62dc:	07 f8       	bld	r0, 7
    62de:	0f 92       	push	r0
    62e0:	e8 94       	clt
    62e2:	2b e3       	ldi	r18, 0x3B	; 59
    62e4:	3a ea       	ldi	r19, 0xAA	; 170
    62e6:	48 eb       	ldi	r20, 0xB8	; 184
    62e8:	5f e7       	ldi	r21, 0x7F	; 127
    62ea:	0e 94 ba 30 	call	0x6174	; 0x6174 <__mulsf3_pse>
    62ee:	0f 92       	push	r0
    62f0:	0f 92       	push	r0
    62f2:	0f 92       	push	r0
    62f4:	4d b7       	in	r20, 0x3d	; 61
    62f6:	5e b7       	in	r21, 0x3e	; 62
    62f8:	0f 92       	push	r0
    62fa:	0e 94 62 32 	call	0x64c4	; 0x64c4 <modf>
    62fe:	ec e8       	ldi	r30, 0x8C	; 140
    6300:	f0 e0       	ldi	r31, 0x00	; 0
    6302:	0e 94 a9 31 	call	0x6352	; 0x6352 <__fp_powser>
    6306:	4f 91       	pop	r20
    6308:	5f 91       	pop	r21
    630a:	ef 91       	pop	r30
    630c:	ff 91       	pop	r31
    630e:	e5 95       	asr	r30
    6310:	ee 1f       	adc	r30, r30
    6312:	ff 1f       	adc	r31, r31
    6314:	49 f0       	breq	.+18     	; 0x6328 <exp+0x56>
    6316:	fe 57       	subi	r31, 0x7E	; 126
    6318:	e0 68       	ori	r30, 0x80	; 128
    631a:	44 27       	eor	r20, r20
    631c:	ee 0f       	add	r30, r30
    631e:	44 1f       	adc	r20, r20
    6320:	fa 95       	dec	r31
    6322:	e1 f7       	brne	.-8      	; 0x631c <exp+0x4a>
    6324:	41 95       	neg	r20
    6326:	55 0b       	sbc	r21, r21
    6328:	0e 94 dc 31 	call	0x63b8	; 0x63b8 <ldexp>
    632c:	0f 90       	pop	r0
    632e:	07 fe       	sbrs	r0, 7
    6330:	0c 94 d0 31 	jmp	0x63a0	; 0x63a0 <inverse>
    6334:	08 95       	ret

00006336 <__fp_mpack>:
    6336:	9f 3f       	cpi	r25, 0xFF	; 255
    6338:	31 f0       	breq	.+12     	; 0x6346 <__fp_mpack_finite+0xc>

0000633a <__fp_mpack_finite>:
    633a:	91 50       	subi	r25, 0x01	; 1
    633c:	20 f4       	brcc	.+8      	; 0x6346 <__fp_mpack_finite+0xc>
    633e:	87 95       	ror	r24
    6340:	77 95       	ror	r23
    6342:	67 95       	ror	r22
    6344:	b7 95       	ror	r27
__fp_mpack_finite():
    6346:	88 0f       	add	r24, r24
    6348:	91 1d       	adc	r25, r1
    634a:	96 95       	lsr	r25
    634c:	87 95       	ror	r24
    634e:	97 f9       	bld	r25, 7
    6350:	08 95       	ret

00006352 <__fp_powser>:
__fp_powser():
    6352:	df 93       	push	r29
    6354:	cf 93       	push	r28
    6356:	1f 93       	push	r17
    6358:	0f 93       	push	r16
    635a:	ff 92       	push	r15
    635c:	ef 92       	push	r14
    635e:	df 92       	push	r13
    6360:	7b 01       	movw	r14, r22
    6362:	8c 01       	movw	r16, r24
    6364:	68 94       	set
    6366:	06 c0       	rjmp	.+12     	; 0x6374 <__fp_powser+0x22>
    6368:	da 2e       	mov	r13, r26
    636a:	ef 01       	movw	r28, r30
    636c:	0e 94 b7 30 	call	0x616e	; 0x616e <__mulsf3x>
    6370:	fe 01       	movw	r30, r28
    6372:	e8 94       	clt
    6374:	a5 91       	lpm	r26, Z+
    6376:	25 91       	lpm	r18, Z+
    6378:	35 91       	lpm	r19, Z+
    637a:	45 91       	lpm	r20, Z+
    637c:	55 91       	lpm	r21, Z+
    637e:	a6 f3       	brts	.-24     	; 0x6368 <__fp_powser+0x16>
    6380:	ef 01       	movw	r28, r30
    6382:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <__addsf3x>
    6386:	fe 01       	movw	r30, r28
    6388:	97 01       	movw	r18, r14
    638a:	a8 01       	movw	r20, r16
    638c:	da 94       	dec	r13
    638e:	69 f7       	brne	.-38     	; 0x636a <__fp_powser+0x18>
    6390:	df 90       	pop	r13
    6392:	ef 90       	pop	r14
    6394:	ff 90       	pop	r15
    6396:	0f 91       	pop	r16
    6398:	1f 91       	pop	r17
    639a:	cf 91       	pop	r28
    639c:	df 91       	pop	r29
    639e:	08 95       	ret

000063a0 <inverse>:
inverse():
    63a0:	9b 01       	movw	r18, r22
    63a2:	ac 01       	movw	r20, r24
    63a4:	60 e0       	ldi	r22, 0x00	; 0
    63a6:	70 e0       	ldi	r23, 0x00	; 0
    63a8:	80 e8       	ldi	r24, 0x80	; 128
    63aa:	9f e3       	ldi	r25, 0x3F	; 63
    63ac:	0c 94 45 2f 	jmp	0x5e8a	; 0x5e8a <__divsf3>
    63b0:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>
    63b4:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__fp_mpack>

000063b8 <ldexp>:
ldexp():
    63b8:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__fp_splitA>
    63bc:	d8 f3       	brcs	.-10     	; 0x63b4 <inverse+0x14>
    63be:	99 23       	and	r25, r25
    63c0:	c9 f3       	breq	.-14     	; 0x63b4 <inverse+0x14>
    63c2:	94 0f       	add	r25, r20
    63c4:	51 1d       	adc	r21, r1
    63c6:	a3 f3       	brvs	.-24     	; 0x63b0 <inverse+0x10>
    63c8:	91 50       	subi	r25, 0x01	; 1
    63ca:	50 40       	sbci	r21, 0x00	; 0
    63cc:	94 f0       	brlt	.+36     	; 0x63f2 <ldexp+0x3a>
    63ce:	59 f0       	breq	.+22     	; 0x63e6 <ldexp+0x2e>
    63d0:	88 23       	and	r24, r24
    63d2:	32 f0       	brmi	.+12     	; 0x63e0 <ldexp+0x28>
    63d4:	66 0f       	add	r22, r22
    63d6:	77 1f       	adc	r23, r23
    63d8:	88 1f       	adc	r24, r24
    63da:	91 50       	subi	r25, 0x01	; 1
    63dc:	50 40       	sbci	r21, 0x00	; 0
    63de:	c1 f7       	brne	.-16     	; 0x63d0 <ldexp+0x18>
    63e0:	9e 3f       	cpi	r25, 0xFE	; 254
    63e2:	51 05       	cpc	r21, r1
    63e4:	2c f7       	brge	.-54     	; 0x63b0 <inverse+0x10>
    63e6:	88 0f       	add	r24, r24
    63e8:	91 1d       	adc	r25, r1
    63ea:	96 95       	lsr	r25
    63ec:	87 95       	ror	r24
    63ee:	97 f9       	bld	r25, 7
    63f0:	08 95       	ret
    63f2:	5f 3f       	cpi	r21, 0xFF	; 255
    63f4:	ac f0       	brlt	.+42     	; 0x6420 <ldexp+0x68>
    63f6:	98 3e       	cpi	r25, 0xE8	; 232
    63f8:	9c f0       	brlt	.+38     	; 0x6420 <ldexp+0x68>
    63fa:	bb 27       	eor	r27, r27
    63fc:	86 95       	lsr	r24
    63fe:	77 95       	ror	r23
    6400:	67 95       	ror	r22
    6402:	b7 95       	ror	r27
    6404:	08 f4       	brcc	.+2      	; 0x6408 <ldexp+0x50>
    6406:	b1 60       	ori	r27, 0x01	; 1
    6408:	93 95       	inc	r25
    640a:	c1 f7       	brne	.-16     	; 0x63fc <ldexp+0x44>
    640c:	bb 0f       	add	r27, r27
    640e:	58 f7       	brcc	.-42     	; 0x63e6 <ldexp+0x2e>
    6410:	11 f4       	brne	.+4      	; 0x6416 <ldexp+0x5e>
    6412:	60 ff       	sbrs	r22, 0
    6414:	e8 cf       	rjmp	.-48     	; 0x63e6 <ldexp+0x2e>
    6416:	6f 5f       	subi	r22, 0xFF	; 255
    6418:	7f 4f       	sbci	r23, 0xFF	; 255
    641a:	8f 4f       	sbci	r24, 0xFF	; 255
    641c:	9f 4f       	sbci	r25, 0xFF	; 255
    641e:	e3 cf       	rjmp	.-58     	; 0x63e6 <ldexp+0x2e>
    6420:	0c 94 99 30 	jmp	0x6132	; 0x6132 <__fp_szero>
    6424:	16 f0       	brts	.+4      	; 0x642a <ldexp+0x72>
    6426:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__fp_mpack>
    642a:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <__fp_nan>
    642e:	68 94       	set
    6430:	0c 94 4e 30 	jmp	0x609c	; 0x609c <__fp_inf>

00006434 <log>:
log():
    6434:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__fp_splitA>
    6438:	a8 f3       	brcs	.-22     	; 0x6424 <ldexp+0x6c>
    643a:	99 23       	and	r25, r25
    643c:	c1 f3       	breq	.-16     	; 0x642e <ldexp+0x76>
    643e:	ae f3       	brts	.-22     	; 0x642a <ldexp+0x72>
    6440:	df 93       	push	r29
    6442:	cf 93       	push	r28
    6444:	1f 93       	push	r17
    6446:	0f 93       	push	r16
    6448:	ff 92       	push	r15
    644a:	c9 2f       	mov	r28, r25
    644c:	dd 27       	eor	r29, r29
    644e:	88 23       	and	r24, r24
    6450:	2a f0       	brmi	.+10     	; 0x645c <log+0x28>
    6452:	21 97       	sbiw	r28, 0x01	; 1
    6454:	66 0f       	add	r22, r22
    6456:	77 1f       	adc	r23, r23
    6458:	88 1f       	adc	r24, r24
    645a:	da f7       	brpl	.-10     	; 0x6452 <log+0x1e>
    645c:	20 e0       	ldi	r18, 0x00	; 0
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	40 e8       	ldi	r20, 0x80	; 128
    6462:	5f eb       	ldi	r21, 0xBF	; 191
    6464:	9f e3       	ldi	r25, 0x3F	; 63
    6466:	88 39       	cpi	r24, 0x98	; 152
    6468:	20 f0       	brcs	.+8      	; 0x6472 <log+0x3e>
    646a:	80 3e       	cpi	r24, 0xE0	; 224
    646c:	38 f0       	brcs	.+14     	; 0x647c <log+0x48>
    646e:	21 96       	adiw	r28, 0x01	; 1
    6470:	8f 77       	andi	r24, 0x7F	; 127
    6472:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    6476:	e4 eb       	ldi	r30, 0xB4	; 180
    6478:	f0 e0       	ldi	r31, 0x00	; 0
    647a:	04 c0       	rjmp	.+8      	; 0x6484 <log+0x50>
    647c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__addsf3>
    6480:	e1 ee       	ldi	r30, 0xE1	; 225
    6482:	f0 e0       	ldi	r31, 0x00	; 0
    6484:	0e 94 a9 31 	call	0x6352	; 0x6352 <__fp_powser>
    6488:	8b 01       	movw	r16, r22
    648a:	be 01       	movw	r22, r28
    648c:	ec 01       	movw	r28, r24
    648e:	fb 2e       	mov	r15, r27
    6490:	6f 57       	subi	r22, 0x7F	; 127
    6492:	71 09       	sbc	r23, r1
    6494:	75 95       	asr	r23
    6496:	77 1f       	adc	r23, r23
    6498:	88 0b       	sbc	r24, r24
    649a:	99 0b       	sbc	r25, r25
    649c:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <__floatsisf>
    64a0:	28 e1       	ldi	r18, 0x18	; 24
    64a2:	32 e7       	ldi	r19, 0x72	; 114
    64a4:	41 e3       	ldi	r20, 0x31	; 49
    64a6:	5f e3       	ldi	r21, 0x3F	; 63
    64a8:	0e 94 b7 30 	call	0x616e	; 0x616e <__mulsf3x>
    64ac:	af 2d       	mov	r26, r15
    64ae:	98 01       	movw	r18, r16
    64b0:	ae 01       	movw	r20, r28
    64b2:	ff 90       	pop	r15
    64b4:	0f 91       	pop	r16
    64b6:	1f 91       	pop	r17
    64b8:	cf 91       	pop	r28
    64ba:	df 91       	pop	r29
    64bc:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <__addsf3x>
    64c0:	0c 94 65 30 	jmp	0x60ca	; 0x60ca <__fp_round>

000064c4 <modf>:
    64c4:	fa 01       	movw	r30, r20
    64c6:	dc 01       	movw	r26, r24
    64c8:	aa 0f       	add	r26, r26
    64ca:	bb 1f       	adc	r27, r27
    64cc:	9b 01       	movw	r18, r22
    64ce:	ac 01       	movw	r20, r24
    64d0:	bf 57       	subi	r27, 0x7F	; 127
    64d2:	28 f4       	brcc	.+10     	; 0x64de <modf+0x1a>
modf():
    64d4:	22 27       	eor	r18, r18
    64d6:	33 27       	eor	r19, r19
    64d8:	44 27       	eor	r20, r20
    64da:	50 78       	andi	r21, 0x80	; 128
    64dc:	20 c0       	rjmp	.+64     	; 0x651e <modf+0x5a>
    64de:	b7 51       	subi	r27, 0x17	; 23
    64e0:	90 f4       	brcc	.+36     	; 0x6506 <modf+0x42>
    64e2:	ab 2f       	mov	r26, r27
    64e4:	00 24       	eor	r0, r0
    64e6:	46 95       	lsr	r20
    64e8:	37 95       	ror	r19
    64ea:	27 95       	ror	r18
    64ec:	01 1c       	adc	r0, r1
    64ee:	a3 95       	inc	r26
    64f0:	d2 f3       	brmi	.-12     	; 0x64e6 <modf+0x22>
    64f2:	00 20       	and	r0, r0
    64f4:	71 f0       	breq	.+28     	; 0x6512 <modf+0x4e>
    64f6:	22 0f       	add	r18, r18
    64f8:	33 1f       	adc	r19, r19
    64fa:	44 1f       	adc	r20, r20
    64fc:	b3 95       	inc	r27
    64fe:	da f3       	brmi	.-10     	; 0x64f6 <modf+0x32>
    6500:	0e d0       	rcall	.+28     	; 0x651e <modf+0x5a>
    6502:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__subsf3>
    6506:	61 30       	cpi	r22, 0x01	; 1
    6508:	71 05       	cpc	r23, r1
    650a:	a0 e8       	ldi	r26, 0x80	; 128
    650c:	8a 07       	cpc	r24, r26
    650e:	b9 46       	sbci	r27, 0x69	; 105
    6510:	30 f4       	brcc	.+12     	; 0x651e <modf+0x5a>
    6512:	9b 01       	movw	r18, r22
    6514:	ac 01       	movw	r20, r24
    6516:	66 27       	eor	r22, r22
    6518:	77 27       	eor	r23, r23
    651a:	88 27       	eor	r24, r24
    651c:	90 78       	andi	r25, 0x80	; 128
    651e:	30 96       	adiw	r30, 0x00	; 0
    6520:	21 f0       	breq	.+8      	; 0x652a <modf+0x66>
    6522:	20 83       	st	Z, r18
    6524:	31 83       	std	Z+1, r19	; 0x01
    6526:	42 83       	std	Z+2, r20	; 0x02
    6528:	53 83       	std	Z+3, r21	; 0x03
    652a:	08 95       	ret

0000652c <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    652c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    652e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    6530:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    6532:	07 c0       	rjmp	.+14     	; 0x6542 <__udivmodhi4_ep>

00006534 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    6534:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    6536:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    6538:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    653a:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    653c:	10 f0       	brcs	.+4      	; 0x6542 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    653e:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    6540:	b7 0b       	sbc	r27, r23

00006542 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    6542:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    6544:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    6546:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    6548:	a9 f7       	brne	.-22     	; 0x6534 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    654a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    654c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    654e:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    6550:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    6552:	08 95       	ret

00006554 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    6554:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    6556:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    6558:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    655a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    655c:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    655e:	0d c0       	rjmp	.+26     	; 0x657a <__udivmodsi4_ep>

00006560 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    6560:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    6562:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    6564:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    6566:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    6568:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    656a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    656c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    656e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    6570:	20 f0       	brcs	.+8      	; 0x657a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    6572:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    6574:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    6576:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    6578:	f5 0b       	sbc	r31, r21

0000657a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    657a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    657c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    657e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    6580:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    6582:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    6584:	69 f7       	brne	.-38     	; 0x6560 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    6586:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    6588:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    658a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    658c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    658e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    6590:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    6592:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    6594:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    6596:	08 95       	ret

00006598 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    6598:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    659a:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    659c:	1e f4       	brtc	.+6      	; 0x65a4 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    659e:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    65a0:	0e 94 e3 32 	call	0x65c6	; 0x65c6 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    65a4:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    65a6:	07 d0       	rcall	.+14     	; 0x65b6 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    65a8:	0e 94 aa 32 	call	0x6554	; 0x6554 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    65ac:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    65ae:	03 d0       	rcall	.+6      	; 0x65b6 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    65b0:	4e f4       	brtc	.+18     	; 0x65c4 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    65b2:	0c 94 e3 32 	jmp	0x65c6	; 0x65c6 <__negsi2>

000065b6 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    65b6:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    65b8:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    65ba:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    65bc:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    65be:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    65c0:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    65c2:	5f 4f       	sbci	r21, 0xFF	; 255

000065c4 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    65c4:	08 95       	ret

000065c6 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    65c6:	90 95       	com	r25
    65c8:	80 95       	com	r24
    65ca:	70 95       	com	r23
    65cc:	61 95       	neg	r22
    65ce:	7f 4f       	sbci	r23, 0xFF	; 255
    65d0:	8f 4f       	sbci	r24, 0xFF	; 255
    65d2:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    65d4:	08 95       	ret

000065d6 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    65d6:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    65d8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    65da:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    65dc:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    65de:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    65e0:	09 94       	ijmp

000065e2 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    65e2:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    65e4:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    65e6:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    65e8:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    65ea:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    65ec:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    65ee:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    65f0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    65f2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    65f4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    65f6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    65f8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    65fa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    65fc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    65fe:	08 95       	ret

00006600 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    6600:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    6604:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    6606:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    6608:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    660a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    660c:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    660e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    6610:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    6612:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    6614:	08 95       	ret

00006616 <malloc>:
malloc():
    6616:	0f 93       	push	r16
    6618:	1f 93       	push	r17
    661a:	cf 93       	push	r28
    661c:	df 93       	push	r29
    661e:	82 30       	cpi	r24, 0x02	; 2
    6620:	91 05       	cpc	r25, r1
    6622:	10 f4       	brcc	.+4      	; 0x6628 <malloc+0x12>
    6624:	82 e0       	ldi	r24, 0x02	; 2
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <__flp>
    662c:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <__flp+0x1>
    6630:	30 e0       	ldi	r19, 0x00	; 0
    6632:	20 e0       	ldi	r18, 0x00	; 0
    6634:	b0 e0       	ldi	r27, 0x00	; 0
    6636:	a0 e0       	ldi	r26, 0x00	; 0
    6638:	30 97       	sbiw	r30, 0x00	; 0
    663a:	99 f4       	brne	.+38     	; 0x6662 <malloc+0x4c>
    663c:	21 15       	cp	r18, r1
    663e:	31 05       	cpc	r19, r1
    6640:	09 f4       	brne	.+2      	; 0x6644 <malloc+0x2e>
    6642:	4a c0       	rjmp	.+148    	; 0x66d8 <malloc+0xc2>
    6644:	28 1b       	sub	r18, r24
    6646:	39 0b       	sbc	r19, r25
    6648:	24 30       	cpi	r18, 0x04	; 4
    664a:	31 05       	cpc	r19, r1
    664c:	d8 f5       	brcc	.+118    	; 0x66c4 <malloc+0xae>
    664e:	8a 81       	ldd	r24, Y+2	; 0x02
    6650:	9b 81       	ldd	r25, Y+3	; 0x03
    6652:	61 15       	cp	r22, r1
    6654:	71 05       	cpc	r23, r1
    6656:	89 f1       	breq	.+98     	; 0x66ba <malloc+0xa4>
    6658:	fb 01       	movw	r30, r22
    665a:	93 83       	std	Z+3, r25	; 0x03
    665c:	82 83       	std	Z+2, r24	; 0x02
    665e:	fe 01       	movw	r30, r28
    6660:	11 c0       	rjmp	.+34     	; 0x6684 <malloc+0x6e>
    6662:	40 81       	ld	r20, Z
    6664:	51 81       	ldd	r21, Z+1	; 0x01
    6666:	02 81       	ldd	r16, Z+2	; 0x02
    6668:	13 81       	ldd	r17, Z+3	; 0x03
    666a:	48 17       	cp	r20, r24
    666c:	59 07       	cpc	r21, r25
    666e:	e0 f0       	brcs	.+56     	; 0x66a8 <malloc+0x92>
    6670:	48 17       	cp	r20, r24
    6672:	59 07       	cpc	r21, r25
    6674:	99 f4       	brne	.+38     	; 0x669c <malloc+0x86>
    6676:	10 97       	sbiw	r26, 0x00	; 0
    6678:	61 f0       	breq	.+24     	; 0x6692 <malloc+0x7c>
    667a:	12 96       	adiw	r26, 0x02	; 2
    667c:	0c 93       	st	X, r16
    667e:	12 97       	sbiw	r26, 0x02	; 2
    6680:	13 96       	adiw	r26, 0x03	; 3
    6682:	1c 93       	st	X, r17
    6684:	32 96       	adiw	r30, 0x02	; 2
    6686:	cf 01       	movw	r24, r30
    6688:	df 91       	pop	r29
    668a:	cf 91       	pop	r28
    668c:	1f 91       	pop	r17
    668e:	0f 91       	pop	r16
    6690:	08 95       	ret
    6692:	00 93 fb 06 	sts	0x06FB, r16	; 0x8006fb <__flp>
    6696:	10 93 fc 06 	sts	0x06FC, r17	; 0x8006fc <__flp+0x1>
    669a:	f4 cf       	rjmp	.-24     	; 0x6684 <malloc+0x6e>
    669c:	21 15       	cp	r18, r1
    669e:	31 05       	cpc	r19, r1
    66a0:	51 f0       	breq	.+20     	; 0x66b6 <malloc+0xa0>
    66a2:	42 17       	cp	r20, r18
    66a4:	53 07       	cpc	r21, r19
    66a6:	38 f0       	brcs	.+14     	; 0x66b6 <malloc+0xa0>
    66a8:	a9 01       	movw	r20, r18
    66aa:	db 01       	movw	r26, r22
    66ac:	9a 01       	movw	r18, r20
    66ae:	bd 01       	movw	r22, r26
    66b0:	df 01       	movw	r26, r30
    66b2:	f8 01       	movw	r30, r16
    66b4:	c1 cf       	rjmp	.-126    	; 0x6638 <malloc+0x22>
    66b6:	ef 01       	movw	r28, r30
    66b8:	f9 cf       	rjmp	.-14     	; 0x66ac <malloc+0x96>
    66ba:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <__flp+0x1>
    66be:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <__flp>
    66c2:	cd cf       	rjmp	.-102    	; 0x665e <malloc+0x48>
    66c4:	fe 01       	movw	r30, r28
    66c6:	e2 0f       	add	r30, r18
    66c8:	f3 1f       	adc	r31, r19
    66ca:	81 93       	st	Z+, r24
    66cc:	91 93       	st	Z+, r25
    66ce:	22 50       	subi	r18, 0x02	; 2
    66d0:	31 09       	sbc	r19, r1
    66d2:	39 83       	std	Y+1, r19	; 0x01
    66d4:	28 83       	st	Y, r18
    66d6:	d7 cf       	rjmp	.-82     	; 0x6686 <malloc+0x70>
    66d8:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <__brkval>
    66dc:	30 91 fa 06 	lds	r19, 0x06FA	; 0x8006fa <__brkval+0x1>
    66e0:	23 2b       	or	r18, r19
    66e2:	41 f4       	brne	.+16     	; 0x66f4 <malloc+0xde>
    66e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    66e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    66ec:	30 93 fa 06 	sts	0x06FA, r19	; 0x8006fa <__brkval+0x1>
    66f0:	20 93 f9 06 	sts	0x06F9, r18	; 0x8006f9 <__brkval>
    66f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    66f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    66fc:	21 15       	cp	r18, r1
    66fe:	31 05       	cpc	r19, r1
    6700:	41 f4       	brne	.+16     	; 0x6712 <malloc+0xfc>
    6702:	2d b7       	in	r18, 0x3d	; 61
    6704:	3e b7       	in	r19, 0x3e	; 62
    6706:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    670a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    670e:	24 1b       	sub	r18, r20
    6710:	35 0b       	sbc	r19, r21
    6712:	e0 91 f9 06 	lds	r30, 0x06F9	; 0x8006f9 <__brkval>
    6716:	f0 91 fa 06 	lds	r31, 0x06FA	; 0x8006fa <__brkval+0x1>
    671a:	e2 17       	cp	r30, r18
    671c:	f3 07       	cpc	r31, r19
    671e:	a0 f4       	brcc	.+40     	; 0x6748 <malloc+0x132>
    6720:	2e 1b       	sub	r18, r30
    6722:	3f 0b       	sbc	r19, r31
    6724:	28 17       	cp	r18, r24
    6726:	39 07       	cpc	r19, r25
    6728:	78 f0       	brcs	.+30     	; 0x6748 <malloc+0x132>
    672a:	ac 01       	movw	r20, r24
    672c:	4e 5f       	subi	r20, 0xFE	; 254
    672e:	5f 4f       	sbci	r21, 0xFF	; 255
    6730:	24 17       	cp	r18, r20
    6732:	35 07       	cpc	r19, r21
    6734:	48 f0       	brcs	.+18     	; 0x6748 <malloc+0x132>
    6736:	4e 0f       	add	r20, r30
    6738:	5f 1f       	adc	r21, r31
    673a:	50 93 fa 06 	sts	0x06FA, r21	; 0x8006fa <__brkval+0x1>
    673e:	40 93 f9 06 	sts	0x06F9, r20	; 0x8006f9 <__brkval>
    6742:	81 93       	st	Z+, r24
    6744:	91 93       	st	Z+, r25
    6746:	9f cf       	rjmp	.-194    	; 0x6686 <malloc+0x70>
    6748:	f0 e0       	ldi	r31, 0x00	; 0
    674a:	e0 e0       	ldi	r30, 0x00	; 0
    674c:	9c cf       	rjmp	.-200    	; 0x6686 <malloc+0x70>

0000674e <free>:
free():
    674e:	cf 93       	push	r28
    6750:	df 93       	push	r29
    6752:	00 97       	sbiw	r24, 0x00	; 0
    6754:	e9 f0       	breq	.+58     	; 0x6790 <free+0x42>
    6756:	fc 01       	movw	r30, r24
    6758:	32 97       	sbiw	r30, 0x02	; 2
    675a:	13 82       	std	Z+3, r1	; 0x03
    675c:	12 82       	std	Z+2, r1	; 0x02
    675e:	a0 91 fb 06 	lds	r26, 0x06FB	; 0x8006fb <__flp>
    6762:	b0 91 fc 06 	lds	r27, 0x06FC	; 0x8006fc <__flp+0x1>
    6766:	ed 01       	movw	r28, r26
    6768:	30 e0       	ldi	r19, 0x00	; 0
    676a:	20 e0       	ldi	r18, 0x00	; 0
    676c:	10 97       	sbiw	r26, 0x00	; 0
    676e:	a1 f4       	brne	.+40     	; 0x6798 <free+0x4a>
    6770:	20 81       	ld	r18, Z
    6772:	31 81       	ldd	r19, Z+1	; 0x01
    6774:	82 0f       	add	r24, r18
    6776:	93 1f       	adc	r25, r19
    6778:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <__brkval>
    677c:	30 91 fa 06 	lds	r19, 0x06FA	; 0x8006fa <__brkval+0x1>
    6780:	28 17       	cp	r18, r24
    6782:	39 07       	cpc	r19, r25
    6784:	09 f0       	breq	.+2      	; 0x6788 <free+0x3a>
    6786:	61 c0       	rjmp	.+194    	; 0x684a <free+0xfc>
    6788:	f0 93 fa 06 	sts	0x06FA, r31	; 0x8006fa <__brkval+0x1>
    678c:	e0 93 f9 06 	sts	0x06F9, r30	; 0x8006f9 <__brkval>
    6790:	df 91       	pop	r29
    6792:	cf 91       	pop	r28
    6794:	08 95       	ret
    6796:	ea 01       	movw	r28, r20
    6798:	ce 17       	cp	r28, r30
    679a:	df 07       	cpc	r29, r31
    679c:	e8 f5       	brcc	.+122    	; 0x6818 <free+0xca>
    679e:	4a 81       	ldd	r20, Y+2	; 0x02
    67a0:	5b 81       	ldd	r21, Y+3	; 0x03
    67a2:	9e 01       	movw	r18, r28
    67a4:	41 15       	cp	r20, r1
    67a6:	51 05       	cpc	r21, r1
    67a8:	b1 f7       	brne	.-20     	; 0x6796 <free+0x48>
    67aa:	e9 01       	movw	r28, r18
    67ac:	fb 83       	std	Y+3, r31	; 0x03
    67ae:	ea 83       	std	Y+2, r30	; 0x02
    67b0:	49 91       	ld	r20, Y+
    67b2:	59 91       	ld	r21, Y+
    67b4:	c4 0f       	add	r28, r20
    67b6:	d5 1f       	adc	r29, r21
    67b8:	ec 17       	cp	r30, r28
    67ba:	fd 07       	cpc	r31, r29
    67bc:	61 f4       	brne	.+24     	; 0x67d6 <free+0x88>
    67be:	80 81       	ld	r24, Z
    67c0:	91 81       	ldd	r25, Z+1	; 0x01
    67c2:	02 96       	adiw	r24, 0x02	; 2
    67c4:	84 0f       	add	r24, r20
    67c6:	95 1f       	adc	r25, r21
    67c8:	e9 01       	movw	r28, r18
    67ca:	99 83       	std	Y+1, r25	; 0x01
    67cc:	88 83       	st	Y, r24
    67ce:	82 81       	ldd	r24, Z+2	; 0x02
    67d0:	93 81       	ldd	r25, Z+3	; 0x03
    67d2:	9b 83       	std	Y+3, r25	; 0x03
    67d4:	8a 83       	std	Y+2, r24	; 0x02
    67d6:	f0 e0       	ldi	r31, 0x00	; 0
    67d8:	e0 e0       	ldi	r30, 0x00	; 0
    67da:	12 96       	adiw	r26, 0x02	; 2
    67dc:	8d 91       	ld	r24, X+
    67de:	9c 91       	ld	r25, X
    67e0:	13 97       	sbiw	r26, 0x03	; 3
    67e2:	00 97       	sbiw	r24, 0x00	; 0
    67e4:	b9 f5       	brne	.+110    	; 0x6854 <free+0x106>
    67e6:	2d 91       	ld	r18, X+
    67e8:	3c 91       	ld	r19, X
    67ea:	11 97       	sbiw	r26, 0x01	; 1
    67ec:	cd 01       	movw	r24, r26
    67ee:	02 96       	adiw	r24, 0x02	; 2
    67f0:	82 0f       	add	r24, r18
    67f2:	93 1f       	adc	r25, r19
    67f4:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <__brkval>
    67f8:	30 91 fa 06 	lds	r19, 0x06FA	; 0x8006fa <__brkval+0x1>
    67fc:	28 17       	cp	r18, r24
    67fe:	39 07       	cpc	r19, r25
    6800:	39 f6       	brne	.-114    	; 0x6790 <free+0x42>
    6802:	30 97       	sbiw	r30, 0x00	; 0
    6804:	51 f5       	brne	.+84     	; 0x685a <free+0x10c>
    6806:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <__flp+0x1>
    680a:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <__flp>
    680e:	b0 93 fa 06 	sts	0x06FA, r27	; 0x8006fa <__brkval+0x1>
    6812:	a0 93 f9 06 	sts	0x06F9, r26	; 0x8006f9 <__brkval>
    6816:	bc cf       	rjmp	.-136    	; 0x6790 <free+0x42>
    6818:	d3 83       	std	Z+3, r29	; 0x03
    681a:	c2 83       	std	Z+2, r28	; 0x02
    681c:	40 81       	ld	r20, Z
    681e:	51 81       	ldd	r21, Z+1	; 0x01
    6820:	84 0f       	add	r24, r20
    6822:	95 1f       	adc	r25, r21
    6824:	c8 17       	cp	r28, r24
    6826:	d9 07       	cpc	r29, r25
    6828:	61 f4       	brne	.+24     	; 0x6842 <free+0xf4>
    682a:	4e 5f       	subi	r20, 0xFE	; 254
    682c:	5f 4f       	sbci	r21, 0xFF	; 255
    682e:	88 81       	ld	r24, Y
    6830:	99 81       	ldd	r25, Y+1	; 0x01
    6832:	48 0f       	add	r20, r24
    6834:	59 1f       	adc	r21, r25
    6836:	51 83       	std	Z+1, r21	; 0x01
    6838:	40 83       	st	Z, r20
    683a:	8a 81       	ldd	r24, Y+2	; 0x02
    683c:	9b 81       	ldd	r25, Y+3	; 0x03
    683e:	93 83       	std	Z+3, r25	; 0x03
    6840:	82 83       	std	Z+2, r24	; 0x02
    6842:	21 15       	cp	r18, r1
    6844:	31 05       	cpc	r19, r1
    6846:	09 f0       	breq	.+2      	; 0x684a <free+0xfc>
    6848:	b0 cf       	rjmp	.-160    	; 0x67aa <free+0x5c>
    684a:	f0 93 fc 06 	sts	0x06FC, r31	; 0x8006fc <__flp+0x1>
    684e:	e0 93 fb 06 	sts	0x06FB, r30	; 0x8006fb <__flp>
    6852:	9e cf       	rjmp	.-196    	; 0x6790 <free+0x42>
    6854:	fd 01       	movw	r30, r26
    6856:	dc 01       	movw	r26, r24
    6858:	c0 cf       	rjmp	.-128    	; 0x67da <free+0x8c>
    685a:	13 82       	std	Z+3, r1	; 0x03
    685c:	12 82       	std	Z+2, r1	; 0x02
    685e:	d7 cf       	rjmp	.-82     	; 0x680e <free+0xc0>

00006860 <strcmp>:
strcmp():
    6860:	fb 01       	movw	r30, r22
    6862:	dc 01       	movw	r26, r24
    6864:	8d 91       	ld	r24, X+
    6866:	01 90       	ld	r0, Z+
    6868:	80 19       	sub	r24, r0
    686a:	01 10       	cpse	r0, r1
    686c:	d9 f3       	breq	.-10     	; 0x6864 <strcmp+0x4>
    686e:	99 0b       	sbc	r25, r25
    6870:	08 95       	ret

00006872 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    6872:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    6874:	c7 e1       	ldi	r28, 0x17	; 23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    6876:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    6878:	04 c0       	rjmp	.+8      	; 0x6882 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    687a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    687c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    6880:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    6882:	c8 31       	cpi	r28, 0x18	; 24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    6884:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    6886:	c9 f7       	brne	.-14     	; 0x687a <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    6888:	f8 94       	cli

0000688a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    688a:	ff cf       	rjmp	.-2      	; 0x688a <__stop_program>
