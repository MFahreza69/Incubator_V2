
C:\Users\XIRKA(~1\AppData\Local\Temp\arduino_build_289458/fastWrite.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__ctors_end>
       4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
       8:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
       c:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_3>
      10:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      14:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      18:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      1c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      20:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      24:	0c 94 b4 2b 	jmp	0x5768	; 0x5768 <__vector_9>
      28:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      2c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      30:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      38:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      3c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      40:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__vector_16>
      44:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      48:	0c 94 10 28 	jmp	0x5020	; 0x5020 <__vector_18>
      4c:	0c 94 42 28 	jmp	0x5084	; 0x5084 <__vector_19>
      50:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      54:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      58:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      5c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      60:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      64:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      68:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      6c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      70:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      74:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      78:	0c 94 9f 28 	jmp	0x513e	; 0x513e <__vector_30>
      7c:	0c 94 d1 28 	jmp	0x51a2	; 0x51a2 <__vector_31>
      80:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      84:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      88:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	cd cc       	rjmp	.-1638   	; 0xfffffa2c <__eeprom_end+0xff7efa2c>
      92:	cc 3d       	cpi	r28, 0xDC	; 220
      94:	6f 12       	cpse	r6, r31
      96:	83 3a       	cpi	r24, 0xA3	; 163
      98:	95 bf       	out	0x35, r25	; 53
      9a:	d6 33       	cpi	r29, 0x36	; 54
      9c:	7d 1d       	adc	r23, r13
      9e:	90 26       	eor	r9, r16
      a0:	b3 ce       	rjmp	.-666    	; 0xfffffe08 <__eeprom_end+0xff7efe08>
      a2:	01 0c       	add	r0, r1

000000a4 <ArduinoJson6194_1::FloatTraits<double, 4u>::negativeBinaryPowerOfTen(int)::factors>:
      a4:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      b4:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000bc <ArduinoJson6194_1::FloatTraits<double, 4u>::positiveBinaryPowerOfTen(int)::factors>:
      bc:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      cc:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

000000d4 <charTable>:
      d4:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 0d 3d 4f 47     ~0my3[_p.{w..=OG
	...
     100:	80 01 80 00 7e 30 6d 79 33 5b 5f 70 7f 7b 00 00     ....~0my3[_p.{..
     110:	00 00 00 00 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
     120:	0e 00 00 00 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     130:	00 00 00 08 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
     140:	0e 00 15 1d 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     150:	00 00 00 00                                         ....

00000154 <digital_pin_to_timer_PGM>:
     154:	00 00 00 0a 0b 0c 00 00 00 00 00 00 01 04 05 06     ................
	...

00000189 <digital_pin_to_bit_mask_PGM>:
     189:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     199:	08 10 01 02 04 08 10 20 40 80 01 02 01 02 04 08     ....... @.......
     1a9:	10 20 40 80 04 80 40 20 10 08 04 02 01 01 02 04     . @...@ ........
     1b9:	08 10 20 40 80                                      .. @.

000001be <digital_pin_to_port_PGM>:
     1be:	05 05 05 05 05 05 05 05 02 02 02 02 02 02 02 02     ................
     1ce:	07 07 04 04 04 04 04 04 04 04 07 07 03 03 03 03     ................
     1de:	03 03 03 03 07 01 01 01 01 01 01 01 01 06 06 06     ................
     1ee:	06 06 06 06 06                                      .....

000001f3 <port_to_input_PGM>:
     1f3:	00 00 39 00 36 00 33 00 30 00 21 00 20 00 63 00     ..9.6.3.0.!. .c.

00000203 <port_to_output_PGM>:
     203:	00 00 3b 00 38 00 35 00 32 00 23 00 62 00 65 00     ..;.8.5.2.#.b.e.

00000213 <port_to_mode_PGM>:
     213:	00 00 3a 00 37 00 34 00 31 00 22 00 61 00 64 00     ..:.7.4.1.".a.d.

00000223 <tone_pin_to_timer_PGM>:
     223:	02                                                  .

00000224 <__ctors_start>:
__ctors_start():
     224:	82 1f       	adc	r24, r18
     226:	72 28       	or	r7, r2
     228:	01 29       	or	r16, r1

0000022a <__ctors_end>:
__dtors_end():
     22a:	11 24       	eor	r1, r1
     22c:	1f be       	out	0x3f, r1	; 63
     22e:	cf ef       	ldi	r28, 0xFF	; 255
     230:	d0 e1       	ldi	r29, 0x10	; 16
     232:	de bf       	out	0x3e, r29	; 62
     234:	cd bf       	out	0x3d, r28	; 61

00000236 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     236:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     238:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     23a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     23c:	e6 e7       	ldi	r30, 0x76	; 118
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     23e:	fe e5       	ldi	r31, 0x5E	; 94
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     240:	02 c0       	rjmp	.+4      	; 0x246 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     242:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     244:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     246:	ae 38       	cpi	r26, 0x8E	; 142
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     248:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     24a:	d9 f7       	brne	.-10     	; 0x242 <__do_copy_data+0xc>

0000024c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     24c:	27 e0       	ldi	r18, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     24e:	ae e8       	ldi	r26, 0x8E	; 142
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     250:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     252:	01 c0       	rjmp	.+2      	; 0x256 <.do_clear_bss_start>

00000254 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     254:	1d 92       	st	X+, r1

00000256 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     256:	a3 3c       	cpi	r26, 0xC3	; 195
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     258:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     25a:	e1 f7       	brne	.-8      	; 0x254 <.do_clear_bss_loop>

0000025c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     25c:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     25e:	c5 e1       	ldi	r28, 0x15	; 21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     260:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     262:	04 c0       	rjmp	.+8      	; 0x26c <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     264:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     266:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     268:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     26c:	c2 31       	cpi	r28, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     26e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     270:	c9 f7       	brne	.-14     	; 0x264 <__do_global_ctors+0x8>
     272:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <main>
     276:	0c 94 39 2f 	jmp	0x5e72	; 0x5e72 <_exit>

0000027a <__bad_interrupt>:
__vector_22():
     27a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027e <ArduinoJson6194_1::SafeBoolIdom<ArduinoJson6194_1::String>::safeBoolHelper() const>:
_ZNK17ArduinoJson6194_112SafeBoolIdomINS_6StringEE14safeBoolHelperEv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1237
    Serial.print(sendHumi);
    Serial.print(",");          
    Serial.print(sendTemp);
    Serial.print(",");
    Serial.print(heaterPwm);
    Serial.println();
     27e:	08 95       	ret

00000280 <ArduinoJson6194_1::SafeBoolIdom<ArduinoJson6194_1::DeserializationError>::safeBoolHelper() const>:
_ZNK17ArduinoJson6194_112SafeBoolIdomINS_20DeserializationErrorEE14safeBoolHelperEv():
     280:	08 95       	ret

00000282 <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.31]>:
_ZN17ArduinoJson6194_19ConverterIhvE6toJsonEhNS_10VariantRefE():
     282:	fb 01       	movw	r30, r22
     284:	30 97       	sbiw	r30, 0x00	; 0
     286:	59 f0       	breq	.+22     	; 0x29e <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.31]+0x1c>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
     288:	94 81       	ldd	r25, Z+4	; 0x04
     28a:	90 78       	andi	r25, 0x80	; 128
     28c:	98 60       	ori	r25, 0x08	; 8
     28e:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData10setIntegerIhEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES4_():
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	80 83       	st	Z, r24
     298:	91 83       	std	Z+1, r25	; 0x01
     29a:	a2 83       	std	Z+2, r26	; 0x02
     29c:	b3 83       	std	Z+3, r27	; 0x03
_ZN17ArduinoJson6194_19ConverterIhvE6toJsonEhNS_10VariantRefE():
     29e:	08 95       	ret

000002a0 <ArduinoJson6194_1::VariantSlot::next()>:
_ZN17ArduinoJson6194_111VariantSlot4nextEv():
     2a0:	fc 01       	movw	r30, r24
     2a2:	25 81       	ldd	r18, Z+5	; 0x05
     2a4:	22 23       	and	r18, r18
     2a6:	39 f0       	breq	.+14     	; 0x2b6 <ArduinoJson6194_1::VariantSlot::next()+0x16>
     2a8:	f8 e0       	ldi	r31, 0x08	; 8
     2aa:	2f 02       	muls	r18, r31
     2ac:	90 01       	movw	r18, r0
     2ae:	11 24       	eor	r1, r1
     2b0:	82 0f       	add	r24, r18
     2b2:	93 1f       	adc	r25, r19
     2b4:	08 95       	ret
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	08 95       	ret

000002bc <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]>:
_ZNK17ArduinoJson6194_114CollectionData7getSlotINS_23ZeroTerminatedRamStringEEEPNS_11VariantSlotET_():
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	d0 e0       	ldi	r29, 0x00	; 0
     2c6:	c0 e0       	ldi	r28, 0x00	; 0
     2c8:	61 15       	cp	r22, r1
     2ca:	71 05       	cpc	r23, r1
     2cc:	91 f0       	breq	.+36     	; 0x2f2 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]+0x36>
     2ce:	8b 01       	movw	r16, r22
     2d0:	fc 01       	movw	r30, r24
     2d2:	c0 81       	ld	r28, Z
     2d4:	d1 81       	ldd	r29, Z+1	; 0x01
     2d6:	20 97       	sbiw	r28, 0x00	; 0
     2d8:	61 f0       	breq	.+24     	; 0x2f2 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]+0x36>
_ZN17ArduinoJson6194_113stringCompareENS_23ZeroTerminatedRamStringES0_():
     2da:	6e 81       	ldd	r22, Y+6	; 0x06
     2dc:	7f 81       	ldd	r23, Y+7	; 0x07
     2de:	c8 01       	movw	r24, r16
     2e0:	0e 94 30 2f 	call	0x5e60	; 0x5e60 <strcmp>
_ZNK17ArduinoJson6194_114CollectionData7getSlotINS_23ZeroTerminatedRamStringEEEPNS_11VariantSlotET_():
     2e4:	89 2b       	or	r24, r25
     2e6:	29 f0       	breq	.+10     	; 0x2f2 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]+0x36>
     2e8:	ce 01       	movw	r24, r28
     2ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ArduinoJson6194_1::VariantSlot::next()>
     2ee:	ec 01       	movw	r28, r24
     2f0:	f2 cf       	rjmp	.-28     	; 0x2d6 <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]+0x1a>
     2f2:	ce 01       	movw	r24, r28
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>:
_ZNK17ArduinoJson6194_111VariantData10getElementEj():
     2fe:	fc 01       	movw	r30, r24
     300:	24 81       	ldd	r18, Z+4	; 0x04
     302:	26 ff       	sbrs	r18, 6
     304:	14 c0       	rjmp	.+40     	; 0x32e <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x30>
     306:	80 81       	ld	r24, Z
     308:	91 81       	ldd	r25, Z+1	; 0x01
_ZNK17ArduinoJson6194_114CollectionData7getSlotEj():
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	91 f0       	breq	.+36     	; 0x332 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x34>
_ZN17ArduinoJson6194_111VariantSlot4nextEj():
     30e:	61 15       	cp	r22, r1
     310:	71 05       	cpc	r23, r1
     312:	79 f0       	breq	.+30     	; 0x332 <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x34>
     314:	fc 01       	movw	r30, r24
     316:	25 81       	ldd	r18, Z+5	; 0x05
     318:	61 50       	subi	r22, 0x01	; 1
     31a:	71 09       	sbc	r23, r1
     31c:	22 23       	and	r18, r18
     31e:	39 f0       	breq	.+14     	; 0x32e <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x30>
     320:	f8 e0       	ldi	r31, 0x08	; 8
     322:	2f 02       	muls	r18, r31
     324:	90 01       	movw	r18, r0
     326:	11 24       	eor	r1, r1
     328:	82 0f       	add	r24, r18
     32a:	93 1f       	adc	r25, r19
     32c:	f0 cf       	rjmp	.-32     	; 0x30e <ArduinoJson6194_1::VariantData::getElement(unsigned int) const+0x10>
_ZNK17ArduinoJson6194_111VariantData10getElementEj():
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>:
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	dc 01       	movw	r26, r24
     33a:	eb 01       	movw	r28, r22
_ZNK17ArduinoJson6194_110MemoryPool8canAllocEj():
     33c:	ec 81       	ldd	r30, Y+4	; 0x04
     33e:	fd 81       	ldd	r31, Y+5	; 0x05
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	9b 81       	ldd	r25, Y+3	; 0x03
     344:	08 96       	adiw	r24, 0x08	; 8
_ZN17ArduinoJson6194_110MemoryPool10allocRightEj():
     346:	e8 17       	cp	r30, r24
     348:	f9 07       	cpc	r31, r25
     34a:	40 f4       	brcc	.+16     	; 0x35c <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x28>
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	88 87       	std	Y+8, r24	; 0x08
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	e0 e0       	ldi	r30, 0x00	; 0
     354:	cf 01       	movw	r24, r30
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret
_ZN17ArduinoJson6194_110MemoryPool10allocRightEj():
     35c:	38 97       	sbiw	r30, 0x08	; 8
     35e:	fd 83       	std	Y+5, r31	; 0x05
     360:	ec 83       	std	Y+4, r30	; 0x04
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
     362:	30 97       	sbiw	r30, 0x00	; 0
     364:	b9 f3       	breq	.-18     	; 0x354 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x20>
     366:	12 96       	adiw	r26, 0x02	; 2
     368:	cd 91       	ld	r28, X+
     36a:	dc 91       	ld	r29, X
     36c:	13 97       	sbiw	r26, 0x03	; 3
     36e:	20 97       	sbiw	r28, 0x00	; 0
     370:	91 f0       	breq	.+36     	; 0x396 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x62>
_ZN17ArduinoJson6194_111VariantSlot14setNextNotNullEPS0_():
     372:	cf 01       	movw	r24, r30
     374:	8c 1b       	sub	r24, r28
     376:	9d 0b       	sbc	r25, r29
     378:	23 e0       	ldi	r18, 0x03	; 3
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	2a 95       	dec	r18
     380:	e1 f7       	brne	.-8      	; 0x37a <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x46>
     382:	8d 83       	std	Y+5, r24	; 0x05
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
     384:	13 96       	adiw	r26, 0x03	; 3
     386:	fc 93       	st	X, r31
     388:	ee 93       	st	-X, r30
     38a:	12 97       	sbiw	r26, 0x02	; 2
_ZN17ArduinoJson6194_111VariantSlot5clearEv():
     38c:	15 82       	std	Z+5, r1	; 0x05
     38e:	14 82       	std	Z+4, r1	; 0x04
     390:	17 82       	std	Z+7, r1	; 0x07
     392:	16 82       	std	Z+6, r1	; 0x06
_ZN17ArduinoJson6194_114CollectionData7addSlotEPNS_10MemoryPoolE():
     394:	df cf       	rjmp	.-66     	; 0x354 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x20>
     396:	11 96       	adiw	r26, 0x01	; 1
     398:	fc 93       	st	X, r31
     39a:	ee 93       	st	-X, r30
     39c:	f3 cf       	rjmp	.-26     	; 0x384 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)+0x50>

0000039e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>:
_ZN17ArduinoJson6194_122variantGetOrAddElementEPNS_11VariantDataEjPNS_10MemoryPoolE():
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
     3ac:	8b 01       	movw	r16, r22
     3ae:	7a 01       	movw	r14, r20
     3b0:	89 2b       	or	r24, r25
     3b2:	29 f1       	breq	.+74     	; 0x3fe <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x60>
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
_ZNK17ArduinoJson6194_111VariantData4typeEv():
     3b6:	98 2f       	mov	r25, r24
     3b8:	9f 77       	andi	r25, 0x7F	; 127
_ZN17ArduinoJson6194_111VariantData15getOrAddElementEjPNS_10MemoryPoolE():
     3ba:	39 f4       	brne	.+14     	; 0x3ca <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x2c>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
     3bc:	80 78       	andi	r24, 0x80	; 128
     3be:	80 64       	ori	r24, 0x40	; 64
     3c0:	8c 83       	std	Y+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
     3c2:	19 82       	std	Y+1, r1	; 0x01
     3c4:	18 82       	st	Y, r1
     3c6:	1b 82       	std	Y+3, r1	; 0x03
     3c8:	1a 82       	std	Y+2, r1	; 0x02
_ZN17ArduinoJson6194_111VariantData15getOrAddElementEjPNS_10MemoryPoolE():
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	86 ff       	sbrs	r24, 6
     3ce:	17 c0       	rjmp	.+46     	; 0x3fe <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x60>
_ZN17ArduinoJson6194_114CollectionData15getOrAddElementEjPNS_10MemoryPoolE():
     3d0:	88 81       	ld	r24, Y
     3d2:	99 81       	ldd	r25, Y+1	; 0x01
     3d4:	00 97       	sbiw	r24, 0x00	; 0
     3d6:	41 f0       	breq	.+16     	; 0x3e8 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x4a>
     3d8:	01 15       	cp	r16, r1
     3da:	11 05       	cpc	r17, r1
     3dc:	91 f0       	breq	.+36     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3de:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ArduinoJson6194_1::VariantSlot::next()>
     3e2:	01 50       	subi	r16, 0x01	; 1
     3e4:	11 09       	sbc	r17, r1
     3e6:	f6 cf       	rjmp	.-20     	; 0x3d4 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x36>
     3e8:	01 50       	subi	r16, 0x01	; 1
     3ea:	11 09       	sbc	r17, r1
     3ec:	0e 3f       	cpi	r16, 0xFE	; 254
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	12 07       	cpc	r17, r18
     3f2:	39 f0       	breq	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f4:	b7 01       	movw	r22, r14
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 9a 01 	call	0x334	; 0x334 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
     3fc:	f5 cf       	rjmp	.-22     	; 0x3e8 <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)+0x4a>
_ZN17ArduinoJson6194_122variantGetOrAddElementEPNS_11VariantDataEjPNS_10MemoryPoolE():
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	08 95       	ret

00000410 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]>:
_ZN17ArduinoJson6194_114CollectionData9addMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	7c 01       	movw	r14, r24
     41e:	8b 01       	movw	r16, r22
     420:	ba 01       	movw	r22, r20
     422:	0e 94 9a 01 	call	0x334	; 0x334 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
     426:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_110slotSetKeyINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEbPNS_11VariantSlotET_PNS_10MemoryPoolET0_():
     428:	89 2b       	or	r24, r25
     42a:	49 f4       	brne	.+18     	; 0x43e <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x2e>
_ZN17ArduinoJson6194_114CollectionData9addMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	08 95       	ret
_ZNK17ArduinoJson6194_16StringcvMS0_KFvvEEv():
     43e:	01 15       	cp	r16, r1
     440:	11 05       	cpc	r17, r1
     442:	91 f1       	breq	.+100    	; 0x4a8 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x98>
_ZN17ArduinoJson6194_113SlotKeySetterclINS_6StringEEEvT_():
     444:	8f e3       	ldi	r24, 0x3F	; 63
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	89 2b       	or	r24, r25
     44a:	29 f0       	breq	.+10     	; 0x456 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x46>
_ZN17ArduinoJson6194_111VariantSlot6setKeyENS_6StringE():
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	8f 77       	andi	r24, 0x7F	; 127
     450:	8c 83       	std	Y+4, r24	; 0x04
     452:	1f 83       	std	Y+7, r17	; 0x07
     454:	0e 83       	std	Y+6, r16	; 0x06
_ZN17ArduinoJson6194_111VariantSlot4dataEv():
     456:	ce 01       	movw	r24, r28
     458:	eb cf       	rjmp	.-42     	; 0x430 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x20>
_ZNK17ArduinoJson6194_114CollectionData15getPreviousSlotEPNS_11VariantSlotE():
     45a:	8c 01       	movw	r16, r24
     45c:	01 15       	cp	r16, r1
     45e:	11 05       	cpc	r17, r1
     460:	31 f0       	breq	.+12     	; 0x46e <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x5e>
     462:	c8 01       	movw	r24, r16
     464:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ArduinoJson6194_1::VariantSlot::next()>
     468:	c8 17       	cp	r28, r24
     46a:	d9 07       	cpc	r29, r25
     46c:	b1 f7       	brne	.-20     	; 0x45a <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x4a>
_ZN17ArduinoJson6194_114CollectionData10removeSlotEPNS_11VariantSlotE():
     46e:	ce 01       	movw	r24, r28
     470:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ArduinoJson6194_1::VariantSlot::next()>
     474:	01 15       	cp	r16, r1
     476:	11 05       	cpc	r17, r1
     478:	99 f0       	breq	.+38     	; 0x4a0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x90>
_ZN17ArduinoJson6194_111VariantSlot7setNextEPS0_():
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	41 f0       	breq	.+16     	; 0x490 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x80>
     480:	9c 01       	movw	r18, r24
     482:	20 1b       	sub	r18, r16
     484:	31 0b       	sbc	r19, r17
     486:	43 e0       	ldi	r20, 0x03	; 3
     488:	35 95       	asr	r19
     48a:	27 95       	ror	r18
     48c:	4a 95       	dec	r20
     48e:	e1 f7       	brne	.-8      	; 0x488 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x78>
     490:	f8 01       	movw	r30, r16
     492:	25 83       	std	Z+5, r18	; 0x05
_ZN17ArduinoJson6194_114CollectionData10removeSlotEPNS_11VariantSlotE():
     494:	89 2b       	or	r24, r25
     496:	51 f6       	brne	.-108    	; 0x42c <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x1c>
     498:	f7 01       	movw	r30, r14
     49a:	13 83       	std	Z+3, r17	; 0x03
     49c:	02 83       	std	Z+2, r16	; 0x02
     49e:	c6 cf       	rjmp	.-116    	; 0x42c <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x1c>
     4a0:	f7 01       	movw	r30, r14
     4a2:	91 83       	std	Z+1, r25	; 0x01
     4a4:	80 83       	st	Z, r24
     4a6:	f6 cf       	rjmp	.-20     	; 0x494 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x84>
     4a8:	f7 01       	movw	r30, r14
     4aa:	00 81       	ld	r16, Z
     4ac:	11 81       	ldd	r17, Z+1	; 0x01
     4ae:	d6 cf       	rjmp	.-84     	; 0x45c <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]+0x4c>

000004b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>:
_ZN17ArduinoJson6194_120objectGetOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataEPNS_14CollectionDataET_PNS_10MemoryPoolET0_():
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	00 97       	sbiw	r24, 0x00	; 0
     4be:	a9 f0       	breq	.+42     	; 0x4ea <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]+0x3a>
_ZN17ArduinoJson6194_114CollectionData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
     4c0:	61 15       	cp	r22, r1
     4c2:	71 05       	cpc	r23, r1
     4c4:	91 f0       	breq	.+36     	; 0x4ea <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]+0x3a>
     4c6:	7a 01       	movw	r14, r20
     4c8:	8b 01       	movw	r16, r22
     4ca:	ec 01       	movw	r28, r24
     4cc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]>
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	69 f4       	brne	.+26     	; 0x4ee <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]+0x3e>
     4d4:	a7 01       	movw	r20, r14
     4d6:	b8 01       	movw	r22, r16
     4d8:	ce 01       	movw	r24, r28
_ZN17ArduinoJson6194_120objectGetOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataEPNS_14CollectionDataET_PNS_10MemoryPoolET0_():
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
_ZN17ArduinoJson6194_114CollectionData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
     4e6:	0c 94 08 02 	jmp	0x410	; 0x410 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]>
_ZN17ArduinoJson6194_120objectGetOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataEPNS_14CollectionDataET_PNS_10MemoryPoolET0_():
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	08 95       	ret

000004fc <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>:
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     4fc:	4f 92       	push	r4
     4fe:	5f 92       	push	r5
     500:	6f 92       	push	r6
     502:	7f 92       	push	r7
     504:	8f 92       	push	r8
     506:	9f 92       	push	r9
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
     51e:	8b 01       	movw	r16, r22
     520:	88 81       	ld	r24, Y
     522:	8b 32       	cpi	r24, 0x2B	; 43
     524:	c9 f1       	breq	.+114    	; 0x598 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x9c>
     526:	8d 32       	cpi	r24, 0x2D	; 45
     528:	c1 f5       	brne	.+112    	; 0x59a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x9e>
     52a:	21 96       	adiw	r28, 0x01	; 1
     52c:	ff 24       	eor	r15, r15
     52e:	f3 94       	inc	r15
     530:	88 81       	ld	r24, Y
_ZN17ArduinoJson6194_17isdigitEc():
     532:	90 ed       	ldi	r25, 0xD0	; 208
     534:	98 0f       	add	r25, r24
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     536:	9a 30       	cpi	r25, 0x0A	; 10
     538:	18 f0       	brcs	.+6      	; 0x540 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x44>
     53a:	8e 32       	cpi	r24, 0x2E	; 46
     53c:	09 f0       	breq	.+2      	; 0x540 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x44>
     53e:	4d c1       	rjmp	.+666    	; 0x7da <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2de>
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	cb 01       	movw	r24, r22
     546:	fe 01       	movw	r30, r28
     548:	21 91       	ld	r18, Z+
_ZN17ArduinoJson6194_17isdigitEc():
     54a:	a0 ed       	ldi	r26, 0xD0	; 208
     54c:	8a 2e       	mov	r8, r26
     54e:	82 0e       	add	r8, r18
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     550:	39 e0       	ldi	r19, 0x09	; 9
     552:	38 15       	cp	r19, r8
     554:	20 f1       	brcs	.+72     	; 0x59e <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xa2>
     556:	6a 39       	cpi	r22, 0x9A	; 154
     558:	49 e9       	ldi	r20, 0x99	; 153
     55a:	74 07       	cpc	r23, r20
     55c:	84 07       	cpc	r24, r20
     55e:	49 e1       	ldi	r20, 0x19	; 25
     560:	94 07       	cpc	r25, r20
     562:	38 f5       	brcc	.+78     	; 0x5b2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xb6>
     564:	aa e0       	ldi	r26, 0x0A	; 10
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	9b 01       	movw	r18, r22
     56a:	ac 01       	movw	r20, r24
     56c:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__muluhisi3>
     570:	91 2c       	mov	r9, r1
     572:	b1 2c       	mov	r11, r1
     574:	a1 2c       	mov	r10, r1
     576:	24 01       	movw	r4, r8
     578:	35 01       	movw	r6, r10
     57a:	40 94       	com	r4
     57c:	50 94       	com	r5
     57e:	60 94       	com	r6
     580:	70 94       	com	r7
     582:	46 16       	cp	r4, r22
     584:	57 06       	cpc	r5, r23
     586:	68 06       	cpc	r6, r24
     588:	79 06       	cpc	r7, r25
     58a:	98 f0       	brcs	.+38     	; 0x5b2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xb6>
     58c:	68 0d       	add	r22, r8
     58e:	79 1d       	adc	r23, r9
     590:	8a 1d       	adc	r24, r10
     592:	9b 1d       	adc	r25, r11
     594:	ef 01       	movw	r28, r30
     596:	d7 cf       	rjmp	.-82     	; 0x546 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x4a>
     598:	21 96       	adiw	r28, 0x01	; 1
     59a:	f1 2c       	mov	r15, r1
     59c:	c9 cf       	rjmp	.-110    	; 0x530 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x34>
     59e:	21 11       	cpse	r18, r1
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xb6>
     5a2:	ff 20       	and	r15, r15
     5a4:	f1 f1       	breq	.+124    	; 0x622 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x126>
     5a6:	61 30       	cpi	r22, 0x01	; 1
     5a8:	71 05       	cpc	r23, r1
     5aa:	81 05       	cpc	r24, r1
     5ac:	50 e8       	ldi	r21, 0x80	; 128
     5ae:	95 07       	cpc	r25, r21
     5b0:	a0 f0       	brcs	.+40     	; 0x5da <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xde>
     5b2:	e1 2c       	mov	r14, r1
     5b4:	ea e0       	ldi	r30, 0x0A	; 10
     5b6:	8e 2e       	mov	r8, r30
     5b8:	91 2c       	mov	r9, r1
     5ba:	a1 2c       	mov	r10, r1
     5bc:	b1 2c       	mov	r11, r1
     5be:	61 15       	cp	r22, r1
     5c0:	71 05       	cpc	r23, r1
     5c2:	f0 e8       	ldi	r31, 0x80	; 128
     5c4:	8f 07       	cpc	r24, r31
     5c6:	91 05       	cpc	r25, r1
     5c8:	c0 f1       	brcs	.+112    	; 0x63a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x13e>
     5ca:	a5 01       	movw	r20, r10
     5cc:	94 01       	movw	r18, r8
     5ce:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
     5d2:	ca 01       	movw	r24, r20
     5d4:	b9 01       	movw	r22, r18
     5d6:	e3 94       	inc	r14
     5d8:	f2 cf       	rjmp	.-28     	; 0x5be <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0xc2>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
     5da:	f8 01       	movw	r30, r16
     5dc:	24 81       	ldd	r18, Z+4	; 0x04
     5de:	20 78       	andi	r18, 0x80	; 128
     5e0:	2a 60       	ori	r18, 0x0A	; 10
     5e2:	24 83       	std	Z+4, r18	; 0x04
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	88 27       	eor	r24, r24
     5ea:	99 27       	eor	r25, r25
     5ec:	dc 01       	movw	r26, r24
     5ee:	82 1b       	sub	r24, r18
     5f0:	93 0b       	sbc	r25, r19
     5f2:	a4 0b       	sbc	r26, r20
     5f4:	b5 0b       	sbc	r27, r21
_ZN17ArduinoJson6194_111VariantData10setIntegerIlEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES4_():
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     5fe:	8f 2d       	mov	r24, r15
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	bf 90       	pop	r11
     612:	af 90       	pop	r10
     614:	9f 90       	pop	r9
     616:	8f 90       	pop	r8
     618:	7f 90       	pop	r7
     61a:	6f 90       	pop	r6
     61c:	5f 90       	pop	r5
     61e:	4f 90       	pop	r4
     620:	08 95       	ret
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
     622:	f8 01       	movw	r30, r16
     624:	24 81       	ldd	r18, Z+4	; 0x04
     626:	20 78       	andi	r18, 0x80	; 128
     628:	28 60       	ori	r18, 0x08	; 8
     62a:	24 83       	std	Z+4, r18	; 0x04
_ZN17ArduinoJson6194_111VariantData10setIntegerImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES4_():
     62c:	60 83       	st	Z, r22
     62e:	71 83       	std	Z+1, r23	; 0x01
     630:	82 83       	std	Z+2, r24	; 0x02
     632:	93 83       	std	Z+3, r25	; 0x03
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     634:	ff 24       	eor	r15, r15
     636:	f3 94       	inc	r15
     638:	e2 cf       	rjmp	.-60     	; 0x5fe <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x102>
     63a:	fe 01       	movw	r30, r28
     63c:	29 91       	ld	r18, Y+
_ZN17ArduinoJson6194_17isdigitEc():
     63e:	30 ed       	ldi	r19, 0xD0	; 208
     640:	32 0f       	add	r19, r18
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     642:	3a 30       	cpi	r19, 0x0A	; 10
     644:	10 f4       	brcc	.+4      	; 0x64a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x14e>
     646:	e3 94       	inc	r14
     648:	f8 cf       	rjmp	.-16     	; 0x63a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x13e>
     64a:	2e 32       	cpi	r18, 0x2E	; 46
     64c:	f1 f4       	brne	.+60     	; 0x68a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x18e>
     64e:	ef 01       	movw	r28, r30
     650:	21 96       	adiw	r28, 0x01	; 1
     652:	fe 01       	movw	r30, r28
     654:	21 96       	adiw	r28, 0x01	; 1
_ZN17ArduinoJson6194_17isdigitEc():
     656:	20 81       	ld	r18, Z
     658:	50 ed       	ldi	r21, 0xD0	; 208
     65a:	d5 2e       	mov	r13, r21
     65c:	d2 0e       	add	r13, r18
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     65e:	29 e0       	ldi	r18, 0x09	; 9
     660:	2d 15       	cp	r18, r13
     662:	98 f0       	brcs	.+38     	; 0x68a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x18e>
     664:	6c 3c       	cpi	r22, 0xCC	; 204
     666:	3c ec       	ldi	r19, 0xCC	; 204
     668:	73 07       	cpc	r23, r19
     66a:	3c e0       	ldi	r19, 0x0C	; 12
     66c:	83 07       	cpc	r24, r19
     66e:	91 05       	cpc	r25, r1
     670:	80 f7       	brcc	.-32     	; 0x652 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x156>
     672:	aa e0       	ldi	r26, 0x0A	; 10
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__muluhisi3>
     67e:	6d 0d       	add	r22, r13
     680:	71 1d       	adc	r23, r1
     682:	81 1d       	adc	r24, r1
     684:	91 1d       	adc	r25, r1
     686:	ea 94       	dec	r14
     688:	e4 cf       	rjmp	.-56     	; 0x652 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x156>
     68a:	20 81       	ld	r18, Z
     68c:	2f 7d       	andi	r18, 0xDF	; 223
     68e:	d0 e0       	ldi	r29, 0x00	; 0
     690:	c0 e0       	ldi	r28, 0x00	; 0
     692:	25 34       	cpi	r18, 0x45	; 69
     694:	09 f0       	breq	.+2      	; 0x698 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x19c>
     696:	5d c0       	rjmp	.+186    	; 0x752 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x256>
     698:	21 81       	ldd	r18, Z+1	; 0x01
     69a:	2d 32       	cpi	r18, 0x2D	; 45
     69c:	d9 f5       	brne	.+118    	; 0x714 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x218>
     69e:	32 96       	adiw	r30, 0x02	; 2
     6a0:	cc 24       	eor	r12, r12
     6a2:	c3 94       	inc	r12
     6a4:	df 01       	movw	r26, r30
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
     6a8:	c0 e0       	ldi	r28, 0x00	; 0
     6aa:	2e 2d       	mov	r18, r14
     6ac:	0e 2c       	mov	r0, r14
     6ae:	00 0c       	add	r0, r0
     6b0:	33 0b       	sbc	r19, r19
     6b2:	4a e0       	ldi	r20, 0x0A	; 10
     6b4:	b4 2e       	mov	r11, r20
     6b6:	fd 01       	movw	r30, r26
     6b8:	dd 90       	ld	r13, X+
_ZN17ArduinoJson6194_17isdigitEc():
     6ba:	40 ed       	ldi	r20, 0xD0	; 208
     6bc:	4d 0d       	add	r20, r13
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     6be:	4a 30       	cpi	r20, 0x0A	; 10
     6c0:	08 f0       	brcs	.+2      	; 0x6c4 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x1c8>
     6c2:	42 c0       	rjmp	.+132    	; 0x748 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x24c>
     6c4:	bc 9e       	mul	r11, r28
     6c6:	a0 01       	movw	r20, r0
     6c8:	bd 9e       	mul	r11, r29
     6ca:	50 0d       	add	r21, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	cd 2d       	mov	r28, r13
     6d0:	dd 0c       	add	r13, r13
     6d2:	dd 0b       	sbc	r29, r29
     6d4:	e0 97       	sbiw	r28, 0x30	; 48
     6d6:	c4 0f       	add	r28, r20
     6d8:	d5 1f       	adc	r29, r21
     6da:	ae 01       	movw	r20, r28
     6dc:	42 0f       	add	r20, r18
     6de:	53 1f       	adc	r21, r19
     6e0:	47 32       	cpi	r20, 0x27	; 39
     6e2:	51 05       	cpc	r21, r1
     6e4:	44 f3       	brlt	.-48     	; 0x6b6 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x1ba>
     6e6:	f8 01       	movw	r30, r16
     6e8:	84 81       	ldd	r24, Z+4	; 0x04
     6ea:	cc 20       	and	r12, r12
     6ec:	d1 f0       	breq	.+52     	; 0x722 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x226>
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e8       	ldi	r23, 0x80	; 128
     6f6:	f1 10       	cpse	r15, r1
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x204>
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	ba 01       	movw	r22, r20
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
     700:	80 78       	andi	r24, 0x80	; 128
     702:	8c 60       	ori	r24, 0x0C	; 12
     704:	f8 01       	movw	r30, r16
     706:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
     708:	40 83       	st	Z, r20
     70a:	51 83       	std	Z+1, r21	; 0x01
     70c:	62 83       	std	Z+2, r22	; 0x02
     70e:	73 83       	std	Z+3, r23	; 0x03
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     710:	fc 2c       	mov	r15, r12
     712:	75 cf       	rjmp	.-278    	; 0x5fe <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x102>
     714:	2b 32       	cpi	r18, 0x2B	; 43
     716:	19 f0       	breq	.+6      	; 0x71e <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x222>
     718:	31 96       	adiw	r30, 0x01	; 1
     71a:	c1 2c       	mov	r12, r1
     71c:	c3 cf       	rjmp	.-122    	; 0x6a4 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x1a8>
     71e:	32 96       	adiw	r30, 0x02	; 2
     720:	fc cf       	rjmp	.-8      	; 0x71a <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x21e>
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	60 e8       	ldi	r22, 0x80	; 128
     728:	7f ef       	ldi	r23, 0xFF	; 255
     72a:	f1 10       	cpse	r15, r1
     72c:	04 c0       	rjmp	.+8      	; 0x736 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x23a>
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	60 e8       	ldi	r22, 0x80	; 128
     734:	7f e7       	ldi	r23, 0x7F	; 127
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
     736:	80 78       	andi	r24, 0x80	; 128
     738:	8c 60       	ori	r24, 0x0C	; 12
     73a:	f8 01       	movw	r30, r16
     73c:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
     73e:	40 83       	st	Z, r20
     740:	51 83       	std	Z+1, r21	; 0x01
     742:	62 83       	std	Z+2, r22	; 0x02
     744:	73 83       	std	Z+3, r23	; 0x03
     746:	76 cf       	rjmp	.-276    	; 0x634 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x138>
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     748:	cc 20       	and	r12, r12
     74a:	19 f0       	breq	.+6      	; 0x752 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x256>
     74c:	d1 95       	neg	r29
     74e:	c1 95       	neg	r28
     750:	d1 09       	sbc	r29, r1
     752:	20 81       	ld	r18, Z
     754:	21 11       	cpse	r18, r1
     756:	41 c0       	rjmp	.+130    	; 0x7da <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2de>
     758:	ce 0d       	add	r28, r14
     75a:	d1 1d       	adc	r29, r1
     75c:	e7 fc       	sbrc	r14, 7
     75e:	da 95       	dec	r29
     760:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
     764:	1c 16       	cp	r1, r28
     766:	1d 06       	cpc	r1, r29
     768:	04 f5       	brge	.+64     	; 0x7aa <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2ae>
     76a:	e1 2c       	mov	r14, r1
     76c:	c0 ff       	sbrs	r28, 0
     76e:	0c c0       	rjmp	.+24     	; 0x788 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x28c>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE24positiveBinaryPowerOfTenEi():
     770:	24 e0       	ldi	r18, 0x04	; 4
     772:	e2 9e       	mul	r14, r18
     774:	f0 01       	movw	r30, r0
     776:	11 24       	eor	r1, r1
     778:	e4 54       	subi	r30, 0x44	; 68
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
     77c:	25 91       	lpm	r18, Z+
     77e:	35 91       	lpm	r19, Z+
     780:	45 91       	lpm	r20, Z+
     782:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
     784:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
     788:	d5 95       	asr	r29
     78a:	c7 95       	ror	r28
     78c:	e3 94       	inc	r14
     78e:	20 97       	sbiw	r28, 0x00	; 0
     790:	69 f7       	brne	.-38     	; 0x76c <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x270>
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     792:	f1 10       	cpse	r15, r1
     794:	90 58       	subi	r25, 0x80	; 128
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
     796:	f8 01       	movw	r30, r16
     798:	24 81       	ldd	r18, Z+4	; 0x04
     79a:	20 78       	andi	r18, 0x80	; 128
     79c:	2c 60       	ori	r18, 0x0C	; 12
     79e:	24 83       	std	Z+4, r18	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
     7a0:	60 83       	st	Z, r22
     7a2:	71 83       	std	Z+1, r23	; 0x01
     7a4:	82 83       	std	Z+2, r24	; 0x02
     7a6:	93 83       	std	Z+3, r25	; 0x03
     7a8:	45 cf       	rjmp	.-374    	; 0x634 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x138>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
     7aa:	d1 95       	neg	r29
     7ac:	c1 95       	neg	r28
     7ae:	d1 09       	sbc	r29, r1
     7b0:	e1 2c       	mov	r14, r1
     7b2:	20 97       	sbiw	r28, 0x00	; 0
     7b4:	71 f3       	breq	.-36     	; 0x792 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x296>
     7b6:	c0 ff       	sbrs	r28, 0
     7b8:	0c c0       	rjmp	.+24     	; 0x7d2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2d6>
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE24negativeBinaryPowerOfTenEi():
     7ba:	44 e0       	ldi	r20, 0x04	; 4
     7bc:	e4 9e       	mul	r14, r20
     7be:	f0 01       	movw	r30, r0
     7c0:	11 24       	eor	r1, r1
     7c2:	ec 55       	subi	r30, 0x5C	; 92
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
     7c6:	25 91       	lpm	r18, Z+
     7c8:	35 91       	lpm	r19, Z+
     7ca:	45 91       	lpm	r20, Z+
     7cc:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_111FloatTraitsIdLj4EE10make_floatIiEEddT_():
     7ce:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
     7d2:	d5 95       	asr	r29
     7d4:	c7 95       	ror	r28
     7d6:	e3 94       	inc	r14
     7d8:	ec cf       	rjmp	.-40     	; 0x7b2 <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x2b6>
_ZN17ArduinoJson6194_111parseNumberEPKcRNS_11VariantDataE():
     7da:	f1 2c       	mov	r15, r1
     7dc:	10 cf       	rjmp	.-480    	; 0x5fe <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)+0x102>

000007de <setup>:
setup():
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <analogReference>
_ZN14HardwareSerial5beginEm():
     7e8:	26 e0       	ldi	r18, 0x06	; 6
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	55 e2       	ldi	r21, 0x25	; 37
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	88 e1       	ldi	r24, 0x18	; 24
     7f4:	97 e0       	ldi	r25, 0x07	; 7
     7f6:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <HardwareSerial::begin(unsigned long, unsigned char)>
     7fa:	26 e0       	ldi	r18, 0x06	; 6
     7fc:	40 e8       	ldi	r20, 0x80	; 128
     7fe:	55 e2       	ldi	r21, 0x25	; 37
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	8b e7       	ldi	r24, 0x7B	; 123
     806:	96 e0       	ldi	r25, 0x06	; 6
     808:	0e 94 b8 27 	call	0x4f70	; 0x4f70 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     80c:	24 e2       	ldi	r18, 0x24	; 36
     80e:	3e e1       	ldi	r19, 0x1E	; 30
     810:	48 ee       	ldi	r20, 0xE8	; 232
     812:	53 e0       	ldi	r21, 0x03	; 3
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	82 e9       	ldi	r24, 0x92	; 146
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 b2 22 	call	0x4564	; 0x4564 <SimpleTimer::setInterval(long, void (*)())>
     820:	42 e0       	ldi	r20, 0x02	; 2
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	8a e1       	ldi	r24, 0x1A	; 26
     82a:	96 e0       	ldi	r25, 0x06	; 6
     82c:	0e 94 3c 24 	call	0x4878	; 0x4878 <LedControl::setIntensity(int, int)>
     830:	42 e0       	ldi	r20, 0x02	; 2
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	8a e1       	ldi	r24, 0x1A	; 26
     83a:	96 e0       	ldi	r25, 0x06	; 6
     83c:	0e 94 3c 24 	call	0x4878	; 0x4878 <LedControl::setIntensity(int, int)>
     840:	42 e0       	ldi	r20, 0x02	; 2
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	62 e0       	ldi	r22, 0x02	; 2
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	8a e1       	ldi	r24, 0x1A	; 26
     84a:	96 e0       	ldi	r25, 0x06	; 6
     84c:	0e 94 3c 24 	call	0x4878	; 0x4878 <LedControl::setIntensity(int, int)>
     850:	42 e0       	ldi	r20, 0x02	; 2
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	63 e0       	ldi	r22, 0x03	; 3
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	8a e1       	ldi	r24, 0x1A	; 26
     85a:	96 e0       	ldi	r25, 0x06	; 6
     85c:	0e 94 3c 24 	call	0x4878	; 0x4878 <LedControl::setIntensity(int, int)>
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	8a e1       	ldi	r24, 0x1A	; 26
     866:	96 e0       	ldi	r25, 0x06	; 6
     868:	0e 94 4e 24 	call	0x489c	; 0x489c <LedControl::clearDisplay(int)>
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	8a e1       	ldi	r24, 0x1A	; 26
     872:	96 e0       	ldi	r25, 0x06	; 6
     874:	0e 94 4e 24 	call	0x489c	; 0x489c <LedControl::clearDisplay(int)>
     878:	62 e0       	ldi	r22, 0x02	; 2
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	8a e1       	ldi	r24, 0x1A	; 26
     87e:	96 e0       	ldi	r25, 0x06	; 6
     880:	0e 94 4e 24 	call	0x489c	; 0x489c <LedControl::clearDisplay(int)>
     884:	63 e0       	ldi	r22, 0x03	; 3
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	8a e1       	ldi	r24, 0x1A	; 26
     88a:	96 e0       	ldi	r25, 0x06	; 6
     88c:	0e 94 4e 24 	call	0x489c	; 0x489c <LedControl::clearDisplay(int)>
     890:	40 e0       	ldi	r20, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	8a e1       	ldi	r24, 0x1A	; 26
     898:	96 e0       	ldi	r25, 0x06	; 6
     89a:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	8a e1       	ldi	r24, 0x1A	; 26
     8a6:	96 e0       	ldi	r25, 0x06	; 6
     8a8:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	62 e0       	ldi	r22, 0x02	; 2
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	8a e1       	ldi	r24, 0x1A	; 26
     8b4:	96 e0       	ldi	r25, 0x06	; 6
     8b6:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	8f e2       	ldi	r24, 0x2F	; 47
     8be:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	8e e2       	ldi	r24, 0x2E	; 46
     8c6:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	8d e2       	ldi	r24, 0x2D	; 45
     8ce:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	84 e0       	ldi	r24, 0x04	; 4
     8de:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	85 e0       	ldi	r24, 0x05	; 5
     8e6:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	8b e0       	ldi	r24, 0x0B	; 11
     8ee:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	8c e0       	ldi	r24, 0x0C	; 12
     8f6:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	8d e0       	ldi	r24, 0x0D	; 13
     8fe:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	89 e1       	ldi	r24, 0x19	; 25
     90e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	88 e1       	ldi	r24, 0x18	; 24
     91e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     922:	61 e0       	ldi	r22, 0x01	; 1
     924:	82 e3       	ldi	r24, 0x32	; 50
     926:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	81 e3       	ldi	r24, 0x31	; 49
     92e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	80 e3       	ldi	r24, 0x30	; 48
     936:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	87 e0       	ldi	r24, 0x07	; 7
     93e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	80 e2       	ldi	r24, 0x20	; 32
     94e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	8d e1       	ldi	r24, 0x1D	; 29
     956:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8e e1       	ldi	r24, 0x1E	; 30
     95e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	8c e1       	ldi	r24, 0x1C	; 28
     966:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	8f e1       	ldi	r24, 0x1F	; 31
     96e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	8b e1       	ldi	r24, 0x1B	; 27
     976:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	82 e3       	ldi	r24, 0x32	; 50
     97e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	81 e3       	ldi	r24, 0x31	; 49
     986:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	80 e3       	ldi	r24, 0x30	; 48
     98e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	87 e0       	ldi	r24, 0x07	; 7
     996:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	88 e0       	ldi	r24, 0x08	; 8
     99e:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
     9a2:	c2 e1       	ldi	r28, 0x12	; 18
     9a4:	d1 e0       	ldi	r29, 0x01	; 1
     9a6:	88 81       	ld	r24, Y
     9a8:	22 96       	adiw	r28, 0x02	; 2
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	c6 32       	cpi	r28, 0x26	; 38
     9b4:	d8 07       	cpc	r29, r24
     9b6:	b9 f7       	brne	.-18     	; 0x9a6 <setup+0x1c8>
     9b8:	f8 94       	cli
     9ba:	80 e3       	ldi	r24, 0x30	; 48
     9bc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
     9c0:	84 e0       	ldi	r24, 0x04	; 4
     9c2:	89 bf       	out	0x39, r24	; 57
     9c4:	78 94       	sei
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <__vector_3>:
__vector_3():
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <onOff>
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <btn_menu()>:
_Z8btn_menuv():
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <setHumiMode>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <btn_menu()+0x12>
     9f4:	1d c1       	rjmp	.+570    	; 0xc30 <btn_menu()+0x24c>
     9f6:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <lockMode>
     9fa:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <lockMode+0x1>
     9fe:	89 2b       	or	r24, r25
     a00:	09 f0       	breq	.+2      	; 0xa04 <btn_menu()+0x20>
     a02:	16 c1       	rjmp	.+556    	; 0xc30 <btn_menu()+0x24c>
     a04:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <currentPower4>
     a08:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <lastPower4>
     a0c:	8c e0       	ldi	r24, 0x0C	; 12
     a0e:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
     a12:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <currentPower4>
     a16:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <lastPower4>
     a1a:	91 30       	cpi	r25, 0x01	; 1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <btn_menu()+0x3c>
     a1e:	66 c0       	rjmp	.+204    	; 0xaec <btn_menu()+0x108>
     a20:	81 11       	cpse	r24, r1
     a22:	67 c0       	rjmp	.+206    	; 0xaf2 <btn_menu()+0x10e>
     a24:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e8       	ldi	r20, 0x80	; 128
     a2e:	5f e3       	ldi	r21, 0x3F	; 63
     a30:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <displaysetHumi>
     a34:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <displaysetHumi+0x1>
     a38:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <displaysetHumi+0x2>
     a3c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <displaysetHumi+0x3>
     a40:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
     a44:	6b 01       	movw	r12, r22
     a46:	7c 01       	movw	r14, r24
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	44 eb       	ldi	r20, 0xB4	; 180
     a4e:	52 e4       	ldi	r21, 0x42	; 66
     a50:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
     a54:	18 16       	cp	r1, r24
     a56:	ec f1       	brlt	.+122    	; 0xad2 <btn_menu()+0xee>
     a58:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <displaysetHumi>
     a5c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <displaysetHumi+0x1>
     a60:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <displaysetHumi+0x2>
     a64:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <displaysetHumi+0x3>
     a68:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     a6c:	c0 90 78 04 	lds	r12, 0x0478	; 0x800478 <inchumiTime>
     a70:	d0 90 79 04 	lds	r13, 0x0479	; 0x800479 <inchumiTime+0x1>
     a74:	e0 90 7a 04 	lds	r14, 0x047A	; 0x80047a <inchumiTime+0x2>
     a78:	f0 90 7b 04 	lds	r15, 0x047B	; 0x80047b <inchumiTime+0x3>
     a7c:	6c 19       	sub	r22, r12
     a7e:	7d 09       	sbc	r23, r13
     a80:	8e 09       	sbc	r24, r14
     a82:	9f 09       	sbc	r25, r15
     a84:	61 3d       	cpi	r22, 0xD1	; 209
     a86:	77 40       	sbci	r23, 0x07	; 7
     a88:	81 05       	cpc	r24, r1
     a8a:	91 05       	cpc	r25, r1
     a8c:	90 f1       	brcs	.+100    	; 0xaf2 <btn_menu()+0x10e>
     a8e:	2d ec       	ldi	r18, 0xCD	; 205
     a90:	3c ec       	ldi	r19, 0xCC	; 204
     a92:	4c e4       	ldi	r20, 0x4C	; 76
     a94:	5e e3       	ldi	r21, 0x3E	; 62
     a96:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <displaysetHumi>
     a9a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <displaysetHumi+0x1>
     a9e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <displaysetHumi+0x2>
     aa2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <displaysetHumi+0x3>
     aa6:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
     aaa:	6b 01       	movw	r12, r22
     aac:	7c 01       	movw	r14, r24
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	44 eb       	ldi	r20, 0xB4	; 180
     ab4:	52 e4       	ldi	r21, 0x42	; 66
     ab6:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
     aba:	18 16       	cp	r1, r24
     abc:	0c f4       	brge	.+2      	; 0xac0 <btn_menu()+0xdc>
     abe:	8d c0       	rjmp	.+282    	; 0xbda <btn_menu()+0x1f6>
     ac0:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <displaysetHumi>
     ac4:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <displaysetHumi+0x1>
     ac8:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <displaysetHumi+0x2>
     acc:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <displaysetHumi+0x3>
     ad0:	10 c0       	rjmp	.+32     	; 0xaf2 <btn_menu()+0x10e>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a4 eb       	ldi	r26, 0xB4	; 180
     ad8:	b2 e4       	ldi	r27, 0x42	; 66
     ada:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <displaysetHumi>
     ade:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <displaysetHumi+0x1>
     ae2:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <displaysetHumi+0x2>
     ae6:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <displaysetHumi+0x3>
     aea:	be cf       	rjmp	.-132    	; 0xa68 <btn_menu()+0x84>
     aec:	88 23       	and	r24, r24
     aee:	09 f4       	brne	.+2      	; 0xaf2 <btn_menu()+0x10e>
     af0:	bb cf       	rjmp	.-138    	; 0xa68 <btn_menu()+0x84>
     af2:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <currentPower4>
     af6:	81 30       	cpi	r24, 0x01	; 1
     af8:	51 f4       	brne	.+20     	; 0xb0e <btn_menu()+0x12a>
     afa:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     afe:	60 93 78 04 	sts	0x0478, r22	; 0x800478 <inchumiTime>
     b02:	70 93 79 04 	sts	0x0479, r23	; 0x800479 <inchumiTime+0x1>
     b06:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <inchumiTime+0x2>
     b0a:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <inchumiTime+0x3>
     b0e:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <currentPower5>
     b12:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <lastPower5>
     b16:	8b e0       	ldi	r24, 0x0B	; 11
     b18:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
     b1c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <currentPower5>
     b20:	90 91 a2 04 	lds	r25, 0x04A2	; 0x8004a2 <lastPower5>
     b24:	91 30       	cpi	r25, 0x01	; 1
     b26:	09 f0       	breq	.+2      	; 0xb2a <btn_menu()+0x146>
     b28:	72 c0       	rjmp	.+228    	; 0xc0e <btn_menu()+0x22a>
     b2a:	81 11       	cpse	r24, r1
     b2c:	73 c0       	rjmp	.+230    	; 0xc14 <btn_menu()+0x230>
     b2e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e8       	ldi	r20, 0x80	; 128
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <displaysetHumi>
     b3e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <displaysetHumi+0x1>
     b42:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <displaysetHumi+0x2>
     b46:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <displaysetHumi+0x3>
     b4a:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
     b4e:	6b 01       	movw	r12, r22
     b50:	7c 01       	movw	r14, r24
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 ef       	ldi	r20, 0xF0	; 240
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
     b5e:	87 fd       	sbrc	r24, 7
     b60:	49 c0       	rjmp	.+146    	; 0xbf4 <btn_menu()+0x210>
     b62:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <displaysetHumi>
     b66:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <displaysetHumi+0x1>
     b6a:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <displaysetHumi+0x2>
     b6e:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <displaysetHumi+0x3>
     b72:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     b76:	c0 90 74 04 	lds	r12, 0x0474	; 0x800474 <dechumiTime>
     b7a:	d0 90 75 04 	lds	r13, 0x0475	; 0x800475 <dechumiTime+0x1>
     b7e:	e0 90 76 04 	lds	r14, 0x0476	; 0x800476 <dechumiTime+0x2>
     b82:	f0 90 77 04 	lds	r15, 0x0477	; 0x800477 <dechumiTime+0x3>
     b86:	6c 19       	sub	r22, r12
     b88:	7d 09       	sbc	r23, r13
     b8a:	8e 09       	sbc	r24, r14
     b8c:	9f 09       	sbc	r25, r15
     b8e:	61 3d       	cpi	r22, 0xD1	; 209
     b90:	77 40       	sbci	r23, 0x07	; 7
     b92:	81 05       	cpc	r24, r1
     b94:	91 05       	cpc	r25, r1
     b96:	f0 f1       	brcs	.+124    	; 0xc14 <btn_menu()+0x230>
     b98:	2d ec       	ldi	r18, 0xCD	; 205
     b9a:	3c ec       	ldi	r19, 0xCC	; 204
     b9c:	4c e4       	ldi	r20, 0x4C	; 76
     b9e:	5e e3       	ldi	r21, 0x3E	; 62
     ba0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <displaysetHumi>
     ba4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <displaysetHumi+0x1>
     ba8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <displaysetHumi+0x2>
     bac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <displaysetHumi+0x3>
     bb0:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
     bb4:	6b 01       	movw	r12, r22
     bb6:	7c 01       	movw	r14, r24
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 ef       	ldi	r20, 0xF0	; 240
     bbe:	51 e4       	ldi	r21, 0x41	; 65
     bc0:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
     bc4:	87 fd       	sbrc	r24, 7
     bc6:	cb c0       	rjmp	.+406    	; 0xd5e <btn_menu()+0x37a>
     bc8:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <displaysetHumi>
     bcc:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <displaysetHumi+0x1>
     bd0:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <displaysetHumi+0x2>
     bd4:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <displaysetHumi+0x3>
     bd8:	1d c0       	rjmp	.+58     	; 0xc14 <btn_menu()+0x230>
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a4 eb       	ldi	r26, 0xB4	; 180
     be0:	b2 e4       	ldi	r27, 0x42	; 66
     be2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <displaysetHumi>
     be6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <displaysetHumi+0x1>
     bea:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <displaysetHumi+0x2>
     bee:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <displaysetHumi+0x3>
     bf2:	7f cf       	rjmp	.-258    	; 0xaf2 <btn_menu()+0x10e>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 ef       	ldi	r26, 0xF0	; 240
     bfa:	b1 e4       	ldi	r27, 0x41	; 65
     bfc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <displaysetHumi>
     c00:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <displaysetHumi+0x1>
     c04:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <displaysetHumi+0x2>
     c08:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <displaysetHumi+0x3>
     c0c:	b2 cf       	rjmp	.-156    	; 0xb72 <btn_menu()+0x18e>
     c0e:	88 23       	and	r24, r24
     c10:	09 f4       	brne	.+2      	; 0xc14 <btn_menu()+0x230>
     c12:	af cf       	rjmp	.-162    	; 0xb72 <btn_menu()+0x18e>
     c14:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <currentPower5>
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	51 f4       	brne	.+20     	; 0xc30 <btn_menu()+0x24c>
     c1c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     c20:	60 93 74 04 	sts	0x0474, r22	; 0x800474 <dechumiTime>
     c24:	70 93 75 04 	sts	0x0475, r23	; 0x800475 <dechumiTime+0x1>
     c28:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <dechumiTime+0x2>
     c2c:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <dechumiTime+0x3>
     c30:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	09 f0       	breq	.+2      	; 0xc3a <btn_menu()+0x256>
     c38:	7e c1       	rjmp	.+764    	; 0xf36 <btn_menu()+0x552>
     c3a:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <lockMode>
     c3e:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <lockMode+0x1>
     c42:	89 2b       	or	r24, r25
     c44:	09 f0       	breq	.+2      	; 0xc48 <btn_menu()+0x264>
     c46:	77 c1       	rjmp	.+750    	; 0xf36 <btn_menu()+0x552>
     c48:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <currentPower0>
     c4c:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <lastPower0>
     c50:	8f e2       	ldi	r24, 0x2F	; 47
     c52:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
     c56:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <currentPower0>
     c5a:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <lastPower0>
     c5e:	91 30       	cpi	r25, 0x01	; 1
     c60:	09 f0       	breq	.+2      	; 0xc64 <btn_menu()+0x280>
     c62:	9b c0       	rjmp	.+310    	; 0xd9a <btn_menu()+0x3b6>
     c64:	81 11       	cpse	r24, r1
     c66:	9c c0       	rjmp	.+312    	; 0xda0 <btn_menu()+0x3bc>
     c68:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
     c6c:	2d ec       	ldi	r18, 0xCD	; 205
     c6e:	3c ec       	ldi	r19, 0xCC	; 204
     c70:	4c ec       	ldi	r20, 0xCC	; 204
     c72:	5d e3       	ldi	r21, 0x3D	; 61
     c74:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <displaysetTemp>
     c78:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <displaysetTemp+0x1>
     c7c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <displaysetTemp+0x2>
     c80:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <displaysetTemp+0x3>
     c84:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
     c88:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <displaysetTemp>
     c8c:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <displaysetTemp+0x1>
     c90:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <displaysetTemp+0x2>
     c94:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <displaysetTemp+0x3>
     c98:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
     c9c:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
     ca0:	21 30       	cpi	r18, 0x01	; 1
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f0       	breq	.+2      	; 0xca8 <btn_menu()+0x2c4>
     ca6:	68 c0       	rjmp	.+208    	; 0xd78 <btn_menu()+0x394>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	44 e1       	ldi	r20, 0x14	; 20
     cae:	52 e4       	ldi	r21, 0x42	; 66
     cb0:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	64 f0       	brlt	.+24     	; 0xcd0 <btn_menu()+0x2ec>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a4 e1       	ldi	r26, 0x14	; 20
     cbe:	b2 e4       	ldi	r27, 0x42	; 66
     cc0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <displaysetTemp>
     cc4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <displaysetTemp+0x1>
     cc8:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <displaysetTemp+0x2>
     ccc:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <displaysetTemp+0x3>
     cd0:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     cd4:	c0 90 84 04 	lds	r12, 0x0484	; 0x800484 <decairTime>
     cd8:	d0 90 85 04 	lds	r13, 0x0485	; 0x800485 <decairTime+0x1>
     cdc:	e0 90 86 04 	lds	r14, 0x0486	; 0x800486 <decairTime+0x2>
     ce0:	f0 90 87 04 	lds	r15, 0x0487	; 0x800487 <decairTime+0x3>
     ce4:	6c 19       	sub	r22, r12
     ce6:	7d 09       	sbc	r23, r13
     ce8:	8e 09       	sbc	r24, r14
     cea:	9f 09       	sbc	r25, r15
     cec:	61 3d       	cpi	r22, 0xD1	; 209
     cee:	77 40       	sbci	r23, 0x07	; 7
     cf0:	81 05       	cpc	r24, r1
     cf2:	91 05       	cpc	r25, r1
     cf4:	08 f4       	brcc	.+2      	; 0xcf8 <btn_menu()+0x314>
     cf6:	54 c0       	rjmp	.+168    	; 0xda0 <btn_menu()+0x3bc>
     cf8:	2a e0       	ldi	r18, 0x0A	; 10
     cfa:	37 ed       	ldi	r19, 0xD7	; 215
     cfc:	43 ea       	ldi	r20, 0xA3	; 163
     cfe:	5c e3       	ldi	r21, 0x3C	; 60
     d00:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <displaysetTemp>
     d04:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <displaysetTemp+0x1>
     d08:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <displaysetTemp+0x2>
     d0c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <displaysetTemp+0x3>
     d10:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
     d14:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <displaysetTemp>
     d18:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <displaysetTemp+0x1>
     d1c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <displaysetTemp+0x2>
     d20:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <displaysetTemp+0x3>
     d24:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
     d28:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
     d2c:	21 30       	cpi	r18, 0x01	; 1
     d2e:	31 05       	cpc	r19, r1
     d30:	09 f0       	breq	.+2      	; 0xd34 <btn_menu()+0x350>
     d32:	cf c0       	rjmp	.+414    	; 0xed2 <btn_menu()+0x4ee>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	44 e1       	ldi	r20, 0x14	; 20
     d3a:	52 e4       	ldi	r21, 0x42	; 66
     d3c:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
     d40:	18 16       	cp	r1, r24
     d42:	74 f1       	brlt	.+92     	; 0xda0 <btn_menu()+0x3bc>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a4 e1       	ldi	r26, 0x14	; 20
     d4a:	b2 e4       	ldi	r27, 0x42	; 66
     d4c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <displaysetTemp>
     d50:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <displaysetTemp+0x1>
     d54:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <displaysetTemp+0x2>
     d58:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <displaysetTemp+0x3>
     d5c:	21 c0       	rjmp	.+66     	; 0xda0 <btn_menu()+0x3bc>
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	a0 ef       	ldi	r26, 0xF0	; 240
     d64:	b1 e4       	ldi	r27, 0x41	; 65
     d66:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <displaysetHumi>
     d6a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <displaysetHumi+0x1>
     d6e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <displaysetHumi+0x2>
     d72:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <displaysetHumi+0x3>
     d76:	4e cf       	rjmp	.-356    	; 0xc14 <btn_menu()+0x230>
     d78:	23 2b       	or	r18, r19
     d7a:	09 f0       	breq	.+2      	; 0xd7e <btn_menu()+0x39a>
     d7c:	a9 cf       	rjmp	.-174    	; 0xcd0 <btn_menu()+0x2ec>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 ea       	ldi	r20, 0xA0	; 160
     d84:	51 e4       	ldi	r21, 0x41	; 65
     d86:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
     d8a:	18 16       	cp	r1, r24
     d8c:	0c f4       	brge	.+2      	; 0xd90 <btn_menu()+0x3ac>
     d8e:	a0 cf       	rjmp	.-192    	; 0xcd0 <btn_menu()+0x2ec>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a0 ea       	ldi	r26, 0xA0	; 160
     d96:	b1 e4       	ldi	r27, 0x41	; 65
     d98:	93 cf       	rjmp	.-218    	; 0xcc0 <btn_menu()+0x2dc>
     d9a:	88 23       	and	r24, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <btn_menu()+0x3bc>
     d9e:	98 cf       	rjmp	.-208    	; 0xcd0 <btn_menu()+0x2ec>
     da0:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <currentPower0>
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	51 f4       	brne	.+20     	; 0xdbc <btn_menu()+0x3d8>
     da8:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     dac:	60 93 84 04 	sts	0x0484, r22	; 0x800484 <decairTime>
     db0:	70 93 85 04 	sts	0x0485, r23	; 0x800485 <decairTime+0x1>
     db4:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <decairTime+0x2>
     db8:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <decairTime+0x3>
     dbc:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <currentPower1>
     dc0:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <lastPower1>
     dc4:	8e e2       	ldi	r24, 0x2E	; 46
     dc6:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
     dca:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <currentPower1>
     dce:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <lastPower1>
     dd2:	91 30       	cpi	r25, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <btn_menu()+0x3f4>
     dd6:	9e c0       	rjmp	.+316    	; 0xf14 <btn_menu()+0x530>
     dd8:	81 11       	cpse	r24, r1
     dda:	9f c0       	rjmp	.+318    	; 0xf1a <btn_menu()+0x536>
     ddc:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
     de0:	2d ec       	ldi	r18, 0xCD	; 205
     de2:	3c ec       	ldi	r19, 0xCC	; 204
     de4:	4c ec       	ldi	r20, 0xCC	; 204
     de6:	5d e3       	ldi	r21, 0x3D	; 61
     de8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <displaysetTemp>
     dec:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <displaysetTemp+0x1>
     df0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <displaysetTemp+0x2>
     df4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <displaysetTemp+0x3>
     df8:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
     dfc:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <displaysetTemp>
     e00:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <displaysetTemp+0x1>
     e04:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <displaysetTemp+0x2>
     e08:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <displaysetTemp+0x3>
     e0c:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
     e10:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
     e14:	21 30       	cpi	r18, 0x01	; 1
     e16:	31 05       	cpc	r19, r1
     e18:	09 f0       	breq	.+2      	; 0xe1c <btn_menu()+0x438>
     e1a:	6c c0       	rjmp	.+216    	; 0xef4 <btn_menu()+0x510>
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	4c e1       	ldi	r20, 0x1C	; 28
     e22:	52 e4       	ldi	r21, 0x42	; 66
     e24:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
     e28:	87 fd       	sbrc	r24, 7
     e2a:	0c c0       	rjmp	.+24     	; 0xe44 <btn_menu()+0x460>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	ac e1       	ldi	r26, 0x1C	; 28
     e32:	b2 e4       	ldi	r27, 0x42	; 66
     e34:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <displaysetTemp>
     e38:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <displaysetTemp+0x1>
     e3c:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <displaysetTemp+0x2>
     e40:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <displaysetTemp+0x3>
     e44:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     e48:	c0 90 88 04 	lds	r12, 0x0488	; 0x800488 <incairTime>
     e4c:	d0 90 89 04 	lds	r13, 0x0489	; 0x800489 <incairTime+0x1>
     e50:	e0 90 8a 04 	lds	r14, 0x048A	; 0x80048a <incairTime+0x2>
     e54:	f0 90 8b 04 	lds	r15, 0x048B	; 0x80048b <incairTime+0x3>
     e58:	6c 19       	sub	r22, r12
     e5a:	7d 09       	sbc	r23, r13
     e5c:	8e 09       	sbc	r24, r14
     e5e:	9f 09       	sbc	r25, r15
     e60:	61 3d       	cpi	r22, 0xD1	; 209
     e62:	77 40       	sbci	r23, 0x07	; 7
     e64:	81 05       	cpc	r24, r1
     e66:	91 05       	cpc	r25, r1
     e68:	08 f4       	brcc	.+2      	; 0xe6c <btn_menu()+0x488>
     e6a:	57 c0       	rjmp	.+174    	; 0xf1a <btn_menu()+0x536>
     e6c:	2a e0       	ldi	r18, 0x0A	; 10
     e6e:	37 ed       	ldi	r19, 0xD7	; 215
     e70:	43 ea       	ldi	r20, 0xA3	; 163
     e72:	5c e3       	ldi	r21, 0x3C	; 60
     e74:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <displaysetTemp>
     e78:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <displaysetTemp+0x1>
     e7c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <displaysetTemp+0x2>
     e80:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <displaysetTemp+0x3>
     e84:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
     e88:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <displaysetTemp>
     e8c:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <displaysetTemp+0x1>
     e90:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <displaysetTemp+0x2>
     e94:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <displaysetTemp+0x3>
     e98:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
     e9c:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
     ea0:	21 30       	cpi	r18, 0x01	; 1
     ea2:	31 05       	cpc	r19, r1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <btn_menu()+0x4c4>
     ea6:	de c0       	rjmp	.+444    	; 0x1064 <btn_menu()+0x680>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4c e1       	ldi	r20, 0x1C	; 28
     eae:	52 e4       	ldi	r21, 0x42	; 66
     eb0:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
     eb4:	87 fd       	sbrc	r24, 7
     eb6:	31 c0       	rjmp	.+98     	; 0xf1a <btn_menu()+0x536>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	ac e1       	ldi	r26, 0x1C	; 28
     ebe:	b2 e4       	ldi	r27, 0x42	; 66
     ec0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <displaysetTemp>
     ec4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <displaysetTemp+0x1>
     ec8:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <displaysetTemp+0x2>
     ecc:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <displaysetTemp+0x3>
     ed0:	24 c0       	rjmp	.+72     	; 0xf1a <btn_menu()+0x536>
     ed2:	23 2b       	or	r18, r19
     ed4:	09 f0       	breq	.+2      	; 0xed8 <btn_menu()+0x4f4>
     ed6:	64 cf       	rjmp	.-312    	; 0xda0 <btn_menu()+0x3bc>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 ea       	ldi	r20, 0xA0	; 160
     ede:	51 e4       	ldi	r21, 0x41	; 65
     ee0:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	0c f4       	brge	.+2      	; 0xeea <btn_menu()+0x506>
     ee8:	5b cf       	rjmp	.-330    	; 0xda0 <btn_menu()+0x3bc>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a0 ea       	ldi	r26, 0xA0	; 160
     ef0:	b1 e4       	ldi	r27, 0x41	; 65
     ef2:	2c cf       	rjmp	.-424    	; 0xd4c <btn_menu()+0x368>
     ef4:	23 2b       	or	r18, r19
     ef6:	09 f0       	breq	.+2      	; 0xefa <btn_menu()+0x516>
     ef8:	a5 cf       	rjmp	.-182    	; 0xe44 <btn_menu()+0x460>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	44 e1       	ldi	r20, 0x14	; 20
     f00:	52 e4       	ldi	r21, 0x42	; 66
     f02:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
     f06:	87 fd       	sbrc	r24, 7
     f08:	9d cf       	rjmp	.-198    	; 0xe44 <btn_menu()+0x460>
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a4 e1       	ldi	r26, 0x14	; 20
     f10:	b2 e4       	ldi	r27, 0x42	; 66
     f12:	90 cf       	rjmp	.-224    	; 0xe34 <btn_menu()+0x450>
     f14:	88 23       	and	r24, r24
     f16:	09 f4       	brne	.+2      	; 0xf1a <btn_menu()+0x536>
     f18:	95 cf       	rjmp	.-214    	; 0xe44 <btn_menu()+0x460>
     f1a:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <currentPower1>
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	51 f4       	brne	.+20     	; 0xf36 <btn_menu()+0x552>
     f22:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     f26:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <incairTime>
     f2a:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <incairTime+0x1>
     f2e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <incairTime+0x2>
     f32:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <incairTime+0x3>
     f36:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <btn_menu()+0x55c>
     f3e:	80 c1       	rjmp	.+768    	; 0x1240 <__stack+0x141>
     f40:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <lockMode>
     f44:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <lockMode+0x1>
     f48:	89 2b       	or	r24, r25
     f4a:	09 f0       	breq	.+2      	; 0xf4e <btn_menu()+0x56a>
     f4c:	79 c1       	rjmp	.+754    	; 0x1240 <__stack+0x141>
     f4e:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <currentPower2>
     f52:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <lastPower2>
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
     f5c:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <currentPower2>
     f60:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <lastPower2>
     f64:	91 30       	cpi	r25, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <btn_menu()+0x586>
     f68:	9d c0       	rjmp	.+314    	; 0x10a4 <btn_menu()+0x6c0>
     f6a:	81 11       	cpse	r24, r1
     f6c:	9e c0       	rjmp	.+316    	; 0x10aa <btn_menu()+0x6c6>
     f6e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
     f72:	2d ec       	ldi	r18, 0xCD	; 205
     f74:	3c ec       	ldi	r19, 0xCC	; 204
     f76:	4c ec       	ldi	r20, 0xCC	; 204
     f78:	5d e3       	ldi	r21, 0x3D	; 61
     f7a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <displaysetSkin>
     f7e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <displaysetSkin+0x1>
     f82:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <displaysetSkin+0x2>
     f86:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <displaysetSkin+0x3>
     f8a:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
     f8e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <displaysetSkin>
     f92:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <displaysetSkin+0x1>
     f96:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <displaysetSkin+0x2>
     f9a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <displaysetSkin+0x3>
     f9e:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
     fa2:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
     fa6:	21 30       	cpi	r18, 0x01	; 1
     fa8:	31 05       	cpc	r19, r1
     faa:	09 f0       	breq	.+2      	; 0xfae <btn_menu()+0x5ca>
     fac:	6b c0       	rjmp	.+214    	; 0x1084 <btn_menu()+0x6a0>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	48 e1       	ldi	r20, 0x18	; 24
     fb4:	52 e4       	ldi	r21, 0x42	; 66
     fb6:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
     fba:	87 fd       	sbrc	r24, 7
     fbc:	0c c0       	rjmp	.+24     	; 0xfd6 <btn_menu()+0x5f2>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a8 e1       	ldi	r26, 0x18	; 24
     fc4:	b2 e4       	ldi	r27, 0x42	; 66
     fc6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <displaysetSkin>
     fca:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <displaysetSkin+0x1>
     fce:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <displaysetSkin+0x2>
     fd2:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <displaysetSkin+0x3>
     fd6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
     fda:	c0 90 80 04 	lds	r12, 0x0480	; 0x800480 <incskinTime>
     fde:	d0 90 81 04 	lds	r13, 0x0481	; 0x800481 <incskinTime+0x1>
     fe2:	e0 90 82 04 	lds	r14, 0x0482	; 0x800482 <incskinTime+0x2>
     fe6:	f0 90 83 04 	lds	r15, 0x0483	; 0x800483 <incskinTime+0x3>
     fea:	6c 19       	sub	r22, r12
     fec:	7d 09       	sbc	r23, r13
     fee:	8e 09       	sbc	r24, r14
     ff0:	9f 09       	sbc	r25, r15
     ff2:	61 3d       	cpi	r22, 0xD1	; 209
     ff4:	77 40       	sbci	r23, 0x07	; 7
     ff6:	81 05       	cpc	r24, r1
     ff8:	91 05       	cpc	r25, r1
     ffa:	08 f4       	brcc	.+2      	; 0xffe <btn_menu()+0x61a>
     ffc:	56 c0       	rjmp	.+172    	; 0x10aa <btn_menu()+0x6c6>
     ffe:	2a e0       	ldi	r18, 0x0A	; 10
    1000:	37 ed       	ldi	r19, 0xD7	; 215
    1002:	43 ea       	ldi	r20, 0xA3	; 163
    1004:	5c e3       	ldi	r21, 0x3C	; 60
    1006:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <displaysetSkin>
    100a:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <displaysetSkin+0x1>
    100e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <displaysetSkin+0x2>
    1012:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <displaysetSkin+0x3>
    1016:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
    101a:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <displaysetSkin>
    101e:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <displaysetSkin+0x1>
    1022:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <displaysetSkin+0x2>
    1026:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <displaysetSkin+0x3>
    102a:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
    102e:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
    1032:	21 30       	cpi	r18, 0x01	; 1
    1034:	31 05       	cpc	r19, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <btn_menu()+0x656>
    1038:	d1 c0       	rjmp	.+418    	; 0x11dc <__stack+0xdd>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	48 e1       	ldi	r20, 0x18	; 24
    1040:	52 e4       	ldi	r21, 0x42	; 66
    1042:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    1046:	87 fd       	sbrc	r24, 7
    1048:	30 c0       	rjmp	.+96     	; 0x10aa <btn_menu()+0x6c6>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a8 e1       	ldi	r26, 0x18	; 24
    1050:	b2 e4       	ldi	r27, 0x42	; 66
    1052:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <displaysetSkin>
    1056:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <displaysetSkin+0x1>
    105a:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <displaysetSkin+0x2>
    105e:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <displaysetSkin+0x3>
    1062:	23 c0       	rjmp	.+70     	; 0x10aa <btn_menu()+0x6c6>
    1064:	23 2b       	or	r18, r19
    1066:	09 f0       	breq	.+2      	; 0x106a <btn_menu()+0x686>
    1068:	58 cf       	rjmp	.-336    	; 0xf1a <btn_menu()+0x536>
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	44 e1       	ldi	r20, 0x14	; 20
    1070:	52 e4       	ldi	r21, 0x42	; 66
    1072:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    1076:	87 fd       	sbrc	r24, 7
    1078:	50 cf       	rjmp	.-352    	; 0xf1a <btn_menu()+0x536>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a4 e1       	ldi	r26, 0x14	; 20
    1080:	b2 e4       	ldi	r27, 0x42	; 66
    1082:	1e cf       	rjmp	.-452    	; 0xec0 <btn_menu()+0x4dc>
    1084:	23 2b       	or	r18, r19
    1086:	09 f0       	breq	.+2      	; 0x108a <btn_menu()+0x6a6>
    1088:	a6 cf       	rjmp	.-180    	; 0xfd6 <btn_menu()+0x5f2>
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	44 e1       	ldi	r20, 0x14	; 20
    1090:	52 e4       	ldi	r21, 0x42	; 66
    1092:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    1096:	87 fd       	sbrc	r24, 7
    1098:	9e cf       	rjmp	.-196    	; 0xfd6 <btn_menu()+0x5f2>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a4 e1       	ldi	r26, 0x14	; 20
    10a0:	b2 e4       	ldi	r27, 0x42	; 66
    10a2:	91 cf       	rjmp	.-222    	; 0xfc6 <btn_menu()+0x5e2>
    10a4:	88 23       	and	r24, r24
    10a6:	09 f4       	brne	.+2      	; 0x10aa <btn_menu()+0x6c6>
    10a8:	96 cf       	rjmp	.-212    	; 0xfd6 <btn_menu()+0x5f2>
    10aa:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <currentPower2>
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	51 f4       	brne	.+20     	; 0x10c6 <btn_menu()+0x6e2>
    10b2:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    10b6:	60 93 80 04 	sts	0x0480, r22	; 0x800480 <incskinTime>
    10ba:	70 93 81 04 	sts	0x0481, r23	; 0x800481 <incskinTime+0x1>
    10be:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <incskinTime+0x2>
    10c2:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <incskinTime+0x3>
    10c6:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <currentPower3>
    10ca:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <lastPower3>
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    10d4:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <currentPower3>
    10d8:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <lastPower3>
    10dc:	91 30       	cpi	r25, 0x01	; 1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <btn_menu()+0x6fe>
    10e0:	9e c0       	rjmp	.+316    	; 0x121e <__stack+0x11f>
    10e2:	81 11       	cpse	r24, r1
    10e4:	9f c0       	rjmp	.+318    	; 0x1224 <__stack+0x125>
    10e6:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    10ea:	2d ec       	ldi	r18, 0xCD	; 205
    10ec:	3c ec       	ldi	r19, 0xCC	; 204
    10ee:	4c ec       	ldi	r20, 0xCC	; 204
    10f0:	5d e3       	ldi	r21, 0x3D	; 61
    10f2:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <displaysetSkin>
    10f6:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <displaysetSkin+0x1>
    10fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <displaysetSkin+0x2>
    10fe:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <displaysetSkin+0x3>
    1102:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    1106:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <displaysetSkin>
    110a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <displaysetSkin+0x1>
    110e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <displaysetSkin+0x2>
    1112:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <displaysetSkin+0x3>
    1116:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
    111a:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	31 05       	cpc	r19, r1
    1122:	09 f0       	breq	.+2      	; 0x1126 <__stack+0x27>
    1124:	6b c0       	rjmp	.+214    	; 0x11fc <__stack+0xfd>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	44 e1       	ldi	r20, 0x14	; 20
    112c:	52 e4       	ldi	r21, 0x42	; 66
    112e:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    1132:	18 16       	cp	r1, r24
    1134:	64 f0       	brlt	.+24     	; 0x114e <__stack+0x4f>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a4 e1       	ldi	r26, 0x14	; 20
    113c:	b2 e4       	ldi	r27, 0x42	; 66
    113e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <displaysetSkin>
    1142:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <displaysetSkin+0x1>
    1146:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <displaysetSkin+0x2>
    114a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <displaysetSkin+0x3>
    114e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1152:	c0 90 7c 04 	lds	r12, 0x047C	; 0x80047c <decskinTime>
    1156:	d0 90 7d 04 	lds	r13, 0x047D	; 0x80047d <decskinTime+0x1>
    115a:	e0 90 7e 04 	lds	r14, 0x047E	; 0x80047e <decskinTime+0x2>
    115e:	f0 90 7f 04 	lds	r15, 0x047F	; 0x80047f <decskinTime+0x3>
    1162:	6c 19       	sub	r22, r12
    1164:	7d 09       	sbc	r23, r13
    1166:	8e 09       	sbc	r24, r14
    1168:	9f 09       	sbc	r25, r15
    116a:	61 3d       	cpi	r22, 0xD1	; 209
    116c:	77 40       	sbci	r23, 0x07	; 7
    116e:	81 05       	cpc	r24, r1
    1170:	91 05       	cpc	r25, r1
    1172:	08 f4       	brcc	.+2      	; 0x1176 <__stack+0x77>
    1174:	57 c0       	rjmp	.+174    	; 0x1224 <__stack+0x125>
    1176:	2a e0       	ldi	r18, 0x0A	; 10
    1178:	37 ed       	ldi	r19, 0xD7	; 215
    117a:	43 ea       	ldi	r20, 0xA3	; 163
    117c:	5c e3       	ldi	r21, 0x3C	; 60
    117e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <displaysetSkin>
    1182:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <displaysetSkin+0x1>
    1186:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <displaysetSkin+0x2>
    118a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <displaysetSkin+0x3>
    118e:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    1192:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <displaysetSkin>
    1196:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <displaysetSkin+0x1>
    119a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <displaysetSkin+0x2>
    119e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <displaysetSkin+0x3>
    11a2:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
    11a6:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
    11aa:	21 30       	cpi	r18, 0x01	; 1
    11ac:	31 05       	cpc	r19, r1
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <__stack+0xb3>
    11b0:	4c c0       	rjmp	.+152    	; 0x124a <__stack+0x14b>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	44 e1       	ldi	r20, 0x14	; 20
    11b8:	52 e4       	ldi	r21, 0x42	; 66
    11ba:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	8c f1       	brlt	.+98     	; 0x1224 <__stack+0x125>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a4 e1       	ldi	r26, 0x14	; 20
    11c8:	b2 e4       	ldi	r27, 0x42	; 66
    11ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <displaysetSkin>
    11ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <displaysetSkin+0x1>
    11d2:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <displaysetSkin+0x2>
    11d6:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <displaysetSkin+0x3>
    11da:	24 c0       	rjmp	.+72     	; 0x1224 <__stack+0x125>
    11dc:	23 2b       	or	r18, r19
    11de:	09 f0       	breq	.+2      	; 0x11e2 <__stack+0xe3>
    11e0:	64 cf       	rjmp	.-312    	; 0x10aa <btn_menu()+0x6c6>
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	44 e1       	ldi	r20, 0x14	; 20
    11e8:	52 e4       	ldi	r21, 0x42	; 66
    11ea:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    11ee:	87 fd       	sbrc	r24, 7
    11f0:	5c cf       	rjmp	.-328    	; 0x10aa <btn_menu()+0x6c6>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a4 e1       	ldi	r26, 0x14	; 20
    11f8:	b2 e4       	ldi	r27, 0x42	; 66
    11fa:	2b cf       	rjmp	.-426    	; 0x1052 <btn_menu()+0x66e>
    11fc:	23 2b       	or	r18, r19
    11fe:	09 f0       	breq	.+2      	; 0x1202 <__stack+0x103>
    1200:	a6 cf       	rjmp	.-180    	; 0x114e <__stack+0x4f>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	48 e0       	ldi	r20, 0x08	; 8
    1208:	52 e4       	ldi	r21, 0x42	; 66
    120a:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    120e:	18 16       	cp	r1, r24
    1210:	0c f4       	brge	.+2      	; 0x1214 <__stack+0x115>
    1212:	9d cf       	rjmp	.-198    	; 0x114e <__stack+0x4f>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a8 e0       	ldi	r26, 0x08	; 8
    121a:	b2 e4       	ldi	r27, 0x42	; 66
    121c:	90 cf       	rjmp	.-224    	; 0x113e <__stack+0x3f>
    121e:	88 23       	and	r24, r24
    1220:	09 f4       	brne	.+2      	; 0x1224 <__stack+0x125>
    1222:	95 cf       	rjmp	.-214    	; 0x114e <__stack+0x4f>
    1224:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <currentPower3>
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	51 f4       	brne	.+20     	; 0x1240 <__stack+0x141>
    122c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1230:	60 93 7c 04 	sts	0x047C, r22	; 0x80047c <decskinTime>
    1234:	70 93 7d 04 	sts	0x047D, r23	; 0x80047d <decskinTime+0x1>
    1238:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <decskinTime+0x2>
    123c:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <decskinTime+0x3>
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	08 95       	ret
    124a:	23 2b       	or	r18, r19
    124c:	59 f7       	brne	.-42     	; 0x1224 <__stack+0x125>
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	48 e0       	ldi	r20, 0x08	; 8
    1254:	52 e4       	ldi	r21, 0x42	; 66
    1256:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    125a:	18 16       	cp	r1, r24
    125c:	1c f3       	brlt	.-58     	; 0x1224 <__stack+0x125>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a8 e0       	ldi	r26, 0x08	; 8
    1264:	b2 e4       	ldi	r27, 0x42	; 66
    1266:	b1 cf       	rjmp	.-158    	; 0x11ca <__stack+0xcb>

00001268 <set_btn()>:
_Z7set_btnv():
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <currentPower10>
    1272:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <lastPower10>
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    127c:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <currentPower10>
    1280:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <setLockMode>
    1284:	81 11       	cpse	r24, r1
    1286:	22 c0       	rjmp	.+68     	; 0x12cc <set_btn()+0x64>
    1288:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    128c:	00 91 70 04 	lds	r16, 0x0470	; 0x800470 <lockTimer>
    1290:	10 91 71 04 	lds	r17, 0x0471	; 0x800471 <lockTimer+0x1>
    1294:	20 91 72 04 	lds	r18, 0x0472	; 0x800472 <lockTimer+0x2>
    1298:	30 91 73 04 	lds	r19, 0x0473	; 0x800473 <lockTimer+0x3>
    129c:	60 1b       	sub	r22, r16
    129e:	71 0b       	sbc	r23, r17
    12a0:	82 0b       	sbc	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	69 3e       	cpi	r22, 0xE9	; 233
    12a6:	73 40       	sbci	r23, 0x03	; 3
    12a8:	81 05       	cpc	r24, r1
    12aa:	91 05       	cpc	r25, r1
    12ac:	78 f0       	brcs	.+30     	; 0x12cc <set_btn()+0x64>
    12ae:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    12b2:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <lockTimer>
    12b6:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <lockTimer+0x1>
    12ba:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <lockTimer+0x2>
    12be:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <lockTimer+0x3>
    12c2:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <timeBtn>
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <timeBtn>
    12cc:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <lastPower10>
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	c1 f5       	brne	.+112    	; 0x1344 <set_btn()+0xdc>
    12d4:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <currentPower10>
    12d8:	81 11       	cpse	r24, r1
    12da:	34 c0       	rjmp	.+104    	; 0x1344 <set_btn()+0xdc>
    12dc:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <setLockMode>
    12e0:	8f 5f       	subi	r24, 0xFF	; 255
    12e2:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <setLockMode>
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	b9 f4       	brne	.+46     	; 0x1318 <set_btn()+0xb0>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <lockMode+0x1>
    12f2:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <lockMode>
    12f6:	8c e3       	ldi	r24, 0x3C	; 60
    12f8:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <timeBtn>
    12fc:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1300:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <lockTimer>
    1304:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <lockTimer+0x1>
    1308:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <lockTimer+0x2>
    130c:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <lockTimer+0x3>
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	88 e0       	ldi	r24, 0x08	; 8
    1314:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1318:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <setLockMode>
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	91 f4       	brne	.+36     	; 0x1344 <set_btn()+0xdc>
    1320:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    1324:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <lockMode+0x1>
    1328:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <lockMode>
    132c:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <setLockMode>
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	88 e0       	ldi	r24, 0x08	; 8
    1334:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1338:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <setLockMode>
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	10 f0       	brcs	.+4      	; 0x1344 <set_btn()+0xdc>
    1340:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <setLockMode>
    1344:	80 91 6f 04 	lds	r24, 0x046F	; 0x80046f <timeBtn>
    1348:	8c 33       	cpi	r24, 0x3C	; 60
    134a:	d0 f0       	brcs	.+52     	; 0x1380 <set_btn()+0x118>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <setLockMode>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <lockMode+0x1>
    135a:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <lockMode>
    135e:	8c e3       	ldi	r24, 0x3C	; 60
    1360:	80 93 6f 04 	sts	0x046F, r24	; 0x80046f <timeBtn>
    1364:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1368:	60 93 70 04 	sts	0x0470, r22	; 0x800470 <lockTimer>
    136c:	70 93 71 04 	sts	0x0471, r23	; 0x800471 <lockTimer+0x1>
    1370:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <lockTimer+0x2>
    1374:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <lockTimer+0x3>
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	88 e0       	ldi	r24, 0x08	; 8
    137c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1380:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <lockMode>
    1384:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <lockMode+0x1>
    1388:	89 2b       	or	r24, r25
    138a:	09 f0       	breq	.+2      	; 0x138e <set_btn()+0x126>
    138c:	a9 c1       	rjmp	.+850    	; 0x16e0 <set_btn()+0x478>
    138e:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <skinMode>
    1392:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <skinMode+0x1>
    1396:	18 16       	cp	r1, r24
    1398:	19 06       	cpc	r1, r25
    139a:	0c f4       	brge	.+2      	; 0x139e <set_btn()+0x136>
    139c:	64 c0       	rjmp	.+200    	; 0x1466 <set_btn()+0x1fe>
    139e:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <currentPower9>
    13a2:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <lastPower9>
    13a6:	86 e0       	ldi	r24, 0x06	; 6
    13a8:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    13ac:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <currentPower9>
    13b0:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <lastPower9>
    13b4:	91 30       	cpi	r25, 0x01	; 1
    13b6:	09 f0       	breq	.+2      	; 0x13ba <set_btn()+0x152>
    13b8:	4f c0       	rjmp	.+158    	; 0x1458 <set_btn()+0x1f0>
    13ba:	81 11       	cpse	r24, r1
    13bc:	4d c0       	rjmp	.+154    	; 0x1458 <set_btn()+0x1f0>
    13be:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    13c2:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <setHigh>
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <setHigh>
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	f1 f4       	brne	.+60     	; 0x140c <set_btn()+0x1a4>
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <highTemp+0x1>
    13d8:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <highTemp>
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	87 e0       	ldi	r24, 0x07	; 7
    13e0:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a4 e1       	ldi	r26, 0x14	; 20
    13ea:	b2 e4       	ldi	r27, 0x42	; 66
    13ec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <displaysetTemp>
    13f0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <displaysetTemp+0x1>
    13f4:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <displaysetTemp+0x2>
    13f8:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <displaysetTemp+0x3>
    13fc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <displaysetSkin>
    1400:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <displaysetSkin+0x1>
    1404:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <displaysetSkin+0x2>
    1408:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <displaysetSkin+0x3>
    140c:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <setHigh>
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	11 f5       	brne	.+68     	; 0x1458 <set_btn()+0x1f0>
    1414:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <highTemp+0x1>
    1418:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <highTemp>
    141c:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <setHigh>
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	87 e0       	ldi	r24, 0x07	; 7
    1424:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a8 ed       	ldi	r26, 0xD8	; 216
    142e:	b1 e4       	ldi	r27, 0x41	; 65
    1430:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <displaysetTemp>
    1434:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <displaysetTemp+0x1>
    1438:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <displaysetTemp+0x2>
    143c:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <displaysetTemp+0x3>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a8 e0       	ldi	r26, 0x08	; 8
    1446:	b2 e4       	ldi	r27, 0x42	; 66
    1448:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <displaysetSkin>
    144c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <displaysetSkin+0x1>
    1450:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <displaysetSkin+0x2>
    1454:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <displaysetSkin+0x3>
    1458:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <lockMode>
    145c:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <lockMode+0x1>
    1460:	89 2b       	or	r24, r25
    1462:	09 f0       	breq	.+2      	; 0x1466 <set_btn()+0x1fe>
    1464:	3d c1       	rjmp	.+634    	; 0x16e0 <set_btn()+0x478>
    1466:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <currentPower6>
    146a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <lastPower6>
    146e:	8d e2       	ldi	r24, 0x2D	; 45
    1470:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    1474:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <currentPower6>
    1478:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <lastPower6>
    147c:	91 30       	cpi	r25, 0x01	; 1
    147e:	09 f0       	breq	.+2      	; 0x1482 <set_btn()+0x21a>
    1480:	71 c0       	rjmp	.+226    	; 0x1564 <set_btn()+0x2fc>
    1482:	81 11       	cpse	r24, r1
    1484:	6f c0       	rjmp	.+222    	; 0x1564 <set_btn()+0x2fc>
    1486:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    148a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
    148e:	8f 5f       	subi	r24, 0xFF	; 255
    1490:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <setAirway>
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	71 f4       	brne	.+28     	; 0x14b4 <set_btn()+0x24c>
    1498:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <setSkinMode>
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <segmentBlank>
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	81 e3       	ldi	r24, 0x31	; 49
    14a6:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    14aa:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    14ae:	81 11       	cpse	r24, r1
    14b0:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <setSkinMode>
    14b4:	c0 91 6c 04 	lds	r28, 0x046C	; 0x80046c <setAirway>
    14b8:	c2 30       	cpi	r28, 0x02	; 2
    14ba:	e9 f5       	brne	.+122    	; 0x1536 <set_btn()+0x2ce>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <displaysetTemp>
    14c8:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <displaysetTemp+0x1>
    14cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <displaysetTemp+0x2>
    14d0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <displaysetTemp+0x3>
    14d4:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    14d8:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    14dc:	70 93 a9 04 	sts	0x04A9, r23	; 0x8004a9 <convert+0x1>
    14e0:	60 93 a8 04 	sts	0x04A8, r22	; 0x8004a8 <convert>
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e2       	ldi	r20, 0x20	; 32
    14f2:	51 e4       	ldi	r21, 0x41	; 65
    14f4:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    14f8:	60 93 f2 05 	sts	0x05F2, r22	; 0x8005f2 <sendTemp>
    14fc:	70 93 f3 05 	sts	0x05F3, r23	; 0x8005f3 <sendTemp+0x1>
    1500:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <sendTemp+0x2>
    1504:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <sendTemp+0x3>
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <skinMode+0x1>
    1510:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <skinMode>
    1514:	c0 93 b3 04 	sts	0x04B3, r28	; 0x8004b3 <segmentBlank>
    1518:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <setSkinMode>
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	82 e3       	ldi	r24, 0x32	; 50
    1520:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	81 e3       	ldi	r24, 0x31	; 49
    1528:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    152c:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    1530:	81 11       	cpse	r24, r1
    1532:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <setSkinMode>
    1536:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	99 f4       	brne	.+38     	; 0x1564 <set_btn()+0x2fc>
    153e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <setAirway>
    1542:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <setSkinMode>
    1546:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <skinMode+0x1>
    154a:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <skinMode>
    154e:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <segmentBlank>
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	82 e3       	ldi	r24, 0x32	; 50
    1556:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    155a:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    155e:	81 11       	cpse	r24, r1
    1560:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <setSkinMode>
    1564:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <currentPower7>
    1568:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <lastPower7>
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    1572:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <currentPower7>
    1576:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <lastPower7>
    157a:	91 30       	cpi	r25, 0x01	; 1
    157c:	09 f0       	breq	.+2      	; 0x1580 <set_btn()+0x318>
    157e:	70 c0       	rjmp	.+224    	; 0x1660 <set_btn()+0x3f8>
    1580:	81 11       	cpse	r24, r1
    1582:	6e c0       	rjmp	.+220    	; 0x1660 <set_btn()+0x3f8>
    1584:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    1588:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <setSkinMode>
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	69 f4       	brne	.+26     	; 0x15b0 <set_btn()+0x348>
    1596:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <setAirway>
    159a:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <segmentBlank>
    159e:	61 e0       	ldi	r22, 0x01	; 1
    15a0:	82 e3       	ldi	r24, 0x32	; 50
    15a2:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    15a6:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
    15aa:	81 11       	cpse	r24, r1
    15ac:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <setAirway>
    15b0:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	e9 f5       	brne	.+122    	; 0x1632 <set_btn()+0x3ca>
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e2       	ldi	r20, 0x20	; 32
    15be:	51 e4       	ldi	r21, 0x41	; 65
    15c0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <displaysetSkin>
    15c4:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <displaysetSkin+0x1>
    15c8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <displaysetSkin+0x2>
    15cc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <displaysetSkin+0x3>
    15d0:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    15d4:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    15d8:	70 93 a9 04 	sts	0x04A9, r23	; 0x8004a9 <convert+0x1>
    15dc:	60 93 a8 04 	sts	0x04A8, r22	; 0x8004a8 <convert>
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e2       	ldi	r20, 0x20	; 32
    15ee:	51 e4       	ldi	r21, 0x41	; 65
    15f0:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    15f4:	60 93 f2 05 	sts	0x05F2, r22	; 0x8005f2 <sendTemp>
    15f8:	70 93 f3 05 	sts	0x05F3, r23	; 0x8005f3 <sendTemp+0x1>
    15fc:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <sendTemp+0x2>
    1600:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <sendTemp+0x3>
    1604:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <setAirway>
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <skinMode+0x1>
    1610:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <skinMode>
    1614:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <segmentBlank>
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	81 e3       	ldi	r24, 0x31	; 49
    161c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	82 e3       	ldi	r24, 0x32	; 50
    1624:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1628:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
    162c:	81 11       	cpse	r24, r1
    162e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <setAirway>
    1632:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	99 f4       	brne	.+38     	; 0x1660 <set_btn()+0x3f8>
    163a:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <setSkinMode>
    163e:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <setAirway>
    1642:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <skinMode+0x1>
    1646:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <skinMode>
    164a:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <segmentBlank>
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	81 e3       	ldi	r24, 0x31	; 49
    1652:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1656:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
    165a:	81 11       	cpse	r24, r1
    165c:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <setAirway>
    1660:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <currentPower8>
    1664:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <lastPower8>
    1668:	8d e0       	ldi	r24, 0x0D	; 13
    166a:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    166e:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <currentPower8>
    1672:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <lastPower8>
    1676:	91 30       	cpi	r25, 0x01	; 1
    1678:	99 f5       	brne	.+102    	; 0x16e0 <set_btn()+0x478>
    167a:	81 11       	cpse	r24, r1
    167c:	31 c0       	rjmp	.+98     	; 0x16e0 <set_btn()+0x478>
    167e:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    1682:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <setHumiMode>
    1686:	8f 5f       	subi	r24, 0xFF	; 255
    1688:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <setHumiMode>
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	d1 f4       	brne	.+52     	; 0x16c4 <set_btn()+0x45c>
    1690:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <displaysetHumi>
    1694:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <displaysetHumi+0x1>
    1698:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <displaysetHumi+0x2>
    169c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <displaysetHumi+0x3>
    16a0:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <sendHumi>
    16a4:	90 93 ef 05 	sts	0x05EF, r25	; 0x8005ef <sendHumi+0x1>
    16a8:	a0 93 f0 05 	sts	0x05F0, r26	; 0x8005f0 <sendHumi+0x2>
    16ac:	b0 93 f1 05 	sts	0x05F1, r27	; 0x8005f1 <sendHumi+0x3>
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	80 e3       	ldi	r24, 0x30	; 48
    16b4:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	90 93 e8 05 	sts	0x05E8, r25	; 0x8005e8 <humiMode+0x1>
    16c0:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <humiMode>
    16c4:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <setHumiMode>
    16c8:	83 30       	cpi	r24, 0x03	; 3
    16ca:	51 f4       	brne	.+20     	; 0x16e0 <set_btn()+0x478>
    16cc:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <setHumiMode>
    16d0:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <humiMode+0x1>
    16d4:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <humiMode>
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	80 e3       	ldi	r24, 0x30	; 48
    16dc:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    16e0:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <currentPower12>
    16e4:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <lastPower12>
    16e8:	88 e1       	ldi	r24, 0x18	; 24
    16ea:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    16ee:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <currentPower12>
    16f2:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <lastPower12>
    16f6:	91 30       	cpi	r25, 0x01	; 1
    16f8:	a1 f5       	brne	.+104    	; 0x1762 <set_btn()+0x4fa>
    16fa:	81 11       	cpse	r24, r1
    16fc:	32 c0       	rjmp	.+100    	; 0x1762 <set_btn()+0x4fa>
    16fe:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    1702:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1706:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    170a:	60 93 ba 04 	sts	0x04BA, r22	; 0x8004ba <h>
    170e:	70 93 bb 04 	sts	0x04BB, r23	; 0x8004bb <h+0x1>
    1712:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <h+0x2>
    1716:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <h+0x3>
    171a:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <sunyiValue>
    171e:	90 91 e4 05 	lds	r25, 0x05E4	; 0x8005e4 <sunyiValue+0x1>
    1722:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <last_sunyi_value+0x1>
    1726:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <last_sunyi_value>
    172a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    172e:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    1732:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <h>
    1736:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <h+0x1>
    173a:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <h+0x2>
    173e:	50 91 bd 04 	lds	r21, 0x04BD	; 0x8004bd <h+0x3>
    1742:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e4       	ldi	r19, 0x40	; 64
    174a:	4c e1       	ldi	r20, 0x1C	; 28
    174c:	56 e4       	ldi	r21, 0x46	; 70
    174e:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    1752:	87 ff       	sbrs	r24, 7
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <set_btn()+0x4fa>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <sunyiValue+0x1>
    175e:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <sunyiValue>
    1762:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1766:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    176a:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <h>
    176e:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <h+0x1>
    1772:	40 91 bc 04 	lds	r20, 0x04BC	; 0x8004bc <h+0x2>
    1776:	50 91 bd 04 	lds	r21, 0x04BD	; 0x8004bd <h+0x3>
    177a:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e4       	ldi	r19, 0x40	; 64
    1782:	4c e1       	ldi	r20, 0x1C	; 28
    1784:	56 e4       	ldi	r21, 0x46	; 70
    1786:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    178a:	18 16       	cp	r1, r24
    178c:	44 f4       	brge	.+16     	; 0x179e <set_btn()+0x536>
    178e:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <sunyiValue+0x1>
    1792:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <sunyiValue>
    1796:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <last_sunyi_value+0x1>
    179a:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <last_sunyi_value>
    179e:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <currentPower13>
    17a2:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <lastPower13>
    17a6:	89 e1       	ldi	r24, 0x19	; 25
    17a8:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    17ac:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <currentPower13>
    17b0:	90 91 9a 04 	lds	r25, 0x049A	; 0x80049a <lastPower13>
    17b4:	91 30       	cpi	r25, 0x01	; 1
    17b6:	a9 f4       	brne	.+42     	; 0x17e2 <set_btn()+0x57a>
    17b8:	81 11       	cpse	r24, r1
    17ba:	13 c0       	rjmp	.+38     	; 0x17e2 <set_btn()+0x57a>
    17bc:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <timeBtn>
    17c0:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <setTimerMode>
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <setTimerMode>
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <set_btn()+0x568>
    17ce:	51 c1       	rjmp	.+674    	; 0x1a72 <set_btn()+0x80a>
    17d0:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <timeMode>
    17d4:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <setTimerMode>
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	09 f0       	breq	.+2      	; 0x17de <set_btn()+0x576>
    17dc:	5b c1       	rjmp	.+694    	; 0x1a94 <set_btn()+0x82c>
    17de:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <timeMode>
    17e2:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    17e6:	81 11       	cpse	r24, r1
    17e8:	67 c0       	rjmp	.+206    	; 0x18b8 <set_btn()+0x650>
    17ea:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <set_btn()+0x58c>
    17f2:	cd c0       	rjmp	.+410    	; 0x198e <set_btn()+0x726>
    17f4:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    17f8:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    17fc:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <b>
    1800:	30 91 cb 04 	lds	r19, 0x04CB	; 0x8004cb <b+0x1>
    1804:	40 91 cc 04 	lds	r20, 0x04CC	; 0x8004cc <b+0x2>
    1808:	50 91 cd 04 	lds	r21, 0x04CD	; 0x8004cd <b+0x3>
    180c:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a ef       	ldi	r20, 0xFA	; 250
    1816:	53 e4       	ldi	r21, 0x43	; 67
    1818:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    181c:	18 16       	cp	r1, r24
    181e:	e4 f4       	brge	.+56     	; 0x1858 <set_btn()+0x5f0>
    1820:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <a>
    1824:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <a+0x1>
    1828:	89 2b       	or	r24, r25
    182a:	b1 f4       	brne	.+44     	; 0x1858 <set_btn()+0x5f0>
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	82 e3       	ldi	r24, 0x32	; 50
    1830:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1834:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1838:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    183c:	60 93 ca 04 	sts	0x04CA, r22	; 0x8004ca <b>
    1840:	70 93 cb 04 	sts	0x04CB, r23	; 0x8004cb <b+0x1>
    1844:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <b+0x2>
    1848:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <b+0x3>
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	90 93 cf 04 	sts	0x04CF, r25	; 0x8004cf <a+0x1>
    1854:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <a>
    1858:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    185c:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    1860:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <b>
    1864:	30 91 cb 04 	lds	r19, 0x04CB	; 0x8004cb <b+0x1>
    1868:	40 91 cc 04 	lds	r20, 0x04CC	; 0x8004cc <b+0x2>
    186c:	50 91 cd 04 	lds	r21, 0x04CD	; 0x8004cd <b+0x3>
    1870:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	53 e4       	ldi	r21, 0x43	; 67
    187c:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    1880:	18 16       	cp	r1, r24
    1882:	d4 f4       	brge	.+52     	; 0x18b8 <set_btn()+0x650>
    1884:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <a>
    1888:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <a+0x1>
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	a1 f4       	brne	.+40     	; 0x18b8 <set_btn()+0x650>
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	82 e3       	ldi	r24, 0x32	; 50
    1894:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1898:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    189c:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    18a0:	60 93 ca 04 	sts	0x04CA, r22	; 0x8004ca <b>
    18a4:	70 93 cb 04 	sts	0x04CB, r23	; 0x8004cb <b+0x1>
    18a8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <b+0x2>
    18ac:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <b+0x3>
    18b0:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <a+0x1>
    18b4:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <a>
    18b8:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <setSkinMode>
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	09 f0       	breq	.+2      	; 0x18c2 <set_btn()+0x65a>
    18c0:	66 c0       	rjmp	.+204    	; 0x198e <set_btn()+0x726>
    18c2:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <setAirway>
    18c6:	81 11       	cpse	r24, r1
    18c8:	62 c0       	rjmp	.+196    	; 0x198e <set_btn()+0x726>
    18ca:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    18ce:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    18d2:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <d>
    18d6:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <d+0x1>
    18da:	40 91 c6 04 	lds	r20, 0x04C6	; 0x8004c6 <d+0x2>
    18de:	50 91 c7 04 	lds	r21, 0x04C7	; 0x8004c7 <d+0x3>
    18e2:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a ef       	ldi	r20, 0xFA	; 250
    18ec:	53 e4       	ldi	r21, 0x43	; 67
    18ee:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	e4 f4       	brge	.+56     	; 0x192e <set_btn()+0x6c6>
    18f6:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <c>
    18fa:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <c+0x1>
    18fe:	89 2b       	or	r24, r25
    1900:	b1 f4       	brne	.+44     	; 0x192e <set_btn()+0x6c6>
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	81 e3       	ldi	r24, 0x31	; 49
    1906:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    190a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    190e:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    1912:	60 93 c4 04 	sts	0x04C4, r22	; 0x8004c4 <d>
    1916:	70 93 c5 04 	sts	0x04C5, r23	; 0x8004c5 <d+0x1>
    191a:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <d+0x2>
    191e:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <d+0x3>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <c+0x1>
    192a:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <c>
    192e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1932:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    1936:	20 91 c4 04 	lds	r18, 0x04C4	; 0x8004c4 <d>
    193a:	30 91 c5 04 	lds	r19, 0x04C5	; 0x8004c5 <d+0x1>
    193e:	40 91 c6 04 	lds	r20, 0x04C6	; 0x8004c6 <d+0x2>
    1942:	50 91 c7 04 	lds	r21, 0x04C7	; 0x8004c7 <d+0x3>
    1946:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	53 e4       	ldi	r21, 0x43	; 67
    1952:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    1956:	18 16       	cp	r1, r24
    1958:	d4 f4       	brge	.+52     	; 0x198e <set_btn()+0x726>
    195a:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <c>
    195e:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <c+0x1>
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	a1 f4       	brne	.+40     	; 0x198e <set_btn()+0x726>
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	81 e3       	ldi	r24, 0x31	; 49
    196a:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    196e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1972:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    1976:	60 93 c4 04 	sts	0x04C4, r22	; 0x8004c4 <d>
    197a:	70 93 c5 04 	sts	0x04C5, r23	; 0x8004c5 <d+0x1>
    197e:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <d+0x2>
    1982:	90 93 c7 04 	sts	0x04C7, r25	; 0x8004c7 <d+0x3>
    1986:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <c+0x1>
    198a:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <c>
    198e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <setHumiMode>
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	09 f0       	breq	.+2      	; 0x1998 <set_btn()+0x730>
    1996:	69 c0       	rjmp	.+210    	; 0x1a6a <set_btn()+0x802>
    1998:	80 91 e7 05 	lds	r24, 0x05E7	; 0x8005e7 <humiMode>
    199c:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <humiMode+0x1>
    19a0:	89 2b       	or	r24, r25
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <set_btn()+0x73e>
    19a4:	62 c0       	rjmp	.+196    	; 0x1a6a <set_btn()+0x802>
    19a6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    19aa:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    19ae:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <f>
    19b2:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <f+0x1>
    19b6:	40 91 c0 04 	lds	r20, 0x04C0	; 0x8004c0 <f+0x2>
    19ba:	50 91 c1 04 	lds	r21, 0x04C1	; 0x8004c1 <f+0x3>
    19be:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	53 e4       	ldi	r21, 0x43	; 67
    19ca:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    19ce:	18 16       	cp	r1, r24
    19d0:	e4 f4       	brge	.+56     	; 0x1a0a <set_btn()+0x7a2>
    19d2:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <e>
    19d6:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <e+0x1>
    19da:	89 2b       	or	r24, r25
    19dc:	b1 f4       	brne	.+44     	; 0x1a0a <set_btn()+0x7a2>
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	80 e3       	ldi	r24, 0x30	; 48
    19e2:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    19e6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    19ea:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    19ee:	60 93 be 04 	sts	0x04BE, r22	; 0x8004be <f>
    19f2:	70 93 bf 04 	sts	0x04BF, r23	; 0x8004bf <f+0x1>
    19f6:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <f+0x2>
    19fa:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <f+0x3>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <e+0x1>
    1a06:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <e>
    1a0a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1a0e:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    1a12:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <f>
    1a16:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <f+0x1>
    1a1a:	40 91 c0 04 	lds	r20, 0x04C0	; 0x8004c0 <f+0x2>
    1a1e:	50 91 c1 04 	lds	r21, 0x04C1	; 0x8004c1 <f+0x3>
    1a22:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    1a32:	18 16       	cp	r1, r24
    1a34:	d4 f4       	brge	.+52     	; 0x1a6a <set_btn()+0x802>
    1a36:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <e>
    1a3a:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <e+0x1>
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	a1 f4       	brne	.+40     	; 0x1a6a <set_btn()+0x802>
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	80 e3       	ldi	r24, 0x30	; 48
    1a46:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1a4a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1a4e:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    1a52:	60 93 be 04 	sts	0x04BE, r22	; 0x8004be <f>
    1a56:	70 93 bf 04 	sts	0x04BF, r23	; 0x8004bf <f+0x1>
    1a5a:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <f+0x2>
    1a5e:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <f+0x3>
    1a62:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <e+0x1>
    1a66:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <e>
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	08 95       	ret
    1a72:	82 30       	cpi	r24, 0x02	; 2
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <set_btn()+0x810>
    1a76:	ae ce       	rjmp	.-676    	; 0x17d4 <set_btn()+0x56c>
    1a78:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <timeMode>
    1a7c:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <displaysetTimer1>
    1a80:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <holdTimer1>
    1a84:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <displaysetTimer2>
    1a88:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <holdTimer2>
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <setTimerMode>
    1a92:	a0 ce       	rjmp	.-704    	; 0x17d4 <set_btn()+0x56c>
    1a94:	84 30       	cpi	r24, 0x04	; 4
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <set_btn()+0x832>
    1a98:	a4 ce       	rjmp	.-696    	; 0x17e2 <set_btn()+0x57a>
    1a9a:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <setTimerMode>
    1a9e:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <timeMode>
    1aa2:	9f ce       	rjmp	.-706    	; 0x17e2 <set_btn()+0x57a>

00001aa4 <reset_alarm()>:
_Z11reset_alarmv():
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <currentPower11>
    1aae:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <lastPower11>
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    1ab8:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <currentPower11>
    1abc:	c0 91 9c 04 	lds	r28, 0x049C	; 0x80049c <lastPower11>
    1ac0:	c1 30       	cpi	r28, 0x01	; 1
    1ac2:	39 f5       	brne	.+78     	; 0x1b12 <reset_alarm()+0x6e>
    1ac4:	81 11       	cpse	r24, r1
    1ac6:	25 c0       	rjmp	.+74     	; 0x1b12 <reset_alarm()+0x6e>
    1ac8:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1acc:	00 91 b5 04 	lds	r16, 0x04B5	; 0x8004b5 <p>
    1ad0:	10 91 b6 04 	lds	r17, 0x04B6	; 0x8004b6 <p+0x1>
    1ad4:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <p+0x2>
    1ad8:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <p+0x3>
    1adc:	60 1b       	sub	r22, r16
    1ade:	71 0b       	sbc	r23, r17
    1ae0:	82 0b       	sbc	r24, r18
    1ae2:	93 0b       	sbc	r25, r19
    1ae4:	61 31       	cpi	r22, 0x11	; 17
    1ae6:	77 42       	sbci	r23, 0x27	; 39
    1ae8:	81 05       	cpc	r24, r1
    1aea:	91 05       	cpc	r25, r1
    1aec:	90 f0       	brcs	.+36     	; 0x1b12 <reset_alarm()+0x6e>
    1aee:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <q>
    1af2:	81 11       	cpse	r24, r1
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <reset_alarm()+0x6e>
    1af6:	c0 93 ed 05 	sts	0x05ED, r28	; 0x8005ed <sendAlarm>
    1afa:	c0 93 b4 04 	sts	0x04B4, r28	; 0x8004b4 <q>
    1afe:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1b02:	60 93 b5 04 	sts	0x04B5, r22	; 0x8004b5 <p>
    1b06:	70 93 b6 04 	sts	0x04B6, r23	; 0x8004b6 <p+0x1>
    1b0a:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <p+0x2>
    1b0e:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <p+0x3>
    1b12:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1b16:	00 91 b5 04 	lds	r16, 0x04B5	; 0x8004b5 <p>
    1b1a:	10 91 b6 04 	lds	r17, 0x04B6	; 0x8004b6 <p+0x1>
    1b1e:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <p+0x2>
    1b22:	30 91 b8 04 	lds	r19, 0x04B8	; 0x8004b8 <p+0x3>
    1b26:	60 1b       	sub	r22, r16
    1b28:	71 0b       	sbc	r23, r17
    1b2a:	82 0b       	sbc	r24, r18
    1b2c:	93 0b       	sbc	r25, r19
    1b2e:	61 31       	cpi	r22, 0x11	; 17
    1b30:	77 42       	sbci	r23, 0x27	; 39
    1b32:	81 05       	cpc	r24, r1
    1b34:	91 05       	cpc	r25, r1
    1b36:	90 f0       	brcs	.+36     	; 0x1b5c <reset_alarm()+0xb8>
    1b38:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <q>
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	71 f4       	brne	.+28     	; 0x1b5c <reset_alarm()+0xb8>
    1b40:	10 92 ed 05 	sts	0x05ED, r1	; 0x8005ed <sendAlarm>
    1b44:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <q>
    1b48:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    1b4c:	60 93 b5 04 	sts	0x04B5, r22	; 0x8004b5 <p>
    1b50:	70 93 b6 04 	sts	0x04B6, r23	; 0x8004b6 <p+0x1>
    1b54:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <p+0x2>
    1b58:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <p+0x3>
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <read_error()>:
_Z10read_errorv():
    1b64:	2f 92       	push	r2
    1b66:	3f 92       	push	r3
    1b68:	4f 92       	push	r4
    1b6a:	5f 92       	push	r5
    1b6c:	6f 92       	push	r6
    1b6e:	7f 92       	push	r7
    1b70:	8f 92       	push	r8
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <read_error()+0x26>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <read_error()+0x28>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <error0>
    1b94:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <error0+0x1>
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <read_error()+0x40>
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1ba4:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <error0>
    1ba8:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <error0+0x1>
    1bac:	89 2b       	or	r24, r25
    1bae:	39 f4       	brne	.+14     	; 0x1bbe <read_error()+0x5a>
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	80 e2       	ldi	r24, 0x20	; 32
    1bb4:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1bbe:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <error1>
    1bc2:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <error1+0x1>
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	31 f0       	breq	.+12     	; 0x1bd6 <read_error()+0x72>
    1bca:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <error2>
    1bce:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <error2+0x1>
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <read_error()+0x7a>
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	8d e1       	ldi	r24, 0x1D	; 29
    1bda:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1bde:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <error1>
    1be2:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <error1+0x1>
    1be6:	89 2b       	or	r24, r25
    1be8:	79 f4       	brne	.+30     	; 0x1c08 <read_error()+0xa4>
    1bea:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <error2>
    1bee:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <error2+0x1>
    1bf2:	89 2b       	or	r24, r25
    1bf4:	49 f4       	brne	.+18     	; 0x1c08 <read_error()+0xa4>
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	8d e1       	ldi	r24, 0x1D	; 29
    1bfa:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
    1c04:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1c08:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <error3>
    1c0c:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <error3+0x1>
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	31 f0       	breq	.+12     	; 0x1c20 <read_error()+0xbc>
    1c14:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <error4>
    1c18:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <error4+0x1>
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	21 f4       	brne	.+8      	; 0x1c28 <read_error()+0xc4>
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	8e e1       	ldi	r24, 0x1E	; 30
    1c24:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1c28:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <error3>
    1c2c:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <error3+0x1>
    1c30:	89 2b       	or	r24, r25
    1c32:	79 f4       	brne	.+30     	; 0x1c52 <read_error()+0xee>
    1c34:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <error4>
    1c38:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <error4+0x1>
    1c3c:	89 2b       	or	r24, r25
    1c3e:	49 f4       	brne	.+18     	; 0x1c52 <read_error()+0xee>
    1c40:	61 e0       	ldi	r22, 0x01	; 1
    1c42:	8e e1       	ldi	r24, 0x1E	; 30
    1c44:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_start+0x3>
    1c4e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
    1c52:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <error5>
    1c56:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <error5+0x1>
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	21 f4       	brne	.+8      	; 0x1c66 <read_error()+0x102>
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	8c e1       	ldi	r24, 0x1C	; 28
    1c62:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1c66:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <error5>
    1c6a:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <error5+0x1>
    1c6e:	89 2b       	or	r24, r25
    1c70:	39 f4       	brne	.+14     	; 0x1c80 <read_error()+0x11c>
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	8c e1       	ldi	r24, 0x1C	; 28
    1c76:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_start+0x5>
    1c80:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <error6>
    1c84:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <error6+0x1>
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	21 f4       	brne	.+8      	; 0x1c94 <read_error()+0x130>
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	8f e1       	ldi	r24, 0x1F	; 31
    1c90:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1c94:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <error6>
    1c98:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <error6+0x1>
    1c9c:	89 2b       	or	r24, r25
    1c9e:	39 f4       	brne	.+14     	; 0x1cae <read_error()+0x14a>
    1ca0:	61 e0       	ldi	r22, 0x01	; 1
    1ca2:	8f e1       	ldi	r24, 0x1F	; 31
    1ca4:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <displaysetHumi>
    1cae:	40 91 de 05 	lds	r20, 0x05DE	; 0x8005de <error0>
    1cb2:	50 91 df 05 	lds	r21, 0x05DF	; 0x8005df <error0+0x1>
    1cb6:	5a 83       	std	Y+2, r21	; 0x02
    1cb8:	49 83       	std	Y+1, r20	; 0x01
    1cba:	41 30       	cpi	r20, 0x01	; 1
    1cbc:	51 05       	cpc	r21, r1
    1cbe:	31 f4       	brne	.+12     	; 0x1ccc <read_error()+0x168>
    1cc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <read_error()+0x168>
    1cc8:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <alarm>
    1ccc:	60 91 dc 05 	lds	r22, 0x05DC	; 0x8005dc <error1>
    1cd0:	70 91 dd 05 	lds	r23, 0x05DD	; 0x8005dd <error1+0x1>
    1cd4:	61 30       	cpi	r22, 0x01	; 1
    1cd6:	71 05       	cpc	r23, r1
    1cd8:	31 f4       	brne	.+12     	; 0x1ce6 <read_error()+0x182>
    1cda:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <read_error()+0x182>
    1ce2:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <alarm+0x1>
    1ce6:	a0 91 da 05 	lds	r26, 0x05DA	; 0x8005da <error2>
    1cea:	b0 91 db 05 	lds	r27, 0x05DB	; 0x8005db <error2+0x1>
    1cee:	a1 30       	cpi	r26, 0x01	; 1
    1cf0:	b1 05       	cpc	r27, r1
    1cf2:	31 f4       	brne	.+12     	; 0x1d00 <read_error()+0x19c>
    1cf4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <read_error()+0x19c>
    1cfc:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <alarm+0x2>
    1d00:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <error3>
    1d04:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <error3+0x1>
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	31 f4       	brne	.+12     	; 0x1d1c <read_error()+0x1b8>
    1d10:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1d14:	81 30       	cpi	r24, 0x01	; 1
    1d16:	11 f4       	brne	.+4      	; 0x1d1c <read_error()+0x1b8>
    1d18:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <alarm+0x3>
    1d1c:	00 91 d6 05 	lds	r16, 0x05D6	; 0x8005d6 <error4>
    1d20:	10 91 d7 05 	lds	r17, 0x05D7	; 0x8005d7 <error4+0x1>
    1d24:	01 30       	cpi	r16, 0x01	; 1
    1d26:	11 05       	cpc	r17, r1
    1d28:	31 f4       	brne	.+12     	; 0x1d36 <read_error()+0x1d2>
    1d2a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_start+0x4>
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <read_error()+0x1d2>
    1d32:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <alarm+0x4>
    1d36:	e0 90 d4 05 	lds	r14, 0x05D4	; 0x8005d4 <error5>
    1d3a:	f0 90 d5 05 	lds	r15, 0x05D5	; 0x8005d5 <error5+0x1>
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	e9 16       	cp	r14, r25
    1d42:	f1 04       	cpc	r15, r1
    1d44:	31 f4       	brne	.+12     	; 0x1d52 <read_error()+0x1ee>
    1d46:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__data_start+0x5>
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <read_error()+0x1ee>
    1d4e:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <alarm+0x5>
    1d52:	c0 90 d2 05 	lds	r12, 0x05D2	; 0x8005d2 <error6>
    1d56:	d0 90 d3 05 	lds	r13, 0x05D3	; 0x8005d3 <error6+0x1>
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	c4 16       	cp	r12, r20
    1d5e:	d1 04       	cpc	r13, r1
    1d60:	31 f4       	brne	.+12     	; 0x1d6e <read_error()+0x20a>
    1d62:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <displaysetHumi>
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <read_error()+0x20a>
    1d6a:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <heatedPower>
    1d6e:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <sunyiValue>
    1d72:	90 91 e4 05 	lds	r25, 0x05E4	; 0x8005e4 <sunyiValue+0x1>
    1d76:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <alarm>
    1d7a:	21 30       	cpi	r18, 0x01	; 1
    1d7c:	39 f4       	brne	.+14     	; 0x1d8c <read_error()+0x228>
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	21 f4       	brne	.+8      	; 0x1d8c <read_error()+0x228>
    1d84:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
    1d88:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <alarm>
    1d8c:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <alarm+0x1>
    1d90:	21 30       	cpi	r18, 0x01	; 1
    1d92:	39 f4       	brne	.+14     	; 0x1da2 <read_error()+0x23e>
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <read_error()+0x23e>
    1d9a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
    1d9e:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <alarm+0x1>
    1da2:	20 91 49 04 	lds	r18, 0x0449	; 0x800449 <alarm+0x2>
    1da6:	21 30       	cpi	r18, 0x01	; 1
    1da8:	39 f4       	brne	.+14     	; 0x1db8 <read_error()+0x254>
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <read_error()+0x254>
    1db0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
    1db4:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <alarm+0x2>
    1db8:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <alarm+0x3>
    1dbc:	21 30       	cpi	r18, 0x01	; 1
    1dbe:	39 f4       	brne	.+14     	; 0x1dce <read_error()+0x26a>
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	21 f4       	brne	.+8      	; 0x1dce <read_error()+0x26a>
    1dc6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
    1dca:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <alarm+0x3>
    1dce:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <alarm+0x4>
    1dd2:	21 30       	cpi	r18, 0x01	; 1
    1dd4:	39 f4       	brne	.+14     	; 0x1de4 <read_error()+0x280>
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	91 05       	cpc	r25, r1
    1dda:	21 f4       	brne	.+8      	; 0x1de4 <read_error()+0x280>
    1ddc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_start+0x4>
    1de0:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <alarm+0x4>
    1de4:	20 91 4c 04 	lds	r18, 0x044C	; 0x80044c <alarm+0x5>
    1de8:	21 30       	cpi	r18, 0x01	; 1
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <read_error()+0x296>
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	91 05       	cpc	r25, r1
    1df0:	21 f4       	brne	.+8      	; 0x1dfa <read_error()+0x296>
    1df2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_start+0x5>
    1df6:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <alarm+0x5>
    1dfa:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <heatedPower>
    1dfe:	21 30       	cpi	r18, 0x01	; 1
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <read_error()+0x2ac>
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 05       	cpc	r25, r1
    1e06:	21 f4       	brne	.+8      	; 0x1e10 <read_error()+0x2ac>
    1e08:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <displaysetHumi>
    1e0c:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <heatedPower>
    1e10:	20 91 b0 04 	lds	r18, 0x04B0	; 0x8004b0 <alarmValue>
    1e14:	30 91 b1 04 	lds	r19, 0x04B1	; 0x8004b1 <alarmValue+0x1>
    1e18:	30 90 00 01 	lds	r3, 0x0100	; 0x800100 <__data_start>
    1e1c:	40 90 01 01 	lds	r4, 0x0101	; 0x800101 <__data_start+0x1>
    1e20:	50 90 02 01 	lds	r5, 0x0102	; 0x800102 <__data_start+0x2>
    1e24:	60 90 03 01 	lds	r6, 0x0103	; 0x800103 <__data_start+0x3>
    1e28:	70 90 04 01 	lds	r7, 0x0104	; 0x800104 <__data_start+0x4>
    1e2c:	80 90 05 01 	lds	r8, 0x0105	; 0x800105 <__data_start+0x5>
    1e30:	90 90 b2 04 	lds	r9, 0x04B2	; 0x8004b2 <sirenAlarm>
    1e34:	a0 90 af 04 	lds	r10, 0x04AF	; 0x8004af <alarmValue2>
    1e38:	e7 e4       	ldi	r30, 0x47	; 71
    1e3a:	f4 e0       	ldi	r31, 0x04	; 4
    1e3c:	22 24       	eor	r2, r2
    1e3e:	23 94       	inc	r2
    1e40:	54 e0       	ldi	r21, 0x04	; 4
    1e42:	ee 34       	cpi	r30, 0x4E	; 78
    1e44:	f5 07       	cpc	r31, r21
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <read_error()+0x2e6>
    1e48:	44 c0       	rjmp	.+136    	; 0x1ed2 <read_error()+0x36e>
    1e4a:	b1 90       	ld	r11, Z+
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	b4 12       	cpse	r11, r20
    1e50:	39 c0       	rjmp	.+114    	; 0x1ec4 <read_error()+0x360>
    1e52:	2f 5f       	subi	r18, 0xFF	; 255
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	20 35       	cpi	r18, 0x50	; 80
    1e58:	53 ec       	ldi	r21, 0xC3	; 195
    1e5a:	35 07       	cpc	r19, r21
    1e5c:	20 f0       	brcs	.+8      	; 0x1e66 <read_error()+0x302>
    1e5e:	aa 24       	eor	r10, r10
    1e60:	a3 94       	inc	r10
    1e62:	20 e5       	ldi	r18, 0x50	; 80
    1e64:	33 ec       	ldi	r19, 0xC3	; 195
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	71 f1       	breq	.+92     	; 0x1ec8 <read_error()+0x364>
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	71 f4       	brne	.+28     	; 0x1e8c <read_error()+0x328>
    1e70:	20 92 06 01 	sts	0x0106, r2	; 0x800106 <displaysetHumi>
    1e74:	88 24       	eor	r8, r8
    1e76:	83 94       	inc	r8
    1e78:	77 24       	eor	r7, r7
    1e7a:	73 94       	inc	r7
    1e7c:	66 24       	eor	r6, r6
    1e7e:	63 94       	inc	r6
    1e80:	55 24       	eor	r5, r5
    1e82:	53 94       	inc	r5
    1e84:	44 24       	eor	r4, r4
    1e86:	43 94       	inc	r4
    1e88:	33 24       	eor	r3, r3
    1e8a:	33 94       	inc	r3
    1e8c:	49 81       	ldd	r20, Y+1	; 0x01
    1e8e:	5a 81       	ldd	r21, Y+2	; 0x02
    1e90:	45 2b       	or	r20, r21
    1e92:	b1 f4       	brne	.+44     	; 0x1ec0 <read_error()+0x35c>
    1e94:	61 15       	cp	r22, r1
    1e96:	71 05       	cpc	r23, r1
    1e98:	99 f4       	brne	.+38     	; 0x1ec0 <read_error()+0x35c>
    1e9a:	10 97       	sbiw	r26, 0x00	; 0
    1e9c:	89 f4       	brne	.+34     	; 0x1ec0 <read_error()+0x35c>
    1e9e:	4b 81       	ldd	r20, Y+3	; 0x03
    1ea0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ea2:	45 2b       	or	r20, r21
    1ea4:	69 f4       	brne	.+26     	; 0x1ec0 <read_error()+0x35c>
    1ea6:	01 15       	cp	r16, r1
    1ea8:	11 05       	cpc	r17, r1
    1eaa:	51 f4       	brne	.+20     	; 0x1ec0 <read_error()+0x35c>
    1eac:	e1 14       	cp	r14, r1
    1eae:	f1 04       	cpc	r15, r1
    1eb0:	39 f4       	brne	.+14     	; 0x1ec0 <read_error()+0x35c>
    1eb2:	c1 14       	cp	r12, r1
    1eb4:	d1 04       	cpc	r13, r1
    1eb6:	21 f4       	brne	.+8      	; 0x1ec0 <read_error()+0x35c>
    1eb8:	a1 2c       	mov	r10, r1
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	b1 2c       	mov	r11, r1
    1ec0:	9b 2c       	mov	r9, r11
    1ec2:	be cf       	rjmp	.-132    	; 0x1e40 <read_error()+0x2dc>
    1ec4:	b9 2c       	mov	r11, r9
    1ec6:	cf cf       	rjmp	.-98     	; 0x1e66 <read_error()+0x302>
    1ec8:	a1 2c       	mov	r10, r1
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	b1 2c       	mov	r11, r1
    1ed0:	dd cf       	rjmp	.-70     	; 0x1e8c <read_error()+0x328>
    1ed2:	87 e0       	ldi	r24, 0x07	; 7
    1ed4:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <o>
    1ed8:	90 92 b2 04 	sts	0x04B2, r9	; 0x8004b2 <sirenAlarm>
    1edc:	30 93 b1 04 	sts	0x04B1, r19	; 0x8004b1 <alarmValue+0x1>
    1ee0:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <alarmValue>
    1ee4:	a0 92 af 04 	sts	0x04AF, r10	; 0x8004af <alarmValue2>
    1ee8:	30 92 00 01 	sts	0x0100, r3	; 0x800100 <__data_start>
    1eec:	40 92 01 01 	sts	0x0101, r4	; 0x800101 <__data_start+0x1>
    1ef0:	50 92 02 01 	sts	0x0102, r5	; 0x800102 <__data_start+0x2>
    1ef4:	60 92 03 01 	sts	0x0103, r6	; 0x800103 <__data_start+0x3>
    1ef8:	70 92 04 01 	sts	0x0104, r7	; 0x800104 <__data_start+0x4>
    1efc:	80 92 05 01 	sts	0x0105, r8	; 0x800105 <__data_start+0x5>
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	5f 90       	pop	r5
    1f26:	4f 90       	pop	r4
    1f28:	3f 90       	pop	r3
    1f2a:	2f 90       	pop	r2
    1f2c:	08 95       	ret

00001f2e <nilaidigit()>:
_Z10nilaidigitv():
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	29 97       	sbiw	r28, 0x09	; 9
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	40 90 12 06 	lds	r4, 0x0612	; 0x800612 <chamberTemp0>
    1f62:	50 90 13 06 	lds	r5, 0x0613	; 0x800613 <chamberTemp0+0x1>
    1f66:	60 90 14 06 	lds	r6, 0x0614	; 0x800614 <chamberTemp0+0x2>
    1f6a:	70 90 15 06 	lds	r7, 0x0615	; 0x800615 <chamberTemp0+0x3>
    1f6e:	40 92 02 06 	sts	0x0602, r4	; 0x800602 <displayTemp>
    1f72:	50 92 03 06 	sts	0x0603, r5	; 0x800603 <displayTemp+0x1>
    1f76:	60 92 04 06 	sts	0x0604, r6	; 0x800604 <displayTemp+0x2>
    1f7a:	70 92 05 06 	sts	0x0605, r7	; 0x800605 <displayTemp+0x3>
    1f7e:	80 90 0a 06 	lds	r8, 0x060A	; 0x80060a <skinTemp1>
    1f82:	90 90 0b 06 	lds	r9, 0x060B	; 0x80060b <skinTemp1+0x1>
    1f86:	a0 90 0c 06 	lds	r10, 0x060C	; 0x80060c <skinTemp1+0x2>
    1f8a:	b0 90 0d 06 	lds	r11, 0x060D	; 0x80060d <skinTemp1+0x3>
    1f8e:	80 92 fa 05 	sts	0x05FA, r8	; 0x8005fa <displaySkin>
    1f92:	90 92 fb 05 	sts	0x05FB, r9	; 0x8005fb <displaySkin+0x1>
    1f96:	a0 92 fc 05 	sts	0x05FC, r10	; 0x8005fc <displaySkin+0x2>
    1f9a:	b0 92 fd 05 	sts	0x05FD, r11	; 0x8005fd <displaySkin+0x3>
    1f9e:	c0 90 06 06 	lds	r12, 0x0606	; 0x800606 <skinTemp2>
    1fa2:	d0 90 07 06 	lds	r13, 0x0607	; 0x800607 <skinTemp2+0x1>
    1fa6:	e0 90 08 06 	lds	r14, 0x0608	; 0x800608 <skinTemp2+0x2>
    1faa:	f0 90 09 06 	lds	r15, 0x0609	; 0x800609 <skinTemp2+0x3>
    1fae:	c0 92 f6 05 	sts	0x05F6, r12	; 0x8005f6 <displaySkin2>
    1fb2:	d0 92 f7 05 	sts	0x05F7, r13	; 0x8005f7 <displaySkin2+0x1>
    1fb6:	e0 92 f8 05 	sts	0x05F8, r14	; 0x8005f8 <displaySkin2+0x2>
    1fba:	f0 92 f9 05 	sts	0x05F9, r15	; 0x8005f9 <displaySkin2+0x3>
    1fbe:	80 91 0e 06 	lds	r24, 0x060E	; 0x80060e <humidityMid>
    1fc2:	90 91 0f 06 	lds	r25, 0x060F	; 0x80060f <humidityMid+0x1>
    1fc6:	a0 91 10 06 	lds	r26, 0x0610	; 0x800610 <humidityMid+0x2>
    1fca:	b0 91 11 06 	lds	r27, 0x0611	; 0x800611 <humidityMid+0x3>
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	af 83       	std	Y+7, r26	; 0x07
    1fd4:	b8 87       	std	Y+8, r27	; 0x08
    1fd6:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <displayHumi>
    1fda:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <displayHumi+0x1>
    1fde:	a0 93 00 06 	sts	0x0600, r26	; 0x800600 <displayHumi+0x2>
    1fe2:	b0 93 01 06 	sts	0x0601, r27	; 0x800601 <displayHumi+0x3>
    1fe6:	80 91 17 06 	lds	r24, 0x0617	; 0x800617 <Datatimer1>
    1fea:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <displaysetTimer1>
    1fee:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <Datatimer2>
    1ff2:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <displaysetTimer2>
    1ff6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <displaysetTemp>
    1ffa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <displaysetTemp+0x1>
    1ffe:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <displaysetTemp+0x2>
    2002:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <displaysetTemp+0x3>
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	ab 83       	std	Y+3, r26	; 0x03
    200c:	bc 83       	std	Y+4, r27	; 0x04
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    201e:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2022:	69 87       	std	Y+9, r22	; 0x09
    2024:	60 93 65 04 	sts	0x0465, r22	; 0x800465 <digit1>
    2028:	aa e0       	ldi	r26, 0x0A	; 10
    202a:	6a 9f       	mul	r22, r26
    202c:	b0 01       	movw	r22, r0
    202e:	11 24       	eor	r1, r1
    2030:	07 2e       	mov	r0, r23
    2032:	00 0c       	add	r0, r0
    2034:	88 0b       	sbc	r24, r24
    2036:	99 0b       	sbc	r25, r25
    2038:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    203c:	9b 01       	movw	r18, r22
    203e:	ac 01       	movw	r20, r24
    2040:	69 81       	ldd	r22, Y+1	; 0x01
    2042:	7a 81       	ldd	r23, Y+2	; 0x02
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    204c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2050:	06 2f       	mov	r16, r22
    2052:	60 93 64 04 	sts	0x0464, r22	; 0x800464 <digit2>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	69 81       	ldd	r22, Y+1	; 0x01
    2060:	7a 81       	ldd	r23, Y+2	; 0x02
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    206a:	69 83       	std	Y+1, r22	; 0x01
    206c:	7a 83       	std	Y+2, r23	; 0x02
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	14 e6       	ldi	r17, 0x64	; 100
    2074:	b9 85       	ldd	r27, Y+9	; 0x09
    2076:	b1 9f       	mul	r27, r17
    2078:	b0 01       	movw	r22, r0
    207a:	11 24       	eor	r1, r1
    207c:	07 2e       	mov	r0, r23
    207e:	00 0c       	add	r0, r0
    2080:	88 0b       	sbc	r24, r24
    2082:	99 0b       	sbc	r25, r25
    2084:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	69 81       	ldd	r22, Y+1	; 0x01
    208e:	7a 81       	ldd	r23, Y+2	; 0x02
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2098:	69 83       	std	Y+1, r22	; 0x01
    209a:	7a 83       	std	Y+2, r23	; 0x02
    209c:	8b 83       	std	Y+3, r24	; 0x03
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	2a e0       	ldi	r18, 0x0A	; 10
    20a2:	02 9f       	mul	r16, r18
    20a4:	b0 01       	movw	r22, r0
    20a6:	11 24       	eor	r1, r1
    20a8:	07 2e       	mov	r0, r23
    20aa:	00 0c       	add	r0, r0
    20ac:	88 0b       	sbc	r24, r24
    20ae:	99 0b       	sbc	r25, r25
    20b0:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    20b4:	9b 01       	movw	r18, r22
    20b6:	ac 01       	movw	r20, r24
    20b8:	69 81       	ldd	r22, Y+1	; 0x01
    20ba:	7a 81       	ldd	r23, Y+2	; 0x02
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    20c4:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    20c8:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <digit3>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	c3 01       	movw	r24, r6
    20d6:	b2 01       	movw	r22, r4
    20d8:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    20dc:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    20e0:	69 83       	std	Y+1, r22	; 0x01
    20e2:	60 93 62 04 	sts	0x0462, r22	; 0x800462 <digit4>
    20e6:	9a e0       	ldi	r25, 0x0A	; 10
    20e8:	69 9f       	mul	r22, r25
    20ea:	b0 01       	movw	r22, r0
    20ec:	11 24       	eor	r1, r1
    20ee:	07 2e       	mov	r0, r23
    20f0:	00 0c       	add	r0, r0
    20f2:	88 0b       	sbc	r24, r24
    20f4:	99 0b       	sbc	r25, r25
    20f6:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    20fa:	9b 01       	movw	r18, r22
    20fc:	ac 01       	movw	r20, r24
    20fe:	c3 01       	movw	r24, r6
    2100:	b2 01       	movw	r22, r4
    2102:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2106:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    210a:	06 2f       	mov	r16, r22
    210c:	60 93 61 04 	sts	0x0461, r22	; 0x800461 <digit5>
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e2       	ldi	r20, 0x20	; 32
    2116:	51 e4       	ldi	r21, 0x41	; 65
    2118:	c3 01       	movw	r24, r6
    211a:	b2 01       	movw	r22, r4
    211c:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    2120:	2b 01       	movw	r4, r22
    2122:	3c 01       	movw	r6, r24
    2124:	a9 81       	ldd	r26, Y+1	; 0x01
    2126:	a1 9f       	mul	r26, r17
    2128:	b0 01       	movw	r22, r0
    212a:	11 24       	eor	r1, r1
    212c:	07 2e       	mov	r0, r23
    212e:	00 0c       	add	r0, r0
    2130:	88 0b       	sbc	r24, r24
    2132:	99 0b       	sbc	r25, r25
    2134:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    2138:	9b 01       	movw	r18, r22
    213a:	ac 01       	movw	r20, r24
    213c:	c3 01       	movw	r24, r6
    213e:	b2 01       	movw	r22, r4
    2140:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2144:	2b 01       	movw	r4, r22
    2146:	3c 01       	movw	r6, r24
    2148:	ba e0       	ldi	r27, 0x0A	; 10
    214a:	0b 9f       	mul	r16, r27
    214c:	b0 01       	movw	r22, r0
    214e:	11 24       	eor	r1, r1
    2150:	07 2e       	mov	r0, r23
    2152:	00 0c       	add	r0, r0
    2154:	88 0b       	sbc	r24, r24
    2156:	99 0b       	sbc	r25, r25
    2158:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    215c:	9b 01       	movw	r18, r22
    215e:	ac 01       	movw	r20, r24
    2160:	c3 01       	movw	r24, r6
    2162:	b2 01       	movw	r22, r4
    2164:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2168:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    216c:	60 93 60 04 	sts	0x0460, r22	; 0x800460 <digit6>
    2170:	40 90 0a 01 	lds	r4, 0x010A	; 0x80010a <displaysetSkin>
    2174:	50 90 0b 01 	lds	r5, 0x010B	; 0x80010b <displaysetSkin+0x1>
    2178:	60 90 0c 01 	lds	r6, 0x010C	; 0x80010c <displaysetSkin+0x2>
    217c:	70 90 0d 01 	lds	r7, 0x010D	; 0x80010d <displaysetSkin+0x3>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	c3 01       	movw	r24, r6
    218a:	b2 01       	movw	r22, r4
    218c:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    2190:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2194:	69 83       	std	Y+1, r22	; 0x01
    2196:	60 93 5f 04 	sts	0x045F, r22	; 0x80045f <digit7>
    219a:	26 2f       	mov	r18, r22
    219c:	8a e0       	ldi	r24, 0x0A	; 10
    219e:	28 9f       	mul	r18, r24
    21a0:	b0 01       	movw	r22, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	07 2e       	mov	r0, r23
    21a6:	00 0c       	add	r0, r0
    21a8:	88 0b       	sbc	r24, r24
    21aa:	99 0b       	sbc	r25, r25
    21ac:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    21b0:	9b 01       	movw	r18, r22
    21b2:	ac 01       	movw	r20, r24
    21b4:	c3 01       	movw	r24, r6
    21b6:	b2 01       	movw	r22, r4
    21b8:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    21bc:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    21c0:	06 2f       	mov	r16, r22
    21c2:	60 93 5e 04 	sts	0x045E, r22	; 0x80045e <digit8>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	c3 01       	movw	r24, r6
    21d0:	b2 01       	movw	r22, r4
    21d2:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    21d6:	2b 01       	movw	r4, r22
    21d8:	3c 01       	movw	r6, r24
    21da:	99 81       	ldd	r25, Y+1	; 0x01
    21dc:	91 9f       	mul	r25, r17
    21de:	b0 01       	movw	r22, r0
    21e0:	11 24       	eor	r1, r1
    21e2:	07 2e       	mov	r0, r23
    21e4:	00 0c       	add	r0, r0
    21e6:	88 0b       	sbc	r24, r24
    21e8:	99 0b       	sbc	r25, r25
    21ea:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    21ee:	9b 01       	movw	r18, r22
    21f0:	ac 01       	movw	r20, r24
    21f2:	c3 01       	movw	r24, r6
    21f4:	b2 01       	movw	r22, r4
    21f6:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    21fa:	2b 01       	movw	r4, r22
    21fc:	3c 01       	movw	r6, r24
    21fe:	aa e0       	ldi	r26, 0x0A	; 10
    2200:	0a 9f       	mul	r16, r26
    2202:	b0 01       	movw	r22, r0
    2204:	11 24       	eor	r1, r1
    2206:	07 2e       	mov	r0, r23
    2208:	00 0c       	add	r0, r0
    220a:	88 0b       	sbc	r24, r24
    220c:	99 0b       	sbc	r25, r25
    220e:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	c3 01       	movw	r24, r6
    2218:	b2 01       	movw	r22, r4
    221a:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    221e:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2222:	60 93 5d 04 	sts	0x045D, r22	; 0x80045d <digit9>
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	c5 01       	movw	r24, r10
    2230:	b4 01       	movw	r22, r8
    2232:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    2236:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    223a:	69 83       	std	Y+1, r22	; 0x01
    223c:	60 93 5c 04 	sts	0x045C, r22	; 0x80045c <digit10>
    2240:	2a e0       	ldi	r18, 0x0A	; 10
    2242:	62 9f       	mul	r22, r18
    2244:	b0 01       	movw	r22, r0
    2246:	11 24       	eor	r1, r1
    2248:	07 2e       	mov	r0, r23
    224a:	00 0c       	add	r0, r0
    224c:	88 0b       	sbc	r24, r24
    224e:	99 0b       	sbc	r25, r25
    2250:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    2254:	9b 01       	movw	r18, r22
    2256:	ac 01       	movw	r20, r24
    2258:	c5 01       	movw	r24, r10
    225a:	b4 01       	movw	r22, r8
    225c:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2260:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2264:	06 2f       	mov	r16, r22
    2266:	60 93 5b 04 	sts	0x045B, r22	; 0x80045b <digit11>
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e2       	ldi	r20, 0x20	; 32
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	c5 01       	movw	r24, r10
    2274:	b4 01       	movw	r22, r8
    2276:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    227a:	4b 01       	movw	r8, r22
    227c:	5c 01       	movw	r10, r24
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	81 9f       	mul	r24, r17
    2282:	b0 01       	movw	r22, r0
    2284:	11 24       	eor	r1, r1
    2286:	07 2e       	mov	r0, r23
    2288:	00 0c       	add	r0, r0
    228a:	88 0b       	sbc	r24, r24
    228c:	99 0b       	sbc	r25, r25
    228e:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    2292:	9b 01       	movw	r18, r22
    2294:	ac 01       	movw	r20, r24
    2296:	c5 01       	movw	r24, r10
    2298:	b4 01       	movw	r22, r8
    229a:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    229e:	4b 01       	movw	r8, r22
    22a0:	5c 01       	movw	r10, r24
    22a2:	9a e0       	ldi	r25, 0x0A	; 10
    22a4:	09 9f       	mul	r16, r25
    22a6:	b0 01       	movw	r22, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	07 2e       	mov	r0, r23
    22ac:	00 0c       	add	r0, r0
    22ae:	88 0b       	sbc	r24, r24
    22b0:	99 0b       	sbc	r25, r25
    22b2:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    22b6:	9b 01       	movw	r18, r22
    22b8:	ac 01       	movw	r20, r24
    22ba:	c5 01       	movw	r24, r10
    22bc:	b4 01       	movw	r22, r8
    22be:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    22c2:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    22c6:	60 93 5a 04 	sts	0x045A, r22	; 0x80045a <digit12>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	c7 01       	movw	r24, r14
    22d4:	b6 01       	movw	r22, r12
    22d6:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    22da:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    22de:	06 2f       	mov	r16, r22
    22e0:	60 93 59 04 	sts	0x0459, r22	; 0x800459 <digit13>
    22e4:	aa e0       	ldi	r26, 0x0A	; 10
    22e6:	6a 9f       	mul	r22, r26
    22e8:	b0 01       	movw	r22, r0
    22ea:	11 24       	eor	r1, r1
    22ec:	07 2e       	mov	r0, r23
    22ee:	00 0c       	add	r0, r0
    22f0:	88 0b       	sbc	r24, r24
    22f2:	99 0b       	sbc	r25, r25
    22f4:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	c7 01       	movw	r24, r14
    22fe:	b6 01       	movw	r22, r12
    2300:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2304:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2308:	69 83       	std	Y+1, r22	; 0x01
    230a:	60 93 58 04 	sts	0x0458, r22	; 0x800458 <digit14>
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	c7 01       	movw	r24, r14
    2318:	b6 01       	movw	r22, r12
    231a:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    231e:	6b 01       	movw	r12, r22
    2320:	7c 01       	movw	r14, r24
    2322:	01 9f       	mul	r16, r17
    2324:	b0 01       	movw	r22, r0
    2326:	11 24       	eor	r1, r1
    2328:	07 2e       	mov	r0, r23
    232a:	00 0c       	add	r0, r0
    232c:	88 0b       	sbc	r24, r24
    232e:	99 0b       	sbc	r25, r25
    2330:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    2334:	9b 01       	movw	r18, r22
    2336:	ac 01       	movw	r20, r24
    2338:	c7 01       	movw	r24, r14
    233a:	b6 01       	movw	r22, r12
    233c:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2340:	6b 01       	movw	r12, r22
    2342:	7c 01       	movw	r14, r24
    2344:	b9 81       	ldd	r27, Y+1	; 0x01
    2346:	2a e0       	ldi	r18, 0x0A	; 10
    2348:	b2 9f       	mul	r27, r18
    234a:	b0 01       	movw	r22, r0
    234c:	11 24       	eor	r1, r1
    234e:	07 2e       	mov	r0, r23
    2350:	00 0c       	add	r0, r0
    2352:	88 0b       	sbc	r24, r24
    2354:	99 0b       	sbc	r25, r25
    2356:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    235a:	9b 01       	movw	r18, r22
    235c:	ac 01       	movw	r20, r24
    235e:	c7 01       	movw	r24, r14
    2360:	b6 01       	movw	r22, r12
    2362:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    2366:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    236a:	60 93 57 04 	sts	0x0457, r22	; 0x800457 <digit15>
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	6d 81       	ldd	r22, Y+5	; 0x05
    2378:	7e 81       	ldd	r23, Y+6	; 0x06
    237a:	8f 81       	ldd	r24, Y+7	; 0x07
    237c:	98 85       	ldd	r25, Y+8	; 0x08
    237e:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    2382:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2386:	60 93 56 04 	sts	0x0456, r22	; 0x800456 <digit16>
    238a:	8a e0       	ldi	r24, 0x0A	; 10
    238c:	68 9f       	mul	r22, r24
    238e:	b0 01       	movw	r22, r0
    2390:	11 24       	eor	r1, r1
    2392:	07 2e       	mov	r0, r23
    2394:	00 0c       	add	r0, r0
    2396:	88 0b       	sbc	r24, r24
    2398:	99 0b       	sbc	r25, r25
    239a:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    239e:	9b 01       	movw	r18, r22
    23a0:	ac 01       	movw	r20, r24
    23a2:	6d 81       	ldd	r22, Y+5	; 0x05
    23a4:	7e 81       	ldd	r23, Y+6	; 0x06
    23a6:	8f 81       	ldd	r24, Y+7	; 0x07
    23a8:	98 85       	ldd	r25, Y+8	; 0x08
    23aa:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    23ae:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    23b2:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <digit17>
    23b6:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <displaysetHumi>
    23ba:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <displaysetHumi+0x1>
    23be:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <displaysetHumi+0x2>
    23c2:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <displaysetHumi+0x3>
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	c7 01       	movw	r24, r14
    23d0:	b6 01       	movw	r22, r12
    23d2:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <__divsf3>
    23d6:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    23da:	60 93 54 04 	sts	0x0454, r22	; 0x800454 <digit18>
    23de:	9a e0       	ldi	r25, 0x0A	; 10
    23e0:	69 9f       	mul	r22, r25
    23e2:	b0 01       	movw	r22, r0
    23e4:	11 24       	eor	r1, r1
    23e6:	07 2e       	mov	r0, r23
    23e8:	00 0c       	add	r0, r0
    23ea:	88 0b       	sbc	r24, r24
    23ec:	99 0b       	sbc	r25, r25
    23ee:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    23f2:	9b 01       	movw	r18, r22
    23f4:	ac 01       	movw	r20, r24
    23f6:	c7 01       	movw	r24, r14
    23f8:	b6 01       	movw	r22, r12
    23fa:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    23fe:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2402:	60 93 53 04 	sts	0x0453, r22	; 0x800453 <digit19>
    2406:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <timeMode>
    240a:	81 11       	cpse	r24, r1
    240c:	2d c0       	rjmp	.+90     	; 0x2468 <nilaidigit()+0x53a>
    240e:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <digit20>
    2412:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <digit21>
    2416:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <digit22>
    241a:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <digit23>
    241e:	00 e0       	ldi	r16, 0x00	; 0
    2420:	2d e2       	ldi	r18, 0x2D	; 45
    2422:	42 e0       	ldi	r20, 0x02	; 2
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	8a e1       	ldi	r24, 0x1A	; 26
    242c:	96 e0       	ldi	r25, 0x06	; 6
    242e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2432:	2d e2       	ldi	r18, 0x2D	; 45
    2434:	46 e0       	ldi	r20, 0x06	; 6
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	8a e1       	ldi	r24, 0x1A	; 26
    243e:	96 e0       	ldi	r25, 0x06	; 6
    2440:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2444:	2d e2       	ldi	r18, 0x2D	; 45
    2446:	44 e0       	ldi	r20, 0x04	; 4
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	8a e1       	ldi	r24, 0x1A	; 26
    2450:	96 e0       	ldi	r25, 0x06	; 6
    2452:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2456:	2d e2       	ldi	r18, 0x2D	; 45
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	8a e1       	ldi	r24, 0x1A	; 26
    2462:	96 e0       	ldi	r25, 0x06	; 6
    2464:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2468:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <timeMode>
    246c:	81 30       	cpi	r24, 0x01	; 1
    246e:	09 f0       	breq	.+2      	; 0x2472 <nilaidigit()+0x544>
    2470:	45 c0       	rjmp	.+138    	; 0x24fc <nilaidigit()+0x5ce>
    2472:	00 e0       	ldi	r16, 0x00	; 0
    2474:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <digit20>
    2478:	42 e0       	ldi	r20, 0x02	; 2
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	70 e0       	ldi	r23, 0x00	; 0
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	8a e1       	ldi	r24, 0x1A	; 26
    2482:	96 e0       	ldi	r25, 0x06	; 6
    2484:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2488:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <digit21>
    248c:	46 e0       	ldi	r20, 0x06	; 6
    248e:	50 e0       	ldi	r21, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	60 e0       	ldi	r22, 0x00	; 0
    2494:	8a e1       	ldi	r24, 0x1A	; 26
    2496:	96 e0       	ldi	r25, 0x06	; 6
    2498:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    249c:	01 e0       	ldi	r16, 0x01	; 1
    249e:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <digit22>
    24a2:	44 e0       	ldi	r20, 0x04	; 4
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	8a e1       	ldi	r24, 0x1A	; 26
    24ac:	96 e0       	ldi	r25, 0x06	; 6
    24ae:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    24b2:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <digit23>
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	8a e1       	ldi	r24, 0x1A	; 26
    24c0:	96 e0       	ldi	r25, 0x06	; 6
    24c2:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    24c6:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <displaysetTimer1>
    24ca:	5a e0       	ldi	r21, 0x0A	; 10
    24cc:	82 2f       	mov	r24, r18
    24ce:	65 2f       	mov	r22, r21
    24d0:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <__udivmodqi4>
    24d4:	48 2f       	mov	r20, r24
    24d6:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <digit20>
    24da:	30 91 18 06 	lds	r19, 0x0618	; 0x800618 <displaysetTimer2>
    24de:	83 2f       	mov	r24, r19
    24e0:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <__udivmodqi4>
    24e4:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <digit22>
    24e8:	3a 30       	cpi	r19, 0x0A	; 10
    24ea:	08 f0       	brcs	.+2      	; 0x24ee <nilaidigit()+0x5c0>
    24ec:	c2 c0       	rjmp	.+388    	; 0x2672 <nilaidigit()+0x744>
    24ee:	30 93 4f 04 	sts	0x044F, r19	; 0x80044f <digit23>
    24f2:	2a 30       	cpi	r18, 0x0A	; 10
    24f4:	08 f0       	brcs	.+2      	; 0x24f8 <nilaidigit()+0x5ca>
    24f6:	c2 c0       	rjmp	.+388    	; 0x267c <nilaidigit()+0x74e>
    24f8:	20 93 51 04 	sts	0x0451, r18	; 0x800451 <digit21>
    24fc:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <timeMode>
    2500:	83 30       	cpi	r24, 0x03	; 3
    2502:	09 f0       	breq	.+2      	; 0x2506 <nilaidigit()+0x5d8>
    2504:	9f c0       	rjmp	.+318    	; 0x2644 <nilaidigit()+0x716>
    2506:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <holdTimer1>
    250a:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <displaysetTimer1>
    250e:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <holdTimer2>
    2512:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <displaysetTimer2>
    2516:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    251a:	00 91 ab 04 	lds	r16, 0x04AB	; 0x8004ab <dpTimer>
    251e:	10 91 ac 04 	lds	r17, 0x04AC	; 0x8004ac <dpTimer+0x1>
    2522:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <dpTimer+0x2>
    2526:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <dpTimer+0x3>
    252a:	60 1b       	sub	r22, r16
    252c:	71 0b       	sbc	r23, r17
    252e:	82 0b       	sbc	r24, r18
    2530:	93 0b       	sbc	r25, r19
    2532:	65 3f       	cpi	r22, 0xF5	; 245
    2534:	71 40       	sbci	r23, 0x01	; 1
    2536:	81 05       	cpc	r24, r1
    2538:	91 05       	cpc	r25, r1
    253a:	d8 f1       	brcs	.+118    	; 0x25b2 <nilaidigit()+0x684>
    253c:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <loopTimer>
    2540:	81 11       	cpse	r24, r1
    2542:	37 c0       	rjmp	.+110    	; 0x25b2 <nilaidigit()+0x684>
    2544:	00 e0       	ldi	r16, 0x00	; 0
    2546:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <digit20>
    254a:	42 e0       	ldi	r20, 0x02	; 2
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	8a e1       	ldi	r24, 0x1A	; 26
    2554:	96 e0       	ldi	r25, 0x06	; 6
    2556:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    255a:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <digit21>
    255e:	46 e0       	ldi	r20, 0x06	; 6
    2560:	50 e0       	ldi	r21, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	8a e1       	ldi	r24, 0x1A	; 26
    2568:	96 e0       	ldi	r25, 0x06	; 6
    256a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    256e:	01 e0       	ldi	r16, 0x01	; 1
    2570:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <digit22>
    2574:	44 e0       	ldi	r20, 0x04	; 4
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	8a e1       	ldi	r24, 0x1A	; 26
    257e:	96 e0       	ldi	r25, 0x06	; 6
    2580:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2584:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <digit23>
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	8a e1       	ldi	r24, 0x1A	; 26
    2592:	96 e0       	ldi	r25, 0x06	; 6
    2594:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2598:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    259c:	60 93 ab 04 	sts	0x04AB, r22	; 0x8004ab <dpTimer>
    25a0:	70 93 ac 04 	sts	0x04AC, r23	; 0x8004ac <dpTimer+0x1>
    25a4:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <dpTimer+0x2>
    25a8:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <dpTimer+0x3>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <loopTimer>
    25b2:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    25b6:	00 91 ab 04 	lds	r16, 0x04AB	; 0x8004ab <dpTimer>
    25ba:	10 91 ac 04 	lds	r17, 0x04AC	; 0x8004ac <dpTimer+0x1>
    25be:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <dpTimer+0x2>
    25c2:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <dpTimer+0x3>
    25c6:	60 1b       	sub	r22, r16
    25c8:	71 0b       	sbc	r23, r17
    25ca:	82 0b       	sbc	r24, r18
    25cc:	93 0b       	sbc	r25, r19
    25ce:	65 3f       	cpi	r22, 0xF5	; 245
    25d0:	71 40       	sbci	r23, 0x01	; 1
    25d2:	81 05       	cpc	r24, r1
    25d4:	91 05       	cpc	r25, r1
    25d6:	b0 f1       	brcs	.+108    	; 0x2644 <nilaidigit()+0x716>
    25d8:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <loopTimer>
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	91 f5       	brne	.+100    	; 0x2644 <nilaidigit()+0x716>
    25e0:	00 e0       	ldi	r16, 0x00	; 0
    25e2:	2b e6       	ldi	r18, 0x6B	; 107
    25e4:	42 e0       	ldi	r20, 0x02	; 2
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	8a e1       	ldi	r24, 0x1A	; 26
    25ee:	96 e0       	ldi	r25, 0x06	; 6
    25f0:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    25f4:	2b e6       	ldi	r18, 0x6B	; 107
    25f6:	46 e0       	ldi	r20, 0x06	; 6
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	8a e1       	ldi	r24, 0x1A	; 26
    2600:	96 e0       	ldi	r25, 0x06	; 6
    2602:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2606:	01 e0       	ldi	r16, 0x01	; 1
    2608:	2b e6       	ldi	r18, 0x6B	; 107
    260a:	44 e0       	ldi	r20, 0x04	; 4
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	8a e1       	ldi	r24, 0x1A	; 26
    2614:	96 e0       	ldi	r25, 0x06	; 6
    2616:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    261a:	2b e6       	ldi	r18, 0x6B	; 107
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	8a e1       	ldi	r24, 0x1A	; 26
    2626:	96 e0       	ldi	r25, 0x06	; 6
    2628:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    262c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2630:	60 93 ab 04 	sts	0x04AB, r22	; 0x8004ab <dpTimer>
    2634:	70 93 ac 04 	sts	0x04AC, r23	; 0x8004ac <dpTimer+0x1>
    2638:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <dpTimer+0x2>
    263c:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <dpTimer+0x3>
    2640:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <loopTimer>
    2644:	29 96       	adiw	r28, 0x09	; 9
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	df 90       	pop	r13
    265e:	cf 90       	pop	r12
    2660:	bf 90       	pop	r11
    2662:	af 90       	pop	r10
    2664:	9f 90       	pop	r9
    2666:	8f 90       	pop	r8
    2668:	7f 90       	pop	r7
    266a:	6f 90       	pop	r6
    266c:	5f 90       	pop	r5
    266e:	4f 90       	pop	r4
    2670:	08 95       	ret
    2672:	96 ef       	ldi	r25, 0xF6	; 246
    2674:	89 9f       	mul	r24, r25
    2676:	30 0d       	add	r19, r0
    2678:	11 24       	eor	r1, r1
    267a:	39 cf       	rjmp	.-398    	; 0x24ee <nilaidigit()+0x5c0>
    267c:	a6 ef       	ldi	r26, 0xF6	; 246
    267e:	4a 9f       	mul	r20, r26
    2680:	20 0d       	add	r18, r0
    2682:	11 24       	eor	r1, r1
    2684:	39 cf       	rjmp	.-398    	; 0x24f8 <nilaidigit()+0x5ca>

00002686 <display_digit()>:
_Z13display_digitv():
    2686:	af 92       	push	r10
    2688:	bf 92       	push	r11
    268a:	cf 92       	push	r12
    268c:	df 92       	push	r13
    268e:	ef 92       	push	r14
    2690:	ff 92       	push	r15
    2692:	0f 93       	push	r16
    2694:	1f 93       	push	r17
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <nilaidigit()>
    269e:	00 e0       	ldi	r16, 0x00	; 0
    26a0:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <digit4>
    26a4:	42 e0       	ldi	r20, 0x02	; 2
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	61 e0       	ldi	r22, 0x01	; 1
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	8a e1       	ldi	r24, 0x1A	; 26
    26ae:	96 e0       	ldi	r25, 0x06	; 6
    26b0:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    26b4:	01 e0       	ldi	r16, 0x01	; 1
    26b6:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <digit5>
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	70 e0       	ldi	r23, 0x00	; 0
    26c2:	8a e1       	ldi	r24, 0x1A	; 26
    26c4:	96 e0       	ldi	r25, 0x06	; 6
    26c6:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    26ca:	00 e0       	ldi	r16, 0x00	; 0
    26cc:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <digit6>
    26d0:	45 e0       	ldi	r20, 0x05	; 5
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	61 e0       	ldi	r22, 0x01	; 1
    26d6:	70 e0       	ldi	r23, 0x00	; 0
    26d8:	8a e1       	ldi	r24, 0x1A	; 26
    26da:	96 e0       	ldi	r25, 0x06	; 6
    26dc:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    26e0:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <digit10>
    26e4:	50 e0       	ldi	r21, 0x00	; 0
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	61 e0       	ldi	r22, 0x01	; 1
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	8a e1       	ldi	r24, 0x1A	; 26
    26ee:	96 e0       	ldi	r25, 0x06	; 6
    26f0:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    26f4:	01 e0       	ldi	r16, 0x01	; 1
    26f6:	20 91 5b 04 	lds	r18, 0x045B	; 0x80045b <digit11>
    26fa:	44 e0       	ldi	r20, 0x04	; 4
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	61 e0       	ldi	r22, 0x01	; 1
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	8a e1       	ldi	r24, 0x1A	; 26
    2704:	96 e0       	ldi	r25, 0x06	; 6
    2706:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    270a:	00 e0       	ldi	r16, 0x00	; 0
    270c:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <digit12>
    2710:	46 e0       	ldi	r20, 0x06	; 6
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	70 e0       	ldi	r23, 0x00	; 0
    2718:	8a e1       	ldi	r24, 0x1A	; 26
    271a:	96 e0       	ldi	r25, 0x06	; 6
    271c:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2720:	20 91 59 04 	lds	r18, 0x0459	; 0x800459 <digit13>
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	8a e1       	ldi	r24, 0x1A	; 26
    272e:	96 e0       	ldi	r25, 0x06	; 6
    2730:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2734:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <digit15>
    2738:	45 e0       	ldi	r20, 0x05	; 5
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	8a e1       	ldi	r24, 0x1A	; 26
    2742:	96 e0       	ldi	r25, 0x06	; 6
    2744:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2748:	01 e0       	ldi	r16, 0x01	; 1
    274a:	20 91 58 04 	lds	r18, 0x0458	; 0x800458 <digit14>
    274e:	47 e0       	ldi	r20, 0x07	; 7
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	8a e1       	ldi	r24, 0x1A	; 26
    2758:	96 e0       	ldi	r25, 0x06	; 6
    275a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    275e:	00 e0       	ldi	r16, 0x00	; 0
    2760:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <digit16>
    2764:	43 e0       	ldi	r20, 0x03	; 3
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	70 e0       	ldi	r23, 0x00	; 0
    276c:	8a e1       	ldi	r24, 0x1A	; 26
    276e:	96 e0       	ldi	r25, 0x06	; 6
    2770:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2774:	20 91 55 04 	lds	r18, 0x0455	; 0x800455 <digit17>
    2778:	47 e0       	ldi	r20, 0x07	; 7
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	61 e0       	ldi	r22, 0x01	; 1
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	8a e1       	ldi	r24, 0x1A	; 26
    2782:	96 e0       	ldi	r25, 0x06	; 6
    2784:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2788:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <digit18>
    278c:	43 e0       	ldi	r20, 0x03	; 3
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	62 e0       	ldi	r22, 0x02	; 2
    2792:	70 e0       	ldi	r23, 0x00	; 0
    2794:	8a e1       	ldi	r24, 0x1A	; 26
    2796:	96 e0       	ldi	r25, 0x06	; 6
    2798:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    279c:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <digit19>
    27a0:	42 e0       	ldi	r20, 0x02	; 2
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	62 e0       	ldi	r22, 0x02	; 2
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	8a e1       	ldi	r24, 0x1A	; 26
    27aa:	96 e0       	ldi	r25, 0x06	; 6
    27ac:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    27b0:	60 91 4e 04 	lds	r22, 0x044E	; 0x80044e <heaterPwm>
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	1f 92       	push	r1
    27bc:	1f 92       	push	r1
    27be:	1f 92       	push	r1
    27c0:	2a e0       	ldi	r18, 0x0A	; 10
    27c2:	2f 93       	push	r18
    27c4:	a1 2c       	mov	r10, r1
    27c6:	b1 2c       	mov	r11, r1
    27c8:	65 01       	movw	r12, r10
    27ca:	e1 2c       	mov	r14, r1
    27cc:	f1 2c       	mov	r15, r1
    27ce:	87 01       	movw	r16, r14
    27d0:	ea 94       	dec	r14
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	a9 01       	movw	r20, r18
    27d8:	0e 94 10 2c 	call	0x5820	; 0x5820 <map(long, long, long, long, long)>
    27dc:	60 93 4d 04 	sts	0x044D, r22	; 0x80044d <heatedPower>
    27e0:	02 e1       	ldi	r16, 0x12	; 18
    27e2:	11 e0       	ldi	r17, 0x01	; 1
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	d0 e0       	ldi	r29, 0x00	; 0
    27ee:	c0 e0       	ldi	r28, 0x00	; 0
    27f0:	f8 01       	movw	r30, r16
    27f2:	80 81       	ld	r24, Z
    27f4:	0e 5f       	subi	r16, 0xFE	; 254
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <heatedPower>
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	9c 17       	cp	r25, r28
    2800:	1d 06       	cpc	r1, r29
    2802:	09 f0       	breq	.+2      	; 0x2806 <display_digit()+0x180>
    2804:	0c f4       	brge	.+2      	; 0x2808 <display_digit()+0x182>
    2806:	61 e0       	ldi	r22, 0x01	; 1
    2808:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    280c:	21 96       	adiw	r28, 0x01	; 1
    280e:	ca 30       	cpi	r28, 0x0A	; 10
    2810:	d1 05       	cpc	r29, r1
    2812:	71 f7       	brne	.-36     	; 0x27f0 <display_digit()+0x16a>
    2814:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <segmentBlank>
    2818:	81 11       	cpse	r24, r1
    281a:	41 c0       	rjmp	.+130    	; 0x289e <display_digit()+0x218>
    281c:	00 e0       	ldi	r16, 0x00	; 0
    281e:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <digit1>
    2822:	50 e0       	ldi	r21, 0x00	; 0
    2824:	40 e0       	ldi	r20, 0x00	; 0
    2826:	62 e0       	ldi	r22, 0x02	; 2
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	8a e1       	ldi	r24, 0x1A	; 26
    282c:	96 e0       	ldi	r25, 0x06	; 6
    282e:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2832:	01 e0       	ldi	r16, 0x01	; 1
    2834:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <digit2>
    2838:	44 e0       	ldi	r20, 0x04	; 4
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	62 e0       	ldi	r22, 0x02	; 2
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	8a e1       	ldi	r24, 0x1A	; 26
    2842:	96 e0       	ldi	r25, 0x06	; 6
    2844:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2848:	00 e0       	ldi	r16, 0x00	; 0
    284a:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <digit3>
    284e:	46 e0       	ldi	r20, 0x06	; 6
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	62 e0       	ldi	r22, 0x02	; 2
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	8a e1       	ldi	r24, 0x1A	; 26
    2858:	96 e0       	ldi	r25, 0x06	; 6
    285a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    285e:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <digit7>
    2862:	47 e0       	ldi	r20, 0x07	; 7
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	62 e0       	ldi	r22, 0x02	; 2
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	8a e1       	ldi	r24, 0x1A	; 26
    286c:	96 e0       	ldi	r25, 0x06	; 6
    286e:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2872:	01 e0       	ldi	r16, 0x01	; 1
    2874:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <digit8>
    2878:	45 e0       	ldi	r20, 0x05	; 5
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	62 e0       	ldi	r22, 0x02	; 2
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	8a e1       	ldi	r24, 0x1A	; 26
    2882:	96 e0       	ldi	r25, 0x06	; 6
    2884:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2888:	00 e0       	ldi	r16, 0x00	; 0
    288a:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <digit9>
    288e:	41 e0       	ldi	r20, 0x01	; 1
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	62 e0       	ldi	r22, 0x02	; 2
    2894:	70 e0       	ldi	r23, 0x00	; 0
    2896:	8a e1       	ldi	r24, 0x1A	; 26
    2898:	96 e0       	ldi	r25, 0x06	; 6
    289a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    289e:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <segmentBlank>
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	e1 f5       	brne	.+120    	; 0x291e <display_digit()+0x298>
    28a6:	00 e0       	ldi	r16, 0x00	; 0
    28a8:	2d e2       	ldi	r18, 0x2D	; 45
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	62 e0       	ldi	r22, 0x02	; 2
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	8a e1       	ldi	r24, 0x1A	; 26
    28b4:	96 e0       	ldi	r25, 0x06	; 6
    28b6:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    28ba:	2d e2       	ldi	r18, 0x2D	; 45
    28bc:	44 e0       	ldi	r20, 0x04	; 4
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	70 e0       	ldi	r23, 0x00	; 0
    28c4:	8a e1       	ldi	r24, 0x1A	; 26
    28c6:	96 e0       	ldi	r25, 0x06	; 6
    28c8:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    28cc:	2d e2       	ldi	r18, 0x2D	; 45
    28ce:	46 e0       	ldi	r20, 0x06	; 6
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	62 e0       	ldi	r22, 0x02	; 2
    28d4:	70 e0       	ldi	r23, 0x00	; 0
    28d6:	8a e1       	ldi	r24, 0x1A	; 26
    28d8:	96 e0       	ldi	r25, 0x06	; 6
    28da:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    28de:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <digit7>
    28e2:	47 e0       	ldi	r20, 0x07	; 7
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	62 e0       	ldi	r22, 0x02	; 2
    28e8:	70 e0       	ldi	r23, 0x00	; 0
    28ea:	8a e1       	ldi	r24, 0x1A	; 26
    28ec:	96 e0       	ldi	r25, 0x06	; 6
    28ee:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    28f2:	01 e0       	ldi	r16, 0x01	; 1
    28f4:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <digit8>
    28f8:	45 e0       	ldi	r20, 0x05	; 5
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	62 e0       	ldi	r22, 0x02	; 2
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	8a e1       	ldi	r24, 0x1A	; 26
    2902:	96 e0       	ldi	r25, 0x06	; 6
    2904:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2908:	00 e0       	ldi	r16, 0x00	; 0
    290a:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <digit9>
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	62 e0       	ldi	r22, 0x02	; 2
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	8a e1       	ldi	r24, 0x1A	; 26
    2918:	96 e0       	ldi	r25, 0x06	; 6
    291a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    291e:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <segmentBlank>
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	e1 f5       	brne	.+120    	; 0x299e <display_digit()+0x318>
    2926:	00 e0       	ldi	r16, 0x00	; 0
    2928:	2d e2       	ldi	r18, 0x2D	; 45
    292a:	47 e0       	ldi	r20, 0x07	; 7
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	62 e0       	ldi	r22, 0x02	; 2
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	8a e1       	ldi	r24, 0x1A	; 26
    2934:	96 e0       	ldi	r25, 0x06	; 6
    2936:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    293a:	2d e2       	ldi	r18, 0x2D	; 45
    293c:	45 e0       	ldi	r20, 0x05	; 5
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	62 e0       	ldi	r22, 0x02	; 2
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	8a e1       	ldi	r24, 0x1A	; 26
    2946:	96 e0       	ldi	r25, 0x06	; 6
    2948:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    294c:	2d e2       	ldi	r18, 0x2D	; 45
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	62 e0       	ldi	r22, 0x02	; 2
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	8a e1       	ldi	r24, 0x1A	; 26
    2958:	96 e0       	ldi	r25, 0x06	; 6
    295a:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    295e:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <digit1>
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	62 e0       	ldi	r22, 0x02	; 2
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	8a e1       	ldi	r24, 0x1A	; 26
    296c:	96 e0       	ldi	r25, 0x06	; 6
    296e:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2972:	01 e0       	ldi	r16, 0x01	; 1
    2974:	20 91 64 04 	lds	r18, 0x0464	; 0x800464 <digit2>
    2978:	44 e0       	ldi	r20, 0x04	; 4
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	62 e0       	ldi	r22, 0x02	; 2
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	8a e1       	ldi	r24, 0x1A	; 26
    2982:	96 e0       	ldi	r25, 0x06	; 6
    2984:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    2988:	00 e0       	ldi	r16, 0x00	; 0
    298a:	20 91 63 04 	lds	r18, 0x0463	; 0x800463 <digit3>
    298e:	46 e0       	ldi	r20, 0x06	; 6
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	62 e0       	ldi	r22, 0x02	; 2
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	8a e1       	ldi	r24, 0x1A	; 26
    2998:	96 e0       	ldi	r25, 0x06	; 6
    299a:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <LedControl::setDigit(int, int, unsigned char, bool)>
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	0f 91       	pop	r16
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
    29ae:	bf 90       	pop	r11
    29b0:	af 90       	pop	r10
    29b2:	08 95       	ret

000029b4 <digit_kosong()>:
_Z12digit_kosongv():
    29b4:	0f 93       	push	r16
    29b6:	41 e0       	ldi	r20, 0x01	; 1
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	8a e1       	ldi	r24, 0x1A	; 26
    29be:	96 e0       	ldi	r25, 0x06	; 6
    29c0:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	61 e0       	ldi	r22, 0x01	; 1
    29c8:	70 e0       	ldi	r23, 0x00	; 0
    29ca:	8a e1       	ldi	r24, 0x1A	; 26
    29cc:	96 e0       	ldi	r25, 0x06	; 6
    29ce:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
    29d2:	41 e0       	ldi	r20, 0x01	; 1
    29d4:	62 e0       	ldi	r22, 0x02	; 2
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	8a e1       	ldi	r24, 0x1A	; 26
    29da:	96 e0       	ldi	r25, 0x06	; 6
    29dc:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
    29e0:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <nilaidigit()>
    29e4:	00 e0       	ldi	r16, 0x00	; 0
    29e6:	2b e6       	ldi	r18, 0x6B	; 107
    29e8:	50 e0       	ldi	r21, 0x00	; 0
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	62 e0       	ldi	r22, 0x02	; 2
    29ee:	70 e0       	ldi	r23, 0x00	; 0
    29f0:	8a e1       	ldi	r24, 0x1A	; 26
    29f2:	96 e0       	ldi	r25, 0x06	; 6
    29f4:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    29f8:	01 e0       	ldi	r16, 0x01	; 1
    29fa:	2b e6       	ldi	r18, 0x6B	; 107
    29fc:	41 e0       	ldi	r20, 0x01	; 1
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	62 e0       	ldi	r22, 0x02	; 2
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	8a e1       	ldi	r24, 0x1A	; 26
    2a06:	96 e0       	ldi	r25, 0x06	; 6
    2a08:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a0c:	00 e0       	ldi	r16, 0x00	; 0
    2a0e:	2b e6       	ldi	r18, 0x6B	; 107
    2a10:	42 e0       	ldi	r20, 0x02	; 2
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	62 e0       	ldi	r22, 0x02	; 2
    2a16:	70 e0       	ldi	r23, 0x00	; 0
    2a18:	8a e1       	ldi	r24, 0x1A	; 26
    2a1a:	96 e0       	ldi	r25, 0x06	; 6
    2a1c:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a20:	2b e6       	ldi	r18, 0x6B	; 107
    2a22:	43 e0       	ldi	r20, 0x03	; 3
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	62 e0       	ldi	r22, 0x02	; 2
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	8a e1       	ldi	r24, 0x1A	; 26
    2a2c:	96 e0       	ldi	r25, 0x06	; 6
    2a2e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a32:	01 e0       	ldi	r16, 0x01	; 1
    2a34:	2b e6       	ldi	r18, 0x6B	; 107
    2a36:	44 e0       	ldi	r20, 0x04	; 4
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	8a e1       	ldi	r24, 0x1A	; 26
    2a40:	96 e0       	ldi	r25, 0x06	; 6
    2a42:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a46:	00 e0       	ldi	r16, 0x00	; 0
    2a48:	2b e6       	ldi	r18, 0x6B	; 107
    2a4a:	45 e0       	ldi	r20, 0x05	; 5
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	62 e0       	ldi	r22, 0x02	; 2
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	8a e1       	ldi	r24, 0x1A	; 26
    2a54:	96 e0       	ldi	r25, 0x06	; 6
    2a56:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a5a:	2b e6       	ldi	r18, 0x6B	; 107
    2a5c:	43 e0       	ldi	r20, 0x03	; 3
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	70 e0       	ldi	r23, 0x00	; 0
    2a64:	8a e1       	ldi	r24, 0x1A	; 26
    2a66:	96 e0       	ldi	r25, 0x06	; 6
    2a68:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a6c:	01 e0       	ldi	r16, 0x01	; 1
    2a6e:	2b e6       	ldi	r18, 0x6B	; 107
    2a70:	44 e0       	ldi	r20, 0x04	; 4
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	61 e0       	ldi	r22, 0x01	; 1
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	8a e1       	ldi	r24, 0x1A	; 26
    2a7a:	96 e0       	ldi	r25, 0x06	; 6
    2a7c:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a80:	00 e0       	ldi	r16, 0x00	; 0
    2a82:	2b e6       	ldi	r18, 0x6B	; 107
    2a84:	45 e0       	ldi	r20, 0x05	; 5
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	8a e1       	ldi	r24, 0x1A	; 26
    2a8e:	96 e0       	ldi	r25, 0x06	; 6
    2a90:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2a94:	2b e6       	ldi	r18, 0x6B	; 107
    2a96:	41 e0       	ldi	r20, 0x01	; 1
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	61 e0       	ldi	r22, 0x01	; 1
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	8a e1       	ldi	r24, 0x1A	; 26
    2aa0:	96 e0       	ldi	r25, 0x06	; 6
    2aa2:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2aa6:	01 e0       	ldi	r16, 0x01	; 1
    2aa8:	2b e6       	ldi	r18, 0x6B	; 107
    2aaa:	47 e0       	ldi	r20, 0x07	; 7
    2aac:	50 e0       	ldi	r21, 0x00	; 0
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	8a e1       	ldi	r24, 0x1A	; 26
    2ab4:	96 e0       	ldi	r25, 0x06	; 6
    2ab6:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	2b e6       	ldi	r18, 0x6B	; 107
    2abe:	46 e0       	ldi	r20, 0x06	; 6
    2ac0:	50 e0       	ldi	r21, 0x00	; 0
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	70 e0       	ldi	r23, 0x00	; 0
    2ac6:	8a e1       	ldi	r24, 0x1A	; 26
    2ac8:	96 e0       	ldi	r25, 0x06	; 6
    2aca:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2ace:	2b e6       	ldi	r18, 0x6B	; 107
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	8a e1       	ldi	r24, 0x1A	; 26
    2ada:	96 e0       	ldi	r25, 0x06	; 6
    2adc:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2ae0:	2b e6       	ldi	r18, 0x6B	; 107
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	50 e0       	ldi	r21, 0x00	; 0
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	8a e1       	ldi	r24, 0x1A	; 26
    2aec:	96 e0       	ldi	r25, 0x06	; 6
    2aee:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2af2:	2b e6       	ldi	r18, 0x6B	; 107
    2af4:	42 e0       	ldi	r20, 0x02	; 2
    2af6:	50 e0       	ldi	r21, 0x00	; 0
    2af8:	70 e0       	ldi	r23, 0x00	; 0
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	8a e1       	ldi	r24, 0x1A	; 26
    2afe:	96 e0       	ldi	r25, 0x06	; 6
    2b00:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2b04:	2b e6       	ldi	r18, 0x6B	; 107
    2b06:	43 e0       	ldi	r20, 0x03	; 3
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	70 e0       	ldi	r23, 0x00	; 0
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	8a e1       	ldi	r24, 0x1A	; 26
    2b10:	96 e0       	ldi	r25, 0x06	; 6
    2b12:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2b16:	2b e6       	ldi	r18, 0x6B	; 107
    2b18:	46 e0       	ldi	r20, 0x06	; 6
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	70 e0       	ldi	r23, 0x00	; 0
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	8a e1       	ldi	r24, 0x1A	; 26
    2b22:	96 e0       	ldi	r25, 0x06	; 6
    2b24:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2b28:	2b e6       	ldi	r18, 0x6B	; 107
    2b2a:	42 e0       	ldi	r20, 0x02	; 2
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	8a e1       	ldi	r24, 0x1A	; 26
    2b34:	96 e0       	ldi	r25, 0x06	; 6
    2b36:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2b3a:	2b e6       	ldi	r18, 0x6B	; 107
    2b3c:	44 e0       	ldi	r20, 0x04	; 4
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	70 e0       	ldi	r23, 0x00	; 0
    2b42:	60 e0       	ldi	r22, 0x00	; 0
    2b44:	8a e1       	ldi	r24, 0x1A	; 26
    2b46:	96 e0       	ldi	r25, 0x06	; 6
    2b48:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2b4c:	2b e6       	ldi	r18, 0x6B	; 107
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	40 e0       	ldi	r20, 0x00	; 0
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	8a e1       	ldi	r24, 0x1A	; 26
    2b58:	96 e0       	ldi	r25, 0x06	; 6
    2b5a:	0e 94 30 25 	call	0x4a60	; 0x4a60 <LedControl::setChar(int, int, char, bool)>
    2b5e:	0f 91       	pop	r16
    2b60:	08 95       	ret

00002b62 <alarem()>:
_Z6alaremv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1240
}

void alarem(){
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1241
  if(sirenAlarm == 1){
    2b68:	c0 91 b2 04 	lds	r28, 0x04B2	; 0x8004b2 <sirenAlarm>
    2b6c:	c1 30       	cpi	r28, 0x01	; 1
    2b6e:	09 f0       	breq	.+2      	; 0x2b72 <alarem()+0x10>
    2b70:	bf c0       	rjmp	.+382    	; 0x2cf0 <alarem()+0x18e>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1242
    if(alarmValue2 == 0){
    2b72:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <alarmValue2>
    2b76:	81 11       	cpse	r24, r1
    2b78:	57 c0       	rjmp	.+174    	; 0x2c28 <alarem()+0xc6>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1243
      Serial.println("alarm1");
    2b7a:	68 e2       	ldi	r22, 0x28	; 40
    2b7c:	71 e0       	ldi	r23, 0x01	; 1
    2b7e:	8b e7       	ldi	r24, 0x7B	; 123
    2b80:	96 e0       	ldi	r25, 0x06	; 6
    2b82:	0e 94 6e 29 	call	0x52dc	; 0x52dc <Print::println(char const*)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1244
      if(millis() - lastTime3 > 1000 && loopAlarm == 0){
    2b86:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2b8a:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <lastTime3>
    2b8e:	10 91 40 04 	lds	r17, 0x0440	; 0x800440 <lastTime3+0x1>
    2b92:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <lastTime3+0x2>
    2b96:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <lastTime3+0x3>
    2b9a:	60 1b       	sub	r22, r16
    2b9c:	71 0b       	sbc	r23, r17
    2b9e:	82 0b       	sbc	r24, r18
    2ba0:	93 0b       	sbc	r25, r19
    2ba2:	69 3e       	cpi	r22, 0xE9	; 233
    2ba4:	73 40       	sbci	r23, 0x03	; 3
    2ba6:	81 05       	cpc	r24, r1
    2ba8:	91 05       	cpc	r25, r1
    2baa:	c0 f0       	brcs	.+48     	; 0x2bdc <alarem()+0x7a>
    2bac:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <loopAlarm>
    2bb0:	81 11       	cpse	r24, r1
    2bb2:	14 c0       	rjmp	.+40     	; 0x2bdc <alarem()+0x7a>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1245
        lastTime3 = millis();
    2bb4:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2bb8:	60 93 3f 04 	sts	0x043F, r22	; 0x80043f <lastTime3>
    2bbc:	70 93 40 04 	sts	0x0440, r23	; 0x800440 <lastTime3+0x1>
    2bc0:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <lastTime3+0x2>
    2bc4:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <lastTime3+0x3>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1246
        loopAlarm = 1;
    2bc8:	c0 93 3e 04 	sts	0x043E, r28	; 0x80043e <loopAlarm>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1247
        tone(pinBuzzer, 2200);
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	a9 01       	movw	r20, r18
    2bd2:	68 e9       	ldi	r22, 0x98	; 152
    2bd4:	78 e0       	ldi	r23, 0x08	; 8
    2bd6:	8b e1       	ldi	r24, 0x1B	; 27
    2bd8:	0e 94 85 29 	call	0x530a	; 0x530a <tone(unsigned char, unsigned int, unsigned long)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1249
      }
      if(millis() - lastTime3 > 1000 && loopAlarm == 1){
    2bdc:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2be0:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <lastTime3>
    2be4:	10 91 40 04 	lds	r17, 0x0440	; 0x800440 <lastTime3+0x1>
    2be8:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <lastTime3+0x2>
    2bec:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <lastTime3+0x3>
    2bf0:	60 1b       	sub	r22, r16
    2bf2:	71 0b       	sbc	r23, r17
    2bf4:	82 0b       	sbc	r24, r18
    2bf6:	93 0b       	sbc	r25, r19
    2bf8:	69 3e       	cpi	r22, 0xE9	; 233
    2bfa:	73 40       	sbci	r23, 0x03	; 3
    2bfc:	81 05       	cpc	r24, r1
    2bfe:	91 05       	cpc	r25, r1
    2c00:	98 f0       	brcs	.+38     	; 0x2c28 <alarem()+0xc6>
    2c02:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <loopAlarm>
    2c06:	81 30       	cpi	r24, 0x01	; 1
    2c08:	79 f4       	brne	.+30     	; 0x2c28 <alarem()+0xc6>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1250
        lastTime3 = millis();
    2c0a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2c0e:	60 93 3f 04 	sts	0x043F, r22	; 0x80043f <lastTime3>
    2c12:	70 93 40 04 	sts	0x0440, r23	; 0x800440 <lastTime3+0x1>
    2c16:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <lastTime3+0x2>
    2c1a:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <lastTime3+0x3>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1251
        loopAlarm = 0;
    2c1e:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <loopAlarm>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1252
        noTone(pinBuzzer);
    2c22:	8b e1       	ldi	r24, 0x1B	; 27
    2c24:	0e 94 9f 2b 	call	0x573e	; 0x573e <noTone(unsigned char)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1255
      }
    }
    if(alarmValue2 == 1){
    2c28:	c0 91 af 04 	lds	r28, 0x04AF	; 0x8004af <alarmValue2>
    2c2c:	c1 30       	cpi	r28, 0x01	; 1
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <alarem()+0xd0>
    2c30:	65 c0       	rjmp	.+202    	; 0x2cfc <alarem()+0x19a>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1256
      Serial.println("alarm2");
    2c32:	6f e2       	ldi	r22, 0x2F	; 47
    2c34:	71 e0       	ldi	r23, 0x01	; 1
    2c36:	8b e7       	ldi	r24, 0x7B	; 123
    2c38:	96 e0       	ldi	r25, 0x06	; 6
    2c3a:	0e 94 6e 29 	call	0x52dc	; 0x52dc <Print::println(char const*)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1257
      if(millis() - lastTime3 > 1000 && loopAlarm == 0){
    2c3e:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2c42:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <lastTime3>
    2c46:	10 91 40 04 	lds	r17, 0x0440	; 0x800440 <lastTime3+0x1>
    2c4a:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <lastTime3+0x2>
    2c4e:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <lastTime3+0x3>
    2c52:	60 1b       	sub	r22, r16
    2c54:	71 0b       	sbc	r23, r17
    2c56:	82 0b       	sbc	r24, r18
    2c58:	93 0b       	sbc	r25, r19
    2c5a:	69 3e       	cpi	r22, 0xE9	; 233
    2c5c:	73 40       	sbci	r23, 0x03	; 3
    2c5e:	81 05       	cpc	r24, r1
    2c60:	91 05       	cpc	r25, r1
    2c62:	c0 f0       	brcs	.+48     	; 0x2c94 <alarem()+0x132>
    2c64:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <loopAlarm>
    2c68:	81 11       	cpse	r24, r1
    2c6a:	14 c0       	rjmp	.+40     	; 0x2c94 <alarem()+0x132>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1258
        lastTime3 = millis();
    2c6c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2c70:	60 93 3f 04 	sts	0x043F, r22	; 0x80043f <lastTime3>
    2c74:	70 93 40 04 	sts	0x0440, r23	; 0x800440 <lastTime3+0x1>
    2c78:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <lastTime3+0x2>
    2c7c:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <lastTime3+0x3>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1259
        loopAlarm = 1;
    2c80:	c0 93 3e 04 	sts	0x043E, r28	; 0x80043e <loopAlarm>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1260
        tone(pinBuzzer, 2200);
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	a9 01       	movw	r20, r18
    2c8a:	68 e9       	ldi	r22, 0x98	; 152
    2c8c:	78 e0       	ldi	r23, 0x08	; 8
    2c8e:	8b e1       	ldi	r24, 0x1B	; 27
    2c90:	0e 94 85 29 	call	0x530a	; 0x530a <tone(unsigned char, unsigned int, unsigned long)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1262
      }
      if(millis() - lastTime3 > 1000 && loopAlarm == 1){
    2c94:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2c98:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <lastTime3>
    2c9c:	10 91 40 04 	lds	r17, 0x0440	; 0x800440 <lastTime3+0x1>
    2ca0:	20 91 41 04 	lds	r18, 0x0441	; 0x800441 <lastTime3+0x2>
    2ca4:	30 91 42 04 	lds	r19, 0x0442	; 0x800442 <lastTime3+0x3>
    2ca8:	60 1b       	sub	r22, r16
    2caa:	71 0b       	sbc	r23, r17
    2cac:	82 0b       	sbc	r24, r18
    2cae:	93 0b       	sbc	r25, r19
    2cb0:	69 3e       	cpi	r22, 0xE9	; 233
    2cb2:	73 40       	sbci	r23, 0x03	; 3
    2cb4:	81 05       	cpc	r24, r1
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	08 f1       	brcs	.+66     	; 0x2cfc <alarem()+0x19a>
    2cba:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <loopAlarm>
    2cbe:	81 30       	cpi	r24, 0x01	; 1
    2cc0:	e9 f4       	brne	.+58     	; 0x2cfc <alarem()+0x19a>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1263
        lastTime3 = millis();
    2cc2:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    2cc6:	60 93 3f 04 	sts	0x043F, r22	; 0x80043f <lastTime3>
    2cca:	70 93 40 04 	sts	0x0440, r23	; 0x800440 <lastTime3+0x1>
    2cce:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <lastTime3+0x2>
    2cd2:	90 93 42 04 	sts	0x0442, r25	; 0x800442 <lastTime3+0x3>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1264
        loopAlarm = 0;
    2cd6:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <loopAlarm>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1265
        tone(pinBuzzer, 1800);
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	a9 01       	movw	r20, r18
    2ce0:	68 e0       	ldi	r22, 0x08	; 8
    2ce2:	77 e0       	ldi	r23, 0x07	; 7
    2ce4:	8b e1       	ldi	r24, 0x1B	; 27
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1272
    }
  }
  else{
    noTone(pinBuzzer);
  }
}
    2ce6:	cf 91       	pop	r28
    2ce8:	1f 91       	pop	r17
    2cea:	0f 91       	pop	r16
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1265
        tone(pinBuzzer, 2200);
      }
      if(millis() - lastTime3 > 1000 && loopAlarm == 1){
        lastTime3 = millis();
        loopAlarm = 0;
        tone(pinBuzzer, 1800);
    2cec:	0c 94 85 29 	jmp	0x530a	; 0x530a <tone(unsigned char, unsigned int, unsigned long)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1270
      }      
    }
  }
  else{
    noTone(pinBuzzer);
    2cf0:	8b e1       	ldi	r24, 0x1B	; 27
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1272
  }
}
    2cf2:	cf 91       	pop	r28
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1270
        tone(pinBuzzer, 1800);
      }      
    }
  }
  else{
    noTone(pinBuzzer);
    2cf8:	0c 94 9f 2b 	jmp	0x573e	; 0x573e <noTone(unsigned char)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1272
  }
}
    2cfc:	cf 91       	pop	r28
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	08 95       	ret

00002d04 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()>:
_ZN17ArduinoJson6194_118StaticJsonDocumentILj512EEC2Ev():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/StaticJsonDocument.hpp:17
class StaticJsonDocument : public JsonDocument {
  static const size_t _capacity =
      AddPadding<Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(_buffer, _capacity) {}
    2d04:	fc 01       	movw	r30, r24
    2d06:	0e 96       	adiw	r24, 0x0e	; 14
_ZN17ArduinoJson6194_110MemoryPoolC4EPcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:34
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0),
        _overflowed(false) {
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	93 83       	std	Z+3, r25	; 0x03
    2d0e:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:32
class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()+0x12>
    2d14:	9e 5f       	subi	r25, 0xFE	; 254
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:34
        _end(buf ? buf + capa : 0),
        _overflowed(false) {
    2d16:	95 83       	std	Z+5, r25	; 0x05
    2d18:	84 83       	std	Z+4, r24	; 0x04
    2d1a:	97 83       	std	Z+7, r25	; 0x07
    2d1c:	86 83       	std	Z+6, r24	; 0x06
    2d1e:	10 86       	std	Z+8, r1	; 0x08
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    2d20:	15 86       	std	Z+13, r1	; 0x0d
_ZN17ArduinoJson6194_118StaticJsonDocumentILj512EEC2Ev():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/StaticJsonDocument.hpp:17
    2d22:	08 95       	ret

00002d24 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>:
_ZN17ArduinoJson6194_19ConverterIfvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:104
    VariantData* data = getData(dst);
    if (data)
      data->setFloat(static_cast<Float>(src));
  }

  static T fromJson(VariantConstRef src) {
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	00 d0       	rcall	.+0      	; 0x2d2a <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x6>
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x8>
    2d2c:	1f 92       	push	r1
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:106
    const VariantData* data = getData(src);
    return data ? data->asFloat<T>() : false;
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	41 f0       	breq	.+16     	; 0x2d46 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x22>
    2d36:	fc 01       	movw	r30, r24
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    2d38:	84 81       	ldd	r24, Z+4	; 0x04
    2d3a:	8f 77       	andi	r24, 0x7F	; 127
_ZNK17ArduinoJson6194_111VariantData7asFloatIfEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:56
}

// T = float/double
template <typename T>
inline T VariantData::asFloat() const {
  switch (type()) {
    2d3c:	86 30       	cpi	r24, 0x06	; 6
    2d3e:	91 f0       	breq	.+36     	; 0x2d64 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x40>
    2d40:	30 f4       	brcc	.+12     	; 0x2d4e <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
    2d42:	84 30       	cpi	r24, 0x04	; 4
    2d44:	20 f5       	brcc	.+72     	; 0x2d8e <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x6a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:69
    case VALUE_IS_OWNED_STRING:
      return parseNumber<T>(_content.asString.data);
    case VALUE_IS_FLOAT:
      return static_cast<T>(_content.asFloat);
    default:
      return 0;
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	70 e0       	ldi	r23, 0x00	; 0
    2d4a:	cb 01       	movw	r24, r22
_ZN17ArduinoJson6194_19ConverterIfvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:106
    2d4c:	11 c0       	rjmp	.+34     	; 0x2d70 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x4c>
_ZNK17ArduinoJson6194_111VariantData7asFloatIfEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:56
}

// T = float/double
template <typename T>
inline T VariantData::asFloat() const {
  switch (type()) {
    2d4e:	8a 30       	cpi	r24, 0x0A	; 10
    2d50:	b9 f0       	breq	.+46     	; 0x2d80 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x5c>
    2d52:	8c 30       	cpi	r24, 0x0C	; 12
    2d54:	49 f1       	breq	.+82     	; 0x2da8 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x84>
    2d56:	88 30       	cpi	r24, 0x08	; 8
    2d58:	b1 f7       	brne	.-20     	; 0x2d46 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x22>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:60
    case VALUE_IS_BOOLEAN:
      return static_cast<T>(_content.asBoolean);
    case VALUE_IS_UNSIGNED_INTEGER:
      return static_cast<T>(_content.asUnsignedInteger);
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	04 c0       	rjmp	.+8      	; 0x2d6c <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x48>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:58
// T = float/double
template <typename T>
inline T VariantData::asFloat() const {
  switch (type()) {
    case VALUE_IS_BOOLEAN:
      return static_cast<T>(_content.asBoolean);
    2d64:	60 81       	ld	r22, Z
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:60
    case VALUE_IS_UNSIGNED_INTEGER:
      return static_cast<T>(_content.asUnsignedInteger);
    2d6c:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
_ZN17ArduinoJson6194_19ConverterIfvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:107
  }
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	08 95       	ret
_ZNK17ArduinoJson6194_111VariantData7asFloatIfEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:62
    case VALUE_IS_SIGNED_INTEGER:
      return static_cast<T>(_content.asSignedInteger);
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <__floatsisf>
    2d8c:	f1 cf       	rjmp	.-30     	; 0x2d70 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x4c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:65
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseNumber<T>(_content.asString.data);
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    2d92:	1d 82       	std	Y+5, r1	; 0x05
_ZN17ArduinoJson6194_111parseNumberIfEET_PKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:150

template <typename T>
inline T parseNumber(const char* s) {
  VariantData value;
  value.init();  // VariantData is a POD, so it has no constructor
  parseNumber(s, value);
    2d94:	be 01       	movw	r22, r28
    2d96:	6f 5f       	subi	r22, 0xFF	; 255
    2d98:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:151
  return Converter<T>::fromJson(VariantConstRef(&value));
    2d9e:	ce 01       	movw	r24, r28
    2da0:	01 96       	adiw	r24, 0x01	; 1
    2da2:	0e 94 92 16 	call	0x2d24	; 0x2d24 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
    2da6:	e4 cf       	rjmp	.-56     	; 0x2d70 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x4c>
_ZNK17ArduinoJson6194_111VariantData7asFloatIfEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:67
    case VALUE_IS_FLOAT:
      return static_cast<T>(_content.asFloat);
    2da8:	60 81       	ld	r22, Z
    2daa:	71 81       	ldd	r23, Z+1	; 0x01
    2dac:	82 81       	ldd	r24, Z+2	; 0x02
    2dae:	93 81       	ldd	r25, Z+3	; 0x03
    2db0:	df cf       	rjmp	.-66     	; 0x2d70 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x4c>

00002db2 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>:
_ZN17ArduinoJson6194_19ConverterIhvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:48
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    if (data)
      data->setInteger(src);
  }

  static T fromJson(VariantConstRef src) {
    2db2:	cf 92       	push	r12
    2db4:	df 92       	push	r13
    2db6:	ef 92       	push	r14
    2db8:	ff 92       	push	r15
    2dba:	cf 93       	push	r28
    2dbc:	df 93       	push	r29
    2dbe:	00 d0       	rcall	.+0      	; 0x2dc0 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0xe>
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x10>
    2dc2:	1f 92       	push	r1
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:51
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    const VariantData* data = getData(src);
    return data ? data->asIntegral<T>() : T();
    2dca:	89 2b       	or	r24, r25
    2dcc:	39 f0       	breq	.+14     	; 0x2ddc <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    2dce:	84 81       	ldd	r24, Z+4	; 0x04
    2dd0:	8f 77       	andi	r24, 0x7F	; 127
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:20

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
    2dd2:	86 30       	cpi	r24, 0x06	; 6
    2dd4:	b1 f0       	breq	.+44     	; 0x2e02 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x50>
    2dd6:	20 f4       	brcc	.+8      	; 0x2de0 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2e>
    2dd8:	84 30       	cpi	r24, 0x04	; 4
    2dda:	00 f5       	brcc	.+64     	; 0x2e1c <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x6a>
_ZN17ArduinoJson6194_19ConverterIhvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:51
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	12 c0       	rjmp	.+36     	; 0x2e04 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:20
    2de0:	8a 30       	cpi	r24, 0x0A	; 10
    2de2:	21 f0       	breq	.+8      	; 0x2dec <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x3a>
    2de4:	8c 30       	cpi	r24, 0x0C	; 12
    2de6:	39 f1       	breq	.+78     	; 0x2e36 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x84>
    2de8:	88 30       	cpi	r24, 0x08	; 8
    2dea:	c1 f7       	brne	.-16     	; 0x2ddc <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:26
    case VALUE_IS_BOOLEAN:
      return _content.asBoolean;
    case VALUE_IS_UNSIGNED_INTEGER:
      return convertNumber<T>(_content.asUnsignedInteger);
    case VALUE_IS_SIGNED_INTEGER:
      return convertNumber<T>(_content.asSignedInteger);
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	a2 81       	ldd	r26, Z+2	; 0x02
    2df2:	b3 81       	ldd	r27, Z+3	; 0x03
_ZN17ArduinoJson6194_113convertNumberIhlEET_T0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:111
         value <= numeric_limits<TOut>::highest();
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
    2df4:	8f 3f       	cpi	r24, 0xFF	; 255
    2df6:	91 05       	cpc	r25, r1
    2df8:	a1 05       	cpc	r26, r1
    2dfa:	b1 05       	cpc	r27, r1
    2dfc:	19 f0       	breq	.+6      	; 0x2e04 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
    2dfe:	10 f0       	brcs	.+4      	; 0x2e04 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
    2e00:	ed cf       	rjmp	.-38     	; 0x2ddc <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:22

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
    case VALUE_IS_BOOLEAN:
      return _content.asBoolean;
    2e02:	80 81       	ld	r24, Z
_ZN17ArduinoJson6194_19ConverterIhvE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:52
  }
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	ff 90       	pop	r15
    2e14:	ef 90       	pop	r14
    2e16:	df 90       	pop	r13
    2e18:	cf 90       	pop	r12
    2e1a:	08 95       	ret
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:29
      return convertNumber<T>(_content.asUnsignedInteger);
    case VALUE_IS_SIGNED_INTEGER:
      return convertNumber<T>(_content.asSignedInteger);
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseNumber<T>(_content.asString.data);
    2e1c:	80 81       	ld	r24, Z
    2e1e:	91 81       	ldd	r25, Z+1	; 0x01
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    2e20:	1d 82       	std	Y+5, r1	; 0x05
_ZN17ArduinoJson6194_111parseNumberIhEET_PKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:150

template <typename T>
inline T parseNumber(const char* s) {
  VariantData value;
  value.init();  // VariantData is a POD, so it has no constructor
  parseNumber(s, value);
    2e22:	be 01       	movw	r22, r28
    2e24:	6f 5f       	subi	r22, 0xFF	; 255
    2e26:	7f 4f       	sbci	r23, 0xFF	; 255
    2e28:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:151
  return Converter<T>::fromJson(VariantConstRef(&value));
    2e2c:	ce 01       	movw	r24, r28
    2e2e:	01 96       	adiw	r24, 0x01	; 1
    2e30:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
    2e34:	e7 cf       	rjmp	.-50     	; 0x2e04 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIhEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:31
    case VALUE_IS_FLOAT:
      return convertNumber<T>(_content.asFloat);
    2e36:	c0 80       	ld	r12, Z
    2e38:	d1 80       	ldd	r13, Z+1	; 0x01
    2e3a:	e2 80       	ldd	r14, Z+2	; 0x02
    2e3c:	f3 80       	ldd	r15, Z+3	; 0x03
_ZN17ArduinoJson6194_116canConvertNumberIhdEENS_9enable_ifIXaasrNS_17is_floating_pointIT0_EE5valuentsrNS2_IT_EE5valueEbE4typeES3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:105
template <typename TOut, typename TIn>
typename enable_if<is_floating_point<TIn>::value &&
                       !is_floating_point<TOut>::value,
                   bool>::type
canConvertNumber(TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	a9 01       	movw	r20, r18
    2e44:	c7 01       	movw	r24, r14
    2e46:	b6 01       	movw	r22, r12
    2e48:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    2e4c:	87 fd       	sbrc	r24, 7
    2e4e:	c6 cf       	rjmp	.-116    	; 0x2ddc <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	53 e4       	ldi	r21, 0x43	; 67
    2e58:	c7 01       	movw	r24, r14
    2e5a:	b6 01       	movw	r22, r12
    2e5c:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    2e60:	18 16       	cp	r1, r24
    2e62:	0c f4       	brge	.+2      	; 0x2e66 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0xb4>
    2e64:	bb cf       	rjmp	.-138    	; 0x2ddc <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZN17ArduinoJson6194_113convertNumberIhdEET_T0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:111
         value <= numeric_limits<TOut>::highest();
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
    2e66:	c7 01       	movw	r24, r14
    2e68:	b6 01       	movw	r22, r12
    2e6a:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    2e6e:	86 2f       	mov	r24, r22
    2e70:	c9 cf       	rjmp	.-110    	; 0x2e04 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>

00002e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>:
_ZN17ArduinoJson6194_19ConverterIivE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:48
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    if (data)
      data->setInteger(src);
  }

  static T fromJson(VariantConstRef src) {
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0xe>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x10>
    2e82:	1f 92       	push	r1
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:51
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    const VariantData* data = getData(src);
    return data ? data->asIntegral<T>() : T();
    2e8a:	89 2b       	or	r24, r25
    2e8c:	39 f0       	breq	.+14     	; 0x2e9c <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    2e8e:	84 81       	ldd	r24, Z+4	; 0x04
    2e90:	8f 77       	andi	r24, 0x7F	; 127
_ZNK17ArduinoJson6194_111VariantData10asIntegralIiEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:20

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
    2e92:	86 30       	cpi	r24, 0x06	; 6
    2e94:	b9 f0       	breq	.+46     	; 0x2ec4 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x52>
    2e96:	28 f4       	brcc	.+10     	; 0x2ea2 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x30>
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	88 f5       	brcc	.+98     	; 0x2efe <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x8c>
_ZN17ArduinoJson6194_19ConverterIivE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:51
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	13 c0       	rjmp	.+38     	; 0x2ec8 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x56>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIiEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:20
    2ea2:	8a 30       	cpi	r24, 0x0A	; 10
    2ea4:	e9 f0       	breq	.+58     	; 0x2ee0 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x6e>
    2ea6:	8c 30       	cpi	r24, 0x0C	; 12
    2ea8:	b9 f1       	breq	.+110    	; 0x2f18 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0xa6>
    2eaa:	88 30       	cpi	r24, 0x08	; 8
    2eac:	b9 f7       	brne	.-18     	; 0x2e9c <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:24
    case VALUE_IS_BOOLEAN:
      return _content.asBoolean;
    case VALUE_IS_UNSIGNED_INTEGER:
      return convertNumber<T>(_content.asUnsignedInteger);
    2eae:	80 81       	ld	r24, Z
    2eb0:	91 81       	ldd	r25, Z+1	; 0x01
    2eb2:	a2 81       	ldd	r26, Z+2	; 0x02
    2eb4:	b3 81       	ldd	r27, Z+3	; 0x03
_ZN17ArduinoJson6194_113convertNumberIimEET_T0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:111
    2eb6:	81 15       	cp	r24, r1
    2eb8:	20 e8       	ldi	r18, 0x80	; 128
    2eba:	92 07       	cpc	r25, r18
    2ebc:	a1 05       	cpc	r26, r1
    2ebe:	b1 05       	cpc	r27, r1
    2ec0:	68 f7       	brcc	.-38     	; 0x2e9c <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x56>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIiEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:22

template <typename T>
inline T VariantData::asIntegral() const {
  switch (type()) {
    case VALUE_IS_BOOLEAN:
      return _content.asBoolean;
    2ec4:	80 81       	ld	r24, Z
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
_ZN17ArduinoJson6194_19ConverterIivE8fromJsonENS_15VariantConstRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:52
  }
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	df 90       	pop	r13
    2edc:	cf 90       	pop	r12
    2ede:	08 95       	ret
_ZNK17ArduinoJson6194_111VariantData10asIntegralIiEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:26
    case VALUE_IS_UNSIGNED_INTEGER:
      return convertNumber<T>(_content.asUnsignedInteger);
    case VALUE_IS_SIGNED_INTEGER:
      return convertNumber<T>(_content.asSignedInteger);
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ee6:	b3 81       	ldd	r27, Z+3	; 0x03
_ZN17ArduinoJson6194_116canConvertNumberIilEENS_9enable_ifIXaaaaaaaasrNS_11is_integralIT0_EE5valuesrNS_9is_signedIS3_EE5valuesrNS2_IT_EE5valuesrNS5_IS7_EE5valueltstS7_stS3_EbE4typeES3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:58
typename enable_if<is_integral<TIn>::value && is_signed<TIn>::value &&
                       is_integral<TOut>::value && is_signed<TOut>::value &&
                       sizeof(TOut) < sizeof(TIn),
                   bool>::type
canConvertNumber(TIn value) {
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
    2ee8:	ac 01       	movw	r20, r24
    2eea:	bd 01       	movw	r22, r26
    2eec:	50 58       	subi	r21, 0x80	; 128
    2eee:	6f 4f       	sbci	r22, 0xFF	; 255
    2ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef2:	41 15       	cp	r20, r1
    2ef4:	51 05       	cpc	r21, r1
    2ef6:	61 40       	sbci	r22, 0x01	; 1
    2ef8:	71 05       	cpc	r23, r1
    2efa:	80 f6       	brcc	.-96     	; 0x2e9c <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
    2efc:	e5 cf       	rjmp	.-54     	; 0x2ec8 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x56>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIiEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:29
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseNumber<T>(_content.asString.data);
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    2f02:	1d 82       	std	Y+5, r1	; 0x05
_ZN17ArduinoJson6194_111parseNumberIiEET_PKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:150

template <typename T>
inline T parseNumber(const char* s) {
  VariantData value;
  value.init();  // VariantData is a POD, so it has no constructor
  parseNumber(s, value);
    2f04:	be 01       	movw	r22, r28
    2f06:	6f 5f       	subi	r22, 0xFF	; 255
    2f08:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/parseNumber.hpp:151
  return Converter<T>::fromJson(VariantConstRef(&value));
    2f0e:	ce 01       	movw	r24, r28
    2f10:	01 96       	adiw	r24, 0x01	; 1
    2f12:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
    2f16:	d8 cf       	rjmp	.-80     	; 0x2ec8 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x56>
_ZNK17ArduinoJson6194_111VariantData10asIntegralIiEET_v():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:31
    case VALUE_IS_FLOAT:
      return convertNumber<T>(_content.asFloat);
    2f18:	c0 80       	ld	r12, Z
    2f1a:	d1 80       	ldd	r13, Z+1	; 0x01
    2f1c:	e2 80       	ldd	r14, Z+2	; 0x02
    2f1e:	f3 80       	ldd	r15, Z+3	; 0x03
_ZN17ArduinoJson6194_116canConvertNumberIidEENS_9enable_ifIXaasrNS_17is_floating_pointIT0_EE5valuentsrNS2_IT_EE5valueEbE4typeES3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:105
template <typename TOut, typename TIn>
typename enable_if<is_floating_point<TIn>::value &&
                       !is_floating_point<TOut>::value,
                   bool>::type
canConvertNumber(TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	57 ec       	ldi	r21, 0xC7	; 199
    2f28:	c7 01       	movw	r24, r14
    2f2a:	b6 01       	movw	r22, r12
    2f2c:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    2f30:	87 fd       	sbrc	r24, 7
    2f32:	b4 cf       	rjmp	.-152    	; 0x2e9c <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3e ef       	ldi	r19, 0xFE	; 254
    2f38:	4f ef       	ldi	r20, 0xFF	; 255
    2f3a:	56 e4       	ldi	r21, 0x46	; 70
    2f3c:	c7 01       	movw	r24, r14
    2f3e:	b6 01       	movw	r22, r12
    2f40:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    2f44:	18 16       	cp	r1, r24
    2f46:	0c f4       	brge	.+2      	; 0x2f4a <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0xd8>
    2f48:	a9 cf       	rjmp	.-174    	; 0x2e9c <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x2a>
_ZN17ArduinoJson6194_113convertNumberIidEET_T0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/convertNumber.hpp:111
         value <= numeric_limits<TOut>::highest();
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	b6 01       	movw	r22, r12
    2f4e:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <__fixsfsi>
    2f52:	cb 01       	movw	r24, r22
    2f54:	b9 cf       	rjmp	.-142    	; 0x2ec8 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)+0x56>

00002f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE7currentEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:45

    return _error;
  }

 private:
  char current() {
    2f56:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE7currentEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:29
  int last() const {
    return _current;
  }

  FORCE_INLINE char current() {
    if (!_loaded) {
    2f58:	80 85       	ldd	r24, Z+8	; 0x08
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	0a c0       	rjmp	.+20     	; 0x2f72 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()+0x1c>
_ZN17ArduinoJson6194_16ReaderIPcvE4readEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/Readers/RamReader.hpp:31
 public:
  explicit Reader(const void* ptr)
      : _ptr(ptr ? reinterpret_cast<const char*>(ptr) : "") {}

  int read() {
    return static_cast<unsigned char>(*_ptr++);
    2f5e:	a5 81       	ldd	r26, Z+5	; 0x05
    2f60:	b6 81       	ldd	r27, Z+6	; 0x06
    2f62:	cd 01       	movw	r24, r26
    2f64:	01 96       	adiw	r24, 0x01	; 1
    2f66:	96 83       	std	Z+6, r25	; 0x06
    2f68:	85 83       	std	Z+5, r24	; 0x05
    2f6a:	8c 91       	ld	r24, X
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE4loadEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:43
    int c = _reader.read();
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      _ended = true;
#endif
    _current = static_cast<char>(c > 0 ? c : 0);
    2f6c:	87 83       	std	Z+7, r24	; 0x07
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:44
    _loaded = true;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	80 87       	std	Z+8, r24	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE7currentEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:47
    return _latch.current();
  }
    2f72:	87 81       	ldd	r24, Z+7	; 0x07
    2f74:	08 95       	ret

00002f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE21skipSpacesAndCommentsEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:550
      return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    return uint8_t(c - 'A' + 10);
  }

  bool skipSpacesAndComments() {
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:552
    for (;;) {
      switch (current()) {
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    2f82:	8b 30       	cpi	r24, 0x0B	; 11
    2f84:	3c f4       	brge	.+14     	; 0x2f94 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x1e>
    2f86:	89 30       	cpi	r24, 0x09	; 9
    2f88:	4c f4       	brge	.+18     	; 0x2f9c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x26>
    2f8a:	88 23       	and	r24, r24
    2f8c:	49 f0       	breq	.+18     	; 0x2fa0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x2a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:616
          }
          break;
#endif

        default:
          _foundSomething = true;
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:617
          return true;
    2f92:	10 c0       	rjmp	.+32     	; 0x2fb4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x3e>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:552
    return uint8_t(c - 'A' + 10);
  }

  bool skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
    2f94:	8d 30       	cpi	r24, 0x0D	; 13
    2f96:	11 f0       	breq	.+4      	; 0x2f9c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x26>
    2f98:	80 32       	cpi	r24, 0x20	; 32
    2f9a:	c9 f7       	brne	.-14     	; 0x2f8e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x18>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    _ended = false;
#endif
  }

  void clear() {
    _loaded = false;
    2f9c:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE21skipSpacesAndCommentsEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:552
    2f9e:	ee cf       	rjmp	.-36     	; 0x2f7c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:555
        // end of string
        case '\0':
          _error = _foundSomething ? DeserializationError::IncompleteInput
    2fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa2:	81 11       	cpse	r24, r1
    2fa4:	0a c0       	rjmp	.+20     	; 0x2fba <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x44>
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:555 (discriminator 4)
    2faa:	c5 5b       	subi	r28, 0xB5	; 181
    2fac:	df 4f       	sbci	r29, 0xFF	; 255
    2fae:	99 83       	std	Y+1, r25	; 0x01
    2fb0:	88 83       	st	Y, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:557 (discriminator 4)
                                   : DeserializationError::EmptyInput;
          return false;
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:620
        default:
          _foundSomething = true;
          return true;
      }
    }
  }
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:555
  bool skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
        // end of string
        case '\0':
          _error = _foundSomething ? DeserializationError::IncompleteInput
    2fba:	82 e0       	ldi	r24, 0x02	; 2
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	f5 cf       	rjmp	.-22     	; 0x2faa <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()+0x34>

00002fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE3eatEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:53

  void move() {
    _latch.clear();
  }

  bool eat(char charToSkip) {
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	ec 01       	movw	r28, r24
    2fc8:	16 2f       	mov	r17, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:54
    if (current() != charToSkip)
    2fca:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    2fce:	81 13       	cpse	r24, r17
    2fd0:	06 c0       	rjmp	.+12     	; 0x2fde <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)+0x1e>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    2fd2:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE3eatEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:57
      return false;
    move();
    return true;
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:58
  }
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:55
    _latch.clear();
  }

  bool eat(char charToSkip) {
    if (current() != charToSkip)
      return false;
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	fa cf       	rjmp	.-12     	; 0x2fd6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)+0x16>

00002fe2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:352
      return false;
    variant.setString(_stringStorage.save());
    return true;
  }

  bool parseQuotedString() {
    2fe2:	9f 92       	push	r9
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	00 d0       	rcall	.+0      	; 0x2ffa <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x18>
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1a>
    2ffc:	1f 92       	push	r1
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:356
#if ARDUINOJSON_DECODE_UNICODE
    Utf16::Codepoint codepoint;
#endif
    const char stopChar = current();
    3004:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    3008:	b8 2e       	mov	r11, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    300a:	d8 01       	movw	r26, r16
    300c:	18 96       	adiw	r26, 0x08	; 8
    300e:	1c 92       	st	X, r1
_ZN17ArduinoJson6194_15Utf169CodepointC4Ev():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:34
  return codeunit >= 0xDC00 && codeunit < 0xE000;
}

class Codepoint {
 public:
  Codepoint() : _highSurrogate(0), _codepoint(0) {}
    3010:	f1 2c       	mov	r15, r1
    3012:	e1 2c       	mov	r14, r1
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:36
      if (codepoint16 < 0x10) {  // 0x10000
        *(p++) = char(codepoint16 | 0xE0);
      } else {
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
        codepoint16 = uint16_t(codepoint16 >> 6);
        *(p++) = char(codepoint16 | 0xF0);
    3014:	70 ef       	ldi	r23, 0xF0	; 240
    3016:	a7 2e       	mov	r10, r23
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:360

    move();
    for (;;) {
      char c = current();
    3018:	c8 01       	movw	r24, r16
    301a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    301e:	f8 01       	movw	r30, r16
    3020:	10 86       	std	Z+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:362
      move();
      if (c == stopChar)
    3022:	b8 16       	cp	r11, r24
    3024:	09 f4       	brne	.+2      	; 0x3028 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x46>
    3026:	cb c0       	rjmp	.+406    	; 0x31be <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1dc>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:365
        break;

      if (c == '\0') {
    3028:	81 11       	cpse	r24, r1
    302a:	19 c0       	rjmp	.+50     	; 0x305e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x7c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:366
        _error = DeserializationError::IncompleteInput;
    302c:	f8 01       	movw	r30, r16
    302e:	e5 5b       	subi	r30, 0xB5	; 181
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	82 e0       	ldi	r24, 0x02	; 2
    3034:	90 e0       	ldi	r25, 0x00	; 0
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:521
        _error = DeserializationError::IncompleteInput;
        return false;
      }
      uint8_t value = decodeHex(digit);
      if (value > 0x0F) {
        _error = DeserializationError::InvalidInput;
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:383
        if (c == 'u') {
#if ARDUINOJSON_DECODE_UNICODE
          move();
          uint16_t codeunit;
          if (!parseHex4(codeunit))
            return false;
    303a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:410
      _error = DeserializationError::NoMemory;
      return false;
    }

    return true;
  }
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	bf 90       	pop	r11
    3058:	af 90       	pop	r10
    305a:	9f 90       	pop	r9
    305c:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:370
      if (c == '\0') {
        _error = DeserializationError::IncompleteInput;
        return false;
      }

      if (c == '\\') {
    305e:	8c 35       	cpi	r24, 0x5C	; 92
    3060:	09 f0       	breq	.+2      	; 0x3064 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x82>
    3062:	a2 c0       	rjmp	.+324    	; 0x31a8 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1c6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:371
        c = current();
    3064:	c8 01       	movw	r24, r16
    3066:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:373

        if (c == '\0') {
    306a:	88 23       	and	r24, r24
    306c:	f9 f2       	breq	.-66     	; 0x302c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x4a>
_ZN17ArduinoJson6194_114EscapeSequence12unescapeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:24
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(false);
    306e:	e6 e3       	ldi	r30, 0x36	; 54
    3070:	f1 e0       	ldi	r31, 0x01	; 1
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:378
          _error = DeserializationError::IncompleteInput;
          return false;
        }

        if (c == 'u') {
    3072:	85 37       	cpi	r24, 0x75	; 117
    3074:	09 f0       	breq	.+2      	; 0x3078 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x96>
    3076:	8c c0       	rjmp	.+280    	; 0x3190 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1ae>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    3078:	d8 01       	movw	r26, r16
    307a:	18 96       	adiw	r26, 0x08	; 8
    307c:	1c 92       	st	X, r1
    307e:	64 e0       	ldi	r22, 0x04	; 4
    3080:	96 2e       	mov	r9, r22
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:512
    }
    return true;
  }

  bool parseHex4(uint16_t &result) {
    result = 0;
    3082:	d1 2c       	mov	r13, r1
    3084:	c1 2c       	mov	r12, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:514
    for (uint8_t i = 0; i < 4; ++i) {
      char digit = current();
    3086:	c8 01       	movw	r24, r16
    3088:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:515
      if (!digit) {
    308c:	88 23       	and	r24, r24
    308e:	71 f2       	breq	.-100    	; 0x302c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x4a>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9decodeHexEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:544
  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
  }

  static inline uint8_t decodeHex(char c) {
    if (c < 'A')
    3090:	81 34       	cpi	r24, 0x41	; 65
    3092:	4c f4       	brge	.+18     	; 0x30a6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xc4>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:545
      return uint8_t(c - '0');
    3094:	80 53       	subi	r24, 0x30	; 48
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:520
      if (!digit) {
        _error = DeserializationError::IncompleteInput;
        return false;
      }
      uint8_t value = decodeHex(digit);
      if (value > 0x0F) {
    3096:	80 31       	cpi	r24, 0x10	; 16
    3098:	48 f0       	brcs	.+18     	; 0x30ac <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xca>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:521
        _error = DeserializationError::InvalidInput;
    309a:	f8 01       	movw	r30, r16
    309c:	e5 5b       	subi	r30, 0xB5	; 181
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	83 e0       	ldi	r24, 0x03	; 3
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	c8 cf       	rjmp	.-112    	; 0x3036 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x54>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9decodeHexEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:546
  }

  static inline uint8_t decodeHex(char c) {
    if (c < 'A')
      return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    30a6:	8f 7d       	andi	r24, 0xDF	; 223
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:547
    return uint8_t(c - 'A' + 10);
    30a8:	87 53       	subi	r24, 0x37	; 55
    30aa:	f5 cf       	rjmp	.-22     	; 0x3096 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xb4>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:524
      uint8_t value = decodeHex(digit);
      if (value > 0x0F) {
        _error = DeserializationError::InvalidInput;
        return false;
      }
      result = uint16_t((result << 4) | value);
    30ac:	54 e0       	ldi	r21, 0x04	; 4
    30ae:	cc 0c       	add	r12, r12
    30b0:	dd 1c       	adc	r13, r13
    30b2:	5a 95       	dec	r21
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xcc>
    30b6:	c8 2a       	or	r12, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    30b8:	f8 01       	movw	r30, r16
    30ba:	10 86       	std	Z+8, r1	; 0x08
    30bc:	9a 94       	dec	r9
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9parseHex4ERj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:513
    return true;
  }

  bool parseHex4(uint16_t &result) {
    result = 0;
    for (uint8_t i = 0; i < 4; ++i) {
    30be:	91 10       	cpse	r9, r1
    30c0:	e2 cf       	rjmp	.-60     	; 0x3086 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xa4>
_ZN17ArduinoJson6194_15Utf1615isHighSurrogateEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:25

namespace ARDUINOJSON_NAMESPACE {

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
  return codeunit >= 0xD800 && codeunit < 0xDC00;
    30c2:	c6 01       	movw	r24, r12
    30c4:	98 5d       	subi	r25, 0xD8	; 216
_ZN17ArduinoJson6194_15Utf169Codepoint6appendEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:37
class Codepoint {
 public:
  Codepoint() : _highSurrogate(0), _codepoint(0) {}

  bool append(uint16_t codeunit) {
    if (isHighSurrogate(codeunit)) {
    30c6:	81 15       	cp	r24, r1
    30c8:	94 40       	sbci	r25, 0x04	; 4
    30ca:	20 f4       	brcc	.+8      	; 0x30d4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xf2>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:38
      _highSurrogate = codeunit & 0x3FF;
    30cc:	76 01       	movw	r14, r12
    30ce:	23 e0       	ldi	r18, 0x03	; 3
    30d0:	f2 22       	and	r15, r18
    30d2:	a2 cf       	rjmp	.-188    	; 0x3018 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
_ZN17ArduinoJson6194_15Utf1614isLowSurrogateEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:29
inline bool isHighSurrogate(uint16_t codeunit) {
  return codeunit >= 0xD800 && codeunit < 0xDC00;
}

inline bool isLowSurrogate(uint16_t codeunit) {
  return codeunit >= 0xDC00 && codeunit < 0xE000;
    30d4:	c6 01       	movw	r24, r12
    30d6:	9c 5d       	subi	r25, 0xDC	; 220
_ZN17ArduinoJson6194_15Utf169Codepoint6appendEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:42
    if (isHighSurrogate(codeunit)) {
      _highSurrogate = codeunit & 0x3FF;
      return false;
    }

    if (isLowSurrogate(codeunit)) {
    30d8:	81 15       	cp	r24, r1
    30da:	94 40       	sbci	r25, 0x04	; 4
    30dc:	78 f5       	brcc	.+94     	; 0x313c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x15a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:44
      _codepoint =
          uint32_t(0x10000 + ((_highSurrogate << 10) | (codeunit & 0x3FF)));
    30de:	b3 e0       	ldi	r27, 0x03	; 3
    30e0:	db 22       	and	r13, r27
    30e2:	c7 01       	movw	r24, r14
    30e4:	98 2f       	mov	r25, r24
    30e6:	88 27       	eor	r24, r24
    30e8:	99 0f       	add	r25, r25
    30ea:	99 0f       	add	r25, r25
    30ec:	8c 29       	or	r24, r12
    30ee:	9d 29       	or	r25, r13
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	a0 e0       	ldi	r26, 0x00	; 0
    30f4:	11 96       	adiw	r26, 0x01	; 1
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:23
  } else {
    // a buffer to store the string in reverse
    char buf[5];
    char* p = buf;

    *(p++) = 0;
    30f6:	19 82       	std	Y+1, r1	; 0x01
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:24
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
    30f8:	28 2f       	mov	r18, r24
    30fa:	2f 73       	andi	r18, 0x3F	; 63
    30fc:	20 68       	ori	r18, 0x80	; 128
    30fe:	2a 83       	std	Y+2, r18	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:25
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
    3100:	36 e0       	ldi	r19, 0x06	; 6
    3102:	b6 95       	lsr	r27
    3104:	a7 95       	ror	r26
    3106:	97 95       	ror	r25
    3108:	87 95       	ror	r24
    310a:	3a 95       	dec	r19
    310c:	d1 f7       	brne	.-12     	; 0x3102 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x120>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:26
    if (codepoint16 < 0x20) {  // 0x800
    310e:	80 32       	cpi	r24, 0x20	; 32
    3110:	91 05       	cpc	r25, r1
    3112:	30 f5       	brcc	.+76     	; 0x3160 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x17e>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:27
      *(p++) = char(codepoint16 | 0xC0);
    3114:	80 6c       	ori	r24, 0xC0	; 192
    3116:	8b 83       	std	Y+3, r24	; 0x03
    3118:	fe 01       	movw	r30, r28
    311a:	34 96       	adiw	r30, 0x04	; 4
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:40
        codepoint16 = uint16_t(codepoint16 >> 6);
        *(p++) = char(codepoint16 | 0xF0);
      }
    }

    while (*(--p)) {
    311c:	82 91       	ld	r24, -Z
    311e:	88 23       	and	r24, r24
    3120:	09 f4       	brne	.+2      	; 0x3124 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x142>
    3122:	7a cf       	rjmp	.-268    	; 0x3018 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    _writePtr++;
    return s;
  }

  void append(char c) {
    *_writePtr++ = c;
    3124:	d8 01       	movw	r26, r16
    3126:	4d 91       	ld	r20, X+
    3128:	5c 91       	ld	r21, X
    312a:	11 97       	sbiw	r26, 0x01	; 1
    312c:	9a 01       	movw	r18, r20
    312e:	2f 5f       	subi	r18, 0xFF	; 255
    3130:	3f 4f       	sbci	r19, 0xFF	; 255
    3132:	2d 93       	st	X+, r18
    3134:	3c 93       	st	X, r19
    3136:	da 01       	movw	r26, r20
    3138:	8c 93       	st	X, r24
    313a:	f0 cf       	rjmp	.-32     	; 0x311c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x13a>
_ZN17ArduinoJson6194_15Utf169Codepoint6appendEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf16.hpp:48
      return true;
    }

    _codepoint = codeunit;
    313c:	c6 01       	movw	r24, r12
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	a0 e0       	ldi	r26, 0x00	; 0
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:16
namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
    3142:	80 38       	cpi	r24, 0x80	; 128
    3144:	91 05       	cpc	r25, r1
    3146:	a1 05       	cpc	r26, r1
    3148:	b1 05       	cpc	r27, r1
    314a:	a8 f6       	brcc	.-86     	; 0x30f6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x114>
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    314c:	d8 01       	movw	r26, r16
    314e:	ed 91       	ld	r30, X+
    3150:	fc 91       	ld	r31, X
    3152:	11 97       	sbiw	r26, 0x01	; 1
    3154:	cf 01       	movw	r24, r30
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	8d 93       	st	X+, r24
    315a:	9c 93       	st	X, r25
_ZN17ArduinoJson6194_14Utf815encodeCodepointINS_11StringMoverEEEvmRT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:17
    str.append(char(codepoint32));
    315c:	c0 82       	st	Z, r12
    315e:	5c cf       	rjmp	.-328    	; 0x3018 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:29
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
    if (codepoint16 < 0x20) {  // 0x800
      *(p++) = char(codepoint16 | 0xC0);
    } else {
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
    3160:	28 2f       	mov	r18, r24
    3162:	2f 73       	andi	r18, 0x3F	; 63
    3164:	20 68       	ori	r18, 0x80	; 128
    3166:	2b 83       	std	Y+3, r18	; 0x03
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:30
      codepoint16 = uint16_t(codepoint16 >> 6);
    3168:	26 e0       	ldi	r18, 0x06	; 6
    316a:	96 95       	lsr	r25
    316c:	87 95       	ror	r24
    316e:	2a 95       	dec	r18
    3170:	e1 f7       	brne	.-8      	; 0x316a <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x188>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:31
      if (codepoint16 < 0x10) {  // 0x10000
    3172:	80 31       	cpi	r24, 0x10	; 16
    3174:	91 05       	cpc	r25, r1
    3176:	28 f4       	brcc	.+10     	; 0x3182 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1a0>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:32
        *(p++) = char(codepoint16 | 0xE0);
    3178:	80 6e       	ori	r24, 0xE0	; 224
    317a:	8c 83       	std	Y+4, r24	; 0x04
    317c:	fe 01       	movw	r30, r28
    317e:	35 96       	adiw	r30, 0x05	; 5
    3180:	cd cf       	rjmp	.-102    	; 0x311c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x13a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:34
      } else {
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
    3182:	80 68       	ori	r24, 0x80	; 128
    3184:	8c 83       	std	Y+4, r24	; 0x04
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Utf8.hpp:36
        codepoint16 = uint16_t(codepoint16 >> 6);
        *(p++) = char(codepoint16 | 0xF0);
    3186:	ad 82       	std	Y+5, r10	; 0x05
    3188:	fe 01       	movw	r30, r28
    318a:	36 96       	adiw	r30, 0x06	; 6
    318c:	c7 cf       	rjmp	.-114    	; 0x311c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x13a>
_ZN17ArduinoJson6194_114EscapeSequence12unescapeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:30
    for (;;) {
      if (p[0] == '\0')
        return 0;
      if (p[0] == c)
        return p[1];
      p += 2;
    318e:	32 96       	adiw	r30, 0x02	; 2
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:26

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(false);
    for (;;) {
      if (p[0] == '\0')
    3190:	90 81       	ld	r25, Z
    3192:	99 23       	and	r25, r25
    3194:	09 f4       	brne	.+2      	; 0x3198 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1b6>
    3196:	81 cf       	rjmp	.-254    	; 0x309a <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xb8>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:28
        return 0;
      if (p[0] == c)
    3198:	89 13       	cpse	r24, r25
    319a:	f9 cf       	rjmp	.-14     	; 0x318e <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1ac>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:29
        return p[1];
    319c:	81 81       	ldd	r24, Z+1	; 0x01
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:394
          continue;
        }

        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') {
    319e:	88 23       	and	r24, r24
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x1c2>
    31a2:	7b cf       	rjmp	.-266    	; 0x309a <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0xb8>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    31a4:	f8 01       	movw	r30, r16
    31a6:	10 86       	std	Z+8, r1	; 0x08
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    31a8:	d8 01       	movw	r26, r16
    31aa:	ed 91       	ld	r30, X+
    31ac:	fc 91       	ld	r31, X
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	9f 01       	movw	r18, r30
    31b2:	2f 5f       	subi	r18, 0xFF	; 255
    31b4:	3f 4f       	sbci	r19, 0xFF	; 255
    31b6:	2d 93       	st	X+, r18
    31b8:	3c 93       	st	X, r19
    31ba:	80 83       	st	Z, r24
    31bc:	2d cf       	rjmp	.-422    	; 0x3018 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x36>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:409
    if (!_stringStorage.isValid()) {
      _error = DeserializationError::NoMemory;
      return false;
    }

    return true;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	3d cf       	rjmp	.-390    	; 0x303c <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()+0x5a>

000031c2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9isBetweenEccc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:531
    }
    return true;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    31c2:	80 33       	cpi	r24, 0x30	; 48
    31c4:	9c f0       	brlt	.+38     	; 0x31ec <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x2a>
    31c6:	8a 33       	cpi	r24, 0x3A	; 58
    31c8:	24 f0       	brlt	.+8      	; 0x31d2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x10>
    31ca:	8f 35       	cpi	r24, 0x5F	; 95
    31cc:	24 f0       	brlt	.+8      	; 0x31d6 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x14>
    31ce:	8b 37       	cpi	r24, 0x7B	; 123
    31d0:	24 f4       	brge	.+8      	; 0x31da <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x18>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE22canBeInNonQuotedStringEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:536
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    31d2:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:537
  }
    31d4:	08 95       	ret
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE9isBetweenEccc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:531
    }
    return true;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
    31d6:	81 34       	cpi	r24, 0x41	; 65
    31d8:	4c f0       	brlt	.+18     	; 0x31ec <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x2a>
    31da:	8b 35       	cpi	r24, 0x5B	; 91
    31dc:	d4 f3       	brlt	.-12     	; 0x31d2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x10>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE22canBeInNonQuotedStringEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:536
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
    31de:	93 ed       	ldi	r25, 0xD3	; 211
    31e0:	98 0f       	add	r25, r24
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	92 30       	cpi	r25, 0x02	; 2
    31e6:	b0 f3       	brcs	.-20     	; 0x31d4 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x12>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	08 95       	ret
    31ec:	8b 32       	cpi	r24, 0x2B	; 43
    31ee:	b9 f7       	brne	.-18     	; 0x31de <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x1c>
    31f0:	f0 cf       	rjmp	.-32     	; 0x31d2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)+0x10>

000031f2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:61
    move();
    return true;
  }

  template <typename TFilter>
  bool parseVariant(VariantData &variant, TFilter filter,
    31f2:	9f 92       	push	r9
    31f4:	af 92       	push	r10
    31f6:	bf 92       	push	r11
    31f8:	cf 92       	push	r12
    31fa:	df 92       	push	r13
    31fc:	ef 92       	push	r14
    31fe:	ff 92       	push	r15
    3200:	0f 93       	push	r16
    3202:	1f 93       	push	r17
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	ec 01       	movw	r28, r24
    320a:	8b 01       	movw	r16, r22
    320c:	e2 2e       	mov	r14, r18
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:63
                    NestingLimit nestingLimit) {
    if (!skipSpacesAndComments())
    320e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    3212:	d8 2e       	mov	r13, r24
    3214:	81 11       	cpse	r24, r1
    3216:	02 c0       	rjmp	.+4      	; 0x321c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x2a>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:473
    c = _buffer[0];
    if (c == 't') {  // true
      result.setBoolean(true);
      if (n != 4) {
        _error = DeserializationError::IncompleteInput;
        return false;
    3218:	f1 2c       	mov	r15, r1
    321a:	69 c0       	rjmp	.+210    	; 0x32ee <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfc>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:66
  bool parseVariant(VariantData &variant, TFilter filter,
                    NestingLimit nestingLimit) {
    if (!skipSpacesAndComments())
      return false;

    switch (current()) {
    321c:	ce 01       	movw	r24, r28
    321e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    3222:	87 32       	cpi	r24, 0x27	; 39
    3224:	09 f4       	brne	.+2      	; 0x3228 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x36>
    3226:	9e c0       	rjmp	.+316    	; 0x3364 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x172>
    3228:	14 f5       	brge	.+68     	; 0x326e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x7c>
    322a:	82 32       	cpi	r24, 0x22	; 34
    322c:	09 f4       	brne	.+2      	; 0x3230 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x3e>
    322e:	9a c0       	rjmp	.+308    	; 0x3364 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x172>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:460
  }

  bool parseNumericValue(VariantData &result) {
    uint8_t n = 0;

    char c = current();
    3230:	ce 01       	movw	r24, r28
    3232:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    3236:	e8 2e       	mov	r14, r24
    3238:	5e 01       	movw	r10, r28
    323a:	fb e0       	ldi	r31, 0x0B	; 11
    323c:	af 0e       	add	r10, r31
    323e:	b1 1c       	adc	r11, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:458

    return true;
  }

  bool parseNumericValue(VariantData &result) {
    uint8_t n = 0;
    3240:	f1 2c       	mov	r15, r1
    3242:	9a 2c       	mov	r9, r10
    3244:	cb 2c       	mov	r12, r11
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:461

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
    3246:	8e 2d       	mov	r24, r14
    3248:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>
    324c:	88 23       	and	r24, r24
    324e:	09 f4       	brne	.+2      	; 0x3252 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x60>
    3250:	ab c0       	rjmp	.+342    	; 0x33a8 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1b6>
    3252:	8f e3       	ldi	r24, 0x3F	; 63
    3254:	f8 16       	cp	r15, r24
    3256:	09 f4       	brne	.+2      	; 0x325a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x68>
    3258:	a7 c0       	rjmp	.+334    	; 0x33a8 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1b6>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    325a:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:463
      move();
      _buffer[n++] = c;
    325c:	f3 94       	inc	r15
    325e:	f5 01       	movw	r30, r10
    3260:	e1 92       	st	Z+, r14
    3262:	5f 01       	movw	r10, r30
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:464
      c = current();
    3264:	ce 01       	movw	r24, r28
    3266:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    326a:	e8 2e       	mov	r14, r24
    326c:	ec cf       	rjmp	.-40     	; 0x3246 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x54>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:66
  bool parseVariant(VariantData &variant, TFilter filter,
                    NestingLimit nestingLimit) {
    if (!skipSpacesAndComments())
      return false;

    switch (current()) {
    326e:	8b 35       	cpi	r24, 0x5B	; 91
    3270:	e1 f0       	breq	.+56     	; 0x32aa <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xb8>
    3272:	8b 37       	cpi	r24, 0x7B	; 123
    3274:	e9 f6       	brne	.-70     	; 0x3230 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x3e>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3276:	f8 01       	movw	r30, r16
    3278:	84 81       	ldd	r24, Z+4	; 0x04
    327a:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    327c:	80 62       	ori	r24, 0x20	; 32
    327e:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:52
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
    3280:	11 82       	std	Z+1, r1	; 0x01
    3282:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:53
  _tail = 0;
    3284:	13 82       	std	Z+3, r1	; 0x03
    3286:	12 82       	std	Z+2, r1	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:75
        else
          return skipArray(nestingLimit);

      case '{':
        if (filter.allowObject())
          return parseObject(variant.toObject(), filter, nestingLimit);
    3288:	2e 2d       	mov	r18, r14
    328a:	40 e0       	ldi	r20, 0x00	; 0
    328c:	b8 01       	movw	r22, r16
    328e:	ce 01       	movw	r24, r28
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:92
        if (filter.allowValue())
          return parseNumericValue(variant);
        else
          return skipNumericValue();
    }
  }
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	ff 90       	pop	r15
    329a:	ef 90       	pop	r14
    329c:	df 90       	pop	r13
    329e:	cf 90       	pop	r12
    32a0:	bf 90       	pop	r11
    32a2:	af 90       	pop	r10
    32a4:	9f 90       	pop	r9
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:75
        else
          return skipArray(nestingLimit);

      case '{':
        if (filter.allowObject())
          return parseObject(variant.toObject(), filter, nestingLimit);
    32a6:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    32aa:	f8 01       	movw	r30, r16
    32ac:	84 81       	ldd	r24, Z+4	; 0x04
    32ae:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    32b0:	80 64       	ori	r24, 0x40	; 64
    32b2:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:52
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
    32b4:	11 82       	std	Z+1, r1	; 0x01
    32b6:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:53
  _tail = 0;
    32b8:	13 82       	std	Z+3, r1	; 0x03
    32ba:	12 82       	std	Z+2, r1	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:117
  }

  template <typename TFilter>
  bool parseArray(CollectionData &array, TFilter filter,
                  NestingLimit nestingLimit) {
    if (nestingLimit.reached()) {
    32bc:	e1 10       	cpse	r14, r1
    32be:	07 c0       	rjmp	.+14     	; 0x32ce <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xdc>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:118
      _error = DeserializationError::TooDeep;
    32c0:	c5 5b       	subi	r28, 0xB5	; 181
    32c2:	df 4f       	sbci	r29, 0xFF	; 255
    32c4:	85 e0       	ldi	r24, 0x05	; 5
    32c6:	90 e0       	ldi	r25, 0x00	; 0
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:472

    c = _buffer[0];
    if (c == 't') {  // true
      result.setBoolean(true);
      if (n != 4) {
        _error = DeserializationError::IncompleteInput;
    32c8:	99 83       	std	Y+1, r25	; 0x01
    32ca:	88 83       	st	Y, r24
    32cc:	a5 cf       	rjmp	.-182    	; 0x3218 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    32ce:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:127
    // Skip opening braket
    ARDUINOJSON_ASSERT(current() == '[');
    move();

    // Skip spaces
    if (!skipSpacesAndComments())
    32d0:	ce 01       	movw	r24, r28
    32d2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    32d6:	88 23       	and	r24, r24
    32d8:	09 f4       	brne	.+2      	; 0x32dc <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xea>
    32da:	9e cf       	rjmp	.-196    	; 0x3218 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:131
      return false;

    // Empty array?
    if (eat(']'))
    32dc:	6d e5       	ldi	r22, 0x5D	; 93
    32de:	ce 01       	movw	r24, r28
    32e0:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    32e4:	f8 2e       	mov	r15, r24
_ZNK17ArduinoJson6194_112NestingLimit9decrementEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/NestingLimit.hpp:19
  NestingLimit() : _value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
  explicit NestingLimit(uint8_t n) : _value(n) {}

  NestingLimit decrement() const {
    ARDUINOJSON_ASSERT(_value > 0);
    return NestingLimit(static_cast<uint8_t>(_value - 1));
    32e6:	ea 94       	dec	r14
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:131
    32e8:	88 23       	and	r24, r24
    32ea:	71 f0       	breq	.+28     	; 0x3308 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x116>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:132
      return true;
    32ec:	fd 2c       	mov	r15, r13
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:92
        if (filter.allowValue())
          return parseNumericValue(variant);
        else
          return skipNumericValue();
    }
  }
    32ee:	8f 2d       	mov	r24, r15
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	ff 90       	pop	r15
    32fa:	ef 90       	pop	r14
    32fc:	df 90       	pop	r13
    32fe:	cf 90       	pop	r12
    3300:	bf 90       	pop	r11
    3302:	af 90       	pop	r10
    3304:	9f 90       	pop	r9
    3306:	08 95       	ret
_ZN17ArduinoJson6194_114CollectionData10addElementEPNS_10MemoryPoolE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:36
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
  return slotData(addSlot(pool));
    3308:	69 85       	ldd	r22, Y+9	; 0x09
    330a:	7a 85       	ldd	r23, Y+10	; 0x0a
    330c:	c8 01       	movw	r24, r16
    330e:	0e 94 9a 01 	call	0x334	; 0x334 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:141
    // Read each value
    for (;;) {
      if (memberFilter.allow()) {
        // Allocate slot in array
        VariantData *value = array.addElement(_pool);
        if (!value) {
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	39 f4       	brne	.+14     	; 0x3324 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x132>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:142
          _error = DeserializationError::NoMemory;
    3316:	c5 5b       	subi	r28, 0xB5	; 181
    3318:	df 4f       	sbci	r29, 0xFF	; 255
    331a:	84 e0       	ldi	r24, 0x04	; 4
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	99 83       	std	Y+1, r25	; 0x01
    3320:	88 83       	st	Y, r24
    3322:	e5 cf       	rjmp	.-54     	; 0x32ee <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfc>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:147
          return false;
        }

        // 1 - Parse value
        if (!parseVariant(*value, memberFilter, nestingLimit.decrement()))
    3324:	2e 2d       	mov	r18, r14
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	bc 01       	movw	r22, r24
    332a:	ce 01       	movw	r24, r28
    332c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
    3330:	88 23       	and	r24, r24
    3332:	09 f4       	brne	.+2      	; 0x3336 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x144>
    3334:	71 cf       	rjmp	.-286    	; 0x3218 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:155
        if (!skipVariant(nestingLimit.decrement()))
          return false;
      }

      // 2 - Skip spaces
      if (!skipSpacesAndComments())
    3336:	ce 01       	movw	r24, r28
    3338:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    333c:	88 23       	and	r24, r24
    333e:	09 f4       	brne	.+2      	; 0x3342 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x150>
    3340:	6b cf       	rjmp	.-298    	; 0x3218 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:159
        return false;

      // 3 - More values?
      if (eat(']'))
    3342:	6d e5       	ldi	r22, 0x5D	; 93
    3344:	ce 01       	movw	r24, r28
    3346:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    334a:	81 11       	cpse	r24, r1
    334c:	cf cf       	rjmp	.-98     	; 0x32ec <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:161
        return true;
      if (!eat(',')) {
    334e:	6c e2       	ldi	r22, 0x2C	; 44
    3350:	ce 01       	movw	r24, r28
    3352:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    3356:	81 11       	cpse	r24, r1
    3358:	d7 cf       	rjmp	.-82     	; 0x3308 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x116>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:162
        _error = DeserializationError::InvalidInput;
    335a:	c5 5b       	subi	r28, 0xB5	; 181
    335c:	df 4f       	sbci	r29, 0xFF	; 255
    335e:	83 e0       	ldi	r24, 0x03	; 3
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	b2 cf       	rjmp	.-156    	; 0x32c8 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xd6>
_ZN17ArduinoJson6194_111StringMover11startStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:17
class StringMover {
 public:
  StringMover(char* ptr) : _writePtr(ptr) {}

  void startString() {
    _startPtr = _writePtr;
    3364:	88 81       	ld	r24, Y
    3366:	99 81       	ldd	r25, Y+1	; 0x01
    3368:	9b 83       	std	Y+3, r25	; 0x03
    336a:	8a 83       	std	Y+2, r24	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE16parseStringValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:346
    }
  }

  bool parseStringValue(VariantData &variant) {
    _stringStorage.startString();
    if (!parseQuotedString())
    336c:	ce 01       	movw	r24, r28
    336e:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()>
    3372:	f8 2e       	mov	r15, r24
    3374:	88 23       	and	r24, r24
    3376:	09 f4       	brne	.+2      	; 0x337a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x188>
    3378:	4f cf       	rjmp	.-354    	; 0x3218 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZNK17ArduinoJson6194_111StringMover3strEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:35
  bool isValid() const {
    return true;
  }

  String str() const {
    _writePtr[0] = 0;  // terminator
    337a:	e8 81       	ld	r30, Y
    337c:	f9 81       	ldd	r31, Y+1	; 0x01
    337e:	10 82       	st	Z, r1
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    3380:	28 81       	ld	r18, Y
    3382:	39 81       	ldd	r19, Y+1	; 0x01
    3384:	4a 81       	ldd	r20, Y+2	; 0x02
    3386:	5b 81       	ldd	r21, Y+3	; 0x03
_ZN17ArduinoJson6194_111StringMover4saveEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:22
    _startPtr = _writePtr;
  }

  FORCE_INLINE String save() {
    String s = str();
    _writePtr++;
    3388:	c9 01       	movw	r24, r18
    338a:	01 96       	adiw	r24, 0x01	; 1
    338c:	99 83       	std	Y+1, r25	; 0x01
    338e:	88 83       	st	Y, r24
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3390:	f8 01       	movw	r30, r16
    3392:	84 81       	ldd	r24, Z+4	; 0x04
    3394:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3396:	84 60       	ori	r24, 0x04	; 4
    3398:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData9setStringENS_6StringE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:217
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
      setType(VALUE_IS_LINKED_STRING);
    else
      setType(VALUE_IS_OWNED_STRING);
    _content.asString.data = s.c_str();
    339a:	51 83       	std	Z+1, r21	; 0x01
    339c:	40 83       	st	Z, r20
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    _writePtr[0] = 0;  // terminator
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    339e:	24 1b       	sub	r18, r20
    33a0:	35 0b       	sbc	r19, r21
_ZN17ArduinoJson6194_111VariantData9setStringENS_6StringE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:218
    _content.asString.size = s.size();
    33a2:	33 83       	std	Z+3, r19	; 0x03
    33a4:	22 83       	std	Z+2, r18	; 0x02
    33a6:	a3 cf       	rjmp	.-186    	; 0x32ee <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfc>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:466
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      _buffer[n++] = c;
      c = current();
    }
    _buffer[n] = 0;
    33a8:	fe 01       	movw	r30, r28
    33aa:	ef 0d       	add	r30, r15
    33ac:	f1 1d       	adc	r31, r1
    33ae:	13 86       	std	Z+11, r1	; 0x0b
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:468

    c = _buffer[0];
    33b0:	8b 85       	ldd	r24, Y+11	; 0x0b
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:469
    if (c == 't') {  // true
    33b2:	84 37       	cpi	r24, 0x74	; 116
    33b4:	81 f4       	brne	.+32     	; 0x33d6 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1e4>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    33b6:	f8 01       	movw	r30, r16
    33b8:	84 81       	ldd	r24, Z+4	; 0x04
    33ba:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    33bc:	86 60       	ori	r24, 0x06	; 6
    33be:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData10setBooleanEb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:163
      _content.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
    _content.asBoolean = value;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	80 83       	st	Z, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:471
      result.setBoolean(true);
      if (n != 4) {
    33c4:	f4 e0       	ldi	r31, 0x04	; 4
    33c6:	ff 16       	cp	r15, r31
    33c8:	09 f4       	brne	.+2      	; 0x33cc <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1da>
    33ca:	90 cf       	rjmp	.-224    	; 0x32ec <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:472
        _error = DeserializationError::IncompleteInput;
    33cc:	c5 5b       	subi	r28, 0xB5	; 181
    33ce:	df 4f       	sbci	r29, 0xFF	; 255
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	79 cf       	rjmp	.-270    	; 0x32c8 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xd6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:477
        return false;
      }
      return true;
    }
    if (c == 'f') {  // false
    33d6:	86 36       	cpi	r24, 0x66	; 102
    33d8:	41 f4       	brne	.+16     	; 0x33ea <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1f8>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    33da:	f8 01       	movw	r30, r16
    33dc:	84 81       	ldd	r24, Z+4	; 0x04
    33de:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    33e0:	86 60       	ori	r24, 0x06	; 6
    33e2:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_111VariantData10setBooleanEb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:163
      _content.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
    _content.asBoolean = value;
    33e4:	10 82       	st	Z, r1
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:479
      result.setBoolean(false);
      if (n != 5) {
    33e6:	f5 e0       	ldi	r31, 0x05	; 5
    33e8:	ee cf       	rjmp	.-36     	; 0x33c6 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1d4>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:485
        _error = DeserializationError::IncompleteInput;
        return false;
      }
      return true;
    }
    if (c == 'n') {  // null
    33ea:	8e 36       	cpi	r24, 0x6E	; 110
    33ec:	21 f4       	brne	.+8      	; 0x33f6 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x204>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:487
      // the variant is already null
      if (n != 4) {
    33ee:	84 e0       	ldi	r24, 0x04	; 4
    33f0:	f8 12       	cpse	r15, r24
    33f2:	ec cf       	rjmp	.-40     	; 0x33cc <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x1da>
    33f4:	7b cf       	rjmp	.-266    	; 0x32ec <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:494
        return false;
      }
      return true;
    }

    if (!parseNumber(_buffer, result)) {
    33f6:	b8 01       	movw	r22, r16
    33f8:	89 2d       	mov	r24, r9
    33fa:	9c 2d       	mov	r25, r12
    33fc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ArduinoJson6194_1::parseNumber(char const*, ArduinoJson6194_1::VariantData&)>
    3400:	88 23       	and	r24, r24
    3402:	09 f4       	brne	.+2      	; 0x3406 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x214>
    3404:	aa cf       	rjmp	.-172    	; 0x335a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x168>
    3406:	72 cf       	rjmp	.-284    	; 0x32ec <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>

00003408 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>:
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:199
      }
    }
  }

  template <typename TFilter>
  bool parseObject(CollectionData &object, TFilter filter,
    3408:	af 92       	push	r10
    340a:	bf 92       	push	r11
    340c:	cf 92       	push	r12
    340e:	df 92       	push	r13
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:201
                   NestingLimit nestingLimit) {
    if (nestingLimit.reached()) {
    341a:	21 11       	cpse	r18, r1
    341c:	13 c0       	rjmp	.+38     	; 0x3444 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x3c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:202
      _error = DeserializationError::TooDeep;
    341e:	ec 01       	movw	r28, r24
    3420:	c5 5b       	subi	r28, 0xB5	; 181
    3422:	df 4f       	sbci	r29, 0xFF	; 255
    3424:	85 e0       	ldi	r24, 0x05	; 5
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	99 83       	std	Y+1, r25	; 0x01
    342a:	88 83       	st	Y, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:203
      return false;
    342c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:281

      // Skip spaces
      if (!skipSpacesAndComments())
        return false;
    }
  }
    342e:	81 2f       	mov	r24, r17
    3430:	df 91       	pop	r29
    3432:	cf 91       	pop	r28
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	ff 90       	pop	r15
    343a:	df 90       	pop	r13
    343c:	cf 90       	pop	r12
    343e:	bf 90       	pop	r11
    3440:	af 90       	pop	r10
    3442:	08 95       	ret
    3444:	f2 2e       	mov	r15, r18
    3446:	6b 01       	movw	r12, r22
    3448:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    344a:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:211
    // Skip opening brace
    ARDUINOJSON_ASSERT(current() == '{');
    move();

    // Skip spaces
    if (!skipSpacesAndComments())
    344c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    3450:	18 2f       	mov	r17, r24
    3452:	88 23       	and	r24, r24
    3454:	61 f3       	breq	.-40     	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:215
      return false;

    // Empty object?
    if (eat('}'))
    3456:	6d e7       	ldi	r22, 0x7D	; 125
    3458:	ce 01       	movw	r24, r28
    345a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    345e:	18 2f       	mov	r17, r24
    3460:	81 11       	cpse	r24, r1
    3462:	e5 cf       	rjmp	.-54     	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZNK17ArduinoJson6194_112NestingLimit9decrementEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/NestingLimit.hpp:19
    3464:	fa 94       	dec	r15
_ZN17ArduinoJson6194_111StringMover11startStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:17
class StringMover {
 public:
  StringMover(char* ptr) : _writePtr(ptr) {}

  void startString() {
    _startPtr = _writePtr;
    3466:	88 81       	ld	r24, Y
    3468:	99 81       	ldd	r25, Y+1	; 0x01
    346a:	9b 83       	std	Y+3, r25	; 0x03
    346c:	8a 83       	std	Y+2, r24	; 0x02
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE8parseKeyEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:337
    }
  }

  bool parseKey() {
    _stringStorage.startString();
    if (isQuote(current())) {
    346e:	ce 01       	movw	r24, r28
    3470:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE7isQuoteEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:540
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
    3474:	87 32       	cpi	r24, 0x27	; 39
    3476:	89 f0       	breq	.+34     	; 0x349a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x92>
    3478:	82 32       	cpi	r24, 0x22	; 34
    347a:	79 f0       	breq	.+30     	; 0x349a <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x92>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE20parseNonQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:413

    return true;
  }

  bool parseNonQuotedString() {
    char c = current();
    347c:	ce 01       	movw	r24, r28
    347e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    3482:	08 2f       	mov	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:416
    ARDUINOJSON_ASSERT(c);

    if (canBeInNonQuotedString(c)) {  // no quotes
    3484:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>
    3488:	81 11       	cpse	r24, r1
    348a:	3b c0       	rjmp	.+118    	; 0x3502 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:423
        move();
        _stringStorage.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      _error = DeserializationError::InvalidInput;
    348c:	c5 5b       	subi	r28, 0xB5	; 181
    348e:	df 4f       	sbci	r29, 0xFF	; 255
    3490:	83 e0       	ldi	r24, 0x03	; 3
    3492:	90 e0       	ldi	r25, 0x00	; 0
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:248
          key = _stringStorage.save();

          // Allocate slot in object
          VariantSlot *slot = object.addSlot(_pool);
          if (!slot) {
            _error = DeserializationError::NoMemory;
    3494:	99 83       	std	Y+1, r25	; 0x01
    3496:	88 83       	st	Y, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:249
            return false;
    3498:	ca cf       	rjmp	.-108    	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE8parseKeyEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:338
  }

  bool parseKey() {
    _stringStorage.startString();
    if (isQuote(current())) {
      return parseQuotedString();
    349a:	ce 01       	movw	r24, r28
    349c:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseQuotedString()>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:221
      return true;

    // Read each key value pair
    for (;;) {
      // Parse key
      if (!parseKey())
    34a0:	88 23       	and	r24, r24
    34a2:	29 f2       	breq	.-118    	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:225
        return false;

      // Skip spaces
      if (!skipSpacesAndComments())
    34a4:	ce 01       	movw	r24, r28
    34a6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    34aa:	88 23       	and	r24, r24
    34ac:	09 f4       	brne	.+2      	; 0x34b0 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xa8>
    34ae:	bf cf       	rjmp	.-130    	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:229
        return false;

      // Colon
      if (!eat(':')) {
    34b0:	6a e3       	ldi	r22, 0x3A	; 58
    34b2:	ce 01       	movw	r24, r28
    34b4:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    34b8:	88 23       	and	r24, r24
    34ba:	41 f3       	breq	.-48     	; 0x348c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x84>
_ZNK17ArduinoJson6194_111StringMover3strEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:35
  bool isValid() const {
    return true;
  }

  String str() const {
    _writePtr[0] = 0;  // terminator
    34bc:	e8 81       	ld	r30, Y
    34be:	f9 81       	ldd	r31, Y+1	; 0x01
    34c0:	10 82       	st	Z, r1
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    34c2:	a8 80       	ld	r10, Y
    34c4:	b9 80       	ldd	r11, Y+1	; 0x01
    34c6:	6a 81       	ldd	r22, Y+2	; 0x02
    34c8:	7b 81       	ldd	r23, Y+3	; 0x03
_ZNK17ArduinoJson6194_114CollectionData9getMemberINS_23ZeroTerminatedRamStringEEEPNS_11VariantDataET_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:139
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
    34ca:	c6 01       	movw	r24, r12
    34cc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]>
_ZN17ArduinoJson6194_111VariantSlot4dataEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:33
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
    return reinterpret_cast<VariantData*>(&_content);
    34d0:	bc 01       	movw	r22, r24
_ZNK17ArduinoJson6194_114CollectionData9getMemberINS_23ZeroTerminatedRamStringEEEPNS_11VariantDataET_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:140
  return slot ? slot->data() : 0;
    34d2:	89 2b       	or	r24, r25
    34d4:	69 f5       	brne	.+90     	; 0x3530 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x128>
_ZNK17ArduinoJson6194_111StringMover3strEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:35
  bool isValid() const {
    return true;
  }

  String str() const {
    _writePtr[0] = 0;  // terminator
    34d6:	f5 01       	movw	r30, r10
    34d8:	10 82       	st	Z, r1
_ZNK17ArduinoJson6194_111StringMover4sizeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:40
    return String(_startPtr, size(), String::Linked);
  }

  size_t size() const {
    return size_t(_writePtr - _startPtr);
    34da:	aa 80       	ldd	r10, Y+2	; 0x02
    34dc:	bb 80       	ldd	r11, Y+3	; 0x03
_ZN17ArduinoJson6194_111StringMover4saveEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:22
    _startPtr = _writePtr;
  }

  FORCE_INLINE String save() {
    String s = str();
    _writePtr++;
    34de:	88 81       	ld	r24, Y
    34e0:	99 81       	ldd	r25, Y+1	; 0x01
    34e2:	01 96       	adiw	r24, 0x01	; 1
    34e4:	99 83       	std	Y+1, r25	; 0x01
    34e6:	88 83       	st	Y, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:246
          // Save key in memory pool.
          // This MUST be done before adding the slot.
          key = _stringStorage.save();

          // Allocate slot in object
          VariantSlot *slot = object.addSlot(_pool);
    34e8:	69 85       	ldd	r22, Y+9	; 0x09
    34ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    34ec:	c6 01       	movw	r24, r12
    34ee:	0e 94 9a 01 	call	0x334	; 0x334 <ArduinoJson6194_1::CollectionData::addSlot(ArduinoJson6194_1::MemoryPool*)>
    34f2:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:247
          if (!slot) {
    34f4:	89 2b       	or	r24, r25
    34f6:	b1 f4       	brne	.+44     	; 0x3524 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x11c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:248
            _error = DeserializationError::NoMemory;
    34f8:	c5 5b       	subi	r28, 0xB5	; 181
    34fa:	df 4f       	sbci	r29, 0xFF	; 255
    34fc:	84 e0       	ldi	r24, 0x04	; 4
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	c9 cf       	rjmp	.-110    	; 0x3494 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x8c>
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEE5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:21
    3502:	18 86       	std	Y+8, r1	; 0x08
_ZN17ArduinoJson6194_111StringMover6appendEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/StringStorage/StringMover.hpp:27
    return s;
  }

  void append(char c) {
    *_writePtr++ = c;
    3504:	e8 81       	ld	r30, Y
    3506:	f9 81       	ldd	r31, Y+1	; 0x01
    3508:	cf 01       	movw	r24, r30
    350a:	01 96       	adiw	r24, 0x01	; 1
    350c:	99 83       	std	Y+1, r25	; 0x01
    350e:	88 83       	st	Y, r24
    3510:	00 83       	st	Z, r16
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE20parseNonQuotedStringEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:420

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        _stringStorage.append(c);
        c = current();
    3512:	ce 01       	movw	r24, r28
    3514:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::current()>
    3518:	08 2f       	mov	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:421
      } while (canBeInNonQuotedString(c));
    351a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::canBeInNonQuotedString(char)>
    351e:	81 11       	cpse	r24, r1
    3520:	f0 cf       	rjmp	.-32     	; 0x3502 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0xfa>
    3522:	c0 cf       	rjmp	.-128    	; 0x34a4 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x9c>
_ZN17ArduinoJson6194_111VariantSlot6setKeyENS_6StringE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:82
  }

  void setKey(String k) {
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
      _flags &= VALUE_MASK;
    3524:	84 81       	ldd	r24, Z+4	; 0x04
    3526:	8f 77       	andi	r24, 0x7F	; 127
    3528:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:85
    else
      _flags |= OWNED_KEY_BIT;
    _key = k.c_str();
    352a:	b7 82       	std	Z+7, r11	; 0x07
    352c:	a6 82       	std	Z+6, r10	; 0x06
_ZN17ArduinoJson6194_111VariantSlot4dataEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:33
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
    return reinterpret_cast<VariantData*>(&_content);
    352e:	bf 01       	movw	r22, r30
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:258

          variant = slot->data();
        }

        // Parse value
        if (!parseVariant(*variant, memberFilter, nestingLimit.decrement()))
    3530:	2f 2d       	mov	r18, r15
    3532:	40 e0       	ldi	r20, 0x00	; 0
    3534:	ce 01       	movw	r24, r28
    3536:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
    353a:	88 23       	and	r24, r24
    353c:	09 f4       	brne	.+2      	; 0x3540 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x138>
    353e:	77 cf       	rjmp	.-274    	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:266
        if (!skipVariant(nestingLimit.decrement()))
          return false;
      }

      // Skip spaces
      if (!skipSpacesAndComments())
    3540:	ce 01       	movw	r24, r28
    3542:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    3546:	88 23       	and	r24, r24
    3548:	09 f4       	brne	.+2      	; 0x354c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x144>
    354a:	71 cf       	rjmp	.-286    	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:270
        return false;

      // More keys/values?
      if (eat('}'))
    354c:	6d e7       	ldi	r22, 0x7D	; 125
    354e:	ce 01       	movw	r24, r28
    3550:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    3554:	81 11       	cpse	r24, r1
    3556:	0d c0       	rjmp	.+26     	; 0x3572 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x16a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:272
        return true;
      if (!eat(',')) {
    3558:	6c e2       	ldi	r22, 0x2C	; 44
    355a:	ce 01       	movw	r24, r28
    355c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::eat(char)>
    3560:	88 23       	and	r24, r24
    3562:	09 f4       	brne	.+2      	; 0x3566 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x15e>
    3564:	93 cf       	rjmp	.-218    	; 0x348c <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x84>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:278
        _error = DeserializationError::InvalidInput;
        return false;
      }

      // Skip spaces
      if (!skipSpacesAndComments())
    3566:	ce 01       	movw	r24, r28
    3568:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::skipSpacesAndComments()>
    356c:	81 11       	cpse	r24, r1
    356e:	7b cf       	rjmp	.-266    	; 0x3466 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x5e>
    3570:	5e cf       	rjmp	.-324    	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:271
      if (!skipSpacesAndComments())
        return false;

      // More keys/values?
      if (eat('}'))
        return true;
    3572:	18 2f       	mov	r17, r24
    3574:	5c cf       	rjmp	.-328    	; 0x342e <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseObject<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::CollectionData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)+0x26>

00003576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>:
_ZNK17ArduinoJson6194_111VariantData9getMemberINS_23ZeroTerminatedRamStringEEEPS0_T_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:278
    return _content.asCollection.getOrAddElement(index, pool);
  }

  template <typename TAdaptedString>
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.getMember(key) : 0;
    3576:	fc 01       	movw	r30, r24
    3578:	24 81       	ldd	r18, Z+4	; 0x04
    357a:	25 fd       	sbrc	r18, 5
_ZNK17ArduinoJson6194_114CollectionData9getMemberINS_23ZeroTerminatedRamStringEEEPNS_11VariantDataET_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:139 (discriminator 1)
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
    357c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]>
_ZNK17ArduinoJson6194_111VariantData9getMemberINS_23ZeroTerminatedRamStringEEEPS0_T_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:279 (discriminator 4)
  }
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	08 95       	ret

00003586 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>:
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEPKhj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:20

  void write(uint8_t c) {
    _count += _writer.write(c);
  }

  void write(const uint8_t* s, size_t n) {
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_16WriterI14HardwareSerialvE5writeEPKhj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/Writers/PrintWriter.hpp:23
  size_t write(uint8_t c) {
    return _print->write(c);
  }

  size_t write(const uint8_t* s, size_t n) {
    return _print->write(s, n);
    358c:	88 81       	ld	r24, Y
    358e:	99 81       	ldd	r25, Y+1	; 0x01
    3590:	dc 01       	movw	r26, r24
    3592:	ed 91       	ld	r30, X+
    3594:	fc 91       	ld	r31, X
    3596:	02 80       	ldd	r0, Z+2	; 0x02
    3598:	f3 81       	ldd	r31, Z+3	; 0x03
    359a:	e0 2d       	mov	r30, r0
    359c:	09 95       	icall
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEPKhj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:21
    _count += _writer.write(s, n);
    359e:	2a 81       	ldd	r18, Y+2	; 0x02
    35a0:	3b 81       	ldd	r19, Y+3	; 0x03
    35a2:	82 0f       	add	r24, r18
    35a4:	93 1f       	adc	r25, r19
    35a6:	9b 83       	std	Y+3, r25	; 0x03
    35a8:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:22
  }
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>:
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:145
    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
    35b0:	fb 01       	movw	r30, r22
    35b2:	01 90       	ld	r0, Z+
    35b4:	00 20       	and	r0, r0
    35b6:	e9 f7       	brne	.-6      	; 0x35b2 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)+0x2>
    35b8:	31 97       	sbiw	r30, 0x01	; 1
    35ba:	af 01       	movw	r20, r30
    35bc:	46 1b       	sub	r20, r22
    35be:	57 0b       	sbc	r21, r23
    35c0:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>

000035c4 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)>:
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:112
    }
    writeInteger(unsigned_value);
  }

  template <typename T>
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
    35c4:	8f 92       	push	r8
    35c6:	9f 92       	push	r9
    35c8:	af 92       	push	r10
    35ca:	bf 92       	push	r11
    35cc:	cf 92       	push	r12
    35ce:	df 92       	push	r13
    35d0:	ef 92       	push	r14
    35d2:	ff 92       	push	r15
    35d4:	0f 93       	push	r16
    35d6:	1f 93       	push	r17
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	66 97       	sbiw	r28, 0x16	; 22
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	f8 94       	cli
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	cd bf       	out	0x3d, r28	; 61
    35ec:	6c 01       	movw	r12, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:115
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
    35ee:	8e 01       	movw	r16, r28
    35f0:	09 5e       	subi	r16, 0xE9	; 233
    35f2:	1f 4f       	sbci	r17, 0xFF	; 255
    35f4:	78 01       	movw	r14, r16
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:119

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
    35f6:	8a e0       	ldi	r24, 0x0A	; 10
    35f8:	88 2e       	mov	r8, r24
    35fa:	91 2c       	mov	r9, r1
    35fc:	a1 2c       	mov	r10, r1
    35fe:	b1 2c       	mov	r11, r1
    3600:	cb 01       	movw	r24, r22
    3602:	ba 01       	movw	r22, r20
    3604:	a5 01       	movw	r20, r10
    3606:	94 01       	movw	r18, r8
    3608:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    360c:	94 2f       	mov	r25, r20
    360e:	85 2f       	mov	r24, r21
    3610:	60 5d       	subi	r22, 0xD0	; 208
    3612:	f8 01       	movw	r30, r16
    3614:	62 93       	st	-Z, r22
    3616:	8f 01       	movw	r16, r30
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:120
      value = T(value / 10);
    3618:	a9 01       	movw	r20, r18
    361a:	69 2f       	mov	r22, r25
    361c:	78 2f       	mov	r23, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:118
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
    361e:	41 15       	cp	r20, r1
    3620:	51 05       	cpc	r21, r1
    3622:	61 05       	cpc	r22, r1
    3624:	71 05       	cpc	r23, r1
    3626:	61 f7       	brne	.-40     	; 0x3600 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)+0x3c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:154
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
                  static_cast<size_t>(end - begin));
    3628:	a7 01       	movw	r20, r14
    362a:	4e 1b       	sub	r20, r30
    362c:	5f 0b       	sbc	r21, r31
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:153
  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
    362e:	bf 01       	movw	r22, r30
    3630:	c6 01       	movw	r24, r12
    3632:	0e 94 c3 1a 	call	0x3586	; 0x3586 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerImEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:125
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
  }
    3636:	66 96       	adiw	r28, 0x16	; 22
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	cf 90       	pop	r12
    3652:	bf 90       	pop	r11
    3654:	af 90       	pop	r10
    3656:	9f 90       	pop	r9
    3658:	8f 90       	pop	r8
    365a:	08 95       	ret

0000365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>:
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:16
template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : _writer(writer), _count(0) {}

  void write(uint8_t c) {
    365c:	cf 93       	push	r28
    365e:	df 93       	push	r29
    3660:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_16WriterI14HardwareSerialvE5writeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/Writers/PrintWriter.hpp:19
    typename enable_if<is_base_of< ::Print, TDestination>::value>::type> {
 public:
  explicit Writer(::Print& print) : _print(&print) {}

  size_t write(uint8_t c) {
    return _print->write(c);
    3662:	88 81       	ld	r24, Y
    3664:	99 81       	ldd	r25, Y+1	; 0x01
    3666:	dc 01       	movw	r26, r24
    3668:	ed 91       	ld	r30, X+
    366a:	fc 91       	ld	r31, X
    366c:	01 90       	ld	r0, Z+
    366e:	f0 81       	ld	r31, Z
    3670:	e0 2d       	mov	r30, r0
    3672:	09 95       	icall
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEE5writeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:17
    _count += _writer.write(c);
    3674:	2a 81       	ldd	r18, Y+2	; 0x02
    3676:	3b 81       	ldd	r19, Y+3	; 0x03
    3678:	82 0f       	add	r24, r18
    367a:	93 1f       	adc	r25, r19
    367c:	9b 83       	std	Y+3, r25	; 0x03
    367e:	8a 83       	std	Y+2, r24	; 0x02
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:18
  }
    3680:	df 91       	pop	r29
    3682:	cf 91       	pop	r28
    3684:	08 95       	ret

00003686 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)>:
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE9writeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:51
    writeRaw('\"');
    while (n--) writeChar(*value++);
    writeRaw('\"');
  }

  void writeChar(char c) {
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	e6 e3       	ldi	r30, 0x36	; 54
    368e:	f1 e0       	ldi	r31, 0x01	; 1
_ZN17ArduinoJson6194_114EscapeSequence10escapeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/EscapeSequence.hpp:16
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(true);
    while (p[0] && p[1] != c) {
    3690:	12 81       	ldd	r17, Z+2	; 0x02
    3692:	11 23       	and	r17, r17
    3694:	79 f0       	breq	.+30     	; 0x36b4 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)+0x2e>
    3696:	32 96       	adiw	r30, 0x02	; 2
    3698:	21 81       	ldd	r18, Z+1	; 0x01
    369a:	62 13       	cpse	r22, r18
    369c:	f9 cf       	rjmp	.-14     	; 0x3690 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)+0xa>
    369e:	ec 01       	movw	r28, r24
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    36a0:	6c e5       	ldi	r22, 0x5C	; 92
    36a2:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    36a6:	61 2f       	mov	r22, r17
    36a8:	ce 01       	movw	r24, r28
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE9writeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:61
    } else if (c) {
      writeRaw(c);
    } else {
      writeRaw("\\u0000");
    }
  }
    36aa:	df 91       	pop	r29
    36ac:	cf 91       	pop	r28
    36ae:	1f 91       	pop	r17
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    36b0:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE9writeCharEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:56
  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else if (c) {
    36b4:	61 11       	cpse	r22, r1
    36b6:	f9 cf       	rjmp	.-14     	; 0x36aa <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)+0x24>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:59
      writeRaw(c);
    } else {
      writeRaw("\\u0000");
    36b8:	67 e4       	ldi	r22, 0x47	; 71
    36ba:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:61
    }
  }
    36bc:	df 91       	pop	r29
    36be:	cf 91       	pop	r28
    36c0:	1f 91       	pop	r17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:59
      writeRaw('\\');
      writeRaw(specialChar);
    } else if (c) {
      writeRaw(c);
    } else {
      writeRaw("\\u0000");
    36c2:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>

000036c6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>:
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:41
  void init() {
    _flags = VALUE_IS_NULL;
  }

  template <typename TVisitor>
  typename TVisitor::result_type accept(TVisitor &visitor) const {
    36c6:	2f 92       	push	r2
    36c8:	3f 92       	push	r3
    36ca:	4f 92       	push	r4
    36cc:	5f 92       	push	r5
    36ce:	6f 92       	push	r6
    36d0:	7f 92       	push	r7
    36d2:	8f 92       	push	r8
    36d4:	9f 92       	push	r9
    36d6:	af 92       	push	r10
    36d8:	bf 92       	push	r11
    36da:	cf 92       	push	r12
    36dc:	df 92       	push	r13
    36de:	ef 92       	push	r14
    36e0:	ff 92       	push	r15
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	6c 97       	sbiw	r28, 0x1c	; 28
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	8c 01       	movw	r16, r24
    36fc:	1b 01       	movw	r2, r22
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    36fe:	dc 01       	movw	r26, r24
    3700:	14 96       	adiw	r26, 0x04	; 4
    3702:	8c 91       	ld	r24, X
    3704:	14 97       	sbiw	r26, 0x04	; 4
    3706:	8f 77       	andi	r24, 0x7F	; 127
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:42
    _flags = VALUE_IS_NULL;
  }

  template <typename TVisitor>
  typename TVisitor::result_type accept(TVisitor &visitor) const {
    switch (type()) {
    3708:	86 30       	cpi	r24, 0x06	; 6
    370a:	09 f4       	brne	.+2      	; 0x370e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48>
    370c:	92 c2       	rjmp	.+1316   	; 0x3c32 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x56c>
    370e:	68 f5       	brcc	.+90     	; 0x376a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xa4>
    3710:	82 30       	cpi	r24, 0x02	; 2
    3712:	a0 f1       	brcs	.+104    	; 0x377c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
    3714:	12 96       	adiw	r26, 0x02	; 2
    3716:	ed 90       	ld	r14, X+
    3718:	fc 90       	ld	r15, X
    371a:	13 97       	sbiw	r26, 0x03	; 3
    371c:	cc 90       	ld	r12, X
    371e:	11 96       	adiw	r26, 0x01	; 1
    3720:	dc 90       	ld	r13, X
    3722:	84 30       	cpi	r24, 0x04	; 4
    3724:	08 f0       	brcs	.+2      	; 0x3728 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x62>
    3726:	56 c2       	rjmp	.+1196   	; 0x3bd4 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x50e>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:149
  void writeRaw(const char *s) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
    3728:	a7 01       	movw	r20, r14
    372a:	b6 01       	movw	r22, r12
    372c:	c1 01       	movw	r24, r2
    372e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
    3732:	f1 01       	movw	r30, r2
    3734:	82 81       	ldd	r24, Z+2	; 0x02
    3736:	93 81       	ldd	r25, Z+3	; 0x03
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:74
        return visitor.visitBoolean(_content.asBoolean != 0);

      default:
        return visitor.visitNull();
    }
  }
    3738:	6c 96       	adiw	r28, 0x1c	; 28
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	ff 90       	pop	r15
    374e:	ef 90       	pop	r14
    3750:	df 90       	pop	r13
    3752:	cf 90       	pop	r12
    3754:	bf 90       	pop	r11
    3756:	af 90       	pop	r10
    3758:	9f 90       	pop	r9
    375a:	8f 90       	pop	r8
    375c:	7f 90       	pop	r7
    375e:	6f 90       	pop	r6
    3760:	5f 90       	pop	r5
    3762:	4f 90       	pop	r4
    3764:	3f 90       	pop	r3
    3766:	2f 90       	pop	r2
    3768:	08 95       	ret
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:42
    _flags = VALUE_IS_NULL;
  }

  template <typename TVisitor>
  typename TVisitor::result_type accept(TVisitor &visitor) const {
    switch (type()) {
    376a:	8c 30       	cpi	r24, 0x0C	; 12
    376c:	69 f1       	breq	.+90     	; 0x37c8 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x102>
    376e:	60 f4       	brcc	.+24     	; 0x3788 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xc2>
    3770:	88 30       	cpi	r24, 0x08	; 8
    3772:	09 f4       	brne	.+2      	; 0x3776 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb0>
    3774:	59 c2       	rjmp	.+1202   	; 0x3c28 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x562>
    3776:	8a 30       	cpi	r24, 0x0A	; 10
    3778:	09 f4       	brne	.+2      	; 0x377c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
    377a:	3f c2       	rjmp	.+1150   	; 0x3bfa <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x534>
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE9visitNullEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:98
    _formatter.writeBoolean(value);
    return bytesWritten();
  }

  size_t visitNull() {
    _formatter.writeRaw("null");
    377c:	6e e4       	ldi	r22, 0x4E	; 78
    377e:	71 e0       	ldi	r23, 0x01	; 1
    3780:	c1 01       	movw	r24, r2
    3782:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>
    3786:	e5 c1       	rjmp	.+970    	; 0x3b52 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48c>
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:42
    3788:	80 32       	cpi	r24, 0x20	; 32
    378a:	09 f4       	brne	.+2      	; 0x378e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xc8>
    378c:	ec c1       	rjmp	.+984    	; 0x3b66 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4a0>
    378e:	80 34       	cpi	r24, 0x40	; 64
    3790:	a9 f7       	brne	.-22     	; 0x377c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3792:	6b e5       	ldi	r22, 0x5B	; 91
    3794:	c1 01       	movw	r24, r2
    3796:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    379a:	f8 01       	movw	r30, r16
    379c:	00 81       	ld	r16, Z
    379e:	11 81       	ldd	r17, Z+1	; 0x01
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE10visitArrayERKNS_14CollectionDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:27
  FORCE_INLINE size_t visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
    37a0:	01 15       	cp	r16, r1
    37a2:	11 05       	cpc	r17, r1
    37a4:	09 f4       	brne	.+2      	; 0x37a8 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xe2>
    37a6:	da c1       	rjmp	.+948    	; 0x3b5c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x496>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:28
      slot->data()->accept(*this);
    37a8:	b1 01       	movw	r22, r2
    37aa:	c8 01       	movw	r24, r16
    37ac:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:30

      slot = slot->next();
    37b0:	c8 01       	movw	r24, r16
    37b2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ArduinoJson6194_1::VariantSlot::next()>
    37b6:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:31
      if (slot == 0)
    37b8:	89 2b       	or	r24, r25
    37ba:	09 f4       	brne	.+2      	; 0x37be <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xf8>
    37bc:	cf c1       	rjmp	.+926    	; 0x3b5c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x496>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
    37be:	6c e2       	ldi	r22, 0x2C	; 44
    37c0:	c1 01       	movw	r24, r2
    37c2:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    37c6:	ec cf       	rjmp	.-40     	; 0x37a0 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xda>
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:44
      case VALUE_IS_FLOAT:
        return visitor.visitFloat(_content.asFloat);
    37c8:	f8 01       	movw	r30, r16
    37ca:	c0 80       	ld	r12, Z
    37cc:	d1 80       	ldd	r13, Z+1	; 0x01
    37ce:	e2 80       	ldd	r14, Z+2	; 0x02
    37d0:	f3 80       	ldd	r15, Z+3	; 0x03
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:65
    }
  }

  template <typename T>
  void writeFloat(T value) {
    if (isnan(value))
    37d2:	a7 01       	movw	r20, r14
    37d4:	96 01       	movw	r18, r12
    37d6:	c7 01       	movw	r24, r14
    37d8:	b6 01       	movw	r22, r12
    37da:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    37de:	81 11       	cpse	r24, r1
    37e0:	cd cf       	rjmp	.-102    	; 0x377c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
_ZN17ArduinoJson6194_15isinfIdEEbT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/math.hpp:24
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
  return x != 0.0 && x * 2 == x;
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	a9 01       	movw	r20, r18
    37e8:	c7 01       	movw	r24, r14
    37ea:	b6 01       	movw	r22, r12
    37ec:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    37f0:	88 23       	and	r24, r24
    37f2:	79 f0       	breq	.+30     	; 0x3812 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x14c>
    37f4:	a7 01       	movw	r20, r14
    37f6:	96 01       	movw	r18, r12
    37f8:	c7 01       	movw	r24, r14
    37fa:	b6 01       	movw	r22, r12
    37fc:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
    3800:	9b 01       	movw	r18, r22
    3802:	ac 01       	movw	r20, r24
    3804:	c7 01       	movw	r24, r14
    3806:	b6 01       	movw	r22, r12
    3808:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    380c:	88 23       	and	r24, r24
    380e:	09 f4       	brne	.+2      	; 0x3812 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x14c>
    3810:	b5 cf       	rjmp	.-150    	; 0x377c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0xb6>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:80
      return writeRaw("Infinity");
#else
    if (isinf(value))
      return writeRaw("null");

    if (value < 0.0) {
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	a9 01       	movw	r20, r18
    3818:	c7 01       	movw	r24, r14
    381a:	b6 01       	movw	r22, r12
    381c:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    3820:	87 ff       	sbrs	r24, 7
    3822:	08 c0       	rjmp	.+16     	; 0x3834 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x16e>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3824:	6d e2       	ldi	r22, 0x2D	; 45
    3826:	c1 01       	movw	r24, r2
    3828:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:82
    if (isinf(value))
      return writeRaw("null");

    if (value < 0.0) {
      writeRaw('-');
      value = -value;
    382c:	f7 fa       	bst	r15, 7
    382e:	f0 94       	com	r15
    3830:	f7 f8       	bld	r15, 7
    3832:	f0 94       	com	r15
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:64
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
    3834:	20 e8       	ldi	r18, 0x80	; 128
    3836:	36 e9       	ldi	r19, 0x96	; 150
    3838:	48 e1       	ldi	r20, 0x18	; 24
    383a:	5b e4       	ldi	r21, 0x4B	; 75
    383c:	c7 01       	movw	r24, r14
    383e:	b6 01       	movw	r22, r12
    3840:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    3844:	87 fd       	sbrc	r24, 7
    3846:	81 c0       	rjmp	.+258    	; 0x394a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x284>
    3848:	74 e1       	ldi	r23, 0x14	; 20
    384a:	a7 2e       	mov	r10, r23
    384c:	b1 2c       	mov	r11, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:62
  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
    384e:	00 e2       	ldi	r16, 0x20	; 32
    3850:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:59
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
    3852:	18 8e       	std	Y+24, r1	; 0x18
    3854:	1f 8a       	std	Y+23, r1	; 0x17
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
}

template <typename T>
typename enable_if<is_same<T, uint32_t>::value, T>::type pgm_read(
    const void* p) {
  return pgm_read_dword(p);
    3856:	f5 01       	movw	r30, r10
    3858:	e4 54       	subi	r30, 0x44	; 68
    385a:	ff 4f       	sbci	r31, 0xFF	; 255
    385c:	25 91       	lpm	r18, Z+
    385e:	35 91       	lpm	r19, Z+
    3860:	45 91       	lpm	r20, Z+
    3862:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:66
    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
    3864:	c7 01       	movw	r24, r14
    3866:	b6 01       	movw	r22, r12
    3868:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    386c:	87 fd       	sbrc	r24, 7
    386e:	13 c0       	rjmp	.+38     	; 0x3896 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x1d0>
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    3870:	f5 01       	movw	r30, r10
    3872:	ec 55       	subi	r30, 0x5C	; 92
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	25 91       	lpm	r18, Z+
    3878:	35 91       	lpm	r19, Z+
    387a:	45 91       	lpm	r20, Z+
    387c:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:67
          value *= traits::negativeBinaryPowerOfTen(index);
    387e:	c7 01       	movw	r24, r14
    3880:	b6 01       	movw	r22, r12
    3882:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    3886:	6b 01       	movw	r12, r22
    3888:	7c 01       	movw	r14, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:68
          powersOf10 = int16_t(powersOf10 + bit);
    388a:	2f 89       	ldd	r18, Y+23	; 0x17
    388c:	38 8d       	ldd	r19, Y+24	; 0x18
    388e:	20 0f       	add	r18, r16
    3890:	31 1f       	adc	r19, r17
    3892:	38 8f       	std	Y+24, r19	; 0x18
    3894:	2f 8b       	std	Y+23, r18	; 0x17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:70
        }
        bit >>= 1;
    3896:	15 95       	asr	r17
    3898:	07 95       	ror	r16
    389a:	34 e0       	ldi	r19, 0x04	; 4
    389c:	a3 1a       	sub	r10, r19
    389e:	b1 08       	sbc	r11, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:65

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
    38a0:	8c ef       	ldi	r24, 0xFC	; 252
    38a2:	a8 16       	cp	r10, r24
    38a4:	8f ef       	ldi	r24, 0xFF	; 255
    38a6:	b8 06       	cpc	r11, r24
    38a8:	b1 f6       	brne	.-84     	; 0x3856 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x190>
    38aa:	55 24       	eor	r5, r5
    38ac:	5a 94       	dec	r5
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:74
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
    38ae:	20 e0       	ldi	r18, 0x00	; 0
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	a9 01       	movw	r20, r18
    38b4:	c7 01       	movw	r24, r14
    38b6:	b6 01       	movw	r22, r12
    38b8:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__gesf2>
    38bc:	18 16       	cp	r1, r24
    38be:	0c f0       	brlt	.+2      	; 0x38c2 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x1fc>
    38c0:	4b c0       	rjmp	.+150    	; 0x3958 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x292>
    38c2:	2c ea       	ldi	r18, 0xAC	; 172
    38c4:	35 ec       	ldi	r19, 0xC5	; 197
    38c6:	47 e2       	ldi	r20, 0x27	; 39
    38c8:	57 e3       	ldi	r21, 0x37	; 55
    38ca:	c7 01       	movw	r24, r14
    38cc:	b6 01       	movw	r22, r12
    38ce:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    38d2:	18 16       	cp	r1, r24
    38d4:	0c f4       	brge	.+2      	; 0x38d8 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x212>
    38d6:	40 c0       	rjmp	.+128    	; 0x3958 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x292>
    38d8:	a5 2d       	mov	r26, r5
    38da:	b4 e0       	ldi	r27, 0x04	; 4
    38dc:	ab 02       	muls	r26, r27
    38de:	c0 01       	movw	r24, r0
    38e0:	11 24       	eor	r1, r1
    38e2:	b1 2c       	mov	r11, r1
    38e4:	a1 2c       	mov	r10, r1
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    38e6:	fc 01       	movw	r30, r24
    38e8:	e4 57       	subi	r30, 0x74	; 116
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	3f 01       	movw	r6, r30
    38ee:	9c 01       	movw	r18, r24
    38f0:	24 54       	subi	r18, 0x44	; 68
    38f2:	3f 4f       	sbci	r19, 0xFF	; 255
    38f4:	49 01       	movw	r8, r18
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:75
      for (; index >= 0; index--) {
    38f6:	3f ef       	ldi	r19, 0xFF	; 255
    38f8:	53 16       	cp	r5, r19
    38fa:	71 f1       	breq	.+92     	; 0x3958 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x292>
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    38fc:	f3 01       	movw	r30, r6
    38fe:	ea 0d       	add	r30, r10
    3900:	fb 1d       	adc	r31, r11
    3902:	25 91       	lpm	r18, Z+
    3904:	35 91       	lpm	r19, Z+
    3906:	45 91       	lpm	r20, Z+
    3908:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:76
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
    390a:	c7 01       	movw	r24, r14
    390c:	b6 01       	movw	r22, r12
    390e:	0e 94 ce 2c 	call	0x599c	; 0x599c <__cmpsf2>
    3912:	87 ff       	sbrs	r24, 7
    3914:	13 c0       	rjmp	.+38     	; 0x393c <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x276>
_ZN17ArduinoJson6194_18pgm_readImEENS_9enable_ifIXsrNS_7is_sameIT_mEE5valueES3_E4typeEPKv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Polyfills/pgmspace_generic.hpp:21
    3916:	f4 01       	movw	r30, r8
    3918:	ea 0d       	add	r30, r10
    391a:	fb 1d       	adc	r31, r11
    391c:	25 91       	lpm	r18, Z+
    391e:	35 91       	lpm	r19, Z+
    3920:	45 91       	lpm	r20, Z+
    3922:	54 91       	lpm	r21, Z
_ZN17ArduinoJson6194_110FloatPartsIdE9normalizeERd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:77
          value *= traits::positiveBinaryPowerOfTen(index);
    3924:	c7 01       	movw	r24, r14
    3926:	b6 01       	movw	r22, r12
    3928:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    392c:	6b 01       	movw	r12, r22
    392e:	7c 01       	movw	r14, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:78
          powersOf10 = int16_t(powersOf10 - bit);
    3930:	8f 89       	ldd	r24, Y+23	; 0x17
    3932:	98 8d       	ldd	r25, Y+24	; 0x18
    3934:	80 1b       	sub	r24, r16
    3936:	91 0b       	sbc	r25, r17
    3938:	98 8f       	std	Y+24, r25	; 0x18
    393a:	8f 8b       	std	Y+23, r24	; 0x17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:80
        }
        bit >>= 1;
    393c:	15 95       	asr	r17
    393e:	07 95       	ror	r16
    3940:	5a 94       	dec	r5
    3942:	94 e0       	ldi	r25, 0x04	; 4
    3944:	a9 1a       	sub	r10, r25
    3946:	b1 08       	sbc	r11, r1
    3948:	d6 cf       	rjmp	.-84     	; 0x38f6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x230>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:62
  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
    394a:	00 e2       	ldi	r16, 0x20	; 32
    394c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:61

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    394e:	55 e0       	ldi	r21, 0x05	; 5
    3950:	55 2e       	mov	r5, r21
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:59
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
    3952:	18 8e       	std	Y+24, r1	; 0x18
    3954:	1f 8a       	std	Y+23, r1	; 0x17
    3956:	ab cf       	rjmp	.-170    	; 0x38ae <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x1e8>
_ZN17ArduinoJson6194_110FloatPartsIdEC4Ed():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:26
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
    3958:	c7 01       	movw	r24, r14
    395a:	b6 01       	movw	r22, r12
    395c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    3960:	4b 01       	movw	r8, r22
    3962:	5c 01       	movw	r10, r24
    3964:	2b 01       	movw	r4, r22
    3966:	3c 01       	movw	r6, r24
    3968:	06 e0       	ldi	r16, 0x06	; 6
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:21
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    396a:	80 e4       	ldi	r24, 0x40	; 64
    396c:	92 e4       	ldi	r25, 0x42	; 66
    396e:	af e0       	ldi	r26, 0x0F	; 15
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	89 8f       	std	Y+25, r24	; 0x19
    3974:	9a 8f       	std	Y+26, r25	; 0x1a
    3976:	ab 8f       	std	Y+27, r26	; 0x1b
    3978:	bc 8f       	std	Y+28, r27	; 0x1c
    397a:	10 2f       	mov	r17, r16
    397c:	01 50       	subi	r16, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:28

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
    397e:	9a e0       	ldi	r25, 0x0A	; 10
    3980:	49 16       	cp	r4, r25
    3982:	51 04       	cpc	r5, r1
    3984:	61 04       	cpc	r6, r1
    3986:	71 04       	cpc	r7, r1
    3988:	c8 f0       	brcs	.+50     	; 0x39bc <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x2f6>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:29
      maxDecimalPart /= 10;
    398a:	69 8d       	ldd	r22, Y+25	; 0x19
    398c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    398e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3990:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3992:	2a e0       	ldi	r18, 0x0A	; 10
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	40 e0       	ldi	r20, 0x00	; 0
    3998:	50 e0       	ldi	r21, 0x00	; 0
    399a:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    399e:	29 8f       	std	Y+25, r18	; 0x19
    39a0:	3a 8f       	std	Y+26, r19	; 0x1a
    39a2:	4b 8f       	std	Y+27, r20	; 0x1b
    39a4:	5c 8f       	std	Y+28, r21	; 0x1c
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:28

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
    39a6:	c3 01       	movw	r24, r6
    39a8:	b2 01       	movw	r22, r4
    39aa:	2a e0       	ldi	r18, 0x0A	; 10
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    39b6:	29 01       	movw	r4, r18
    39b8:	3a 01       	movw	r6, r20
    39ba:	df cf       	rjmp	.-66     	; 0x397a <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x2b4>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:33
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
    39bc:	c5 01       	movw	r24, r10
    39be:	b4 01       	movw	r22, r8
    39c0:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    39c4:	9b 01       	movw	r18, r22
    39c6:	ac 01       	movw	r20, r24
    39c8:	c7 01       	movw	r24, r14
    39ca:	b6 01       	movw	r22, r12
    39cc:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
    39d0:	6b 01       	movw	r12, r22
    39d2:	7c 01       	movw	r14, r24
    39d4:	69 8d       	ldd	r22, Y+25	; 0x19
    39d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39dc:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    39e0:	9b 01       	movw	r18, r22
    39e2:	ac 01       	movw	r20, r24
    39e4:	c7 01       	movw	r24, r14
    39e6:	b6 01       	movw	r22, r12
    39e8:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <__mulsf3>
    39ec:	2b 01       	movw	r4, r22
    39ee:	3c 01       	movw	r6, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:35

    decimal = uint32_t(remainder);
    39f0:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    39f4:	6b 01       	movw	r12, r22
    39f6:	7c 01       	movw	r14, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:36
    remainder = remainder - TFloat(decimal);
    39f8:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <__floatunsisf>
    39fc:	9b 01       	movw	r18, r22
    39fe:	ac 01       	movw	r20, r24
    3a00:	c3 01       	movw	r24, r6
    3a02:	b2 01       	movw	r22, r4
    3a04:	0e 94 61 2c 	call	0x58c2	; 0x58c2 <__subsf3>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:40

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    3a08:	9b 01       	movw	r18, r22
    3a0a:	ac 01       	movw	r20, r24
    3a0c:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <__addsf3>
    3a10:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    3a14:	c6 0e       	add	r12, r22
    3a16:	d7 1e       	adc	r13, r23
    3a18:	e8 1e       	adc	r14, r24
    3a1a:	f9 1e       	adc	r15, r25
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:41
    if (decimal >= maxDecimalPart) {
    3a1c:	89 8d       	ldd	r24, Y+25	; 0x19
    3a1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a20:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3a22:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3a24:	c8 16       	cp	r12, r24
    3a26:	d9 06       	cpc	r13, r25
    3a28:	ea 06       	cpc	r14, r26
    3a2a:	fb 06       	cpc	r15, r27
    3a2c:	d8 f0       	brcs	.+54     	; 0x3a64 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x39e>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:43
      decimal = 0;
      integral++;
    3a2e:	9f ef       	ldi	r25, 0xFF	; 255
    3a30:	89 1a       	sub	r8, r25
    3a32:	99 0a       	sbc	r9, r25
    3a34:	a9 0a       	sbc	r10, r25
    3a36:	b9 0a       	sbc	r11, r25
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:44
      if (exponent && integral >= 10) {
    3a38:	af 89       	ldd	r26, Y+23	; 0x17
    3a3a:	b8 8d       	ldd	r27, Y+24	; 0x18
    3a3c:	ab 2b       	or	r26, r27
    3a3e:	39 f1       	breq	.+78     	; 0x3a8e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3c8>
    3a40:	ba e0       	ldi	r27, 0x0A	; 10
    3a42:	8b 16       	cp	r8, r27
    3a44:	91 04       	cpc	r9, r1
    3a46:	a1 04       	cpc	r10, r1
    3a48:	b1 04       	cpc	r11, r1
    3a4a:	08 f1       	brcs	.+66     	; 0x3a8e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3c8>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:45
        exponent++;
    3a4c:	ef 89       	ldd	r30, Y+23	; 0x17
    3a4e:	f8 8d       	ldd	r31, Y+24	; 0x18
    3a50:	31 96       	adiw	r30, 0x01	; 1
    3a52:	f8 8f       	std	Y+24, r31	; 0x18
    3a54:	ef 8b       	std	Y+23, r30	; 0x17
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:42

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
    3a56:	c1 2c       	mov	r12, r1
    3a58:	d1 2c       	mov	r13, r1
    3a5a:	76 01       	movw	r14, r12
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:46
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
        integral = 1;
    3a5c:	81 2c       	mov	r8, r1
    3a5e:	91 2c       	mov	r9, r1
    3a60:	54 01       	movw	r10, r8
    3a62:	83 94       	inc	r8
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:51
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
    3a64:	2a e0       	ldi	r18, 0x0A	; 10
    3a66:	42 2e       	mov	r4, r18
    3a68:	51 2c       	mov	r5, r1
    3a6a:	61 2c       	mov	r6, r1
    3a6c:	71 2c       	mov	r7, r1
    3a6e:	c7 01       	movw	r24, r14
    3a70:	b6 01       	movw	r22, r12
    3a72:	a3 01       	movw	r20, r6
    3a74:	92 01       	movw	r18, r4
    3a76:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    3a7a:	67 2b       	or	r22, r23
    3a7c:	68 2b       	or	r22, r24
    3a7e:	69 2b       	or	r22, r25
    3a80:	51 f4       	brne	.+20     	; 0x3a96 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3d0>
    3a82:	11 16       	cp	r1, r17
    3a84:	44 f4       	brge	.+16     	; 0x3a96 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3d0>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:52
      decimal /= 10;
    3a86:	69 01       	movw	r12, r18
    3a88:	7a 01       	movw	r14, r20
    3a8a:	11 50       	subi	r17, 0x01	; 1
    3a8c:	f0 cf       	rjmp	.-32     	; 0x3a6e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3a8>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Numbers/FloatParts.hpp:42

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
    3a8e:	c1 2c       	mov	r12, r1
    3a90:	d1 2c       	mov	r13, r1
    3a92:	76 01       	movw	r14, r12
    3a94:	e7 cf       	rjmp	.-50     	; 0x3a64 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x39e>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:88
    }
#endif

    FloatParts<T> parts(value);

    writeInteger(parts.integral);
    3a96:	b5 01       	movw	r22, r10
    3a98:	a4 01       	movw	r20, r8
    3a9a:	c1 01       	movw	r24, r2
    3a9c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:89
    if (parts.decimalPlaces)
    3aa0:	11 23       	and	r17, r17
    3aa2:	71 f1       	breq	.+92     	; 0x3b00 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x43a>
    3aa4:	4e 01       	movw	r8, r28
    3aa6:	f1 e1       	ldi	r31, 0x11	; 17
    3aa8:	8f 0e       	add	r8, r31
    3aaa:	91 1c       	adc	r9, r1
    3aac:	01 2f       	mov	r16, r17
    3aae:	54 01       	movw	r10, r8
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE13writeDecimalsEma():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:135
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
    3ab0:	9a e0       	ldi	r25, 0x0A	; 10
    3ab2:	49 2e       	mov	r4, r25
    3ab4:	51 2c       	mov	r5, r1
    3ab6:	61 2c       	mov	r6, r1
    3ab8:	71 2c       	mov	r7, r1
    3aba:	01 50       	subi	r16, 0x01	; 1
    3abc:	68 f0       	brcs	.+26     	; 0x3ad8 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x412>
    3abe:	c7 01       	movw	r24, r14
    3ac0:	b6 01       	movw	r22, r12
    3ac2:	a3 01       	movw	r20, r6
    3ac4:	92 01       	movw	r18, r4
    3ac6:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    3aca:	60 5d       	subi	r22, 0xD0	; 208
    3acc:	d4 01       	movw	r26, r8
    3ace:	6e 93       	st	-X, r22
    3ad0:	4d 01       	movw	r8, r26
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:136
      value /= 10;
    3ad2:	69 01       	movw	r12, r18
    3ad4:	7a 01       	movw	r14, r20
    3ad6:	f1 cf       	rjmp	.-30     	; 0x3aba <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x3f4>
    3ad8:	81 2f       	mov	r24, r17
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	bc 01       	movw	r22, r24
    3ade:	60 95       	com	r22
    3ae0:	70 95       	com	r23
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:138
    }
    *--begin = '.';
    3ae2:	f5 01       	movw	r30, r10
    3ae4:	e8 1b       	sub	r30, r24
    3ae6:	f9 0b       	sbc	r31, r25
    3ae8:	31 97       	sbiw	r30, 0x01	; 1
    3aea:	8e e2       	ldi	r24, 0x2E	; 46
    3aec:	80 83       	st	Z, r24
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:154
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
                  static_cast<size_t>(end - begin));
    3aee:	44 27       	eor	r20, r20
    3af0:	55 27       	eor	r21, r21
    3af2:	46 1b       	sub	r20, r22
    3af4:	57 0b       	sbc	r21, r23
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:153
  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
    3af6:	6a 0d       	add	r22, r10
    3af8:	7b 1d       	adc	r23, r11
    3afa:	c1 01       	movw	r24, r2
    3afc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:92

    writeInteger(parts.integral);
    if (parts.decimalPlaces)
      writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent) {
    3b00:	ef 89       	ldd	r30, Y+23	; 0x17
    3b02:	f8 8d       	ldd	r31, Y+24	; 0x18
    3b04:	ef 2b       	or	r30, r31
    3b06:	29 f1       	breq	.+74     	; 0x3b52 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3b08:	65 e6       	ldi	r22, 0x65	; 101
    3b0a:	c1 01       	movw	r24, r2
    3b0c:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    3b10:	0f 89       	ldd	r16, Y+23	; 0x17
    3b12:	18 8d       	ldd	r17, Y+24	; 0x18
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIiEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:102

  template <typename T>
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
    3b14:	17 ff       	sbrs	r17, 7
    3b16:	07 c0       	rjmp	.+14     	; 0x3b26 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x460>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3b18:	6d e2       	ldi	r22, 0x2D	; 45
    3b1a:	c1 01       	movw	r24, r2
    3b1c:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIiEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:104
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
      writeRaw('-');
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
    3b20:	11 95       	neg	r17
    3b22:	01 95       	neg	r16
    3b24:	11 09       	sbc	r17, r1
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE10writeFloatIdEEvT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:89
#endif

    FloatParts<T> parts(value);

    writeInteger(parts.integral);
    if (parts.decimalPlaces)
    3b26:	fe 01       	movw	r30, r28
    3b28:	77 96       	adiw	r30, 0x17	; 23
    3b2a:	9f 01       	movw	r18, r30
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIjEENS_9enable_ifIXsrNS_11is_unsignedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:119
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
    3b2c:	8a e0       	ldi	r24, 0x0A	; 10
    3b2e:	e8 2e       	mov	r14, r24
    3b30:	f1 2c       	mov	r15, r1
    3b32:	c8 01       	movw	r24, r16
    3b34:	b7 01       	movw	r22, r14
    3b36:	0e 94 bb 2e 	call	0x5d76	; 0x5d76 <__udivmodhi4>
    3b3a:	80 5d       	subi	r24, 0xD0	; 208
    3b3c:	82 93       	st	-Z, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:120
      value = T(value / 10);
    3b3e:	8b 01       	movw	r16, r22
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:118
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
    3b40:	67 2b       	or	r22, r23
    3b42:	b9 f7       	brne	.-18     	; 0x3b32 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x46c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEPKcS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:154
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
                  static_cast<size_t>(end - begin));
    3b44:	a9 01       	movw	r20, r18
    3b46:	4e 1b       	sub	r20, r30
    3b48:	5f 0b       	sbc	r21, r31
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:153
  void writeRaw(const char *s, size_t n) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
    _writer.write(reinterpret_cast<const uint8_t *>(begin),
    3b4a:	bf 01       	movw	r22, r30
    3b4c:	c1 01       	movw	r24, r2
    3b4e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char const*, unsigned int)>
    3b52:	d1 01       	movw	r26, r2
    3b54:	12 96       	adiw	r26, 0x02	; 2
    3b56:	8d 91       	ld	r24, X+
    3b58:	9c 91       	ld	r25, X
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:72

      case VALUE_IS_BOOLEAN:
        return visitor.visitBoolean(_content.asBoolean != 0);

      default:
        return visitor.visitNull();
    3b5a:	ee cd       	rjmp	.-1060   	; 0x3738 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x72>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3b5c:	6d e5       	ldi	r22, 0x5D	; 93
    3b5e:	c1 01       	movw	r24, r2
    3b60:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    3b64:	f6 cf       	rjmp	.-20     	; 0x3b52 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x48c>
    3b66:	6b e7       	ldi	r22, 0x7B	; 123
    3b68:	c1 01       	movw	r24, r2
    3b6a:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    3b6e:	f8 01       	movw	r30, r16
    3b70:	00 81       	ld	r16, Z
    3b72:	11 81       	ldd	r17, Z+1	; 0x01
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE11visitObjectERKNS_14CollectionDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:46
  size_t visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
    3b74:	01 15       	cp	r16, r1
    3b76:	11 05       	cpc	r17, r1
    3b78:	59 f1       	breq	.+86     	; 0x3bd0 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x50a>
    3b7a:	d8 01       	movw	r26, r16
    3b7c:	16 96       	adiw	r26, 0x06	; 6
    3b7e:	cc 90       	ld	r12, X
    3b80:	16 97       	sbiw	r26, 0x06	; 6
    3b82:	17 96       	adiw	r26, 0x07	; 7
    3b84:	dc 90       	ld	r13, X
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
    3b86:	62 e2       	ldi	r22, 0x22	; 34
    3b88:	c1 01       	movw	r24, r2
    3b8a:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    3b8e:	76 01       	movw	r14, r12
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE11writeStringEPKc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:40
  }

  void writeString(const char *value) {
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
    while (*value) writeChar(*value++);
    3b90:	f7 01       	movw	r30, r14
    3b92:	61 91       	ld	r22, Z+
    3b94:	7f 01       	movw	r14, r30
    3b96:	66 23       	and	r22, r22
    3b98:	21 f0       	breq	.+8      	; 0x3ba2 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4dc>
    3b9a:	c1 01       	movw	r24, r2
    3b9c:	0e 94 43 1b 	call	0x3686	; 0x3686 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)>
    3ba0:	f7 cf       	rjmp	.-18     	; 0x3b90 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4ca>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3ba2:	62 e2       	ldi	r22, 0x22	; 34
    3ba4:	c1 01       	movw	r24, r2
    3ba6:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    3baa:	6a e3       	ldi	r22, 0x3A	; 58
    3bac:	c1 01       	movw	r24, r2
    3bae:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE11visitObjectERKNS_14CollectionDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:49
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
    3bb2:	b1 01       	movw	r22, r2
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:51

      slot = slot->next();
    3bba:	c8 01       	movw	r24, r16
    3bbc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <ArduinoJson6194_1::VariantSlot::next()>
    3bc0:	8c 01       	movw	r16, r24
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:52
      if (slot == 0)
    3bc2:	89 2b       	or	r24, r25
    3bc4:	29 f0       	breq	.+10     	; 0x3bd0 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x50a>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
    3bc6:	6c e2       	ldi	r22, 0x2C	; 44
    3bc8:	c1 01       	movw	r24, r2
    3bca:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    3bce:	d2 cf       	rjmp	.-92     	; 0x3b74 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x4ae>
    3bd0:	6d e7       	ldi	r22, 0x7D	; 125
    3bd2:	c5 cf       	rjmp	.-118    	; 0x3b5e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x498>
    3bd4:	62 e2       	ldi	r22, 0x22	; 34
    3bd6:	c1 01       	movw	r24, r2
    3bd8:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
    3bdc:	86 01       	movw	r16, r12
    3bde:	e0 0e       	add	r14, r16
    3be0:	f1 1e       	adc	r15, r17
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE11writeStringEPKcj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:47
  }

  void writeString(const char *value, size_t n) {
    ARDUINOJSON_ASSERT(value != NULL);
    writeRaw('\"');
    while (n--) writeChar(*value++);
    3be2:	e0 16       	cp	r14, r16
    3be4:	f1 06       	cpc	r15, r17
    3be6:	39 f0       	breq	.+14     	; 0x3bf6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x530>
    3be8:	f8 01       	movw	r30, r16
    3bea:	61 91       	ld	r22, Z+
    3bec:	8f 01       	movw	r16, r30
    3bee:	c1 01       	movw	r24, r2
    3bf0:	0e 94 43 1b 	call	0x3686	; 0x3686 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeChar(char)>
    3bf4:	f6 cf       	rjmp	.-20     	; 0x3be2 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x51c>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3bf6:	62 e2       	ldi	r22, 0x22	; 34
    3bf8:	b2 cf       	rjmp	.-156    	; 0x3b5e <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x498>
_ZNK17ArduinoJson6194_111VariantData6acceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeERS7_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:63
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asString.data,
                                    _content.asString.size);

      case VALUE_IS_SIGNED_INTEGER:
        return visitor.visitSignedInteger(_content.asSignedInteger);
    3bfa:	cd 90       	ld	r12, X+
    3bfc:	dd 90       	ld	r13, X+
    3bfe:	ed 90       	ld	r14, X+
    3c00:	fc 90       	ld	r15, X
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIlEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:106
    unsigned_type unsigned_value;
    if (value < 0) {
      writeRaw('-');
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
    } else {
      unsigned_value = unsigned_type(value);
    3c02:	b7 01       	movw	r22, r14
    3c04:	a6 01       	movw	r20, r12
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:102

  template <typename T>
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
    3c06:	f7 fe       	sbrs	r15, 7
    3c08:	0b c0       	rjmp	.+22     	; 0x3c20 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x55a>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE8writeRawEc():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:162
  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
    _writer.write(static_cast<uint8_t>(c));
    3c0a:	6d e2       	ldi	r22, 0x2D	; 45
    3c0c:	c1 01       	movw	r24, r2
    3c0e:	0e 94 2e 1b 	call	0x365c	; 0x365c <ArduinoJson6194_1::CountingDecorator<ArduinoJson6194_1::Writer<HardwareSerial, void> >::write(unsigned char)>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeIntegerIlEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES8_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:104
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
    typedef typename make_unsigned<T>::type unsigned_type;
    unsigned_type unsigned_value;
    if (value < 0) {
      writeRaw('-');
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
    3c12:	44 27       	eor	r20, r20
    3c14:	55 27       	eor	r21, r21
    3c16:	ba 01       	movw	r22, r20
    3c18:	4c 19       	sub	r20, r12
    3c1a:	5d 09       	sbc	r21, r13
    3c1c:	6e 09       	sbc	r22, r14
    3c1e:	7f 09       	sbc	r23, r15
_ZN17ArduinoJson6194_114JsonSerializerINS_6WriterI14HardwareSerialvEEE20visitUnsignedIntegerEm():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonSerializer.hpp:88
    _formatter.writeInteger(value);
    return bytesWritten();
  }

  size_t visitUnsignedInteger(UInt value) {
    _formatter.writeInteger(value);
    3c20:	c1 01       	movw	r24, r2
    3c22:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <ArduinoJson6194_1::enable_if<ArduinoJson6194_1::is_unsigned<unsigned long>::value, void>::type ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeInteger<unsigned long>(unsigned long)>
    3c26:	85 cd       	rjmp	.-1270   	; 0x3732 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x6c>
    3c28:	4d 91       	ld	r20, X+
    3c2a:	5d 91       	ld	r21, X+
    3c2c:	6d 91       	ld	r22, X+
    3c2e:	7c 91       	ld	r23, X
    3c30:	f7 cf       	rjmp	.-18     	; 0x3c20 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x55a>
_ZN17ArduinoJson6194_113TextFormatterINS_6WriterI14HardwareSerialvEEE12writeBooleanEb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:31
  size_t bytesWritten() const {
    return _writer.count();
  }

  void writeBoolean(bool value) {
    if (value)
    3c32:	8c 91       	ld	r24, X
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:32
      writeRaw("true");
    3c34:	63 e5       	ldi	r22, 0x53	; 83
    3c36:	71 e0       	ldi	r23, 0x01	; 1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:31
  size_t bytesWritten() const {
    return _writer.count();
  }

  void writeBoolean(bool value) {
    if (value)
    3c38:	81 11       	cpse	r24, r1
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x57a>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/TextFormatter.hpp:34
      writeRaw("true");
    else
      writeRaw("false");
    3c3c:	68 e5       	ldi	r22, 0x58	; 88
    3c3e:	71 e0       	ldi	r23, 0x01	; 1
    3c40:	c1 01       	movw	r24, r2
    3c42:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ArduinoJson6194_1::TextFormatter<ArduinoJson6194_1::Writer<HardwareSerial, void> >::writeRaw(char const*)>
    3c46:	75 cd       	rjmp	.-1302   	; 0x3732 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const+0x6c>

00003c48 <generate_json()>:
_Z13generate_jsonv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:351
   }
}


/* Send and Receive Data Session*///// 
void generate_json(){
    3c48:	0f 93       	push	r16
    3c4a:	1f 93       	push	r17
    3c4c:	cf 93       	push	r28
    3c4e:	df 93       	push	r29
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	c2 51       	subi	r28, 0x12	; 18
    3c56:	d2 40       	sbci	r29, 0x02	; 2
    3c58:	0f b6       	in	r0, 0x3f	; 63
    3c5a:	f8 94       	cli
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	cd bf       	out	0x3d, r28	; 61
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:352
    StaticJsonDocument<512> out1;
    3c62:	ce 01       	movw	r24, r28
    3c64:	01 96       	adiw	r24, 0x01	; 1
    3c66:	0e 94 82 16 	call	0x2d04	; 0x2d04 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()>
    3c6a:	8e 85       	ldd	r24, Y+14	; 0x0e
_ZNK17ArduinoJson6194_111VariantData4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:299
    if (_flags & COLLECTION_MASK)
      _content.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
    return _flags & VALUE_MASK;
    3c6c:	98 2f       	mov	r25, r24
    3c6e:	9f 77       	andi	r25, 0x7F	; 127
_ZN17ArduinoJson6194_111VariantData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPS0_T_PNS_10MemoryPoolET0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:284
  }

  template <typename TAdaptedString, typename TStoragePolicy>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool,
                              TStoragePolicy storage_policy) {
    if (isNull())
    3c70:	39 f4       	brne	.+14     	; 0x3c80 <generate_json()+0x38>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3c72:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3c74:	80 62       	ori	r24, 0x20	; 32
    3c76:	8e 87       	std	Y+14, r24	; 0x0e
_ZN17ArduinoJson6194_114CollectionData5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:52
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
    3c78:	1b 86       	std	Y+11, r1	; 0x0b
    3c7a:	1a 86       	std	Y+10, r1	; 0x0a
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:53
  _tail = 0;
    3c7c:	1d 86       	std	Y+13, r1	; 0x0d
    3c7e:	1c 86       	std	Y+12, r1	; 0x0c
_ZN17ArduinoJson6194_111VariantData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPS0_T_PNS_10MemoryPoolET0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:286
  template <typename TAdaptedString, typename TStoragePolicy>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool,
                              TStoragePolicy storage_policy) {
    if (isNull())
      toObject();
    if (!isObject())
    3c80:	8e 85       	ldd	r24, Y+14	; 0x0e
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:287
      return 0;
    3c82:	10 e0       	ldi	r17, 0x00	; 0
    3c84:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:286
  template <typename TAdaptedString, typename TStoragePolicy>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool,
                              TStoragePolicy storage_policy) {
    if (isNull())
      toObject();
    if (!isObject())
    3c86:	85 ff       	sbrs	r24, 5
    3c88:	1e c0       	rjmp	.+60     	; 0x3cc6 <generate_json()+0x7e>
_ZN17ArduinoJson6194_114CollectionData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:151
  // ignore null key
  if (key.isNull())
    return 0;

  // search a matching key
  VariantSlot* slot = getSlot(key);
    3c8a:	6e e5       	ldi	r22, 0x5E	; 94
    3c8c:	71 e0       	ldi	r23, 0x01	; 1
    3c8e:	ce 01       	movw	r24, r28
    3c90:	0a 96       	adiw	r24, 0x0a	; 10
    3c92:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ArduinoJson6194_1::VariantSlot* ArduinoJson6194_1::CollectionData::getSlot<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const [clone .isra.26]>
_ZN17ArduinoJson6194_111VariantSlot4dataEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantSlot.hpp:33
    3c96:	8c 01       	movw	r16, r24
_ZN17ArduinoJson6194_114CollectionData14getOrAddMemberINS_23ZeroTerminatedRamStringENS_23LinkStringStoragePolicyEEEPNS_11VariantDataET_PNS_10MemoryPoolET0_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:152
  if (slot)
    3c98:	89 2b       	or	r24, r25
    3c9a:	61 f4       	brne	.+24     	; 0x3cb4 <generate_json()+0x6c>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:155
    return slot->data();

  return addMember(key, pool, storage_policy);
    3c9c:	ae 01       	movw	r20, r28
    3c9e:	4f 5f       	subi	r20, 0xFF	; 255
    3ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca2:	6e e5       	ldi	r22, 0x5E	; 94
    3ca4:	71 e0       	ldi	r23, 0x01	; 1
    3ca6:	ce 01       	movw	r24, r28
    3ca8:	0a 96       	adiw	r24, 0x0a	; 10
    3caa:	0e 94 08 02 	call	0x410	; 0x410 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::CollectionData::addMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.38]>
    3cae:	8c 01       	movw	r16, r24
_ZN17ArduinoJson6194_115variantToObjectEPNS_11VariantDataE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantFunctions.hpp:70
    return 0;
  return &var->toArray();
}

inline CollectionData *variantToObject(VariantData *var) {
  if (!var)
    3cb0:	89 2b       	or	r24, r25
    3cb2:	49 f0       	breq	.+18     	; 0x3cc6 <generate_json()+0x7e>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3cb4:	f8 01       	movw	r30, r16
    3cb6:	84 81       	ldd	r24, Z+4	; 0x04
    3cb8:	80 78       	andi	r24, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3cba:	80 62       	ori	r24, 0x20	; 32
    3cbc:	84 83       	std	Z+4, r24	; 0x04
_ZN17ArduinoJson6194_114CollectionData5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:52
  }
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
    3cbe:	11 82       	std	Z+1, r1	; 0x01
    3cc0:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Collection/CollectionImpl.hpp:53
  _tail = 0;
    3cc2:	13 82       	std	Z+3, r1	; 0x03
    3cc4:	12 82       	std	Z+2, r1	; 0x02
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
  // getOrAddMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) const {
    return VariantRef(_pool,
                      objectGetOrAddMember(_data, adaptString(key), _pool,
                                           getStringStoragePolicy(key)));
    3cc6:	ae 01       	movw	r20, r28
    3cc8:	4f 5f       	subi	r20, 0xFF	; 255
    3cca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ccc:	62 e6       	ldi	r22, 0x62	; 98
    3cce:	71 e0       	ldi	r23, 0x01	; 1
    3cd0:	c8 01       	movw	r24, r16
    3cd2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
}

inline VariantRef VariantRef::getOrAddElement(size_t index) const {
  return VariantRef(_pool, variantGetOrAddElement(_data, index, _pool));
    3cd6:	ae 01       	movw	r20, r28
    3cd8:	4f 5f       	subi	r20, 0xFF	; 255
    3cda:	5f 4f       	sbci	r21, 0xFF	; 255
    3cdc:	70 e0       	ldi	r23, 0x00	; 0
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    3ce4:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIfvE6toJsonEfNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:100

template <typename T>
struct Converter<T, typename enable_if<is_floating_point<T>::value>::type> {
  static void toJson(T src, VariantRef dst) {
    VariantData* data = getData(dst);
    if (data)
    3ce6:	89 2b       	or	r24, r25
    3ce8:	81 f0       	breq	.+32     	; 0x3d0a <generate_json()+0xc2>
_ZNK17ArduinoJson6194_110VariantRef3setIfEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    return variantSetNull(_data);
  }

  template <typename T>
  FORCE_INLINE bool set(const T &value) const {
    Converter<T>::toJson(value, *this);
    3cea:	40 91 f2 05 	lds	r20, 0x05F2	; 0x8005f2 <sendTemp>
    3cee:	50 91 f3 05 	lds	r21, 0x05F3	; 0x8005f3 <sendTemp+0x1>
    3cf2:	60 91 f4 05 	lds	r22, 0x05F4	; 0x8005f4 <sendTemp+0x2>
    3cf6:	70 91 f5 05 	lds	r23, 0x05F5	; 0x8005f5 <sendTemp+0x3>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3cfa:	94 81       	ldd	r25, Z+4	; 0x04
    3cfc:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3cfe:	9c 60       	ori	r25, 0x0C	; 12
    3d00:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:168
    _content.asBoolean = value;
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
    _content.asFloat = value;
    3d02:	40 83       	st	Z, r20
    3d04:	51 83       	std	Z+1, r21	; 0x01
    3d06:	62 83       	std	Z+2, r22	; 0x02
    3d08:	73 83       	std	Z+3, r23	; 0x03
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3d0a:	ae 01       	movw	r20, r28
    3d0c:	4f 5f       	subi	r20, 0xFF	; 255
    3d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d10:	62 e6       	ldi	r22, 0x62	; 98
    3d12:	71 e0       	ldi	r23, 0x01	; 1
    3d14:	c8 01       	movw	r24, r16
    3d16:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3d1a:	ae 01       	movw	r20, r28
    3d1c:	4f 5f       	subi	r20, 0xFF	; 255
    3d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d20:	61 e0       	ldi	r22, 0x01	; 1
    3d22:	70 e0       	ldi	r23, 0x00	; 0
    3d24:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    3d28:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIfvE6toJsonEfNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:100
    3d2a:	89 2b       	or	r24, r25
    3d2c:	81 f0       	breq	.+32     	; 0x3d4e <generate_json()+0x106>
_ZNK17ArduinoJson6194_110VariantRef3setIfEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3d2e:	40 91 ee 05 	lds	r20, 0x05EE	; 0x8005ee <sendHumi>
    3d32:	50 91 ef 05 	lds	r21, 0x05EF	; 0x8005ef <sendHumi+0x1>
    3d36:	60 91 f0 05 	lds	r22, 0x05F0	; 0x8005f0 <sendHumi+0x2>
    3d3a:	70 91 f1 05 	lds	r23, 0x05F1	; 0x8005f1 <sendHumi+0x3>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3d3e:	94 81       	ldd	r25, Z+4	; 0x04
    3d40:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3d42:	9c 60       	ori	r25, 0x0C	; 12
    3d44:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData8setFloatEd():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:168
    _content.asBoolean = value;
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
    _content.asFloat = value;
    3d46:	40 83       	st	Z, r20
    3d48:	51 83       	std	Z+1, r21	; 0x01
    3d4a:	62 83       	std	Z+2, r22	; 0x02
    3d4c:	73 83       	std	Z+3, r23	; 0x03
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3d4e:	ae 01       	movw	r20, r28
    3d50:	4f 5f       	subi	r20, 0xFF	; 255
    3d52:	5f 4f       	sbci	r21, 0xFF	; 255
    3d54:	65 e6       	ldi	r22, 0x65	; 101
    3d56:	71 e0       	ldi	r23, 0x01	; 1
    3d58:	c8 01       	movw	r24, r16
    3d5a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3d5e:	ae 01       	movw	r20, r28
    3d60:	4f 5f       	subi	r20, 0xFF	; 255
    3d62:	5f 4f       	sbci	r21, 0xFF	; 255
    3d64:	70 e0       	ldi	r23, 0x00	; 0
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    3d6c:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIivE6toJsonEiNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:44
    T, typename enable_if<is_integral<T>::value && !is_same<bool, T>::value &&
                          !is_same<char, T>::value>::type> {
  static void toJson(T src, VariantRef dst) {
    VariantData* data = getData(dst);
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    if (data)
    3d6e:	89 2b       	or	r24, r25
    3d70:	81 f0       	breq	.+32     	; 0x3d92 <generate_json()+0x14a>
_ZNK17ArduinoJson6194_110VariantRef3setIiEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3d72:	20 91 eb 05 	lds	r18, 0x05EB	; 0x8005eb <skinMode>
    3d76:	30 91 ec 05 	lds	r19, 0x05EC	; 0x8005ec <skinMode+0x1>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3d7a:	94 81       	ldd	r25, Z+4	; 0x04
    3d7c:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3d7e:	9a 60       	ori	r25, 0x0A	; 10
    3d80:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData10setIntegerIiEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:204
  }

  template <typename T>
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    _content.asSignedInteger = value;
    3d82:	c9 01       	movw	r24, r18
    3d84:	33 0f       	add	r19, r19
    3d86:	aa 0b       	sbc	r26, r26
    3d88:	bb 0b       	sbc	r27, r27
    3d8a:	80 83       	st	Z, r24
    3d8c:	91 83       	std	Z+1, r25	; 0x01
    3d8e:	a2 83       	std	Z+2, r26	; 0x02
    3d90:	b3 83       	std	Z+3, r27	; 0x03
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3d92:	ae 01       	movw	r20, r28
    3d94:	4f 5f       	subi	r20, 0xFF	; 255
    3d96:	5f 4f       	sbci	r21, 0xFF	; 255
    3d98:	65 e6       	ldi	r22, 0x65	; 101
    3d9a:	71 e0       	ldi	r23, 0x01	; 1
    3d9c:	c8 01       	movw	r24, r16
    3d9e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3da2:	ae 01       	movw	r20, r28
    3da4:	4f 5f       	subi	r20, 0xFF	; 255
    3da6:	5f 4f       	sbci	r21, 0xFF	; 255
    3da8:	61 e0       	ldi	r22, 0x01	; 1
    3daa:	70 e0       	ldi	r23, 0x00	; 0
    3dac:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    3db0:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIivE6toJsonEiNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:44
    3db2:	89 2b       	or	r24, r25
    3db4:	81 f0       	breq	.+32     	; 0x3dd6 <generate_json()+0x18e>
_ZNK17ArduinoJson6194_110VariantRef3setIiEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3db6:	20 91 e7 05 	lds	r18, 0x05E7	; 0x8005e7 <humiMode>
    3dba:	30 91 e8 05 	lds	r19, 0x05E8	; 0x8005e8 <humiMode+0x1>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3dbe:	94 81       	ldd	r25, Z+4	; 0x04
    3dc0:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3dc2:	9a 60       	ori	r25, 0x0A	; 10
    3dc4:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData10setIntegerIiEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:204
  }

  template <typename T>
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    _content.asSignedInteger = value;
    3dc6:	c9 01       	movw	r24, r18
    3dc8:	33 0f       	add	r19, r19
    3dca:	aa 0b       	sbc	r26, r26
    3dcc:	bb 0b       	sbc	r27, r27
    3dce:	80 83       	st	Z, r24
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	a2 83       	std	Z+2, r26	; 0x02
    3dd4:	b3 83       	std	Z+3, r27	; 0x03
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3dd6:	ae 01       	movw	r20, r28
    3dd8:	4f 5f       	subi	r20, 0xFF	; 255
    3dda:	5f 4f       	sbci	r21, 0xFF	; 255
    3ddc:	65 e6       	ldi	r22, 0x65	; 101
    3dde:	71 e0       	ldi	r23, 0x01	; 1
    3de0:	c8 01       	movw	r24, r16
    3de2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3de6:	ae 01       	movw	r20, r28
    3de8:	4f 5f       	subi	r20, 0xFF	; 255
    3dea:	5f 4f       	sbci	r21, 0xFF	; 255
    3dec:	62 e0       	ldi	r22, 0x02	; 2
    3dee:	70 e0       	ldi	r23, 0x00	; 0
    3df0:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
    3df4:	fc 01       	movw	r30, r24
_ZN17ArduinoJson6194_19ConverterIivE6toJsonEiNS_10VariantRefE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/ConverterImpl.hpp:44
    3df6:	89 2b       	or	r24, r25
    3df8:	81 f0       	breq	.+32     	; 0x3e1a <generate_json()+0x1d2>
_ZNK17ArduinoJson6194_110VariantRef3setIiEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3dfa:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <highTemp>
    3dfe:	30 91 ea 05 	lds	r19, 0x05EA	; 0x8005ea <highTemp+0x1>
_ZN17ArduinoJson6194_111VariantData7setTypeEh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:315
    return storage.store(value, pool, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
    _flags &= OWNED_KEY_BIT;
    3e02:	94 81       	ldd	r25, Z+4	; 0x04
    3e04:	90 78       	andi	r25, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:316
    _flags |= t;
    3e06:	9a 60       	ori	r25, 0x0A	; 10
    3e08:	94 83       	std	Z+4, r25	; 0x04
_ZN17ArduinoJson6194_111VariantData10setIntegerIiEENS_9enable_ifIXsrNS_9is_signedIT_EE5valueEvE4typeES4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:204
  }

  template <typename T>
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    _content.asSignedInteger = value;
    3e0a:	c9 01       	movw	r24, r18
    3e0c:	33 0f       	add	r19, r19
    3e0e:	aa 0b       	sbc	r26, r26
    3e10:	bb 0b       	sbc	r27, r27
    3e12:	80 83       	st	Z, r24
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	a2 83       	std	Z+2, r26	; 0x02
    3e18:	b3 83       	std	Z+3, r27	; 0x03
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3e1a:	ae 01       	movw	r20, r28
    3e1c:	4f 5f       	subi	r20, 0xFF	; 255
    3e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e20:	65 e6       	ldi	r22, 0x65	; 101
    3e22:	71 e0       	ldi	r23, 0x01	; 1
    3e24:	c8 01       	movw	r24, r16
    3e26:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3e2a:	ae 01       	movw	r20, r28
    3e2c:	4f 5f       	subi	r20, 0xFF	; 255
    3e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e30:	63 e0       	ldi	r22, 0x03	; 3
    3e32:	70 e0       	ldi	r23, 0x00	; 0
    3e34:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3e38:	bc 01       	movw	r22, r24
    3e3a:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <alarmValue2>
    3e3e:	0e 94 41 01 	call	0x282	; 0x282 <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.31]>
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3e42:	ae 01       	movw	r20, r28
    3e44:	4f 5f       	subi	r20, 0xFF	; 255
    3e46:	5f 4f       	sbci	r21, 0xFF	; 255
    3e48:	65 e6       	ldi	r22, 0x65	; 101
    3e4a:	71 e0       	ldi	r23, 0x01	; 1
    3e4c:	c8 01       	movw	r24, r16
    3e4e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3e52:	ae 01       	movw	r20, r28
    3e54:	4f 5f       	subi	r20, 0xFF	; 255
    3e56:	5f 4f       	sbci	r21, 0xFF	; 255
    3e58:	64 e0       	ldi	r22, 0x04	; 4
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3e60:	bc 01       	movw	r22, r24
    3e62:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <sirenAlarm>
    3e66:	0e 94 41 01 	call	0x282	; 0x282 <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.31]>
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3e6a:	ae 01       	movw	r20, r28
    3e6c:	4f 5f       	subi	r20, 0xFF	; 255
    3e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e70:	65 e6       	ldi	r22, 0x65	; 101
    3e72:	71 e0       	ldi	r23, 0x01	; 1
    3e74:	c8 01       	movw	r24, r16
    3e76:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3e7a:	ae 01       	movw	r20, r28
    3e7c:	4f 5f       	subi	r20, 0xFF	; 255
    3e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e80:	65 e0       	ldi	r22, 0x05	; 5
    3e82:	70 e0       	ldi	r23, 0x00	; 0
    3e84:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3e88:	bc 01       	movw	r22, r24
    3e8a:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <timeMode>
    3e8e:	0e 94 41 01 	call	0x282	; 0x282 <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.31]>
_ZNK17ArduinoJson6194_19ObjectRef14getOrAddMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Object/ObjectRef.hpp:210
    3e92:	ae 01       	movw	r20, r28
    3e94:	4f 5f       	subi	r20, 0xFF	; 255
    3e96:	5f 4f       	sbci	r21, 0xFF	; 255
    3e98:	65 e6       	ldi	r22, 0x65	; 101
    3e9a:	71 e0       	ldi	r23, 0x01	; 1
    3e9c:	c8 01       	movw	r24, r16
    3e9e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::objectGetOrAddMember<ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::LinkStringStoragePolicy>(ArduinoJson6194_1::CollectionData*, ArduinoJson6194_1::ZeroTerminatedRamString, ArduinoJson6194_1::MemoryPool*, ArduinoJson6194_1::LinkStringStoragePolicy) [clone .isra.41]>
_ZNK17ArduinoJson6194_110VariantRef15getOrAddElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:140
    3ea2:	ae 01       	movw	r20, r28
    3ea4:	4f 5f       	subi	r20, 0xFF	; 255
    3ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ea8:	66 e0       	ldi	r22, 0x06	; 6
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	0e 94 cf 01 	call	0x39e	; 0x39e <ArduinoJson6194_1::variantGetOrAddElement(ArduinoJson6194_1::VariantData*, unsigned int, ArduinoJson6194_1::MemoryPool*)>
_ZNK17ArduinoJson6194_110VariantRef3setIhEEbRKT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:88
    3eb0:	bc 01       	movw	r22, r24
    3eb2:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <sendAlarm>
    3eb6:	0e 94 41 01 	call	0x282	; 0x282 <ArduinoJson6194_1::Converter<unsigned char, void>::toJson(unsigned char, ArduinoJson6194_1::VariantRef) [clone .isra.31]>
_ZN17ArduinoJson6194_117CountingDecoratorINS_6WriterI14HardwareSerialvEEEC4ERS3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Serialization/CountingDecorator.hpp:14
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : _writer(writer), _count(0) {}
    3eba:	88 e1       	ldi	r24, 0x18	; 24
    3ebc:	97 e0       	ldi	r25, 0x07	; 7
    3ebe:	c1 5f       	subi	r28, 0xF1	; 241
    3ec0:	dd 4f       	sbci	r29, 0xFD	; 253
    3ec2:	99 83       	std	Y+1, r25	; 0x01
    3ec4:	88 83       	st	Y, r24
    3ec6:	cf 50       	subi	r28, 0x0F	; 15
    3ec8:	d2 40       	sbci	r29, 0x02	; 2
    3eca:	cf 5e       	subi	r28, 0xEF	; 239
    3ecc:	dd 4f       	sbci	r29, 0xFD	; 253
    3ece:	19 82       	std	Y+1, r1	; 0x01
    3ed0:	18 82       	st	Y, r1
    3ed2:	c1 51       	subi	r28, 0x11	; 17
    3ed4:	d2 40       	sbci	r29, 0x02	; 2
_ZN17ArduinoJson6194_113variantAcceptINS_14JsonSerializerINS_6WriterI14HardwareSerialvEEEEEENT_11result_typeEPKNS_11VariantDataERS6_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantFunctions.hpp:17

template <typename TVisitor>
inline typename TVisitor::result_type variantAccept(const VariantData *var,
                                                    TVisitor &visitor) {
  if (var != 0)
    return var->accept(visitor);
    3ed6:	be 01       	movw	r22, r28
    3ed8:	61 5f       	subi	r22, 0xF1	; 241
    3eda:	7d 4f       	sbci	r23, 0xFD	; 253
    3edc:	ce 01       	movw	r24, r28
    3ede:	0a 96       	adiw	r24, 0x0a	; 10
    3ee0:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >::result_type ArduinoJson6194_1::VariantData::accept<ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> > >(ArduinoJson6194_1::JsonSerializer<ArduinoJson6194_1::Writer<HardwareSerial, void> >&) const>
_Z13generate_jsonv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:365
    DataButton["mod"][3] = alarmValue2;
    DataButton["mod"][4] = sirenAlarm;
    DataButton["mod"][5] = timeMode;
    DataButton["mod"][6] = sendAlarm;
    serializeJson(out1, Serial1);
    Serial1.println();
    3ee4:	88 e1       	ldi	r24, 0x18	; 24
    3ee6:	97 e0       	ldi	r25, 0x07	; 7
    3ee8:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <Print::println()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:368
    //  serializeJson(out1, Serial);
    //  Serial.println();       
}
    3eec:	ce 5e       	subi	r28, 0xEE	; 238
    3eee:	dd 4f       	sbci	r29, 0xFD	; 253
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	1f 91       	pop	r17
    3f00:	0f 91       	pop	r16
    3f02:	08 95       	ret

00003f04 <_GLOBAL__sub_I_lc>:
_GLOBAL__sub_I_lc():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1272
    }
  }
  else{
    noTone(pinBuzzer);
  }
}
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17
__static_initialization_and_destruction_0():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:39
/*seven segment display define*/
//Pin 34 = DIN                         //7
//PIN 35 = ClK                         //6
//Pin 33 = CS/LOAD                     //5
//LedControl (DIN, CLK, CS/Load, Number of IC used)
LedControl lc = LedControl(34, 35, 33, 3); 
    3f08:	03 e0       	ldi	r16, 0x03	; 3
    3f0a:	10 e0       	ldi	r17, 0x00	; 0
    3f0c:	21 e2       	ldi	r18, 0x21	; 33
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	43 e2       	ldi	r20, 0x23	; 35
    3f12:	50 e0       	ldi	r21, 0x00	; 0
    3f14:	62 e2       	ldi	r22, 0x22	; 34
    3f16:	70 e0       	ldi	r23, 0x00	; 0
    3f18:	8a e1       	ldi	r24, 0x1A	; 26
    3f1a:	96 e0       	ldi	r25, 0x06	; 6
    3f1c:	0e 94 82 24 	call	0x4904	; 0x4904 <LedControl::LedControl(int, int, int, int)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:220

unsigned long lastTime3;
uint8_t loopAlarm;
bool fromInt2;

SimpleTimer timer0;
    3f20:	82 e9       	ldi	r24, 0x92	; 146
    3f22:	93 e0       	ldi	r25, 0x03	; 3
    3f24:	0e 94 0f 22 	call	0x441e	; 0x441e <SimpleTimer::SimpleTimer()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:221
SimpleTimer timer1;
    3f28:	86 ee       	ldi	r24, 0xE6	; 230
    3f2a:	92 e0       	ldi	r25, 0x02	; 2
    3f2c:	0e 94 0f 22 	call	0x441e	; 0x441e <SimpleTimer::SimpleTimer()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:222
SimpleTimer timer3;
    3f30:	8a e3       	ldi	r24, 0x3A	; 58
    3f32:	92 e0       	ldi	r25, 0x02	; 2
    3f34:	0e 94 0f 22 	call	0x441e	; 0x441e <SimpleTimer::SimpleTimer()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:223
SimpleTimer timer4;
    3f38:	8e e8       	ldi	r24, 0x8E	; 142
    3f3a:	91 e0       	ldi	r25, 0x01	; 1
_GLOBAL__sub_I_lc():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:1272
    }
  }
  else{
    noTone(pinBuzzer);
  }
}
    3f3c:	1f 91       	pop	r17
    3f3e:	0f 91       	pop	r16
__static_initialization_and_destruction_0():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:223
bool fromInt2;

SimpleTimer timer0;
SimpleTimer timer1;
SimpleTimer timer3;
SimpleTimer timer4;
    3f40:	0c 94 0f 22 	jmp	0x441e	; 0x441e <SimpleTimer::SimpleTimer()>

00003f44 <getData()>:
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:370
    Serial1.println();
    //  serializeJson(out1, Serial);
    //  Serial.println();       
}

void getData(){
    3f44:	8f 92       	push	r8
    3f46:	9f 92       	push	r9
    3f48:	af 92       	push	r10
    3f4a:	bf 92       	push	r11
    3f4c:	cf 92       	push	r12
    3f4e:	df 92       	push	r13
    3f50:	ef 92       	push	r14
    3f52:	ff 92       	push	r15
    3f54:	0f 93       	push	r16
    3f56:	1f 93       	push	r17
    3f58:	cf 93       	push	r28
    3f5a:	df 93       	push	r29
    3f5c:	cd b7       	in	r28, 0x3d	; 61
    3f5e:	de b7       	in	r29, 0x3e	; 62
    3f60:	cb 55       	subi	r28, 0x5B	; 91
    3f62:	d2 40       	sbci	r29, 0x02	; 2
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	f8 94       	cli
    3f68:	de bf       	out	0x3e, r29	; 62
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	cd bf       	out	0x3d, r28	; 61
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:372
  while(Serial1.available()>0){
    inputData[x] = Serial1.read();
    3f6e:	92 ed       	ldi	r25, 0xD2	; 210
    3f70:	c9 2e       	mov	r12, r25
    3f72:	94 e0       	ldi	r25, 0x04	; 4
    3f74:	d9 2e       	mov	r13, r25
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:376
    x++;
    if(inputData[x-1] == '\n'){
      // Serial.println(inputData);
      StaticJsonDocument<512>in;
    3f76:	ce 01       	movw	r24, r28
    3f78:	01 96       	adiw	r24, 0x01	; 1
    3f7a:	7c 01       	movw	r14, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE5parseINS_14AllowAllFilterEEENS_20DeserializationErrorERNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:36
  template <typename TFilter>
  DeserializationError parse(VariantData &variant, TFilter filter,
                             NestingLimit nestingLimit) {
    parseVariant(variant, filter, nestingLimit);

    if (!_error && _latch.last() != 0 && !variant.isEnclosed()) {
    3f7c:	00 e4       	ldi	r16, 0x40	; 64
    3f7e:	11 e0       	ldi	r17, 0x01	; 1
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:371
    //  serializeJson(out1, Serial);
    //  Serial.println();       
}

void getData(){
  while(Serial1.available()>0){
    3f80:	88 e1       	ldi	r24, 0x18	; 24
    3f82:	97 e0       	ldi	r25, 0x07	; 7
    3f84:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <HardwareSerial::available()>
    3f88:	18 16       	cp	r1, r24
    3f8a:	19 06       	cpc	r1, r25
    3f8c:	0c f0       	brlt	.+2      	; 0x3f90 <getData()+0x4c>
    3f8e:	7d c1       	rjmp	.+762    	; 0x428a <getData()+0x346>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:372
    inputData[x] = Serial1.read();
    3f90:	88 e1       	ldi	r24, 0x18	; 24
    3f92:	97 e0       	ldi	r25, 0x07	; 7
    3f94:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <HardwareSerial::read()>
    3f98:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <x>
    3f9c:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <x+0x1>
    3fa0:	f9 01       	movw	r30, r18
    3fa2:	ee 52       	subi	r30, 0x2E	; 46
    3fa4:	fb 4f       	sbci	r31, 0xFB	; 251
    3fa6:	80 83       	st	Z, r24
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:373
    x++;
    3fa8:	2f 5f       	subi	r18, 0xFF	; 255
    3faa:	3f 4f       	sbci	r19, 0xFF	; 255
    3fac:	30 93 d1 04 	sts	0x04D1, r19	; 0x8004d1 <x+0x1>
    3fb0:	20 93 d0 04 	sts	0x04D0, r18	; 0x8004d0 <x>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:374
    if(inputData[x-1] == '\n'){
    3fb4:	8a 30       	cpi	r24, 0x0A	; 10
    3fb6:	21 f7       	brne	.-56     	; 0x3f80 <getData()+0x3c>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:376
      // Serial.println(inputData);
      StaticJsonDocument<512>in;
    3fb8:	c7 01       	movw	r24, r14
    3fba:	0e 94 82 16 	call	0x2d04	; 0x2d04 <ArduinoJson6194_1::StaticJsonDocument<512u>::StaticJsonDocument()>
_ZN17ArduinoJson6194_110MemoryPool5clearEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:107
  void markAsOverflowed() {
    _overflowed = true;
  }

  void clear() {
    _left = _begin;
    3fbe:	89 81       	ldd	r24, Y+1	; 0x01
    3fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:108
    _right = _end;
    3fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    3fc8:	98 85       	ldd	r25, Y+8	; 0x08
    3fca:	9e 83       	std	Y+6, r25	; 0x06
    3fcc:	8d 83       	std	Y+5, r24	; 0x05
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Memory/MemoryPool.hpp:109
    _overflowed = false;
    3fce:	19 86       	std	Y+9, r1	; 0x09
_ZN17ArduinoJson6194_111VariantData4initEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantData.hpp:37
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance
  void init() {
    _flags = VALUE_IS_NULL;
    3fd0:	1e 86       	std	Y+14, r1	; 0x0e
    3fd2:	82 ed       	ldi	r24, 0xD2	; 210
    3fd4:	88 2e       	mov	r8, r24
    3fd6:	84 e0       	ldi	r24, 0x04	; 4
    3fd8:	98 2e       	mov	r9, r24
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEEC4ERNS_10MemoryPoolES3_S4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:29
                   TStringStorage stringStorage)
      : _stringStorage(stringStorage),
        _foundSomething(false),
        _latch(reader),
        _pool(&pool),
        _error(DeserializationError::Ok) {}
    3fda:	c1 5f       	subi	r28, 0xF1	; 241
    3fdc:	dd 4f       	sbci	r29, 0xFD	; 253
    3fde:	88 82       	st	Y, r8
    3fe0:	99 82       	std	Y+1, r9	; 0x01
    3fe2:	aa 82       	std	Y+2, r10	; 0x02
    3fe4:	bb 82       	std	Y+3, r11	; 0x03
    3fe6:	cf 50       	subi	r28, 0x0F	; 15
    3fe8:	d2 40       	sbci	r29, 0x02	; 2
    3fea:	cd 5e       	subi	r28, 0xED	; 237
    3fec:	dd 4f       	sbci	r29, 0xFD	; 253
    3fee:	18 82       	st	Y, r1
    3ff0:	c3 51       	subi	r28, 0x13	; 19
    3ff2:	d2 40       	sbci	r29, 0x02	; 2
_ZN17ArduinoJson6194_15LatchINS_6ReaderIPcvEEEC4ES3_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/Latch.hpp:14
namespace ARDUINOJSON_NAMESPACE {

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : _reader(reader), _loaded(false) {
    3ff4:	cc 5e       	subi	r28, 0xEC	; 236
    3ff6:	dd 4f       	sbci	r29, 0xFD	; 253
    3ff8:	d9 82       	std	Y+1, r13	; 0x01
    3ffa:	c8 82       	st	Y, r12
    3ffc:	c4 51       	subi	r28, 0x14	; 20
    3ffe:	d2 40       	sbci	r29, 0x02	; 2
    4000:	c9 5e       	subi	r28, 0xE9	; 233
    4002:	dd 4f       	sbci	r29, 0xFD	; 253
    4004:	18 82       	st	Y, r1
    4006:	c7 51       	subi	r28, 0x17	; 23
    4008:	d2 40       	sbci	r29, 0x02	; 2
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEEC4ERNS_10MemoryPoolES3_S4_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:29
    400a:	c8 5e       	subi	r28, 0xE8	; 232
    400c:	dd 4f       	sbci	r29, 0xFD	; 253
    400e:	f9 82       	std	Y+1, r15	; 0x01
    4010:	e8 82       	st	Y, r14
    4012:	c8 51       	subi	r28, 0x18	; 24
    4014:	d2 40       	sbci	r29, 0x02	; 2
_ZN17ArduinoJson6194_120DeserializationErrorC4ENS0_4CodeE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/DeserializationError.hpp:30
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
    4016:	c6 5a       	subi	r28, 0xA6	; 166
    4018:	dd 4f       	sbci	r29, 0xFD	; 253
    401a:	19 82       	std	Y+1, r1	; 0x01
    401c:	18 82       	st	Y, r1
    401e:	ca 55       	subi	r28, 0x5A	; 90
    4020:	d2 40       	sbci	r29, 0x02	; 2
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE5parseINS_14AllowAllFilterEEENS_20DeserializationErrorERNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:34

  template <typename TFilter>
  DeserializationError parse(VariantData &variant, TFilter filter,
                             NestingLimit nestingLimit) {
    parseVariant(variant, filter, nestingLimit);
    4022:	2a e0       	ldi	r18, 0x0A	; 10
    4024:	40 e0       	ldi	r20, 0x00	; 0
    4026:	be 01       	movw	r22, r28
    4028:	66 5f       	subi	r22, 0xF6	; 246
    402a:	7f 4f       	sbci	r23, 0xFF	; 255
    402c:	ce 01       	movw	r24, r28
    402e:	81 5f       	subi	r24, 0xF1	; 241
    4030:	9d 4f       	sbci	r25, 0xFD	; 253
    4032:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <bool ArduinoJson6194_1::JsonDeserializer<ArduinoJson6194_1::Reader<char*, void>, ArduinoJson6194_1::StringMover>::parseVariant<ArduinoJson6194_1::AllowAllFilter>(ArduinoJson6194_1::VariantData&, ArduinoJson6194_1::AllowAllFilter, ArduinoJson6194_1::NestingLimit)>
_ZNK17ArduinoJson6194_120DeserializationErrorcvMS0_KFvvEEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/DeserializationError.hpp:58
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
    return _code != Ok ? safe_true() : safe_false();
    4036:	c6 5a       	subi	r28, 0xA6	; 166
    4038:	dd 4f       	sbci	r29, 0xFD	; 253
    403a:	88 81       	ld	r24, Y
    403c:	99 81       	ldd	r25, Y+1	; 0x01
    403e:	ca 55       	subi	r28, 0x5A	; 90
    4040:	d2 40       	sbci	r29, 0x02	; 2
    4042:	00 97       	sbiw	r24, 0x00	; 0
    4044:	19 f0       	breq	.+6      	; 0x404c <getData()+0x108>
_ZN17ArduinoJson6194_116JsonDeserializerINS_6ReaderIPcvEENS_11StringMoverEE5parseINS_14AllowAllFilterEEENS_20DeserializationErrorERNS_11VariantDataET_NS_12NestingLimitE():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Json/JsonDeserializer.hpp:36

    if (!_error && _latch.last() != 0 && !variant.isEnclosed()) {
    4046:	01 15       	cp	r16, r1
    4048:	11 05       	cpc	r17, r1
    404a:	99 f4       	brne	.+38     	; 0x4072 <getData()+0x12e>
    404c:	ca 5e       	subi	r28, 0xEA	; 234
    404e:	dd 4f       	sbci	r29, 0xFD	; 253
    4050:	28 81       	ld	r18, Y
    4052:	c6 51       	subi	r28, 0x16	; 22
    4054:	d2 40       	sbci	r29, 0x02	; 2
    4056:	22 23       	and	r18, r18
    4058:	61 f0       	breq	.+24     	; 0x4072 <getData()+0x12e>
    405a:	2e 85       	ldd	r18, Y+14	; 0x0e
    405c:	23 ff       	sbrs	r18, 3
    405e:	09 c0       	rjmp	.+18     	; 0x4072 <getData()+0x12e>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:378
      DeserializationError error = deserializeJson(in, inputData);
      x = 0;
    4060:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <x+0x1>
    4064:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <x>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:379
      if(!error){
    4068:	01 15       	cp	r16, r1
    406a:	11 05       	cpc	r17, r1
    406c:	09 f0       	breq	.+2      	; 0x4070 <getData()+0x12c>
    406e:	88 cf       	rjmp	.-240    	; 0x3f80 <getData()+0x3c>
    4070:	06 c0       	rjmp	.+12     	; 0x407e <getData()+0x13a>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:378
    x++;
    if(inputData[x-1] == '\n'){
      // Serial.println(inputData);
      StaticJsonDocument<512>in;
      DeserializationError error = deserializeJson(in, inputData);
      x = 0;
    4072:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <x+0x1>
    4076:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <x>
_ZNK17ArduinoJson6194_120DeserializationErrorcvMS0_KFvvEEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Deserialization/DeserializationError.hpp:58
    407a:	89 2b       	or	r24, r25
    407c:	a9 f7       	brne	.-22     	; 0x4068 <getData()+0x124>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233 (discriminator 1)
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
    407e:	69 e6       	ldi	r22, 0x69	; 105
    4080:	71 e0       	ldi	r23, 0x01	; 1
    4082:	ce 01       	movw	r24, r28
    4084:	0a 96       	adiw	r24, 0x0a	; 10
    4086:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136 (discriminator 1)
inline VariantRef VariantRef::addElement() const {
  return VariantRef(_pool, variantAddElement(_data, _pool));
}

inline VariantRef VariantRef::getElement(size_t index) const {
  return VariantRef(_pool, _data != 0 ? _data->getElement(index) : 0);
    408a:	00 97       	sbiw	r24, 0x00	; 0
    408c:	21 f0       	breq	.+8      	; 0x4096 <getData()+0x152>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    408e:	70 e0       	ldi	r23, 0x00	; 0
    4090:	60 e0       	ldi	r22, 0x00	; 0
    4092:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIfEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
  template <typename T>
  FORCE_INLINE
      typename enable_if<!is_same<T, char *>::value && !is_same<T, char>::value,
                         T>::type
      as() const {
    return Converter<T>::fromJson(*this);
    4096:	0e 94 92 16 	call	0x2d24	; 0x2d24 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:380
      if(!error){
       chamberTemp0 = in["sh"][0];
    409a:	60 93 12 06 	sts	0x0612, r22	; 0x800612 <chamberTemp0>
    409e:	70 93 13 06 	sts	0x0613, r23	; 0x800613 <chamberTemp0+0x1>
    40a2:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <chamberTemp0+0x2>
    40a6:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <chamberTemp0+0x3>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    40aa:	69 e6       	ldi	r22, 0x69	; 105
    40ac:	71 e0       	ldi	r23, 0x01	; 1
    40ae:	ce 01       	movw	r24, r28
    40b0:	0a 96       	adiw	r24, 0x0a	; 10
    40b2:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    40b6:	00 97       	sbiw	r24, 0x00	; 0
    40b8:	21 f0       	breq	.+8      	; 0x40c2 <getData()+0x17e>
    40ba:	61 e0       	ldi	r22, 0x01	; 1
    40bc:	70 e0       	ldi	r23, 0x00	; 0
    40be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIfEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    40c2:	0e 94 92 16 	call	0x2d24	; 0x2d24 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:381
       skinTemp1    = in["sh"][1];
    40c6:	60 93 0a 06 	sts	0x060A, r22	; 0x80060a <skinTemp1>
    40ca:	70 93 0b 06 	sts	0x060B, r23	; 0x80060b <skinTemp1+0x1>
    40ce:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <skinTemp1+0x2>
    40d2:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <skinTemp1+0x3>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    40d6:	69 e6       	ldi	r22, 0x69	; 105
    40d8:	71 e0       	ldi	r23, 0x01	; 1
    40da:	ce 01       	movw	r24, r28
    40dc:	0a 96       	adiw	r24, 0x0a	; 10
    40de:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    40e2:	00 97       	sbiw	r24, 0x00	; 0
    40e4:	21 f0       	breq	.+8      	; 0x40ee <getData()+0x1aa>
    40e6:	62 e0       	ldi	r22, 0x02	; 2
    40e8:	70 e0       	ldi	r23, 0x00	; 0
    40ea:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIfEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    40ee:	0e 94 92 16 	call	0x2d24	; 0x2d24 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:382
       skinTemp2    = in["sh"][2];
    40f2:	60 93 06 06 	sts	0x0606, r22	; 0x800606 <skinTemp2>
    40f6:	70 93 07 06 	sts	0x0607, r23	; 0x800607 <skinTemp2+0x1>
    40fa:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <skinTemp2+0x2>
    40fe:	90 93 09 06 	sts	0x0609, r25	; 0x800609 <skinTemp2+0x3>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    4102:	69 e6       	ldi	r22, 0x69	; 105
    4104:	71 e0       	ldi	r23, 0x01	; 1
    4106:	ce 01       	movw	r24, r28
    4108:	0a 96       	adiw	r24, 0x0a	; 10
    410a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    410e:	00 97       	sbiw	r24, 0x00	; 0
    4110:	21 f0       	breq	.+8      	; 0x411a <getData()+0x1d6>
    4112:	63 e0       	ldi	r22, 0x03	; 3
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIfEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    411a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <ArduinoJson6194_1::Converter<float, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:383
       humidityMid  = in["sh"][3];
    411e:	60 93 0e 06 	sts	0x060E, r22	; 0x80060e <humidityMid>
    4122:	70 93 0f 06 	sts	0x060F, r23	; 0x80060f <humidityMid+0x1>
    4126:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <humidityMid+0x2>
    412a:	90 93 11 06 	sts	0x0611, r25	; 0x800611 <humidityMid+0x3>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    412e:	6c e6       	ldi	r22, 0x6C	; 108
    4130:	71 e0       	ldi	r23, 0x01	; 1
    4132:	ce 01       	movw	r24, r28
    4134:	0a 96       	adiw	r24, 0x0a	; 10
    4136:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    413a:	00 97       	sbiw	r24, 0x00	; 0
    413c:	21 f0       	breq	.+8      	; 0x4146 <getData()+0x202>
    413e:	70 e0       	ldi	r23, 0x00	; 0
    4140:	60 e0       	ldi	r22, 0x00	; 0
    4142:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    4146:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:384
       heaterPwm    = in["tm"][0];
    414a:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <heaterPwm>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    414e:	6c e6       	ldi	r22, 0x6C	; 108
    4150:	71 e0       	ldi	r23, 0x01	; 1
    4152:	ce 01       	movw	r24, r28
    4154:	0a 96       	adiw	r24, 0x0a	; 10
    4156:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	21 f0       	breq	.+8      	; 0x4166 <getData()+0x222>
    415e:	61 e0       	ldi	r22, 0x01	; 1
    4160:	70 e0       	ldi	r23, 0x00	; 0
    4162:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    4166:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:385
       Datatimer1   = in["tm"][1];
    416a:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <Datatimer1>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    416e:	6c e6       	ldi	r22, 0x6C	; 108
    4170:	71 e0       	ldi	r23, 0x01	; 1
    4172:	ce 01       	movw	r24, r28
    4174:	0a 96       	adiw	r24, 0x0a	; 10
    4176:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    417a:	00 97       	sbiw	r24, 0x00	; 0
    417c:	21 f0       	breq	.+8      	; 0x4186 <getData()+0x242>
    417e:	62 e0       	ldi	r22, 0x02	; 2
    4180:	70 e0       	ldi	r23, 0x00	; 0
    4182:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIhEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    4186:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <ArduinoJson6194_1::Converter<unsigned char, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:386
       Datatimer2   = in["tm"][2];
    418a:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <Datatimer2>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    418e:	6f e6       	ldi	r22, 0x6F	; 111
    4190:	71 e0       	ldi	r23, 0x01	; 1
    4192:	ce 01       	movw	r24, r28
    4194:	0a 96       	adiw	r24, 0x0a	; 10
    4196:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    419a:	00 97       	sbiw	r24, 0x00	; 0
    419c:	21 f0       	breq	.+8      	; 0x41a6 <getData()+0x262>
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIiEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    41a6:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:387
       error0       = in["er"][0];
    41aa:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <error0+0x1>
    41ae:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <error0>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    41b2:	6f e6       	ldi	r22, 0x6F	; 111
    41b4:	71 e0       	ldi	r23, 0x01	; 1
    41b6:	ce 01       	movw	r24, r28
    41b8:	0a 96       	adiw	r24, 0x0a	; 10
    41ba:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    41be:	00 97       	sbiw	r24, 0x00	; 0
    41c0:	21 f0       	breq	.+8      	; 0x41ca <getData()+0x286>
    41c2:	61 e0       	ldi	r22, 0x01	; 1
    41c4:	70 e0       	ldi	r23, 0x00	; 0
    41c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIiEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    41ca:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:388
       error1       = in["er"][1];
    41ce:	90 93 dd 05 	sts	0x05DD, r25	; 0x8005dd <error1+0x1>
    41d2:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <error1>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    41d6:	6f e6       	ldi	r22, 0x6F	; 111
    41d8:	71 e0       	ldi	r23, 0x01	; 1
    41da:	ce 01       	movw	r24, r28
    41dc:	0a 96       	adiw	r24, 0x0a	; 10
    41de:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	21 f0       	breq	.+8      	; 0x41ee <getData()+0x2aa>
    41e6:	62 e0       	ldi	r22, 0x02	; 2
    41e8:	70 e0       	ldi	r23, 0x00	; 0
    41ea:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIiEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    41ee:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:389
       error2       = in["er"][2];
    41f2:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <error2+0x1>
    41f6:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <error2>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    41fa:	6f e6       	ldi	r22, 0x6F	; 111
    41fc:	71 e0       	ldi	r23, 0x01	; 1
    41fe:	ce 01       	movw	r24, r28
    4200:	0a 96       	adiw	r24, 0x0a	; 10
    4202:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    4206:	00 97       	sbiw	r24, 0x00	; 0
    4208:	21 f0       	breq	.+8      	; 0x4212 <getData()+0x2ce>
    420a:	63 e0       	ldi	r22, 0x03	; 3
    420c:	70 e0       	ldi	r23, 0x00	; 0
    420e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIiEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    4212:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:390
       error3       = in["er"][3];
    4216:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <error3+0x1>
    421a:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <error3>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    421e:	6f e6       	ldi	r22, 0x6F	; 111
    4220:	71 e0       	ldi	r23, 0x01	; 1
    4222:	ce 01       	movw	r24, r28
    4224:	0a 96       	adiw	r24, 0x0a	; 10
    4226:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    422a:	00 97       	sbiw	r24, 0x00	; 0
    422c:	21 f0       	breq	.+8      	; 0x4236 <getData()+0x2f2>
    422e:	64 e0       	ldi	r22, 0x04	; 4
    4230:	70 e0       	ldi	r23, 0x00	; 0
    4232:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIiEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    4236:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:391
       error4       = in["er"][4];
    423a:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <error4+0x1>
    423e:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <error4>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    4242:	6f e6       	ldi	r22, 0x6F	; 111
    4244:	71 e0       	ldi	r23, 0x01	; 1
    4246:	ce 01       	movw	r24, r28
    4248:	0a 96       	adiw	r24, 0x0a	; 10
    424a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    424e:	00 97       	sbiw	r24, 0x00	; 0
    4250:	21 f0       	breq	.+8      	; 0x425a <getData()+0x316>
    4252:	65 e0       	ldi	r22, 0x05	; 5
    4254:	70 e0       	ldi	r23, 0x00	; 0
    4256:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIiEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    425a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:392
       error5       = in["er"][5];
    425e:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <error5+0x1>
    4262:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <error5>
_ZN17ArduinoJson6194_112JsonDocument9getMemberIKcEENS_10VariantRefEPT_():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Document/JsonDocument.hpp:233
    4266:	6f e6       	ldi	r22, 0x6F	; 111
    4268:	71 e0       	ldi	r23, 0x01	; 1
    426a:	ce 01       	movw	r24, r28
    426c:	0a 96       	adiw	r24, 0x0a	; 10
    426e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <ArduinoJson6194_1::VariantData* ArduinoJson6194_1::VariantData::getMember<ArduinoJson6194_1::ZeroTerminatedRamString>(ArduinoJson6194_1::ZeroTerminatedRamString) const>
_ZNK17ArduinoJson6194_110VariantRef10getElementEj():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantImpl.hpp:136
    4272:	00 97       	sbiw	r24, 0x00	; 0
    4274:	21 f0       	breq	.+8      	; 0x427e <getData()+0x33a>
    4276:	66 e0       	ldi	r22, 0x06	; 6
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ArduinoJson6194_1::VariantData::getElement(unsigned int) const>
_ZNK17ArduinoJson6194_110VariantRef2asIiEENS_9enable_ifIXaantsrNS_7is_sameIT_PcEE5valuentsrNS3_IS4_cEE5valueES4_E4typeEv():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\ArduinoJson\src/ArduinoJson/Variant/VariantRef.hpp:107
    427e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <ArduinoJson6194_1::Converter<int, void>::fromJson(ArduinoJson6194_1::VariantConstRef)>
_Z7getDatav():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:393
       error6       = in["er"][6];
    4282:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <error6+0x1>
    4286:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <error6>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:398
       return;
      }   
    }
  }
}
    428a:	c5 5a       	subi	r28, 0xA5	; 165
    428c:	dd 4f       	sbci	r29, 0xFD	; 253
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	df 90       	pop	r13
    42a6:	cf 90       	pop	r12
    42a8:	bf 90       	pop	r11
    42aa:	af 90       	pop	r10
    42ac:	9f 90       	pop	r9
    42ae:	8f 90       	pop	r8
    42b0:	08 95       	ret

000042b2 <run_program()>:
_Z11run_programv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:296

void loop() {
   run_program();
}

void run_program(){ 
    42b2:	0f 93       	push	r16
    42b4:	1f 93       	push	r17
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:297
   if(digitalRead(20)==LOW){
    42b6:	84 e1       	ldi	r24, 0x14	; 20
    42b8:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    42bc:	89 2b       	or	r24, r25
    42be:	09 f0       	breq	.+2      	; 0x42c2 <run_program()+0x10>
    42c0:	5e c0       	rjmp	.+188    	; 0x437e <run_program()+0xcc>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:298
    onOff++;
    42c2:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <onOff>
    42c6:	8f 5f       	subi	r24, 0xFF	; 255
    42c8:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <onOff>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:299
    if(onOff >=100){  
    42cc:	84 36       	cpi	r24, 0x64	; 100
    42ce:	08 f4       	brcc	.+2      	; 0x42d2 <run_program()+0x20>
    42d0:	4f c0       	rjmp	.+158    	; 0x4370 <run_program()+0xbe>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:300
    error0 = 0;
    42d2:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <error0+0x1>
    42d6:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <error0>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:301
    error1 = 0;
    42da:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <error1+0x1>
    42de:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <error1>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:302
    error2 = 0;
    42e2:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <error2+0x1>
    42e6:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <error2>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:303
    error3 = 0;
    42ea:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <error3+0x1>
    42ee:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <error3>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:304
    error4 = 0;
    42f2:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <error4+0x1>
    42f6:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <error4>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:305
    error5 = 0;
    42fa:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <error5+0x1>
    42fe:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <error5>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:306
    error6 = 0;
    4302:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <error6+0x1>
    4306:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <error6>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:307
    skinMode = 0;
    430a:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <skinMode+0x1>
    430e:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <skinMode>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:308
    humiMode = 0;
    4312:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <humiMode+0x1>
    4316:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <humiMode>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:309
    lockMode = 0;
    431a:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <lockMode+0x1>
    431e:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <lockMode>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:310
    sunyiValue = 2;
    4322:	82 e0       	ldi	r24, 0x02	; 2
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <sunyiValue+0x1>
    432a:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <sunyiValue>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:311
    highTemp = 0;
    432e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <highTemp+0x1>
    4332:	10 92 e9 05 	sts	0x05E9, r1	; 0x8005e9 <highTemp>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:312
    digit_kosong();
    4336:	0e 94 da 14 	call	0x29b4	; 0x29b4 <digit_kosong()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:313
    lcdOn = millis();
    433a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    433e:	60 93 43 04 	sts	0x0443, r22	; 0x800443 <lcdOn>
    4342:	70 93 44 04 	sts	0x0444, r23	; 0x800444 <lcdOn+0x1>
    4346:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <lcdOn+0x2>
    434a:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <lcdOn+0x3>
sleepMode():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_extras.h:112
        set_sleep_mode(SLEEP_MODE_ADC);
      #endif
      break;
    case SLEEP_POWER_DOWN:
      #if defined SLEEP_MODE_PWR_DOWN
        set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    434e:	85 b7       	in	r24, 0x35	; 53
    4350:	83 7e       	andi	r24, 0xE3	; 227
    4352:	80 61       	ori	r24, 0x10	; 16
    4354:	85 bf       	out	0x35, r24	; 53
sleep():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_extras.h:148

static inline void sleep() __attribute__((always_inline, unused));
static inline void sleep()
{
  #if defined sleep_mode
    sleep_mode();
    4356:	85 b7       	in	r24, 0x35	; 53
    4358:	80 62       	ori	r24, 0x20	; 32
    435a:	85 bf       	out	0x35, r24	; 53
    435c:	88 95       	sleep
    435e:	85 b7       	in	r24, 0x35	; 53
    4360:	8f 7d       	andi	r24, 0xDF	; 223
    4362:	85 bf       	out	0x35, r24	; 53
_Z11run_programv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:316
    sleepMode(SLEEP_POWER_DOWN);
    sleep();
    Serial.println("sleep");
    4364:	62 e7       	ldi	r22, 0x72	; 114
    4366:	71 e0       	ldi	r23, 0x01	; 1
    4368:	8b e7       	ldi	r24, 0x7B	; 123
    436a:	96 e0       	ldi	r25, 0x06	; 6
    436c:	0e 94 6e 29 	call	0x52dc	; 0x52dc <Print::println(char const*)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:318
    }
    if(onOff > 100){
    4370:	80 91 6e 04 	lds	r24, 0x046E	; 0x80046e <onOff>
    4374:	85 36       	cpi	r24, 0x65	; 101
    4376:	18 f0       	brcs	.+6      	; 0x437e <run_program()+0xcc>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:319
      onOff = 100;
    4378:	84 e6       	ldi	r24, 0x64	; 100
    437a:	80 93 6e 04 	sts	0x046E, r24	; 0x80046e <onOff>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:323
    }
   }
   
   if(digitalRead(20) == HIGH){ 
    437e:	84 e1       	ldi	r24, 0x14	; 20
    4380:	0e 94 76 26 	call	0x4cec	; 0x4cec <digitalRead>
    4384:	01 97       	sbiw	r24, 0x01	; 1
    4386:	09 f0       	breq	.+2      	; 0x438a <run_program()+0xd8>
    4388:	45 c0       	rjmp	.+138    	; 0x4414 <run_program()+0x162>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:324
    onOff = 0;
    438a:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <onOff>
disableSleep():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_extras.h:90
#define noSleep() disableSleep()
static inline void disableSleep() __attribute__((always_inline, unused));
static inline void disableSleep()
{
  #if defined sleep_disable
    sleep_disable();
    438e:	85 b7       	in	r24, 0x35	; 53
    4390:	8f 7d       	andi	r24, 0xDF	; 223
    4392:	85 bf       	out	0x35, r24	; 53
_Z11run_programv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:326
    noSleep();
    if(millis() - lcdOn < 100){
    4394:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    4398:	00 91 43 04 	lds	r16, 0x0443	; 0x800443 <lcdOn>
    439c:	10 91 44 04 	lds	r17, 0x0444	; 0x800444 <lcdOn+0x1>
    43a0:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <lcdOn+0x2>
    43a4:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <lcdOn+0x3>
    43a8:	60 1b       	sub	r22, r16
    43aa:	71 0b       	sbc	r23, r17
    43ac:	82 0b       	sbc	r24, r18
    43ae:	93 0b       	sbc	r25, r19
    43b0:	64 36       	cpi	r22, 0x64	; 100
    43b2:	71 05       	cpc	r23, r1
    43b4:	81 05       	cpc	r24, r1
    43b6:	91 05       	cpc	r25, r1
    43b8:	a8 f4       	brcc	.+42     	; 0x43e4 <run_program()+0x132>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:327
      lc.shutdown(0, false);
    43ba:	40 e0       	ldi	r20, 0x00	; 0
    43bc:	70 e0       	ldi	r23, 0x00	; 0
    43be:	60 e0       	ldi	r22, 0x00	; 0
    43c0:	8a e1       	ldi	r24, 0x1A	; 26
    43c2:	96 e0       	ldi	r25, 0x06	; 6
    43c4:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:328
      lc.shutdown(1, false);
    43c8:	40 e0       	ldi	r20, 0x00	; 0
    43ca:	61 e0       	ldi	r22, 0x01	; 1
    43cc:	70 e0       	ldi	r23, 0x00	; 0
    43ce:	8a e1       	ldi	r24, 0x1A	; 26
    43d0:	96 e0       	ldi	r25, 0x06	; 6
    43d2:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:329
      lc.shutdown(2, false);
    43d6:	40 e0       	ldi	r20, 0x00	; 0
    43d8:	62 e0       	ldi	r22, 0x02	; 2
    43da:	70 e0       	ldi	r23, 0x00	; 0
    43dc:	8a e1       	ldi	r24, 0x1A	; 26
    43de:	96 e0       	ldi	r25, 0x06	; 6
    43e0:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:331
    }
    getData(); 
    43e4:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <getData()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:332
    timer0.run();//generate_json();
    43e8:	82 e9       	ldi	r24, 0x92	; 146
    43ea:	93 e0       	ldi	r25, 0x03	; 3
    43ec:	0e 94 f7 22 	call	0x45ee	; 0x45ee <SimpleTimer::run()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:333
    timer4.run();
    43f0:	8e e8       	ldi	r24, 0x8E	; 142
    43f2:	91 e0       	ldi	r25, 0x01	; 1
    43f4:	0e 94 f7 22 	call	0x45ee	; 0x45ee <SimpleTimer::run()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:335
    // timer3.run();
    btn_menu();
    43f8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <btn_menu()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:336
    set_btn();
    43fc:	0e 94 34 09 	call	0x1268	; 0x1268 <set_btn()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:337
    reset_alarm();
    4400:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <reset_alarm()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:338
    read_error();
    4404:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <read_error()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:339
    alarem();
    4408:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <alarem()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:347
    // Serial.print("-");
    // Serial.print(currentPower1);
    // Serial.print("-");
    // Serial.println(timeBtn);
   }
}
    440c:	1f 91       	pop	r17
    440e:	0f 91       	pop	r16
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:340
    btn_menu();
    set_btn();
    reset_alarm();
    read_error();
    alarem();
    display_digit();
    4410:	0c 94 43 13 	jmp	0x2686	; 0x2686 <display_digit()>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:347
    // Serial.print("-");
    // Serial.print(currentPower1);
    // Serial.print("-");
    // Serial.println(timeBtn);
   }
}
    4414:	1f 91       	pop	r17
    4416:	0f 91       	pop	r16
    4418:	08 95       	ret

0000441a <loop>:
loop():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite/fastWrite.ino:293
ISR(INT2_vect){
    onOff = 0;
}

void loop() {
   run_program();
    441a:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <run_program()>

0000441e <SimpleTimer::SimpleTimer()>:
_ZN11SimpleTimerC2Ev():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:165
}


int SimpleTimer::setTimeout(long d, timer_callback f) {
    return setTimer(d, f, RUN_ONCE);
}
    441e:	cf 92       	push	r12
    4420:	df 92       	push	r13
    4422:	ef 92       	push	r14
    4424:	ff 92       	push	r15
    4426:	cf 93       	push	r28
    4428:	df 93       	push	r29
    442a:	ec 01       	movw	r28, r24
elapsed():
    442c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    4430:	7e 01       	movw	r14, r28
    4432:	2c e8       	ldi	r18, 0x8C	; 140
    4434:	e2 0e       	add	r14, r18
    4436:	f1 1c       	adc	r15, r1
    4438:	fe 01       	movw	r30, r28
    443a:	b8 96       	adiw	r30, 0x28	; 40
    443c:	6e 01       	movw	r12, r28
    443e:	9e 01       	movw	r18, r28
    4440:	24 5c       	subi	r18, 0xC4	; 196
    4442:	3f 4f       	sbci	r19, 0xFF	; 255
_ZN11SimpleTimerC2Ev():
    4444:	d7 01       	movw	r26, r14
    4446:	1d 92       	st	X+, r1
    4448:	7d 01       	movw	r14, r26
    444a:	11 92       	st	Z+, r1
    444c:	11 92       	st	Z+, r1
    444e:	d6 01       	movw	r26, r12
    4450:	6d 93       	st	X+, r22
    4452:	7d 93       	st	X+, r23
    4454:	8d 93       	st	X+, r24
    4456:	9d 93       	st	X+, r25
    4458:	6d 01       	movw	r12, r26
    445a:	af 01       	movw	r20, r30
    445c:	42 5b       	subi	r20, 0xB2	; 178
    445e:	5f 4f       	sbci	r21, 0xFF	; 255
    4460:	da 01       	movw	r26, r20
    4462:	1d 92       	st	X+, r1
    4464:	1c 92       	st	X, r1
    4466:	e2 17       	cp	r30, r18
    4468:	f3 07       	cpc	r31, r19
    446a:	61 f7       	brne	.-40     	; 0x4444 <SimpleTimer::SimpleTimer()+0x26>
    446c:	c6 55       	subi	r28, 0x56	; 86
    446e:	df 4f       	sbci	r29, 0xFF	; 255
    4470:	19 82       	std	Y+1, r1	; 0x01
    4472:	18 82       	st	Y, r1
    4474:	df 91       	pop	r29
    4476:	cf 91       	pop	r28
    4478:	ff 90       	pop	r15
    447a:	ef 90       	pop	r14
    447c:	df 90       	pop	r13
    447e:	cf 90       	pop	r12
    4480:	08 95       	ret

00004482 <SimpleTimer::findFirstFreeSlot()>:
_ZN11SimpleTimer17findFirstFreeSlotEv():
    4482:	fc 01       	movw	r30, r24
    4484:	e6 55       	subi	r30, 0x56	; 86
    4486:	ff 4f       	sbci	r31, 0xFF	; 255
    4488:	20 81       	ld	r18, Z
    448a:	31 81       	ldd	r19, Z+1	; 0x01
    448c:	2a 30       	cpi	r18, 0x0A	; 10
    448e:	31 05       	cpc	r19, r1
    4490:	64 f4       	brge	.+24     	; 0x44aa <SimpleTimer::findFirstFreeSlot()+0x28>
    4492:	e2 58       	subi	r30, 0x82	; 130
    4494:	f1 09       	sbc	r31, r1
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	80 e0       	ldi	r24, 0x00	; 0
    449a:	21 91       	ld	r18, Z+
    449c:	31 91       	ld	r19, Z+
    449e:	23 2b       	or	r18, r19
    44a0:	31 f0       	breq	.+12     	; 0x44ae <SimpleTimer::findFirstFreeSlot()+0x2c>
    44a2:	01 96       	adiw	r24, 0x01	; 1
    44a4:	8a 30       	cpi	r24, 0x0A	; 10
    44a6:	91 05       	cpc	r25, r1
    44a8:	c1 f7       	brne	.-16     	; 0x449a <SimpleTimer::findFirstFreeSlot()+0x18>
    44aa:	8f ef       	ldi	r24, 0xFF	; 255
    44ac:	9f ef       	ldi	r25, 0xFF	; 255
    44ae:	08 95       	ret

000044b0 <SimpleTimer::setTimer(long, void (*)(), int)>:
_ZN11SimpleTimer8setTimerElPFvvEi():
    44b0:	4f 92       	push	r4
    44b2:	5f 92       	push	r5
    44b4:	6f 92       	push	r6
    44b6:	7f 92       	push	r7
    44b8:	af 92       	push	r10
    44ba:	bf 92       	push	r11
    44bc:	cf 92       	push	r12
    44be:	df 92       	push	r13
    44c0:	ef 92       	push	r14
    44c2:	ff 92       	push	r15
    44c4:	0f 93       	push	r16
    44c6:	1f 93       	push	r17
    44c8:	cf 93       	push	r28
    44ca:	df 93       	push	r29
    44cc:	ec 01       	movw	r28, r24
    44ce:	2a 01       	movw	r4, r20
    44d0:	3b 01       	movw	r6, r22
    44d2:	79 01       	movw	r14, r18
    44d4:	68 01       	movw	r12, r16
    44d6:	0e 94 41 22 	call	0x4482	; 0x4482 <SimpleTimer::findFirstFreeSlot()>
    44da:	8c 01       	movw	r16, r24
    44dc:	97 fd       	sbrc	r25, 7
    44de:	3f c0       	rjmp	.+126    	; 0x455e <SimpleTimer::setTimer(long, void (*)(), int)+0xae>
    44e0:	e1 14       	cp	r14, r1
    44e2:	f1 04       	cpc	r15, r1
    44e4:	e1 f1       	breq	.+120    	; 0x455e <SimpleTimer::setTimer(long, void (*)(), int)+0xae>
    44e6:	5c 01       	movw	r10, r24
    44e8:	aa 0c       	add	r10, r10
    44ea:	bb 1c       	adc	r11, r11
    44ec:	aa 0c       	add	r10, r10
    44ee:	bb 1c       	adc	r11, r11
    44f0:	ac 0e       	add	r10, r28
    44f2:	bd 1e       	adc	r11, r29
    44f4:	f5 01       	movw	r30, r10
    44f6:	44 ae       	std	Z+60, r4	; 0x3c
    44f8:	55 ae       	std	Z+61, r5	; 0x3d
    44fa:	66 ae       	std	Z+62, r6	; 0x3e
    44fc:	77 ae       	std	Z+63, r7	; 0x3f
    44fe:	f8 01       	movw	r30, r16
    4500:	ee 0f       	add	r30, r30
    4502:	ff 1f       	adc	r31, r31
    4504:	ec 0f       	add	r30, r28
    4506:	fd 1f       	adc	r31, r29
    4508:	f1 a6       	std	Z+41, r15	; 0x29
    450a:	e0 a6       	std	Z+40, r14	; 0x28
    450c:	ec 59       	subi	r30, 0x9C	; 156
    450e:	ff 4f       	sbci	r31, 0xFF	; 255
    4510:	d1 82       	std	Z+1, r13	; 0x01
    4512:	c0 82       	st	Z, r12
    4514:	fe 01       	movw	r30, r28
    4516:	e0 0f       	add	r30, r16
    4518:	f1 1f       	adc	r31, r17
    451a:	e4 57       	subi	r30, 0x74	; 116
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	80 83       	st	Z, r24
elapsed():
    4522:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
_ZN11SimpleTimer8setTimerElPFvvEi():
    4526:	f5 01       	movw	r30, r10
    4528:	60 83       	st	Z, r22
    452a:	71 83       	std	Z+1, r23	; 0x01
    452c:	82 83       	std	Z+2, r24	; 0x02
    452e:	93 83       	std	Z+3, r25	; 0x03
    4530:	c6 55       	subi	r28, 0x56	; 86
    4532:	df 4f       	sbci	r29, 0xFF	; 255
    4534:	88 81       	ld	r24, Y
    4536:	99 81       	ldd	r25, Y+1	; 0x01
    4538:	01 96       	adiw	r24, 0x01	; 1
    453a:	99 83       	std	Y+1, r25	; 0x01
    453c:	88 83       	st	Y, r24
    453e:	c8 01       	movw	r24, r16
    4540:	df 91       	pop	r29
    4542:	cf 91       	pop	r28
    4544:	1f 91       	pop	r17
    4546:	0f 91       	pop	r16
    4548:	ff 90       	pop	r15
    454a:	ef 90       	pop	r14
    454c:	df 90       	pop	r13
    454e:	cf 90       	pop	r12
    4550:	bf 90       	pop	r11
    4552:	af 90       	pop	r10
    4554:	7f 90       	pop	r7
    4556:	6f 90       	pop	r6
    4558:	5f 90       	pop	r5
    455a:	4f 90       	pop	r4
    455c:	08 95       	ret
    455e:	0f ef       	ldi	r16, 0xFF	; 255
    4560:	1f ef       	ldi	r17, 0xFF	; 255
    4562:	ed cf       	rjmp	.-38     	; 0x453e <SimpleTimer::setTimer(long, void (*)(), int)+0x8e>

00004564 <SimpleTimer::setInterval(long, void (*)())>:
_ZN11SimpleTimer11setIntervalElPFvvE():
    4564:	0f 93       	push	r16
    4566:	1f 93       	push	r17
    4568:	10 e0       	ldi	r17, 0x00	; 0
    456a:	00 e0       	ldi	r16, 0x00	; 0
    456c:	0e 94 58 22 	call	0x44b0	; 0x44b0 <SimpleTimer::setTimer(long, void (*)(), int)>
    4570:	1f 91       	pop	r17
    4572:	0f 91       	pop	r16
    4574:	08 95       	ret

00004576 <SimpleTimer::deleteTimer(int)>:
_ZN11SimpleTimer11deleteTimerEi():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:168


void SimpleTimer::deleteTimer(int timerId) {
    4576:	cf 93       	push	r28
    4578:	df 93       	push	r29
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:169
    if (timerId >= MAX_TIMERS) {
    457a:	6a 30       	cpi	r22, 0x0A	; 10
    457c:	71 05       	cpc	r23, r1
    457e:	a4 f5       	brge	.+104    	; 0x45e8 <SimpleTimer::deleteTimer(int)+0x72>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:174
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
    4580:	dc 01       	movw	r26, r24
    4582:	a6 55       	subi	r26, 0x56	; 86
    4584:	bf 4f       	sbci	r27, 0xFF	; 255
    4586:	2d 91       	ld	r18, X+
    4588:	3c 91       	ld	r19, X
    458a:	11 97       	sbiw	r26, 0x01	; 1
    458c:	21 15       	cp	r18, r1
    458e:	31 05       	cpc	r19, r1
    4590:	59 f1       	breq	.+86     	; 0x45e8 <SimpleTimer::deleteTimer(int)+0x72>
    4592:	fb 01       	movw	r30, r22
    4594:	ee 0f       	add	r30, r30
    4596:	ff 1f       	adc	r31, r31
    4598:	e8 0f       	add	r30, r24
    459a:	f9 1f       	adc	r31, r25
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:180
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (callbacks[timerId] != NULL) {
    459c:	40 a5       	ldd	r20, Z+40	; 0x28
    459e:	51 a5       	ldd	r21, Z+41	; 0x29
    45a0:	45 2b       	or	r20, r21
    45a2:	11 f1       	breq	.+68     	; 0x45e8 <SimpleTimer::deleteTimer(int)+0x72>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:181
        callbacks[timerId] = 0;
    45a4:	11 a6       	std	Z+41, r1	; 0x29
    45a6:	10 a6       	std	Z+40, r1	; 0x28
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:182
        enabled[timerId] = false;
    45a8:	ec 01       	movw	r28, r24
    45aa:	c6 0f       	add	r28, r22
    45ac:	d7 1f       	adc	r29, r23
    45ae:	c4 57       	subi	r28, 0x74	; 116
    45b0:	df 4f       	sbci	r29, 0xFF	; 255
    45b2:	18 82       	st	Y, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:183
        toBeCalled[timerId] = DEFCALL_DONTRUN;
    45b4:	ef 01       	movw	r28, r30
    45b6:	ca 56       	subi	r28, 0x6A	; 106
    45b8:	df 4f       	sbci	r29, 0xFF	; 255
    45ba:	19 82       	std	Y+1, r1	; 0x01
    45bc:	18 82       	st	Y, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:184
        delays[timerId] = 0;
    45be:	61 5f       	subi	r22, 0xF1	; 241
    45c0:	7f 4f       	sbci	r23, 0xFF	; 255
    45c2:	66 0f       	add	r22, r22
    45c4:	77 1f       	adc	r23, r23
    45c6:	66 0f       	add	r22, r22
    45c8:	77 1f       	adc	r23, r23
    45ca:	68 0f       	add	r22, r24
    45cc:	79 1f       	adc	r23, r25
    45ce:	eb 01       	movw	r28, r22
    45d0:	18 82       	st	Y, r1
    45d2:	19 82       	std	Y+1, r1	; 0x01
    45d4:	1a 82       	std	Y+2, r1	; 0x02
    45d6:	1b 82       	std	Y+3, r1	; 0x03
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:185
        numRuns[timerId] = 0;
    45d8:	e8 58       	subi	r30, 0x88	; 136
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	11 82       	std	Z+1, r1	; 0x01
    45de:	10 82       	st	Z, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:188

        // update number of timers
        numTimers--;
    45e0:	21 50       	subi	r18, 0x01	; 1
    45e2:	31 09       	sbc	r19, r1
    45e4:	2d 93       	st	X+, r18
    45e6:	3c 93       	st	X, r19
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:190
    }
}
    45e8:	df 91       	pop	r29
    45ea:	cf 91       	pop	r28
    45ec:	08 95       	ret

000045ee <SimpleTimer::run()>:
_ZN11SimpleTimer3runEv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:49

    numTimers = 0;
}


void SimpleTimer::run() {
    45ee:	2f 92       	push	r2
    45f0:	3f 92       	push	r3
    45f2:	4f 92       	push	r4
    45f4:	5f 92       	push	r5
    45f6:	6f 92       	push	r6
    45f8:	7f 92       	push	r7
    45fa:	8f 92       	push	r8
    45fc:	9f 92       	push	r9
    45fe:	af 92       	push	r10
    4600:	bf 92       	push	r11
    4602:	cf 92       	push	r12
    4604:	df 92       	push	r13
    4606:	ef 92       	push	r14
    4608:	ff 92       	push	r15
    460a:	0f 93       	push	r16
    460c:	1f 93       	push	r17
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	ec 01       	movw	r28, r24
elapsed():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:32
#include "SimpleTimer.h"


// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return millis(); }
    4614:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <millis>
    4618:	fe 01       	movw	r30, r28
    461a:	b8 96       	adiw	r30, 0x28	; 40
    461c:	4e 01       	movw	r8, r28
_ZN11SimpleTimer3runEv():
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:56
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    461e:	b1 2c       	mov	r11, r1
    4620:	a1 2c       	mov	r10, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:81
                    if (maxNumRuns[i] == RUN_FOREVER) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
    4622:	41 e0       	ldi	r20, 0x01	; 1
    4624:	50 e0       	ldi	r21, 0x00	; 0
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:86
                        numRuns[i]++;

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    4626:	22 e0       	ldi	r18, 0x02	; 2
    4628:	22 2e       	mov	r2, r18
    462a:	31 2c       	mov	r3, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:58
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        toBeCalled[i] = DEFCALL_DONTRUN;
    462c:	8f 01       	movw	r16, r30
    462e:	02 59       	subi	r16, 0x92	; 146
    4630:	1f 4f       	sbci	r17, 0xFF	; 255
    4632:	d8 01       	movw	r26, r16
    4634:	1d 92       	st	X+, r1
    4636:	1c 92       	st	X, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:61

        // no callback == no timer, i.e. jump over empty slots
        if (callbacks[i]) {
    4638:	20 81       	ld	r18, Z
    463a:	31 81       	ldd	r19, Z+1	; 0x01
    463c:	32 96       	adiw	r30, 0x02	; 2
    463e:	23 2b       	or	r18, r19
    4640:	a1 f1       	breq	.+104    	; 0x46aa <SimpleTimer::run()+0xbc>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:66

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if (current_millis - prev_millis[i] >= delays[i]) {
    4642:	d4 01       	movw	r26, r8
    4644:	0d 91       	ld	r16, X+
    4646:	1d 91       	ld	r17, X+
    4648:	2d 91       	ld	r18, X+
    464a:	3c 91       	ld	r19, X
    464c:	13 97       	sbiw	r26, 0x03	; 3
    464e:	dc 96       	adiw	r26, 0x3c	; 60
    4650:	cd 90       	ld	r12, X+
    4652:	dd 90       	ld	r13, X+
    4654:	ed 90       	ld	r14, X+
    4656:	fc 90       	ld	r15, X
    4658:	df 97       	sbiw	r26, 0x3f	; 63
    465a:	2b 01       	movw	r4, r22
    465c:	3c 01       	movw	r6, r24
    465e:	40 1a       	sub	r4, r16
    4660:	51 0a       	sbc	r5, r17
    4662:	62 0a       	sbc	r6, r18
    4664:	73 0a       	sbc	r7, r19
    4666:	4c 14       	cp	r4, r12
    4668:	5d 04       	cpc	r5, r13
    466a:	6e 04       	cpc	r6, r14
    466c:	7f 04       	cpc	r7, r15
    466e:	e8 f0       	brcs	.+58     	; 0x46aa <SimpleTimer::run()+0xbc>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:70

                // update time
                //prev_millis[i] = current_millis;
                prev_millis[i] += delays[i];
    4670:	0c 0d       	add	r16, r12
    4672:	1d 1d       	adc	r17, r13
    4674:	2e 1d       	adc	r18, r14
    4676:	3f 1d       	adc	r19, r15
    4678:	0d 93       	st	X+, r16
    467a:	1d 93       	st	X+, r17
    467c:	2d 93       	st	X+, r18
    467e:	3c 93       	st	X, r19
    4680:	13 97       	sbiw	r26, 0x03	; 3
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:73

                // check if the timer callback has to be executed
                if (enabled[i]) {
    4682:	95 01       	movw	r18, r10
    4684:	24 57       	subi	r18, 0x74	; 116
    4686:	3f 4f       	sbci	r19, 0xFF	; 255
    4688:	2c 0f       	add	r18, r28
    468a:	3d 1f       	adc	r19, r29
    468c:	d9 01       	movw	r26, r18
    468e:	2c 91       	ld	r18, X
    4690:	22 23       	and	r18, r18
    4692:	59 f0       	breq	.+22     	; 0x46aa <SimpleTimer::run()+0xbc>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:76

                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
    4694:	22 ad       	ldd	r18, Z+58	; 0x3a
    4696:	33 ad       	ldd	r19, Z+59	; 0x3b
    4698:	21 15       	cp	r18, r1
    469a:	31 05       	cpc	r19, r1
    469c:	c1 f5       	brne	.+112    	; 0x470e <SimpleTimer::run()+0x120>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:77
                        toBeCalled[i] = DEFCALL_RUNONLY;
    469e:	9f 01       	movw	r18, r30
    46a0:	24 59       	subi	r18, 0x94	; 148
    46a2:	3f 4f       	sbci	r19, 0xFF	; 255
    46a4:	d9 01       	movw	r26, r18
    46a6:	4d 93       	st	X+, r20
    46a8:	5c 93       	st	X, r21
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:56 (discriminator 2)
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
    46aa:	bf ef       	ldi	r27, 0xFF	; 255
    46ac:	ab 1a       	sub	r10, r27
    46ae:	bb 0a       	sbc	r11, r27
    46b0:	24 e0       	ldi	r18, 0x04	; 4
    46b2:	82 0e       	add	r8, r18
    46b4:	91 1c       	adc	r9, r1
    46b6:	aa e0       	ldi	r26, 0x0A	; 10
    46b8:	aa 16       	cp	r10, r26
    46ba:	b1 04       	cpc	r11, r1
    46bc:	09 f0       	breq	.+2      	; 0x46c0 <SimpleTimer::run()+0xd2>
    46be:	b6 cf       	rjmp	.-148    	; 0x462c <SimpleTimer::run()+0x3e>
    46c0:	7e 01       	movw	r14, r28
    46c2:	b6 e9       	ldi	r27, 0x96	; 150
    46c4:	eb 0e       	add	r14, r27
    46c6:	f1 1c       	adc	r15, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:94
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    46c8:	10 e0       	ldi	r17, 0x00	; 0
    46ca:	00 e0       	ldi	r16, 0x00	; 0
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:95
        switch(toBeCalled[i]) {
    46cc:	f7 01       	movw	r30, r14
    46ce:	81 91       	ld	r24, Z+
    46d0:	91 91       	ld	r25, Z+
    46d2:	7f 01       	movw	r14, r30
    46d4:	81 30       	cpi	r24, 0x01	; 1
    46d6:	91 05       	cpc	r25, r1
    46d8:	c1 f1       	breq	.+112    	; 0x474a <SimpleTimer::run()+0x15c>
    46da:	02 97       	sbiw	r24, 0x02	; 2
    46dc:	e9 f1       	breq	.+122    	; 0x4758 <SimpleTimer::run()+0x16a>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:94 (discriminator 2)
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
    46de:	0f 5f       	subi	r16, 0xFF	; 255
    46e0:	1f 4f       	sbci	r17, 0xFF	; 255
    46e2:	0a 30       	cpi	r16, 0x0A	; 10
    46e4:	11 05       	cpc	r17, r1
    46e6:	91 f7       	brne	.-28     	; 0x46cc <SimpleTimer::run()+0xde>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:109
                (*callbacks[i])();
                deleteTimer(i);
                break;
        }
    }
}
    46e8:	df 91       	pop	r29
    46ea:	cf 91       	pop	r28
    46ec:	1f 91       	pop	r17
    46ee:	0f 91       	pop	r16
    46f0:	ff 90       	pop	r15
    46f2:	ef 90       	pop	r14
    46f4:	df 90       	pop	r13
    46f6:	cf 90       	pop	r12
    46f8:	bf 90       	pop	r11
    46fa:	af 90       	pop	r10
    46fc:	9f 90       	pop	r9
    46fe:	8f 90       	pop	r8
    4700:	7f 90       	pop	r7
    4702:	6f 90       	pop	r6
    4704:	5f 90       	pop	r5
    4706:	4f 90       	pop	r4
    4708:	3f 90       	pop	r3
    470a:	2f 90       	pop	r2
    470c:	08 95       	ret
    470e:	6f 01       	movw	r12, r30
    4710:	be e4       	ldi	r27, 0x4E	; 78
    4712:	cb 0e       	add	r12, r27
    4714:	d1 1c       	adc	r13, r1
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:80
                    // "run forever" timers must always be executed
                    if (maxNumRuns[i] == RUN_FOREVER) {
                        toBeCalled[i] = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (numRuns[i] < maxNumRuns[i]) {
    4716:	d6 01       	movw	r26, r12
    4718:	ed 90       	ld	r14, X+
    471a:	fc 90       	ld	r15, X
    471c:	e2 16       	cp	r14, r18
    471e:	f3 06       	cpc	r15, r19
    4720:	24 f6       	brge	.-120    	; 0x46aa <SimpleTimer::run()+0xbc>
    4722:	8f 01       	movw	r16, r30
    4724:	04 59       	subi	r16, 0x94	; 148
    4726:	1f 4f       	sbci	r17, 0xFF	; 255
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:81
                        toBeCalled[i] = DEFCALL_RUNONLY;
    4728:	d8 01       	movw	r26, r16
    472a:	4d 93       	st	X+, r20
    472c:	5c 93       	st	X, r21
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:82
                        numRuns[i]++;
    472e:	bf ef       	ldi	r27, 0xFF	; 255
    4730:	eb 1a       	sub	r14, r27
    4732:	fb 0a       	sbc	r15, r27
    4734:	d6 01       	movw	r26, r12
    4736:	ed 92       	st	X+, r14
    4738:	fc 92       	st	X, r15
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:85

                        // after the last run, delete the timer
                        if (numRuns[i] >= maxNumRuns[i]) {
    473a:	e2 16       	cp	r14, r18
    473c:	f3 06       	cpc	r15, r19
    473e:	0c f4       	brge	.+2      	; 0x4742 <SimpleTimer::run()+0x154>
    4740:	b4 cf       	rjmp	.-152    	; 0x46aa <SimpleTimer::run()+0xbc>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:86
                            toBeCalled[i] = DEFCALL_RUNANDDEL;
    4742:	d8 01       	movw	r26, r16
    4744:	2d 92       	st	X+, r2
    4746:	3c 92       	st	X, r3
    4748:	b0 cf       	rjmp	.-160    	; 0x46aa <SimpleTimer::run()+0xbc>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:100
        switch(toBeCalled[i]) {
            case DEFCALL_DONTRUN:
                break;

            case DEFCALL_RUNONLY:
                (*callbacks[i])();
    474a:	e0 57       	subi	r30, 0x70	; 112
    474c:	f1 09       	sbc	r31, r1
    474e:	01 90       	ld	r0, Z+
    4750:	f0 81       	ld	r31, Z
    4752:	e0 2d       	mov	r30, r0
    4754:	09 95       	icall
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:101
                break;
    4756:	c3 cf       	rjmp	.-122    	; 0x46de <SimpleTimer::run()+0xf0>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:104

            case DEFCALL_RUNANDDEL:
                (*callbacks[i])();
    4758:	e0 57       	subi	r30, 0x70	; 112
    475a:	f1 09       	sbc	r31, r1
    475c:	01 90       	ld	r0, Z+
    475e:	f0 81       	ld	r31, Z
    4760:	e0 2d       	mov	r30, r0
    4762:	09 95       	icall
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:105
                deleteTimer(i);
    4764:	b8 01       	movw	r22, r16
    4766:	ce 01       	movw	r24, r28
    4768:	0e 94 bb 22 	call	0x4576	; 0x4576 <SimpleTimer::deleteTimer(int)>
D:\Inkubator\fastWrite\Incubator_V2-main\Incubator_V2-main\Inkubator_medium\fastWrite\src\library\SimpleTimer/SimpleTimer.cpp:106
                break;
    476c:	b8 cf       	rjmp	.-144    	; 0x46de <SimpleTimer::run()+0xf0>

0000476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>:
_ZN10LedControl11spiTransferEihh():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:139
    if(row<0 || row>7)
        return;
    offset=addr*8;
    status[offset+row]=value;
    spiTransfer(addr, row+1,status[offset+row]);
}
    476e:	8f 92       	push	r8
    4770:	9f 92       	push	r9
    4772:	af 92       	push	r10
    4774:	bf 92       	push	r11
    4776:	cf 92       	push	r12
    4778:	df 92       	push	r13
    477a:	ef 92       	push	r14
    477c:	ff 92       	push	r15
    477e:	0f 93       	push	r16
    4780:	1f 93       	push	r17
    4782:	cf 93       	push	r28
    4784:	df 93       	push	r29
    4786:	00 d0       	rcall	.+0      	; 0x4788 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x1a>
    4788:	cd b7       	in	r28, 0x3d	; 61
    478a:	de b7       	in	r29, 0x3e	; 62
    478c:	8c 01       	movw	r16, r24
    478e:	49 83       	std	Y+1, r20	; 0x01
    4790:	2a 83       	std	Y+2, r18	; 0x02
    4792:	66 0f       	add	r22, r22
    4794:	77 1f       	adc	r23, r23
    4796:	f8 01       	movw	r30, r16
    4798:	ea 5a       	subi	r30, 0xAA	; 170
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	e0 80       	ld	r14, Z
    479e:	f1 80       	ldd	r15, Z+1	; 0x01
    47a0:	ee 0c       	add	r14, r14
    47a2:	ff 1c       	adc	r15, r15
    47a4:	f8 01       	movw	r30, r16
    47a6:	cf 01       	movw	r24, r30
    47a8:	80 1b       	sub	r24, r16
    47aa:	91 0b       	sbc	r25, r17
    47ac:	8e 15       	cp	r24, r14
    47ae:	9f 05       	cpc	r25, r15
    47b0:	14 f4       	brge	.+4      	; 0x47b6 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x48>
    47b2:	11 92       	st	Z+, r1
    47b4:	f8 cf       	rjmp	.-16     	; 0x47a6 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x38>
    47b6:	89 81       	ldd	r24, Y+1	; 0x01
    47b8:	f8 01       	movw	r30, r16
    47ba:	e6 0f       	add	r30, r22
    47bc:	f7 1f       	adc	r31, r23
    47be:	81 83       	std	Z+1, r24	; 0x01
    47c0:	8a 81       	ldd	r24, Y+2	; 0x02
    47c2:	80 83       	st	Z, r24
    47c4:	68 01       	movw	r12, r16
    47c6:	84 e5       	ldi	r24, 0x54	; 84
    47c8:	c8 0e       	add	r12, r24
    47ca:	d1 1c       	adc	r13, r1
    47cc:	60 e0       	ldi	r22, 0x00	; 0
    47ce:	f6 01       	movw	r30, r12
    47d0:	80 81       	ld	r24, Z
    47d2:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    47d6:	48 01       	movw	r8, r16
    47d8:	f2 e5       	ldi	r31, 0x52	; 82
    47da:	8f 0e       	add	r8, r31
    47dc:	91 1c       	adc	r9, r1
    47de:	58 01       	movw	r10, r16
    47e0:	80 e5       	ldi	r24, 0x50	; 80
    47e2:	a8 0e       	add	r10, r24
    47e4:	b1 1c       	adc	r11, r1
    47e6:	1e 14       	cp	r1, r14
    47e8:	1f 04       	cpc	r1, r15
    47ea:	7c f4       	brge	.+30     	; 0x480a <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x9c>
    47ec:	e1 e0       	ldi	r30, 0x01	; 1
    47ee:	ee 1a       	sub	r14, r30
    47f0:	f1 08       	sbc	r15, r1
    47f2:	f8 01       	movw	r30, r16
    47f4:	ee 0d       	add	r30, r14
    47f6:	ff 1d       	adc	r31, r15
    47f8:	20 81       	ld	r18, Z
    47fa:	41 e0       	ldi	r20, 0x01	; 1
    47fc:	f4 01       	movw	r30, r8
    47fe:	60 81       	ld	r22, Z
    4800:	f5 01       	movw	r30, r10
    4802:	80 81       	ld	r24, Z
    4804:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <shiftOut>
    4808:	ee cf       	rjmp	.-36     	; 0x47e6 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x78>
    480a:	61 e0       	ldi	r22, 0x01	; 1
    480c:	f6 01       	movw	r30, r12
    480e:	80 81       	ld	r24, Z
    4810:	0f 90       	pop	r0
    4812:	0f 90       	pop	r0
    4814:	df 91       	pop	r29
    4816:	cf 91       	pop	r28
    4818:	1f 91       	pop	r17
    481a:	0f 91       	pop	r16
    481c:	ff 90       	pop	r15
    481e:	ef 90       	pop	r14
    4820:	df 90       	pop	r13
    4822:	cf 90       	pop	r12
    4824:	bf 90       	pop	r11
    4826:	af 90       	pop	r10
    4828:	9f 90       	pop	r9
    482a:	8f 90       	pop	r8
    482c:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <digitalWrite>

00004830 <LedControl::shutdown(int, bool)>:
_ZN10LedControl8shutdownEib():
    4830:	77 fd       	sbrc	r23, 7
    4832:	0f c0       	rjmp	.+30     	; 0x4852 <LedControl::shutdown(int, bool)+0x22>
    4834:	fc 01       	movw	r30, r24
    4836:	ea 5a       	subi	r30, 0xAA	; 170
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	20 81       	ld	r18, Z
    483c:	31 81       	ldd	r19, Z+1	; 0x01
    483e:	62 17       	cp	r22, r18
    4840:	73 07       	cpc	r23, r19
    4842:	3c f4       	brge	.+14     	; 0x4852 <LedControl::shutdown(int, bool)+0x22>
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	41 11       	cpse	r20, r1
    4848:	01 c0       	rjmp	.+2      	; 0x484c <LedControl::shutdown(int, bool)+0x1c>
    484a:	21 e0       	ldi	r18, 0x01	; 1
    484c:	4c e0       	ldi	r20, 0x0C	; 12
    484e:	0c 94 b7 23 	jmp	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    4852:	08 95       	ret

00004854 <LedControl::setScanLimit(int, int)>:
_ZN10LedControl12setScanLimitEii():
    4854:	77 fd       	sbrc	r23, 7
    4856:	0f c0       	rjmp	.+30     	; 0x4876 <LedControl::setScanLimit(int, int)+0x22>
    4858:	fc 01       	movw	r30, r24
    485a:	ea 5a       	subi	r30, 0xAA	; 170
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	20 81       	ld	r18, Z
    4860:	31 81       	ldd	r19, Z+1	; 0x01
    4862:	62 17       	cp	r22, r18
    4864:	73 07       	cpc	r23, r19
    4866:	3c f4       	brge	.+14     	; 0x4876 <LedControl::setScanLimit(int, int)+0x22>
    4868:	48 30       	cpi	r20, 0x08	; 8
    486a:	51 05       	cpc	r21, r1
    486c:	20 f4       	brcc	.+8      	; 0x4876 <LedControl::setScanLimit(int, int)+0x22>
    486e:	24 2f       	mov	r18, r20
    4870:	4b e0       	ldi	r20, 0x0B	; 11
    4872:	0c 94 b7 23 	jmp	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    4876:	08 95       	ret

00004878 <LedControl::setIntensity(int, int)>:
_ZN10LedControl12setIntensityEii():
    4878:	77 fd       	sbrc	r23, 7
    487a:	0f c0       	rjmp	.+30     	; 0x489a <LedControl::setIntensity(int, int)+0x22>
    487c:	fc 01       	movw	r30, r24
    487e:	ea 5a       	subi	r30, 0xAA	; 170
    4880:	ff 4f       	sbci	r31, 0xFF	; 255
    4882:	20 81       	ld	r18, Z
    4884:	31 81       	ldd	r19, Z+1	; 0x01
    4886:	62 17       	cp	r22, r18
    4888:	73 07       	cpc	r23, r19
    488a:	3c f4       	brge	.+14     	; 0x489a <LedControl::setIntensity(int, int)+0x22>
    488c:	40 31       	cpi	r20, 0x10	; 16
    488e:	51 05       	cpc	r21, r1
    4890:	20 f4       	brcc	.+8      	; 0x489a <LedControl::setIntensity(int, int)+0x22>
    4892:	24 2f       	mov	r18, r20
    4894:	4a e0       	ldi	r20, 0x0A	; 10
    4896:	0c 94 b7 23 	jmp	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    489a:	08 95       	ret

0000489c <LedControl::clearDisplay(int)>:
_ZN10LedControl12clearDisplayEi():
    489c:	df 92       	push	r13
    489e:	ef 92       	push	r14
    48a0:	ff 92       	push	r15
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	77 fd       	sbrc	r23, 7
    48ac:	23 c0       	rjmp	.+70     	; 0x48f4 <LedControl::clearDisplay(int)+0x58>
    48ae:	fc 01       	movw	r30, r24
    48b0:	ea 5a       	subi	r30, 0xAA	; 170
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	20 81       	ld	r18, Z
    48b6:	31 81       	ldd	r19, Z+1	; 0x01
    48b8:	62 17       	cp	r22, r18
    48ba:	73 07       	cpc	r23, r19
    48bc:	dc f4       	brge	.+54     	; 0x48f4 <LedControl::clearDisplay(int)+0x58>
    48be:	eb 01       	movw	r28, r22
    48c0:	7c 01       	movw	r14, r24
    48c2:	8b 01       	movw	r16, r22
    48c4:	83 e0       	ldi	r24, 0x03	; 3
    48c6:	00 0f       	add	r16, r16
    48c8:	11 1f       	adc	r17, r17
    48ca:	8a 95       	dec	r24
    48cc:	e1 f7       	brne	.-8      	; 0x48c6 <LedControl::clearDisplay(int)+0x2a>
    48ce:	00 5f       	subi	r16, 0xF0	; 240
    48d0:	1f 4f       	sbci	r17, 0xFF	; 255
    48d2:	0e 0d       	add	r16, r14
    48d4:	1f 1d       	adc	r17, r15
    48d6:	dd 24       	eor	r13, r13
    48d8:	d3 94       	inc	r13
    48da:	f8 01       	movw	r30, r16
    48dc:	11 92       	st	Z+, r1
    48de:	8f 01       	movw	r16, r30
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	4d 2d       	mov	r20, r13
    48e4:	be 01       	movw	r22, r28
    48e6:	c7 01       	movw	r24, r14
    48e8:	0e 94 b7 23 	call	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    48ec:	d3 94       	inc	r13
    48ee:	f9 e0       	ldi	r31, 0x09	; 9
    48f0:	df 12       	cpse	r13, r31
    48f2:	f3 cf       	rjmp	.-26     	; 0x48da <LedControl::clearDisplay(int)+0x3e>
    48f4:	df 91       	pop	r29
    48f6:	cf 91       	pop	r28
    48f8:	1f 91       	pop	r17
    48fa:	0f 91       	pop	r16
    48fc:	ff 90       	pop	r15
    48fe:	ef 90       	pop	r14
    4900:	df 90       	pop	r13
    4902:	08 95       	ret

00004904 <LedControl::LedControl(int, int, int, int)>:
_ZN10LedControlC2Eiiii():
    4904:	6f 92       	push	r6
    4906:	7f 92       	push	r7
    4908:	8f 92       	push	r8
    490a:	9f 92       	push	r9
    490c:	af 92       	push	r10
    490e:	bf 92       	push	r11
    4910:	cf 92       	push	r12
    4912:	df 92       	push	r13
    4914:	ef 92       	push	r14
    4916:	ff 92       	push	r15
    4918:	0f 93       	push	r16
    491a:	1f 93       	push	r17
    491c:	cf 93       	push	r28
    491e:	df 93       	push	r29
    4920:	ec 01       	movw	r28, r24
    4922:	d6 2e       	mov	r13, r22
    4924:	c7 2e       	mov	r12, r23
    4926:	7c 01       	movw	r14, r24
    4928:	80 e5       	ldi	r24, 0x50	; 80
    492a:	e8 0e       	add	r14, r24
    492c:	f1 1c       	adc	r15, r1
    492e:	f7 01       	movw	r30, r14
    4930:	60 83       	st	Z, r22
    4932:	71 83       	std	Z+1, r23	; 0x01
    4934:	3e 01       	movw	r6, r28
    4936:	f2 e5       	ldi	r31, 0x52	; 82
    4938:	6f 0e       	add	r6, r31
    493a:	71 1c       	adc	r7, r1
    493c:	f3 01       	movw	r30, r6
    493e:	51 83       	std	Z+1, r21	; 0x01
    4940:	40 83       	st	Z, r20
    4942:	4e 01       	movw	r8, r28
    4944:	f4 e5       	ldi	r31, 0x54	; 84
    4946:	8f 0e       	add	r8, r31
    4948:	91 1c       	adc	r9, r1
    494a:	f4 01       	movw	r30, r8
    494c:	31 83       	std	Z+1, r19	; 0x01
    494e:	20 83       	st	Z, r18
    4950:	c8 01       	movw	r24, r16
    4952:	01 97       	sbiw	r24, 0x01	; 1
    4954:	08 97       	sbiw	r24, 0x08	; 8
    4956:	10 f0       	brcs	.+4      	; 0x495c <LedControl::LedControl(int, int, int, int)+0x58>
    4958:	08 e0       	ldi	r16, 0x08	; 8
    495a:	10 e0       	ldi	r17, 0x00	; 0
    495c:	5e 01       	movw	r10, r28
    495e:	f6 e5       	ldi	r31, 0x56	; 86
    4960:	af 0e       	add	r10, r31
    4962:	b1 1c       	adc	r11, r1
    4964:	f5 01       	movw	r30, r10
    4966:	11 83       	std	Z+1, r17	; 0x01
    4968:	00 83       	st	Z, r16
    496a:	61 e0       	ldi	r22, 0x01	; 1
    496c:	8d 2d       	mov	r24, r13
    496e:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
    4972:	61 e0       	ldi	r22, 0x01	; 1
    4974:	f3 01       	movw	r30, r6
    4976:	80 81       	ld	r24, Z
    4978:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
    497c:	61 e0       	ldi	r22, 0x01	; 1
    497e:	f4 01       	movw	r30, r8
    4980:	80 81       	ld	r24, Z
    4982:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
    4986:	61 e0       	ldi	r22, 0x01	; 1
    4988:	f4 01       	movw	r30, r8
    498a:	80 81       	ld	r24, Z
    498c:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    4990:	f7 01       	movw	r30, r14
    4992:	d0 82       	st	Z, r13
    4994:	c1 82       	std	Z+1, r12	; 0x01
    4996:	fe 01       	movw	r30, r28
    4998:	70 96       	adiw	r30, 0x10	; 16
    499a:	11 92       	st	Z+, r1
    499c:	ee 15       	cp	r30, r14
    499e:	ff 05       	cpc	r31, r15
    49a0:	e1 f7       	brne	.-8      	; 0x499a <LedControl::LedControl(int, int, int, int)+0x96>
    49a2:	10 e0       	ldi	r17, 0x00	; 0
    49a4:	00 e0       	ldi	r16, 0x00	; 0
    49a6:	f5 01       	movw	r30, r10
    49a8:	80 81       	ld	r24, Z
    49aa:	91 81       	ldd	r25, Z+1	; 0x01
    49ac:	08 17       	cp	r16, r24
    49ae:	19 07       	cpc	r17, r25
    49b0:	f4 f4       	brge	.+60     	; 0x49ee <LedControl::LedControl(int, int, int, int)+0xea>
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	4f e0       	ldi	r20, 0x0F	; 15
    49b6:	b8 01       	movw	r22, r16
    49b8:	ce 01       	movw	r24, r28
    49ba:	0e 94 b7 23 	call	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    49be:	47 e0       	ldi	r20, 0x07	; 7
    49c0:	50 e0       	ldi	r21, 0x00	; 0
    49c2:	b8 01       	movw	r22, r16
    49c4:	ce 01       	movw	r24, r28
    49c6:	0e 94 2a 24 	call	0x4854	; 0x4854 <LedControl::setScanLimit(int, int)>
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	49 e0       	ldi	r20, 0x09	; 9
    49ce:	b8 01       	movw	r22, r16
    49d0:	ce 01       	movw	r24, r28
    49d2:	0e 94 b7 23 	call	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    49d6:	b8 01       	movw	r22, r16
    49d8:	ce 01       	movw	r24, r28
    49da:	0e 94 4e 24 	call	0x489c	; 0x489c <LedControl::clearDisplay(int)>
    49de:	41 e0       	ldi	r20, 0x01	; 1
    49e0:	b8 01       	movw	r22, r16
    49e2:	ce 01       	movw	r24, r28
    49e4:	0e 94 18 24 	call	0x4830	; 0x4830 <LedControl::shutdown(int, bool)>
    49e8:	0f 5f       	subi	r16, 0xFF	; 255
    49ea:	1f 4f       	sbci	r17, 0xFF	; 255
    49ec:	dc cf       	rjmp	.-72     	; 0x49a6 <LedControl::LedControl(int, int, int, int)+0xa2>
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	1f 91       	pop	r17
    49f4:	0f 91       	pop	r16
    49f6:	ff 90       	pop	r15
    49f8:	ef 90       	pop	r14
    49fa:	df 90       	pop	r13
    49fc:	cf 90       	pop	r12
    49fe:	bf 90       	pop	r11
    4a00:	af 90       	pop	r10
    4a02:	9f 90       	pop	r9
    4a04:	8f 90       	pop	r8
    4a06:	7f 90       	pop	r7
    4a08:	6f 90       	pop	r6
    4a0a:	08 95       	ret

00004a0c <LedControl::setDigit(int, int, unsigned char, bool)>:
_ZN10LedControl8setDigitEiihb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:155
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
    4a0c:	0f 93       	push	r16
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:159
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
    4a0e:	77 fd       	sbrc	r23, 7
    4a10:	25 c0       	rjmp	.+74     	; 0x4a5c <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:159 (discriminator 1)
    4a12:	fc 01       	movw	r30, r24
    4a14:	ea 5a       	subi	r30, 0xAA	; 170
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	01 90       	ld	r0, Z+
    4a1a:	f0 81       	ld	r31, Z
    4a1c:	e0 2d       	mov	r30, r0
    4a1e:	6e 17       	cp	r22, r30
    4a20:	7f 07       	cpc	r23, r31
    4a22:	e4 f4       	brge	.+56     	; 0x4a5c <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:161
        return;
    if(digit<0 || digit>7 || value>15)
    4a24:	48 30       	cpi	r20, 0x08	; 8
    4a26:	51 05       	cpc	r21, r1
    4a28:	c8 f4       	brcc	.+50     	; 0x4a5c <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:161 (discriminator 1)
    4a2a:	20 31       	cpi	r18, 0x10	; 16
    4a2c:	b8 f4       	brcc	.+46     	; 0x4a5c <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:163
        return;
    offset=addr*8;
    4a2e:	db 01       	movw	r26, r22
    4a30:	33 e0       	ldi	r19, 0x03	; 3
    4a32:	aa 0f       	add	r26, r26
    4a34:	bb 1f       	adc	r27, r27
    4a36:	3a 95       	dec	r19
    4a38:	e1 f7       	brne	.-8      	; 0x4a32 <LedControl::setDigit(int, int, unsigned char, bool)+0x26>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:164
    v=pgm_read_byte_near(charTable + value); 
    4a3a:	e2 2f       	mov	r30, r18
    4a3c:	f0 e0       	ldi	r31, 0x00	; 0
    4a3e:	ec 52       	subi	r30, 0x2C	; 44
    4a40:	ff 4f       	sbci	r31, 0xFF	; 255
    4a42:	24 91       	lpm	r18, Z
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:165
    if(dp)
    4a44:	01 11       	cpse	r16, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:166
        v|=B10000000;
    4a46:	20 68       	ori	r18, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:167
    status[offset+digit]=v;
    4a48:	a8 0f       	add	r26, r24
    4a4a:	b9 1f       	adc	r27, r25
    4a4c:	a4 0f       	add	r26, r20
    4a4e:	b5 1f       	adc	r27, r21
    4a50:	50 96       	adiw	r26, 0x10	; 16
    4a52:	2c 93       	st	X, r18
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:168
    spiTransfer(addr, digit+1,v);
    4a54:	4f 5f       	subi	r20, 0xFF	; 255
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:169
}
    4a56:	0f 91       	pop	r16
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:168
    offset=addr*8;
    v=pgm_read_byte_near(charTable + value); 
    if(dp)
        v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
    4a58:	0c 94 b7 23 	jmp	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:169
}
    4a5c:	0f 91       	pop	r16
    4a5e:	08 95       	ret

00004a60 <LedControl::setChar(int, int, char, bool)>:
_ZN10LedControl7setCharEiicb():
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:171

void LedControl::setChar(int addr, int digit, char value, boolean dp) {
    4a60:	0f 93       	push	r16
    4a62:	e2 2f       	mov	r30, r18
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:175
    int offset;
    byte index,v;

    if(addr<0 || addr>=maxDevices)
    4a64:	77 fd       	sbrc	r23, 7
    4a66:	25 c0       	rjmp	.+74     	; 0x4ab2 <LedControl::setChar(int, int, char, bool)+0x52>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:175 (discriminator 1)
    4a68:	dc 01       	movw	r26, r24
    4a6a:	aa 5a       	subi	r26, 0xAA	; 170
    4a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a6e:	2d 91       	ld	r18, X+
    4a70:	3c 91       	ld	r19, X
    4a72:	62 17       	cp	r22, r18
    4a74:	73 07       	cpc	r23, r19
    4a76:	ec f4       	brge	.+58     	; 0x4ab2 <LedControl::setChar(int, int, char, bool)+0x52>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:177
        return;
    if(digit<0 || digit>7)
    4a78:	48 30       	cpi	r20, 0x08	; 8
    4a7a:	51 05       	cpc	r21, r1
    4a7c:	d0 f4       	brcc	.+52     	; 0x4ab2 <LedControl::setChar(int, int, char, bool)+0x52>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:179
        return;
    offset=addr*8;
    4a7e:	db 01       	movw	r26, r22
    4a80:	23 e0       	ldi	r18, 0x03	; 3
    4a82:	aa 0f       	add	r26, r26
    4a84:	bb 1f       	adc	r27, r27
    4a86:	2a 95       	dec	r18
    4a88:	e1 f7       	brne	.-8      	; 0x4a82 <LedControl::setChar(int, int, char, bool)+0x22>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:181
    index=(byte)value;
    if(index >127) {
    4a8a:	e7 fd       	sbrc	r30, 7
    4a8c:	e0 e2       	ldi	r30, 0x20	; 32
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:185
        //no defined beyond index 127, so we use the space char
        index=32;
    }
    v=pgm_read_byte_near(charTable + index); 
    4a8e:	0e 2e       	mov	r0, r30
    4a90:	00 0c       	add	r0, r0
    4a92:	ff 0b       	sbc	r31, r31
    4a94:	ec 52       	subi	r30, 0x2C	; 44
    4a96:	ff 4f       	sbci	r31, 0xFF	; 255
    4a98:	24 91       	lpm	r18, Z
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:186
    if(dp)
    4a9a:	01 11       	cpse	r16, r1
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:187
        v|=B10000000;
    4a9c:	20 68       	ori	r18, 0x80	; 128
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:188
    status[offset+digit]=v;
    4a9e:	a8 0f       	add	r26, r24
    4aa0:	b9 1f       	adc	r27, r25
    4aa2:	a4 0f       	add	r26, r20
    4aa4:	b5 1f       	adc	r27, r21
    4aa6:	50 96       	adiw	r26, 0x10	; 16
    4aa8:	2c 93       	st	X, r18
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:189
    spiTransfer(addr, digit+1,v);
    4aaa:	4f 5f       	subi	r20, 0xFF	; 255
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:190
}
    4aac:	0f 91       	pop	r16
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:189
    }
    v=pgm_read_byte_near(charTable + index); 
    if(dp)
        v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
    4aae:	0c 94 b7 23 	jmp	0x476e	; 0x476e <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\Xirka (Throwaway)\Documents\Arduino\libraries\LedControl-master\src/LedControl.cpp:190
}
    4ab2:	0f 91       	pop	r16
    4ab4:	08 95       	ret

00004ab6 <__vector_16>:
__vector_16():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    4ab6:	1f 92       	push	r1
    4ab8:	0f 92       	push	r0
    4aba:	0f b6       	in	r0, 0x3f	; 63
    4abc:	0f 92       	push	r0
    4abe:	11 24       	eor	r1, r1
    4ac0:	2f 93       	push	r18
    4ac2:	3f 93       	push	r19
    4ac4:	8f 93       	push	r24
    4ac6:	9f 93       	push	r25
    4ac8:	af 93       	push	r26
    4aca:	bf 93       	push	r27
    4acc:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <timer0_millis>
    4ad0:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <timer0_millis+0x1>
    4ad4:	a0 91 79 06 	lds	r26, 0x0679	; 0x800679 <timer0_millis+0x2>
    4ad8:	b0 91 7a 06 	lds	r27, 0x067A	; 0x80067a <timer0_millis+0x3>
    4adc:	30 91 76 06 	lds	r19, 0x0676	; 0x800676 <timer0_fract>
    4ae0:	23 e0       	ldi	r18, 0x03	; 3
    4ae2:	23 0f       	add	r18, r19
    4ae4:	2d 37       	cpi	r18, 0x7D	; 125
    4ae6:	68 f1       	brcs	.+90     	; 0x4b42 <__vector_16+0x8c>
    4ae8:	26 e8       	ldi	r18, 0x86	; 134
    4aea:	23 0f       	add	r18, r19
    4aec:	02 96       	adiw	r24, 0x02	; 2
    4aee:	a1 1d       	adc	r26, r1
    4af0:	b1 1d       	adc	r27, r1
    4af2:	20 93 76 06 	sts	0x0676, r18	; 0x800676 <timer0_fract>
    4af6:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <timer0_millis>
    4afa:	90 93 78 06 	sts	0x0678, r25	; 0x800678 <timer0_millis+0x1>
    4afe:	a0 93 79 06 	sts	0x0679, r26	; 0x800679 <timer0_millis+0x2>
    4b02:	b0 93 7a 06 	sts	0x067A, r27	; 0x80067a <timer0_millis+0x3>
    4b06:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <timer0_overflow_count>
    4b0a:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <timer0_overflow_count+0x1>
    4b0e:	a0 91 74 06 	lds	r26, 0x0674	; 0x800674 <timer0_overflow_count+0x2>
    4b12:	b0 91 75 06 	lds	r27, 0x0675	; 0x800675 <timer0_overflow_count+0x3>
    4b16:	01 96       	adiw	r24, 0x01	; 1
    4b18:	a1 1d       	adc	r26, r1
    4b1a:	b1 1d       	adc	r27, r1
    4b1c:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <timer0_overflow_count>
    4b20:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <timer0_overflow_count+0x1>
    4b24:	a0 93 74 06 	sts	0x0674, r26	; 0x800674 <timer0_overflow_count+0x2>
    4b28:	b0 93 75 06 	sts	0x0675, r27	; 0x800675 <timer0_overflow_count+0x3>
    4b2c:	bf 91       	pop	r27
    4b2e:	af 91       	pop	r26
    4b30:	9f 91       	pop	r25
    4b32:	8f 91       	pop	r24
    4b34:	3f 91       	pop	r19
    4b36:	2f 91       	pop	r18
    4b38:	0f 90       	pop	r0
    4b3a:	0f be       	out	0x3f, r0	; 63
    4b3c:	0f 90       	pop	r0
    4b3e:	1f 90       	pop	r1
    4b40:	18 95       	reti
    4b42:	01 96       	adiw	r24, 0x01	; 1
    4b44:	a1 1d       	adc	r26, r1
    4b46:	b1 1d       	adc	r27, r1
    4b48:	d4 cf       	rjmp	.-88     	; 0x4af2 <__vector_16+0x3c>

00004b4a <millis>:
millis():
    4b4a:	2f b7       	in	r18, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	60 91 77 06 	lds	r22, 0x0677	; 0x800677 <timer0_millis>
    4b52:	70 91 78 06 	lds	r23, 0x0678	; 0x800678 <timer0_millis+0x1>
    4b56:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <timer0_millis+0x2>
    4b5a:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <timer0_millis+0x3>
    4b5e:	2f bf       	out	0x3f, r18	; 63
    4b60:	08 95       	ret

00004b62 <init>:
init():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    4b62:	78 94       	sei
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:963
#endif

  // Set timer 0 prescale factor to 64
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
    4b64:	83 b7       	in	r24, 0x33	; 51
    4b66:	8c 64       	ori	r24, 0x4C	; 76
    4b68:	83 bf       	out	0x33, r24	; 51
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    4b6a:	87 b7       	in	r24, 0x37	; 55
    4b6c:	81 60       	ori	r24, 0x01	; 1
    4b6e:	87 bf       	out	0x37, r24	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    4b70:	82 e0       	ldi	r24, 0x02	; 2
    4b72:	8e bd       	out	0x2e, r24	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    4b74:	8e b5       	in	r24, 0x2e	; 46
    4b76:	81 60       	ori	r24, 0x01	; 1
    4b78:	8e bd       	out	0x2e, r24	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    4b7a:	8f b5       	in	r24, 0x2f	; 47
    4b7c:	81 60       	ori	r24, 0x01	; 1
    4b7e:	8f bd       	out	0x2f, r24	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    4b80:	85 b5       	in	r24, 0x25	; 37
    4b82:	84 60       	ori	r24, 0x04	; 4
    4b84:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    4b86:	85 b5       	in	r24, 0x25	; 37
    4b88:	80 64       	ori	r24, 0x40	; 64
    4b8a:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    4b8c:	ea e8       	ldi	r30, 0x8A	; 138
    4b8e:	f0 e0       	ldi	r31, 0x00	; 0
    4b90:	80 81       	ld	r24, Z
    4b92:	83 60       	ori	r24, 0x03	; 3
    4b94:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    4b96:	eb e8       	ldi	r30, 0x8B	; 139
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	80 81       	ld	r24, Z
    4b9c:	81 60       	ori	r24, 0x01	; 1
    4b9e:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    4ba0:	87 e8       	ldi	r24, 0x87	; 135
    4ba2:	86 b9       	out	0x06, r24	; 6
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    4ba4:	1a b8       	out	0x0a, r1	; 10
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    4ba6:	08 95       	ret

00004ba8 <analogReference>:
analogReference():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:41
void analogReference(uint8_t mode)
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  analog_reference = mode;
    4ba8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <analog_reference>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_analog.c:42
}
    4bac:	08 95       	ret

00004bae <turnOffPWM>:
turnOffPWM():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    4bae:	81 50       	subi	r24, 0x01	; 1
    4bb0:	8c 30       	cpi	r24, 0x0C	; 12
    4bb2:	88 f5       	brcc	.+98     	; 0x4c16 <turnOffPWM+0x68>
    4bb4:	e8 2f       	mov	r30, r24
    4bb6:	f0 e0       	ldi	r31, 0x00	; 0
    4bb8:	e0 52       	subi	r30, 0x20	; 32
    4bba:	fa 4d       	sbci	r31, 0xDA	; 218
    4bbc:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__tablejump2__>
    4bc0:	08 26       	eor	r0, r24
    4bc2:	08 26       	eor	r0, r24
    4bc4:	0b 26       	eor	r0, r27
    4bc6:	ec 25       	eor	r30, r12
    4bc8:	f0 25       	eor	r31, r0
    4bca:	f3 25       	eor	r31, r3
    4bcc:	f6 25       	eor	r31, r6
    4bce:	0b 26       	eor	r0, r27
    4bd0:	0b 26       	eor	r0, r27
    4bd2:	fa 25       	eor	r31, r10
    4bd4:	00 26       	eor	r0, r16
    4bd6:	04 26       	eor	r0, r20
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    4bd8:	8f b5       	in	r24, 0x2f	; 47
    4bda:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    4bdc:	8f bd       	out	0x2f, r24	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    4bde:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    4be0:	8f b5       	in	r24, 0x2f	; 47
    4be2:	8f 7d       	andi	r24, 0xDF	; 223
    4be4:	fb cf       	rjmp	.-10     	; 0x4bdc <turnOffPWM+0x2e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:92
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1C1)
      case TIMER1C:
        TCCR1A &= ~_BV(COM1C1);
    4be6:	8f b5       	in	r24, 0x2f	; 47
    4be8:	87 7f       	andi	r24, 0xF7	; 247
    4bea:	f8 cf       	rjmp	.-16     	; 0x4bdc <turnOffPWM+0x2e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    4bec:	85 b5       	in	r24, 0x25	; 37
    4bee:	8f 7d       	andi	r24, 0xDF	; 223
    4bf0:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:100
        break;
    4bf2:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    4bf4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    4bf8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        TCCR3A &= ~_BV(COM3B1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    4bfa:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:127
        break;
    4bfe:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    4c00:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    4c04:	8f 7d       	andi	r24, 0xDF	; 223
    4c06:	f9 cf       	rjmp	.-14     	; 0x4bfa <turnOffPWM+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:126
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3C1)
      case TIMER3C:
        TCCR3A &= ~_BV(COM3C1);
    4c08:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    4c0c:	87 7f       	andi	r24, 0xF7	; 247
    4c0e:	f5 cf       	rjmp	.-22     	; 0x4bfa <turnOffPWM+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
    4c10:	83 b7       	in	r24, 0x33	; 51
    4c12:	8f 7d       	andi	r24, 0xDF	; 223
    4c14:	83 bf       	out	0x33, r24	; 51
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    4c16:	08 95       	ret

00004c18 <pinMode>:
pinMode():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4c18:	cf 93       	push	r28
    4c1a:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	fc 01       	movw	r30, r24
    4c20:	e7 57       	subi	r30, 0x77	; 119
    4c22:	fe 4f       	sbci	r31, 0xFE	; 254
    4c24:	24 91       	lpm	r18, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    4c26:	82 54       	subi	r24, 0x42	; 66
    4c28:	9e 4f       	sbci	r25, 0xFE	; 254
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    4c2e:	88 23       	and	r24, r24
    4c30:	c9 f0       	breq	.+50     	; 0x4c64 <pinMode+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	88 0f       	add	r24, r24
    4c36:	99 1f       	adc	r25, r25
    4c38:	fc 01       	movw	r30, r24
    4c3a:	ed 5e       	subi	r30, 0xED	; 237
    4c3c:	fd 4f       	sbci	r31, 0xFD	; 253
    4c3e:	a5 91       	lpm	r26, Z+
    4c40:	b4 91       	lpm	r27, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    4c42:	fc 01       	movw	r30, r24
    4c44:	ed 5f       	subi	r30, 0xFD	; 253
    4c46:	fd 4f       	sbci	r31, 0xFD	; 253
    4c48:	c5 91       	lpm	r28, Z+
    4c4a:	d4 91       	lpm	r29, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    4c4c:	61 11       	cpse	r22, r1
    4c4e:	0d c0       	rjmp	.+26     	; 0x4c6a <pinMode+0x52>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    4c50:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    4c52:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    4c54:	8c 91       	ld	r24, X
    4c56:	20 95       	com	r18
    4c58:	82 23       	and	r24, r18
    4c5a:	8c 93       	st	X, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    4c5c:	88 81       	ld	r24, Y
    4c5e:	28 23       	and	r18, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    4c60:	28 83       	st	Y, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    4c62:	9f bf       	out	0x3f, r25	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    4c6a:	62 30       	cpi	r22, 0x02	; 2
    4c6c:	51 f4       	brne	.+20     	; 0x4c82 <pinMode+0x6a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    4c6e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    4c70:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    4c72:	3c 91       	ld	r19, X
    4c74:	82 2f       	mov	r24, r18
    4c76:	80 95       	com	r24
    4c78:	83 23       	and	r24, r19
    4c7a:	8c 93       	st	X, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    4c7c:	e8 81       	ld	r30, Y
    4c7e:	2e 2b       	or	r18, r30
    4c80:	ef cf       	rjmp	.-34     	; 0x4c60 <pinMode+0x48>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    4c82:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    4c84:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    4c86:	ec 91       	ld	r30, X
    4c88:	2e 2b       	or	r18, r30
    4c8a:	2c 93       	st	X, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    4c8c:	8f bf       	out	0x3f, r24	; 63
    4c8e:	ea cf       	rjmp	.-44     	; 0x4c64 <pinMode+0x4c>

00004c90 <digitalWrite>:
digitalWrite():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4c90:	1f 93       	push	r17
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    4c96:	28 2f       	mov	r18, r24
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	f9 01       	movw	r30, r18
    4c9c:	ec 5a       	subi	r30, 0xAC	; 172
    4c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    4ca0:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    4ca2:	f9 01       	movw	r30, r18
    4ca4:	e7 57       	subi	r30, 0x77	; 119
    4ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ca8:	d4 91       	lpm	r29, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    4caa:	f9 01       	movw	r30, r18
    4cac:	e2 54       	subi	r30, 0x42	; 66
    4cae:	fe 4f       	sbci	r31, 0xFE	; 254
    4cb0:	c4 91       	lpm	r28, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    4cb2:	cc 23       	and	r28, r28
    4cb4:	a9 f0       	breq	.+42     	; 0x4ce0 <digitalWrite+0x50>
    4cb6:	16 2f       	mov	r17, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4cb8:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    4cba:	0e 94 d7 25 	call	0x4bae	; 0x4bae <turnOffPWM>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    4cbe:	ec 2f       	mov	r30, r28
    4cc0:	f0 e0       	ldi	r31, 0x00	; 0
    4cc2:	ee 0f       	add	r30, r30
    4cc4:	ff 1f       	adc	r31, r31
    4cc6:	ed 5f       	subi	r30, 0xFD	; 253
    4cc8:	fd 4f       	sbci	r31, 0xFD	; 253
    4cca:	a5 91       	lpm	r26, Z+
    4ccc:	b4 91       	lpm	r27, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    4cce:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    4cd0:	f8 94       	cli
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    4cd2:	ec 91       	ld	r30, X
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    4cd4:	11 11       	cpse	r17, r1
    4cd6:	08 c0       	rjmp	.+16     	; 0x4ce8 <digitalWrite+0x58>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    4cd8:	d0 95       	com	r29
    4cda:	de 23       	and	r29, r30
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    4cdc:	dc 93       	st	X, r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    4cde:	8f bf       	out	0x3f, r24	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:212
}
    4ce0:	df 91       	pop	r29
    4ce2:	cf 91       	pop	r28
    4ce4:	1f 91       	pop	r17
    4ce6:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    4ce8:	de 2b       	or	r29, r30
    4cea:	f8 cf       	rjmp	.-16     	; 0x4cdc <digitalWrite+0x4c>

00004cec <digitalRead>:
digitalRead():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    4cec:	cf 93       	push	r28
    4cee:	df 93       	push	r29
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    4cf0:	28 2f       	mov	r18, r24
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	f9 01       	movw	r30, r18
    4cf6:	ec 5a       	subi	r30, 0xAC	; 172
    4cf8:	fe 4f       	sbci	r31, 0xFE	; 254
    4cfa:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    4cfc:	f9 01       	movw	r30, r18
    4cfe:	e7 57       	subi	r30, 0x77	; 119
    4d00:	fe 4f       	sbci	r31, 0xFE	; 254
    4d02:	d4 91       	lpm	r29, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    4d04:	f9 01       	movw	r30, r18
    4d06:	e2 54       	subi	r30, 0x42	; 66
    4d08:	fe 4f       	sbci	r31, 0xFE	; 254
    4d0a:	c4 91       	lpm	r28, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    4d0c:	cc 23       	and	r28, r28
    4d0e:	a1 f0       	breq	.+40     	; 0x4d38 <digitalRead+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4d10:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    4d12:	0e 94 d7 25 	call	0x4bae	; 0x4bae <turnOffPWM>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    4d16:	ec 2f       	mov	r30, r28
    4d18:	f0 e0       	ldi	r31, 0x00	; 0
    4d1a:	ee 0f       	add	r30, r30
    4d1c:	ff 1f       	adc	r31, r31
    4d1e:	ed 50       	subi	r30, 0x0D	; 13
    4d20:	fe 4f       	sbci	r31, 0xFE	; 254
    4d22:	a5 91       	lpm	r26, Z+
    4d24:	b4 91       	lpm	r27, Z
    4d26:	ec 91       	ld	r30, X
    4d28:	ed 23       	and	r30, r29
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	09 f4       	brne	.+2      	; 0x4d32 <digitalRead+0x46>
    4d30:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    4d32:	df 91       	pop	r29
    4d34:	cf 91       	pop	r28
    4d36:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	fa cf       	rjmp	.-12     	; 0x4d32 <digitalRead+0x46>

00004d3e <shiftOut>:
shiftOut():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    4d3e:	bf 92       	push	r11
    4d40:	cf 92       	push	r12
    4d42:	df 92       	push	r13
    4d44:	ef 92       	push	r14
    4d46:	ff 92       	push	r15
    4d48:	0f 93       	push	r16
    4d4a:	1f 93       	push	r17
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	c8 2e       	mov	r12, r24
    4d52:	d6 2e       	mov	r13, r22
    4d54:	b4 2e       	mov	r11, r20
    4d56:	d0 e0       	ldi	r29, 0x00	; 0
    4d58:	c0 e0       	ldi	r28, 0x00	; 0
    4d5a:	02 2f       	mov	r16, r18
    4d5c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    4d5e:	87 e0       	ldi	r24, 0x07	; 7
    4d60:	e8 2e       	mov	r14, r24
    4d62:	f1 2c       	mov	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    4d64:	b8 01       	movw	r22, r16
    4d66:	8c 2f       	mov	r24, r28
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    4d68:	bb 20       	and	r11, r11
    4d6a:	19 f0       	breq	.+6      	; 0x4d72 <shiftOut+0x34>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    4d6c:	c7 01       	movw	r24, r14
    4d6e:	8c 1b       	sub	r24, r28
    4d70:	9d 0b       	sbc	r25, r29
    4d72:	02 c0       	rjmp	.+4      	; 0x4d78 <shiftOut+0x3a>
    4d74:	75 95       	asr	r23
    4d76:	67 95       	ror	r22
    4d78:	8a 95       	dec	r24
    4d7a:	e2 f7       	brpl	.-8      	; 0x4d74 <shiftOut+0x36>
    4d7c:	61 70       	andi	r22, 0x01	; 1
    4d7e:	8c 2d       	mov	r24, r12
    4d80:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    4d84:	61 e0       	ldi	r22, 0x01	; 1
    4d86:	8d 2d       	mov	r24, r13
    4d88:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    4d8c:	60 e0       	ldi	r22, 0x00	; 0
    4d8e:	8d 2d       	mov	r24, r13
    4d90:	0e 94 48 26 	call	0x4c90	; 0x4c90 <digitalWrite>
    4d94:	21 96       	adiw	r28, 0x01	; 1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    4d96:	c8 30       	cpi	r28, 0x08	; 8
    4d98:	d1 05       	cpc	r29, r1
    4d9a:	21 f7       	brne	.-56     	; 0x4d64 <shiftOut+0x26>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    4d9c:	df 91       	pop	r29
    4d9e:	cf 91       	pop	r28
    4da0:	1f 91       	pop	r17
    4da2:	0f 91       	pop	r16
    4da4:	ff 90       	pop	r15
    4da6:	ef 90       	pop	r14
    4da8:	df 90       	pop	r13
    4daa:	cf 90       	pop	r12
    4dac:	bf 90       	pop	r11
    4dae:	08 95       	ret

00004db0 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4db0:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4db2:	91 8d       	ldd	r25, Z+25	; 0x19
    4db4:	22 8d       	ldd	r18, Z+26	; 0x1a
    4db6:	89 2f       	mov	r24, r25
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	80 5c       	subi	r24, 0xC0	; 192
    4dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dbe:	82 1b       	sub	r24, r18
    4dc0:	91 09       	sbc	r25, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    4dc2:	8f 73       	andi	r24, 0x3F	; 63
    4dc4:	99 27       	eor	r25, r25
    4dc6:	08 95       	ret

00004dc8 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    4dc8:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    4dca:	91 8d       	ldd	r25, Z+25	; 0x19
    4dcc:	82 8d       	ldd	r24, Z+26	; 0x1a
    4dce:	98 17       	cp	r25, r24
    4dd0:	31 f0       	breq	.+12     	; 0x4dde <HardwareSerial::peek()+0x16>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4dd4:	e8 0f       	add	r30, r24
    4dd6:	f1 1d       	adc	r31, r1
    4dd8:	85 8d       	ldd	r24, Z+29	; 0x1d
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4dde:	8f ef       	ldi	r24, 0xFF	; 255
    4de0:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4de2:	08 95       	ret

00004de4 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    4de4:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4de6:	91 8d       	ldd	r25, Z+25	; 0x19
    4de8:	82 8d       	ldd	r24, Z+26	; 0x1a
    4dea:	98 17       	cp	r25, r24
    4dec:	61 f0       	breq	.+24     	; 0x4e06 <HardwareSerial::read()+0x22>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    4dee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4df0:	ae 0f       	add	r26, r30
    4df2:	bf 2f       	mov	r27, r31
    4df4:	b1 1d       	adc	r27, r1
    4df6:	5d 96       	adiw	r26, 0x1d	; 29
    4df8:	8c 91       	ld	r24, X
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    4dfa:	92 8d       	ldd	r25, Z+26	; 0x1a
    4dfc:	9f 5f       	subi	r25, 0xFF	; 255
    4dfe:	9f 73       	andi	r25, 0x3F	; 63
    4e00:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4e06:	8f ef       	ldi	r24, 0xFF	; 255
    4e08:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    4e0a:	08 95       	ret

00004e0c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    4e10:	44 8d       	ldd	r20, Z+28	; 0x1c
    4e12:	25 2f       	mov	r18, r21
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	84 2f       	mov	r24, r20
    4e18:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    4e1a:	82 1b       	sub	r24, r18
    4e1c:	93 0b       	sbc	r25, r19
    4e1e:	54 17       	cp	r21, r20
    4e20:	10 f0       	brcs	.+4      	; 0x4e26 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    4e22:	cf 96       	adiw	r24, 0x3f	; 63
    4e24:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    4e26:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    4e28:	08 95       	ret

00004e2a <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    4e2a:	88 e6       	ldi	r24, 0x68	; 104
    4e2c:	98 e2       	ldi	r25, 0x28	; 40
    4e2e:	89 2b       	or	r24, r25
    4e30:	49 f0       	breq	.+18     	; 0x4e44 <serialEventRun()+0x1a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	89 2b       	or	r24, r25
    4e38:	29 f0       	breq	.+10     	; 0x4e44 <serialEventRun()+0x1a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    4e3a:	0e 94 68 28 	call	0x50d0	; 0x50d0 <Serial0_available()>
    4e3e:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    4e40:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    4e44:	87 ef       	ldi	r24, 0xF7	; 247
    4e46:	98 e2       	ldi	r25, 0x28	; 40
    4e48:	89 2b       	or	r24, r25
    4e4a:	49 f0       	breq	.+18     	; 0x4e5e <serialEventRun()+0x34>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	89 2b       	or	r24, r25
    4e52:	29 f0       	breq	.+10     	; 0x4e5e <serialEventRun()+0x34>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    4e54:	0e 94 f7 28 	call	0x51ee	; 0x51ee <Serial1_available()>
    4e58:	81 11       	cpse	r24, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    4e5a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    4e5e:	08 95       	ret

00004e60 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    4e60:	fc 01       	movw	r30, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    4e62:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4e64:	a8 0f       	add	r26, r24
    4e66:	b9 2f       	mov	r27, r25
    4e68:	b1 1d       	adc	r27, r1
    4e6a:	a3 5a       	subi	r26, 0xA3	; 163
    4e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e6e:	2c 91       	ld	r18, X
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    4e70:	84 8d       	ldd	r24, Z+28	; 0x1c
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	01 96       	adiw	r24, 0x01	; 1
    4e76:	8f 73       	andi	r24, 0x3F	; 63
    4e78:	99 27       	eor	r25, r25
    4e7a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    4e7c:	a6 89       	ldd	r26, Z+22	; 0x16
    4e7e:	b7 89       	ldd	r27, Z+23	; 0x17
    4e80:	2c 93       	st	X, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    4e82:	a0 89       	ldd	r26, Z+16	; 0x10
    4e84:	b1 89       	ldd	r27, Z+17	; 0x11
    4e86:	8c 91       	ld	r24, X
    4e88:	80 64       	ori	r24, 0x40	; 64
    4e8a:	8c 93       	st	X, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    4e8c:	93 8d       	ldd	r25, Z+27	; 0x1b
    4e8e:	84 8d       	ldd	r24, Z+28	; 0x1c
    4e90:	98 13       	cpse	r25, r24
    4e92:	06 c0       	rjmp	.+12     	; 0x4ea0 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    4e94:	02 88       	ldd	r0, Z+18	; 0x12
    4e96:	f3 89       	ldd	r31, Z+19	; 0x13
    4e98:	e0 2d       	mov	r30, r0
    4e9a:	80 81       	ld	r24, Z
    4e9c:	8f 7d       	andi	r24, 0xDF	; 223
    4e9e:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    4ea0:	08 95       	ret

00004ea2 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4ea2:	cf 93       	push	r28
    4ea4:	df 93       	push	r29
    4ea6:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    4ea8:	88 8d       	ldd	r24, Y+24	; 0x18
    4eaa:	88 23       	and	r24, r24
    4eac:	b9 f0       	breq	.+46     	; 0x4edc <HardwareSerial::flush()+0x3a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4eae:	aa 89       	ldd	r26, Y+18	; 0x12
    4eb0:	bb 89       	ldd	r27, Y+19	; 0x13
    4eb2:	e8 89       	ldd	r30, Y+16	; 0x10
    4eb4:	f9 89       	ldd	r31, Y+17	; 0x11
    4eb6:	8c 91       	ld	r24, X
    4eb8:	85 fd       	sbrc	r24, 5
    4eba:	03 c0       	rjmp	.+6      	; 0x4ec2 <HardwareSerial::flush()+0x20>
    4ebc:	80 81       	ld	r24, Z
    4ebe:	86 fd       	sbrc	r24, 6
    4ec0:	0d c0       	rjmp	.+26     	; 0x4edc <HardwareSerial::flush()+0x3a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4ec2:	0f b6       	in	r0, 0x3f	; 63
    4ec4:	07 fc       	sbrc	r0, 7
    4ec6:	f7 cf       	rjmp	.-18     	; 0x4eb6 <HardwareSerial::flush()+0x14>
    4ec8:	8c 91       	ld	r24, X
    4eca:	85 ff       	sbrs	r24, 5
    4ecc:	f2 cf       	rjmp	.-28     	; 0x4eb2 <HardwareSerial::flush()+0x10>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    4ece:	80 81       	ld	r24, Z
    4ed0:	85 ff       	sbrs	r24, 5
    4ed2:	ed cf       	rjmp	.-38     	; 0x4eae <HardwareSerial::flush()+0xc>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    4ed4:	ce 01       	movw	r24, r28
    4ed6:	0e 94 30 27 	call	0x4e60	; 0x4e60 <HardwareSerial::_tx_udr_empty_irq()>
    4eda:	e9 cf       	rjmp	.-46     	; 0x4eae <HardwareSerial::flush()+0xc>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4edc:	df 91       	pop	r29
    4ede:	cf 91       	pop	r28
    4ee0:	08 95       	ret

00004ee2 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    4ee2:	ef 92       	push	r14
    4ee4:	ff 92       	push	r15
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	cf 93       	push	r28
    4eec:	df 93       	push	r29
    4eee:	ec 01       	movw	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
    4ef2:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    4ef4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ef6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4ef8:	98 13       	cpse	r25, r24
    4efa:	16 c0       	rjmp	.+44     	; 0x4f28 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    4efc:	e8 89       	ldd	r30, Y+16	; 0x10
    4efe:	f9 89       	ldd	r31, Y+17	; 0x11
    4f00:	80 81       	ld	r24, Z
    4f02:	85 ff       	sbrs	r24, 5
    4f04:	11 c0       	rjmp	.+34     	; 0x4f28 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    4f06:	ee 89       	ldd	r30, Y+22	; 0x16
    4f08:	ff 89       	ldd	r31, Y+23	; 0x17
    4f0a:	60 83       	st	Z, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    4f0c:	e8 89       	ldd	r30, Y+16	; 0x10
    4f0e:	f9 89       	ldd	r31, Y+17	; 0x11
    4f10:	80 81       	ld	r24, Z
    4f12:	80 64       	ori	r24, 0x40	; 64
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    4f14:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	df 91       	pop	r29
    4f1c:	cf 91       	pop	r28
    4f1e:	1f 91       	pop	r17
    4f20:	0f 91       	pop	r16
    4f22:	ff 90       	pop	r15
    4f24:	ef 90       	pop	r14
    4f26:	08 95       	ret
    4f28:	f6 2e       	mov	r15, r22
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4f2a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4f2c:	10 e0       	ldi	r17, 0x00	; 0
    4f2e:	0f 5f       	subi	r16, 0xFF	; 255
    4f30:	1f 4f       	sbci	r17, 0xFF	; 255
    4f32:	0f 73       	andi	r16, 0x3F	; 63
    4f34:	11 27       	eor	r17, r17
    4f36:	e0 2e       	mov	r14, r16
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    4f38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4f3a:	8e 11       	cpse	r24, r14
    4f3c:	0c c0       	rjmp	.+24     	; 0x4f56 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    4f3e:	0f b6       	in	r0, 0x3f	; 63
    4f40:	07 fc       	sbrc	r0, 7
    4f42:	fa cf       	rjmp	.-12     	; 0x4f38 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    4f44:	e8 89       	ldd	r30, Y+16	; 0x10
    4f46:	f9 89       	ldd	r31, Y+17	; 0x11
    4f48:	80 81       	ld	r24, Z
    4f4a:	85 ff       	sbrs	r24, 5
    4f4c:	f5 cf       	rjmp	.-22     	; 0x4f38 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    4f4e:	ce 01       	movw	r24, r28
    4f50:	0e 94 30 27 	call	0x4e60	; 0x4e60 <HardwareSerial::_tx_udr_empty_irq()>
    4f54:	f1 cf       	rjmp	.-30     	; 0x4f38 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    4f56:	eb 8d       	ldd	r30, Y+27	; 0x1b
    4f58:	ec 0f       	add	r30, r28
    4f5a:	fd 2f       	mov	r31, r29
    4f5c:	f1 1d       	adc	r31, r1
    4f5e:	e3 5a       	subi	r30, 0xA3	; 163
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	f0 82       	st	Z, r15
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    4f64:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    4f66:	ea 89       	ldd	r30, Y+18	; 0x12
    4f68:	fb 89       	ldd	r31, Y+19	; 0x13
    4f6a:	80 81       	ld	r24, Z
    4f6c:	80 62       	ori	r24, 0x20	; 32
    4f6e:	d2 cf       	rjmp	.-92     	; 0x4f14 <HardwareSerial::write(unsigned char)+0x32>

00004f70 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    4f70:	cf 92       	push	r12
    4f72:	df 92       	push	r13
    4f74:	ef 92       	push	r14
    4f76:	ff 92       	push	r15
    4f78:	1f 93       	push	r17
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	ec 01       	movw	r28, r24
    4f80:	6a 01       	movw	r12, r20
    4f82:	7b 01       	movw	r14, r22
    4f84:	12 2f       	mov	r17, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    4f86:	e8 89       	ldd	r30, Y+16	; 0x10
    4f88:	f9 89       	ldd	r31, Y+17	; 0x11
    4f8a:	82 e0       	ldi	r24, 0x02	; 2
    4f8c:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4f8e:	c1 14       	cp	r12, r1
    4f90:	81 ee       	ldi	r24, 0xE1	; 225
    4f92:	d8 06       	cpc	r13, r24
    4f94:	e1 04       	cpc	r14, r1
    4f96:	f1 04       	cpc	r15, r1
    4f98:	a1 f0       	breq	.+40     	; 0x4fc2 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4f9a:	60 e0       	ldi	r22, 0x00	; 0
    4f9c:	79 e0       	ldi	r23, 0x09	; 9
    4f9e:	8d e3       	ldi	r24, 0x3D	; 61
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	a7 01       	movw	r20, r14
    4fa4:	96 01       	movw	r18, r12
    4fa6:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    4faa:	21 50       	subi	r18, 0x01	; 1
    4fac:	31 09       	sbc	r19, r1
    4fae:	41 09       	sbc	r20, r1
    4fb0:	51 09       	sbc	r21, r1
    4fb2:	56 95       	lsr	r21
    4fb4:	47 95       	ror	r20
    4fb6:	37 95       	ror	r19
    4fb8:	27 95       	ror	r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    4fba:	21 15       	cp	r18, r1
    4fbc:	80 e1       	ldi	r24, 0x10	; 16
    4fbe:	38 07       	cpc	r19, r24
    4fc0:	98 f0       	brcs	.+38     	; 0x4fe8 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    4fc2:	e8 89       	ldd	r30, Y+16	; 0x10
    4fc4:	f9 89       	ldd	r31, Y+17	; 0x11
    4fc6:	10 82       	st	Z, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4fc8:	60 e8       	ldi	r22, 0x80	; 128
    4fca:	74 e8       	ldi	r23, 0x84	; 132
    4fcc:	8e e1       	ldi	r24, 0x1E	; 30
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	a7 01       	movw	r20, r14
    4fd2:	96 01       	movw	r18, r12
    4fd4:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    4fd8:	21 50       	subi	r18, 0x01	; 1
    4fda:	31 09       	sbc	r19, r1
    4fdc:	41 09       	sbc	r20, r1
    4fde:	51 09       	sbc	r21, r1
    4fe0:	56 95       	lsr	r21
    4fe2:	47 95       	ror	r20
    4fe4:	37 95       	ror	r19
    4fe6:	27 95       	ror	r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4fe8:	ec 85       	ldd	r30, Y+12	; 0x0c
    4fea:	fd 85       	ldd	r31, Y+13	; 0x0d
    4fec:	30 83       	st	Z, r19
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    4fee:	ee 85       	ldd	r30, Y+14	; 0x0e
    4ff0:	ff 85       	ldd	r31, Y+15	; 0x0f
    4ff2:	20 83       	st	Z, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    4ff4:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    4ff6:	ec 89       	ldd	r30, Y+20	; 0x14
    4ff8:	fd 89       	ldd	r31, Y+21	; 0x15
    4ffa:	10 83       	st	Z, r17
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    4ffc:	ea 89       	ldd	r30, Y+18	; 0x12
    4ffe:	fb 89       	ldd	r31, Y+19	; 0x13
    5000:	80 81       	ld	r24, Z
    5002:	88 69       	ori	r24, 0x98	; 152
    5004:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    5006:	ea 89       	ldd	r30, Y+18	; 0x12
    5008:	fb 89       	ldd	r31, Y+19	; 0x13
    500a:	80 81       	ld	r24, Z
    500c:	8f 7d       	andi	r24, 0xDF	; 223
    500e:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    5010:	df 91       	pop	r29
    5012:	cf 91       	pop	r28
    5014:	1f 91       	pop	r17
    5016:	ff 90       	pop	r15
    5018:	ef 90       	pop	r14
    501a:	df 90       	pop	r13
    501c:	cf 90       	pop	r12
    501e:	08 95       	ret

00005020 <__vector_18>:
__vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    5020:	1f 92       	push	r1
    5022:	0f 92       	push	r0
    5024:	0f b6       	in	r0, 0x3f	; 63
    5026:	0f 92       	push	r0
    5028:	11 24       	eor	r1, r1
    502a:	2f 93       	push	r18
    502c:	8f 93       	push	r24
    502e:	9f 93       	push	r25
    5030:	ef 93       	push	r30
    5032:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5034:	e0 91 8b 06 	lds	r30, 0x068B	; 0x80068b <Serial+0x10>
    5038:	f0 91 8c 06 	lds	r31, 0x068C	; 0x80068c <Serial+0x11>
    503c:	80 81       	ld	r24, Z
    503e:	e0 91 91 06 	lds	r30, 0x0691	; 0x800691 <Serial+0x16>
    5042:	f0 91 92 06 	lds	r31, 0x0692	; 0x800692 <Serial+0x17>
    5046:	82 fd       	sbrc	r24, 2
    5048:	1b c0       	rjmp	.+54     	; 0x5080 <__vector_18+0x60>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    504a:	90 81       	ld	r25, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    504c:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <Serial+0x19>
    5050:	8f 5f       	subi	r24, 0xFF	; 255
    5052:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5054:	20 91 95 06 	lds	r18, 0x0695	; 0x800695 <Serial+0x1a>
    5058:	82 17       	cp	r24, r18
    505a:	41 f0       	breq	.+16     	; 0x506c <__vector_18+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    505c:	e0 91 94 06 	lds	r30, 0x0694	; 0x800694 <Serial+0x19>
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	e5 58       	subi	r30, 0x85	; 133
    5064:	f9 4f       	sbci	r31, 0xF9	; 249
    5066:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    5068:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <Serial+0x19>
__vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    506c:	ff 91       	pop	r31
    506e:	ef 91       	pop	r30
    5070:	9f 91       	pop	r25
    5072:	8f 91       	pop	r24
    5074:	2f 91       	pop	r18
    5076:	0f 90       	pop	r0
    5078:	0f be       	out	0x3f, r0	; 63
    507a:	0f 90       	pop	r0
    507c:	1f 90       	pop	r1
    507e:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    5080:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    5082:	f4 cf       	rjmp	.-24     	; 0x506c <__vector_18+0x4c>

00005084 <__vector_19>:
__vector_19():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5084:	1f 92       	push	r1
    5086:	0f 92       	push	r0
    5088:	0f b6       	in	r0, 0x3f	; 63
    508a:	0f 92       	push	r0
    508c:	11 24       	eor	r1, r1
    508e:	2f 93       	push	r18
    5090:	3f 93       	push	r19
    5092:	4f 93       	push	r20
    5094:	5f 93       	push	r21
    5096:	6f 93       	push	r22
    5098:	7f 93       	push	r23
    509a:	8f 93       	push	r24
    509c:	9f 93       	push	r25
    509e:	af 93       	push	r26
    50a0:	bf 93       	push	r27
    50a2:	ef 93       	push	r30
    50a4:	ff 93       	push	r31
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    50a6:	8b e7       	ldi	r24, 0x7B	; 123
    50a8:	96 e0       	ldi	r25, 0x06	; 6
    50aa:	0e 94 30 27 	call	0x4e60	; 0x4e60 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    50ae:	ff 91       	pop	r31
    50b0:	ef 91       	pop	r30
    50b2:	bf 91       	pop	r27
    50b4:	af 91       	pop	r26
    50b6:	9f 91       	pop	r25
    50b8:	8f 91       	pop	r24
    50ba:	7f 91       	pop	r23
    50bc:	6f 91       	pop	r22
    50be:	5f 91       	pop	r21
    50c0:	4f 91       	pop	r20
    50c2:	3f 91       	pop	r19
    50c4:	2f 91       	pop	r18
    50c6:	0f 90       	pop	r0
    50c8:	0f be       	out	0x3f, r0	; 63
    50ca:	0f 90       	pop	r0
    50cc:	1f 90       	pop	r1
    50ce:	18 95       	reti

000050d0 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    50d0:	8b e7       	ldi	r24, 0x7B	; 123
    50d2:	96 e0       	ldi	r25, 0x06	; 6
    50d4:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <HardwareSerial::available()>
    50d8:	21 e0       	ldi	r18, 0x01	; 1
    50da:	89 2b       	or	r24, r25
    50dc:	09 f4       	brne	.+2      	; 0x50e0 <Serial0_available()+0x10>
    50de:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    50e0:	82 2f       	mov	r24, r18
    50e2:	08 95       	ret

000050e4 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    50e4:	eb e7       	ldi	r30, 0x7B	; 123
    50e6:	f6 e0       	ldi	r31, 0x06	; 6
    50e8:	13 82       	std	Z+3, r1	; 0x03
    50ea:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    50ec:	88 ee       	ldi	r24, 0xE8	; 232
    50ee:	93 e0       	ldi	r25, 0x03	; 3
    50f0:	a0 e0       	ldi	r26, 0x00	; 0
    50f2:	b0 e0       	ldi	r27, 0x00	; 0
    50f4:	84 83       	std	Z+4, r24	; 0x04
    50f6:	95 83       	std	Z+5, r25	; 0x05
    50f8:	a6 83       	std	Z+6, r26	; 0x06
    50fa:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    50fc:	8c e7       	ldi	r24, 0x7C	; 124
    50fe:	91 e0       	ldi	r25, 0x01	; 1
    5100:	91 83       	std	Z+1, r25	; 0x01
    5102:	80 83       	st	Z, r24
    5104:	80 e9       	ldi	r24, 0x90	; 144
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	95 87       	std	Z+13, r25	; 0x0d
    510a:	84 87       	std	Z+12, r24	; 0x0c
    510c:	89 e2       	ldi	r24, 0x29	; 41
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	97 87       	std	Z+15, r25	; 0x0f
    5112:	86 87       	std	Z+14, r24	; 0x0e
    5114:	8b e2       	ldi	r24, 0x2B	; 43
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	91 8b       	std	Z+17, r25	; 0x11
    511a:	80 8b       	std	Z+16, r24	; 0x10
    511c:	8a e2       	ldi	r24, 0x2A	; 42
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	93 8b       	std	Z+19, r25	; 0x13
    5122:	82 8b       	std	Z+18, r24	; 0x12
    5124:	85 e9       	ldi	r24, 0x95	; 149
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	95 8b       	std	Z+21, r25	; 0x15
    512a:	84 8b       	std	Z+20, r24	; 0x14
    512c:	8c e2       	ldi	r24, 0x2C	; 44
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	97 8b       	std	Z+23, r25	; 0x17
    5132:	86 8b       	std	Z+22, r24	; 0x16
    5134:	11 8e       	std	Z+25, r1	; 0x19
    5136:	12 8e       	std	Z+26, r1	; 0x1a
    5138:	13 8e       	std	Z+27, r1	; 0x1b
    513a:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    513c:	08 95       	ret

0000513e <__vector_30>:
__vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:48
#elif defined(USART1_RXC_vect)
ISR(USART1_RXC_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    513e:	1f 92       	push	r1
    5140:	0f 92       	push	r0
    5142:	0f b6       	in	r0, 0x3f	; 63
    5144:	0f 92       	push	r0
    5146:	11 24       	eor	r1, r1
    5148:	2f 93       	push	r18
    514a:	8f 93       	push	r24
    514c:	9f 93       	push	r25
    514e:	ef 93       	push	r30
    5150:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5152:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <Serial1+0x10>
    5156:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <Serial1+0x11>
    515a:	80 81       	ld	r24, Z
    515c:	e0 91 2e 07 	lds	r30, 0x072E	; 0x80072e <Serial1+0x16>
    5160:	f0 91 2f 07 	lds	r31, 0x072F	; 0x80072f <Serial1+0x17>
    5164:	82 fd       	sbrc	r24, 2
    5166:	1b c0       	rjmp	.+54     	; 0x519e <__vector_30+0x60>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5168:	90 81       	ld	r25, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    516a:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <Serial1+0x19>
    516e:	8f 5f       	subi	r24, 0xFF	; 255
    5170:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5172:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <Serial1+0x1a>
    5176:	82 17       	cp	r24, r18
    5178:	41 f0       	breq	.+16     	; 0x518a <__vector_30+0x4c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    517a:	e0 91 31 07 	lds	r30, 0x0731	; 0x800731 <Serial1+0x19>
    517e:	f0 e0       	ldi	r31, 0x00	; 0
    5180:	e8 5e       	subi	r30, 0xE8	; 232
    5182:	f8 4f       	sbci	r31, 0xF8	; 248
    5184:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    5186:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <Serial1+0x19>
__vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
  Serial1._rx_complete_irq();
}
    518a:	ff 91       	pop	r31
    518c:	ef 91       	pop	r30
    518e:	9f 91       	pop	r25
    5190:	8f 91       	pop	r24
    5192:	2f 91       	pop	r18
    5194:	0f 90       	pop	r0
    5196:	0f be       	out	0x3f, r0	; 63
    5198:	0f 90       	pop	r0
    519a:	1f 90       	pop	r1
    519c:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    519e:	80 81       	ld	r24, Z
__vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:50
    51a0:	f4 cf       	rjmp	.-24     	; 0x518a <__vector_30+0x4c>

000051a2 <__vector_31>:
__vector_31():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:59
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    51a2:	1f 92       	push	r1
    51a4:	0f 92       	push	r0
    51a6:	0f b6       	in	r0, 0x3f	; 63
    51a8:	0f 92       	push	r0
    51aa:	11 24       	eor	r1, r1
    51ac:	2f 93       	push	r18
    51ae:	3f 93       	push	r19
    51b0:	4f 93       	push	r20
    51b2:	5f 93       	push	r21
    51b4:	6f 93       	push	r22
    51b6:	7f 93       	push	r23
    51b8:	8f 93       	push	r24
    51ba:	9f 93       	push	r25
    51bc:	af 93       	push	r26
    51be:	bf 93       	push	r27
    51c0:	ef 93       	push	r30
    51c2:	ff 93       	push	r31
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:60
  Serial1._tx_udr_empty_irq();
    51c4:	88 e1       	ldi	r24, 0x18	; 24
    51c6:	97 e0       	ldi	r25, 0x07	; 7
    51c8:	0e 94 30 27 	call	0x4e60	; 0x4e60 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:61
}
    51cc:	ff 91       	pop	r31
    51ce:	ef 91       	pop	r30
    51d0:	bf 91       	pop	r27
    51d2:	af 91       	pop	r26
    51d4:	9f 91       	pop	r25
    51d6:	8f 91       	pop	r24
    51d8:	7f 91       	pop	r23
    51da:	6f 91       	pop	r22
    51dc:	5f 91       	pop	r21
    51de:	4f 91       	pop	r20
    51e0:	3f 91       	pop	r19
    51e2:	2f 91       	pop	r18
    51e4:	0f 90       	pop	r0
    51e6:	0f be       	out	0x3f, r0	; 63
    51e8:	0f 90       	pop	r0
    51ea:	1f 90       	pop	r1
    51ec:	18 95       	reti

000051ee <Serial1_available()>:
_Z17Serial1_availablev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:68
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    51ee:	88 e1       	ldi	r24, 0x18	; 24
    51f0:	97 e0       	ldi	r25, 0x07	; 7
    51f2:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <HardwareSerial::available()>
    51f6:	21 e0       	ldi	r18, 0x01	; 1
    51f8:	89 2b       	or	r24, r25
    51fa:	09 f4       	brne	.+2      	; 0x51fe <Serial1_available()+0x10>
    51fc:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
}
    51fe:	82 2f       	mov	r24, r18
    5200:	08 95       	ret

00005202 <_GLOBAL__sub_I___vector_30>:
_ZN5PrintC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:46
    5202:	e8 e1       	ldi	r30, 0x18	; 24
    5204:	f7 e0       	ldi	r31, 0x07	; 7
    5206:	13 82       	std	Z+3, r1	; 0x03
    5208:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Stream.h:63
    520a:	88 ee       	ldi	r24, 0xE8	; 232
    520c:	93 e0       	ldi	r25, 0x03	; 3
    520e:	a0 e0       	ldi	r26, 0x00	; 0
    5210:	b0 e0       	ldi	r27, 0x00	; 0
    5212:	84 83       	std	Z+4, r24	; 0x04
    5214:	95 83       	std	Z+5, r25	; 0x05
    5216:	a6 83       	std	Z+6, r26	; 0x06
    5218:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    521a:	8c e7       	ldi	r24, 0x7C	; 124
    521c:	91 e0       	ldi	r25, 0x01	; 1
    521e:	91 83       	std	Z+1, r25	; 0x01
    5220:	80 83       	st	Z, r24
    5222:	88 e9       	ldi	r24, 0x98	; 152
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	95 87       	std	Z+13, r25	; 0x0d
    5228:	84 87       	std	Z+12, r24	; 0x0c
    522a:	89 e9       	ldi	r24, 0x99	; 153
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	97 87       	std	Z+15, r25	; 0x0f
    5230:	86 87       	std	Z+14, r24	; 0x0e
    5232:	8b e9       	ldi	r24, 0x9B	; 155
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	91 8b       	std	Z+17, r25	; 0x11
    5238:	80 8b       	std	Z+16, r24	; 0x10
    523a:	8a e9       	ldi	r24, 0x9A	; 154
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	93 8b       	std	Z+19, r25	; 0x13
    5240:	82 8b       	std	Z+18, r24	; 0x12
    5242:	8d e9       	ldi	r24, 0x9D	; 157
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	95 8b       	std	Z+21, r25	; 0x15
    5248:	84 8b       	std	Z+20, r24	; 0x14
    524a:	8c e9       	ldi	r24, 0x9C	; 156
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	97 8b       	std	Z+23, r25	; 0x17
    5250:	86 8b       	std	Z+22, r24	; 0x16
    5252:	11 8e       	std	Z+25, r1	; 0x19
    5254:	12 8e       	std	Z+26, r1	; 0x1a
    5256:	13 8e       	std	Z+27, r1	; 0x1b
    5258:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_30():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/HardwareSerial1.cpp:69
    525a:	08 95       	ret

0000525c <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:136
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    525c:	af 92       	push	r10
    525e:	bf 92       	push	r11
    5260:	cf 92       	push	r12
    5262:	df 92       	push	r13
    5264:	ef 92       	push	r14
    5266:	ff 92       	push	r15
    5268:	0f 93       	push	r16
    526a:	1f 93       	push	r17
    526c:	cf 93       	push	r28
    526e:	df 93       	push	r29
    5270:	6c 01       	movw	r12, r24
    5272:	7b 01       	movw	r14, r22
    5274:	8b 01       	movw	r16, r22
    5276:	04 0f       	add	r16, r20
    5278:	15 1f       	adc	r17, r21
    527a:	eb 01       	movw	r28, r22
    527c:	5e 01       	movw	r10, r28
    527e:	ae 18       	sub	r10, r14
    5280:	bf 08       	sbc	r11, r15
    5282:	c0 17       	cp	r28, r16
    5284:	d1 07       	cpc	r29, r17
    5286:	59 f0       	breq	.+22     	; 0x529e <Print::write(unsigned char const*, unsigned int)+0x42>
    5288:	69 91       	ld	r22, Y+
    528a:	d6 01       	movw	r26, r12
    528c:	ed 91       	ld	r30, X+
    528e:	fc 91       	ld	r31, X
    5290:	01 90       	ld	r0, Z+
    5292:	f0 81       	ld	r31, Z
    5294:	e0 2d       	mov	r30, r0
    5296:	c6 01       	movw	r24, r12
    5298:	09 95       	icall
    529a:	89 2b       	or	r24, r25
    529c:	79 f7       	brne	.-34     	; 0x527c <Print::write(unsigned char const*, unsigned int)+0x20>
    529e:	c5 01       	movw	r24, r10
    52a0:	df 91       	pop	r29
    52a2:	cf 91       	pop	r28
    52a4:	1f 91       	pop	r17
    52a6:	0f 91       	pop	r16
    52a8:	ff 90       	pop	r15
    52aa:	ef 90       	pop	r14
    52ac:	df 90       	pop	r13
    52ae:	cf 90       	pop	r12
    52b0:	bf 90       	pop	r11
    52b2:	af 90       	pop	r10
    52b4:	08 95       	ret

000052b6 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    52b6:	fb 01       	movw	r30, r22
    52b8:	01 90       	ld	r0, Z+
    52ba:	00 20       	and	r0, r0
    52bc:	e9 f7       	brne	.-6      	; 0x52b8 <Print::write(char const*) [clone .part.2]+0x2>
    52be:	31 97       	sbiw	r30, 0x01	; 1
    52c0:	af 01       	movw	r20, r30
    52c2:	46 1b       	sub	r20, r22
    52c4:	57 0b       	sbc	r21, r23
    52c6:	dc 01       	movw	r26, r24
    52c8:	ed 91       	ld	r30, X+
    52ca:	fc 91       	ld	r31, X
    52cc:	02 80       	ldd	r0, Z+2	; 0x02
    52ce:	f3 81       	ldd	r31, Z+3	; 0x03
    52d0:	e0 2d       	mov	r30, r0
    52d2:	09 94       	ijmp

000052d4 <Print::println()>:
    52d4:	6a e8       	ldi	r22, 0x8A	; 138
    52d6:	71 e0       	ldi	r23, 0x01	; 1
    52d8:	0c 94 5b 29 	jmp	0x52b6	; 0x52b6 <Print::write(char const*) [clone .part.2]>

000052dc <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    52dc:	0f 93       	push	r16
    52de:	1f 93       	push	r17
    52e0:	cf 93       	push	r28
    52e2:	df 93       	push	r29
    52e4:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    52e6:	d0 e0       	ldi	r29, 0x00	; 0
    52e8:	c0 e0       	ldi	r28, 0x00	; 0
    52ea:	61 15       	cp	r22, r1
    52ec:	71 05       	cpc	r23, r1
    52ee:	19 f0       	breq	.+6      	; 0x52f6 <Print::println(char const*)+0x1a>
    52f0:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <Print::write(char const*) [clone .part.2]>
    52f4:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    52f6:	c8 01       	movw	r24, r16
    52f8:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <Print::println()>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Print.cpp:143
  return n;
}
    52fc:	8c 0f       	add	r24, r28
    52fe:	9d 1f       	adc	r25, r29
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	1f 91       	pop	r17
    5306:	0f 91       	pop	r16
    5308:	08 95       	ret

0000530a <tone(unsigned char, unsigned int, unsigned long)>:
_Z4tonehjm():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:281


// Frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    530a:	4f 92       	push	r4
    530c:	5f 92       	push	r5
    530e:	6f 92       	push	r6
    5310:	7f 92       	push	r7
    5312:	8f 92       	push	r8
    5314:	9f 92       	push	r9
    5316:	af 92       	push	r10
    5318:	bf 92       	push	r11
    531a:	cf 92       	push	r12
    531c:	df 92       	push	r13
    531e:	ef 92       	push	r14
    5320:	ff 92       	push	r15
    5322:	0f 93       	push	r16
    5324:	1f 93       	push	r17
    5326:	cf 93       	push	r28
    5328:	df 93       	push	r29
    532a:	00 d0       	rcall	.+0      	; 0x532c <tone(unsigned char, unsigned int, unsigned long)+0x22>
    532c:	00 d0       	rcall	.+0      	; 0x532e <tone(unsigned char, unsigned int, unsigned long)+0x24>
    532e:	1f 92       	push	r1
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
toneBegin():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:171
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    5334:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <tone_pins>
    5338:	89 17       	cp	r24, r25
    533a:	c1 f0       	breq	.+48     	; 0x536c <tone(unsigned char, unsigned int, unsigned long)+0x62>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:178
    }
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    533c:	9f 3f       	cpi	r25, 0xFF	; 255
    533e:	f1 f0       	breq	.+60     	; 0x537c <tone(unsigned char, unsigned int, unsigned long)+0x72>
_Z4tonehjm():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    5340:	0f 90       	pop	r0
    5342:	0f 90       	pop	r0
    5344:	0f 90       	pop	r0
    5346:	0f 90       	pop	r0
    5348:	0f 90       	pop	r0
    534a:	df 91       	pop	r29
    534c:	cf 91       	pop	r28
    534e:	1f 91       	pop	r17
    5350:	0f 91       	pop	r16
    5352:	ff 90       	pop	r15
    5354:	ef 90       	pop	r14
    5356:	df 90       	pop	r13
    5358:	cf 90       	pop	r12
    535a:	bf 90       	pop	r11
    535c:	af 90       	pop	r10
    535e:	9f 90       	pop	r9
    5360:	8f 90       	pop	r8
    5362:	7f 90       	pop	r7
    5364:	6f 90       	pop	r6
    5366:	5f 90       	pop	r5
    5368:	4f 90       	pop	r4
    536a:	08 95       	ret
toneBegin():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:172
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    536c:	e3 e2       	ldi	r30, 0x23	; 35
    536e:	f2 e0       	ldi	r31, 0x02	; 2
    5370:	94 91       	lpm	r25, Z
    5372:	9d 83       	std	Y+5, r25	; 0x05
_Z4tonehjm():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:289
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    5374:	9d 81       	ldd	r25, Y+5	; 0x05
    5376:	97 fd       	sbrc	r25, 7
    5378:	e3 cf       	rjmp	.-58     	; 0x5340 <tone(unsigned char, unsigned int, unsigned long)+0x36>
    537a:	4b c0       	rjmp	.+150    	; 0x5412 <tone(unsigned char, unsigned int, unsigned long)+0x108>
toneBegin():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:179
  }

  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    537c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <tone_pins>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:180
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    5380:	e3 e2       	ldi	r30, 0x23	; 35
    5382:	f2 e0       	ldi	r31, 0x02	; 2
    5384:	94 91       	lpm	r25, Z
    5386:	9d 83       	std	Y+5, r25	; 0x05
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:185
      break;
    }
  }

  if (_timer != -1)
    5388:	9f 3f       	cpi	r25, 0xFF	; 255
    538a:	d1 f2       	breq	.-76     	; 0x5340 <tone(unsigned char, unsigned int, unsigned long)+0x36>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:191
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    538c:	91 30       	cpi	r25, 0x01	; 1
    538e:	11 f1       	breq	.+68     	; 0x53d4 <tone(unsigned char, unsigned int, unsigned long)+0xca>
    5390:	92 30       	cpi	r25, 0x02	; 2
    5392:	81 f7       	brne	.-32     	; 0x5374 <tone(unsigned char, unsigned int, unsigned long)+0x6a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:220
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    5394:	15 bc       	out	0x25, r1	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:221
        TCCR2B = 0;
    5396:	15 bc       	out	0x25, r1	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:222
        bitWrite(TCCR2A, WGM21, 1);
    5398:	95 b5       	in	r25, 0x25	; 37
    539a:	98 60       	ori	r25, 0x08	; 8
    539c:	95 bd       	out	0x25, r25	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:223
        bitWrite(TCCR2B, CS20, 1);
    539e:	95 b5       	in	r25, 0x25	; 37
    53a0:	91 60       	ori	r25, 0x01	; 1
    53a2:	95 bd       	out	0x25, r25	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:224
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    53a4:	a8 2f       	mov	r26, r24
    53a6:	b0 e0       	ldi	r27, 0x00	; 0
    53a8:	fd 01       	movw	r30, r26
    53aa:	e2 54       	subi	r30, 0x42	; 66
    53ac:	fe 4f       	sbci	r31, 0xFE	; 254
    53ae:	e4 91       	lpm	r30, Z
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	ee 0f       	add	r30, r30
    53b4:	ff 1f       	adc	r31, r31
    53b6:	ed 5f       	subi	r30, 0xFD	; 253
    53b8:	fd 4f       	sbci	r31, 0xFD	; 253
    53ba:	05 91       	lpm	r16, Z+
    53bc:	14 91       	lpm	r17, Z
    53be:	10 93 b7 07 	sts	0x07B7, r17	; 0x8007b7 <timer2_pin_port+0x1>
    53c2:	00 93 b6 07 	sts	0x07B6, r16	; 0x8007b6 <timer2_pin_port>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:225
        timer2_pin_mask = digitalPinToBitMask(_pin);
    53c6:	fd 01       	movw	r30, r26
    53c8:	e7 57       	subi	r30, 0x77	; 119
    53ca:	fe 4f       	sbci	r31, 0xFE	; 254
    53cc:	e4 91       	lpm	r30, Z
    53ce:	e0 93 b5 07 	sts	0x07B5, r30	; 0x8007b5 <timer2_pin_mask>
    53d2:	1f c0       	rjmp	.+62     	; 0x5412 <tone(unsigned char, unsigned int, unsigned long)+0x108>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:208
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    53d4:	1f bc       	out	0x2f, r1	; 47
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:209
        TCCR1B = 0;
    53d6:	1e bc       	out	0x2e, r1	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:210
        bitWrite(TCCR1B, WGM12, 1);
    53d8:	9e b5       	in	r25, 0x2e	; 46
    53da:	98 60       	ori	r25, 0x08	; 8
    53dc:	9e bd       	out	0x2e, r25	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:211
        bitWrite(TCCR1B, CS10, 1);
    53de:	9e b5       	in	r25, 0x2e	; 46
    53e0:	91 60       	ori	r25, 0x01	; 1
    53e2:	9e bd       	out	0x2e, r25	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:212
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    53e4:	a8 2f       	mov	r26, r24
    53e6:	b0 e0       	ldi	r27, 0x00	; 0
    53e8:	fd 01       	movw	r30, r26
    53ea:	e2 54       	subi	r30, 0x42	; 66
    53ec:	fe 4f       	sbci	r31, 0xFE	; 254
    53ee:	e4 91       	lpm	r30, Z
    53f0:	f0 e0       	ldi	r31, 0x00	; 0
    53f2:	ee 0f       	add	r30, r30
    53f4:	ff 1f       	adc	r31, r31
    53f6:	ed 5f       	subi	r30, 0xFD	; 253
    53f8:	fd 4f       	sbci	r31, 0xFD	; 253
    53fa:	05 91       	lpm	r16, Z+
    53fc:	14 91       	lpm	r17, Z
    53fe:	10 93 be 07 	sts	0x07BE, r17	; 0x8007be <timer1_pin_port+0x1>
    5402:	00 93 bd 07 	sts	0x07BD, r16	; 0x8007bd <timer1_pin_port>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:213
        timer1_pin_mask = digitalPinToBitMask(_pin);
    5406:	fd 01       	movw	r30, r26
    5408:	e7 57       	subi	r30, 0x77	; 119
    540a:	fe 4f       	sbci	r31, 0xFE	; 254
    540c:	e4 91       	lpm	r30, Z
    540e:	e0 93 bc 07 	sts	0x07BC, r30	; 0x8007bc <timer1_pin_mask>
    5412:	29 01       	movw	r4, r18
    5414:	3a 01       	movw	r6, r20
    5416:	8b 01       	movw	r16, r22
_Z4tonehjm():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:292
  _timer = toneBegin(_pin);

  if (_timer >= 0)
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    5418:	61 e0       	ldi	r22, 0x01	; 1
    541a:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <pinMode>
    541e:	48 01       	movw	r8, r16
    5420:	b1 2c       	mov	r11, r1
    5422:	a1 2c       	mov	r10, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:295

    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    5424:	8d 81       	ldd	r24, Y+5	; 0x05
    5426:	8d 7f       	andi	r24, 0xFD	; 253
    5428:	09 f0       	breq	.+2      	; 0x542c <tone(unsigned char, unsigned int, unsigned long)+0x122>
    542a:	b4 c0       	rjmp	.+360    	; 0x5594 <tone(unsigned char, unsigned int, unsigned long)+0x28a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:297
    {
      ocr = F_CPU / frequency / 2 - 1;
    542c:	60 e0       	ldi	r22, 0x00	; 0
    542e:	72 e1       	ldi	r23, 0x12	; 18
    5430:	8a e7       	ldi	r24, 0x7A	; 122
    5432:	90 e0       	ldi	r25, 0x00	; 0
    5434:	a5 01       	movw	r20, r10
    5436:	98 01       	movw	r18, r16
    5438:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    543c:	29 83       	std	Y+1, r18	; 0x01
    543e:	3a 83       	std	Y+2, r19	; 0x02
    5440:	4b 83       	std	Y+3, r20	; 0x03
    5442:	5c 83       	std	Y+4, r21	; 0x04
    5444:	69 01       	movw	r12, r18
    5446:	7a 01       	movw	r14, r20
    5448:	81 e0       	ldi	r24, 0x01	; 1
    544a:	c8 1a       	sub	r12, r24
    544c:	d1 08       	sbc	r13, r1
    544e:	e1 08       	sbc	r14, r1
    5450:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:298
      prescalarbits = 0b001;  // ck/1: same for both timers
    5452:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:299
      if (ocr > 255)
    5454:	9f ef       	ldi	r25, 0xFF	; 255
    5456:	c9 16       	cp	r12, r25
    5458:	d1 04       	cpc	r13, r1
    545a:	e1 04       	cpc	r14, r1
    545c:	f1 04       	cpc	r15, r1
    545e:	09 f0       	breq	.+2      	; 0x5462 <tone(unsigned char, unsigned int, unsigned long)+0x158>
    5460:	0c f4       	brge	.+2      	; 0x5464 <tone(unsigned char, unsigned int, unsigned long)+0x15a>
    5462:	78 c0       	rjmp	.+240    	; 0x5554 <tone(unsigned char, unsigned int, unsigned long)+0x24a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:301
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    5464:	60 e4       	ldi	r22, 0x40	; 64
    5466:	72 e4       	ldi	r23, 0x42	; 66
    5468:	8f e0       	ldi	r24, 0x0F	; 15
    546a:	90 e0       	ldi	r25, 0x00	; 0
    546c:	a5 01       	movw	r20, r10
    546e:	98 01       	movw	r18, r16
    5470:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    5474:	69 01       	movw	r12, r18
    5476:	7a 01       	movw	r14, r20
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	c8 1a       	sub	r12, r24
    547c:	d1 08       	sbc	r13, r1
    547e:	e1 08       	sbc	r14, r1
    5480:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    5482:	9d 81       	ldd	r25, Y+5	; 0x05
    5484:	91 11       	cpse	r25, r1
    5486:	00 c1       	rjmp	.+512    	; 0x5688 <tone(unsigned char, unsigned int, unsigned long)+0x37e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:304 (discriminator 1)
    5488:	8f ef       	ldi	r24, 0xFF	; 255
    548a:	c8 16       	cp	r12, r24
    548c:	d1 04       	cpc	r13, r1
    548e:	e1 04       	cpc	r14, r1
    5490:	f1 04       	cpc	r15, r1
    5492:	09 f0       	breq	.+2      	; 0x5496 <tone(unsigned char, unsigned int, unsigned long)+0x18c>
    5494:	0c f4       	brge	.+2      	; 0x5498 <tone(unsigned char, unsigned int, unsigned long)+0x18e>
    5496:	ff c0       	rjmp	.+510    	; 0x5696 <tone(unsigned char, unsigned int, unsigned long)+0x38c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:306
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    5498:	60 e9       	ldi	r22, 0x90	; 144
    549a:	70 ed       	ldi	r23, 0xD0	; 208
    549c:	83 e0       	ldi	r24, 0x03	; 3
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	a5 01       	movw	r20, r10
    54a2:	98 01       	movw	r18, r16
    54a4:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    54a8:	69 01       	movw	r12, r18
    54aa:	7a 01       	movw	r14, r20
    54ac:	91 e0       	ldi	r25, 0x01	; 1
    54ae:	c9 1a       	sub	r12, r25
    54b0:	d1 08       	sbc	r13, r1
    54b2:	e1 08       	sbc	r14, r1
    54b4:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    54b6:	8f ef       	ldi	r24, 0xFF	; 255
    54b8:	c8 16       	cp	r12, r24
    54ba:	d1 04       	cpc	r13, r1
    54bc:	e1 04       	cpc	r14, r1
    54be:	f1 04       	cpc	r15, r1
    54c0:	09 f0       	breq	.+2      	; 0x54c4 <tone(unsigned char, unsigned int, unsigned long)+0x1ba>
    54c2:	0c f4       	brge	.+2      	; 0x54c6 <tone(unsigned char, unsigned int, unsigned long)+0x1bc>
    54c4:	df c0       	rjmp	.+446    	; 0x5684 <tone(unsigned char, unsigned int, unsigned long)+0x37a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    54c6:	68 e4       	ldi	r22, 0x48	; 72
    54c8:	78 ee       	ldi	r23, 0xE8	; 232
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	a5 01       	movw	r20, r10
    54d0:	98 01       	movw	r18, r16
    54d2:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    54d6:	69 01       	movw	r12, r18
    54d8:	7a 01       	movw	r14, r20
    54da:	91 e0       	ldi	r25, 0x01	; 1
    54dc:	c9 1a       	sub	r12, r25
    54de:	d1 08       	sbc	r13, r1
    54e0:	e1 08       	sbc	r14, r1
    54e2:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:315
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b011 : 0b100;

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
    54e4:	8f ef       	ldi	r24, 0xFF	; 255
    54e6:	c8 16       	cp	r12, r24
    54e8:	d1 04       	cpc	r13, r1
    54ea:	e1 04       	cpc	r14, r1
    54ec:	f1 04       	cpc	r15, r1
    54ee:	09 f0       	breq	.+2      	; 0x54f2 <tone(unsigned char, unsigned int, unsigned long)+0x1e8>
    54f0:	14 f4       	brge	.+4      	; 0x54f6 <tone(unsigned char, unsigned int, unsigned long)+0x1ec>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
    54f2:	84 e0       	ldi	r24, 0x04	; 4
    54f4:	2f c0       	rjmp	.+94     	; 0x5554 <tone(unsigned char, unsigned int, unsigned long)+0x24a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:317
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b011 : 0b100;

          if (_timer == TIMER_WITH_FULL_PRESCALER && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    54f6:	64 e2       	ldi	r22, 0x24	; 36
    54f8:	74 ef       	ldi	r23, 0xF4	; 244
    54fa:	80 e0       	ldi	r24, 0x00	; 0
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	a5 01       	movw	r20, r10
    5500:	98 01       	movw	r18, r16
    5502:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    5506:	69 01       	movw	r12, r18
    5508:	7a 01       	movw	r14, r20
    550a:	91 e0       	ldi	r25, 0x01	; 1
    550c:	c9 1a       	sub	r12, r25
    550e:	d1 08       	sbc	r13, r1
    5510:	e1 08       	sbc	r14, r1
    5512:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    5514:	8f ef       	ldi	r24, 0xFF	; 255
    5516:	c8 16       	cp	r12, r24
    5518:	d1 04       	cpc	r13, r1
    551a:	e1 04       	cpc	r14, r1
    551c:	f1 04       	cpc	r15, r1
    551e:	09 f0       	breq	.+2      	; 0x5522 <tone(unsigned char, unsigned int, unsigned long)+0x218>
    5520:	08 f4       	brcc	.+2      	; 0x5524 <tone(unsigned char, unsigned int, unsigned long)+0x21a>
    5522:	e2 c0       	rjmp	.+452    	; 0x56e8 <tone(unsigned char, unsigned int, unsigned long)+0x3de>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    5524:	62 e1       	ldi	r22, 0x12	; 18
    5526:	7a e7       	ldi	r23, 0x7A	; 122
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	a5 01       	movw	r20, r10
    552e:	98 01       	movw	r18, r16
    5530:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    5534:	69 01       	movw	r12, r18
    5536:	7a 01       	movw	r14, r20
    5538:	91 e0       	ldi	r25, 0x01	; 1
    553a:	c9 1a       	sub	r12, r25
    553c:	d1 08       	sbc	r13, r1
    553e:	e1 08       	sbc	r14, r1
    5540:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
    5542:	8f ef       	ldi	r24, 0xFF	; 255
    5544:	c8 16       	cp	r12, r24
    5546:	d1 04       	cpc	r13, r1
    5548:	e1 04       	cpc	r14, r1
    554a:	f1 04       	cpc	r15, r1
    554c:	11 f0       	breq	.+4      	; 0x5552 <tone(unsigned char, unsigned int, unsigned long)+0x248>
    554e:	08 f0       	brcs	.+2      	; 0x5552 <tone(unsigned char, unsigned int, unsigned long)+0x248>
    5550:	cd c0       	rjmp	.+410    	; 0x56ec <tone(unsigned char, unsigned int, unsigned long)+0x3e2>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:324
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
    5552:	86 e0       	ldi	r24, 0x06	; 6
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:344
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
    5554:	95 b5       	in	r25, 0x25	; 37
    5556:	98 7f       	andi	r25, 0xF8	; 248
    5558:	89 2b       	or	r24, r25
    555a:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    555c:	2f ef       	ldi	r18, 0xFF	; 255
    555e:	3f ef       	ldi	r19, 0xFF	; 255
    5560:	a9 01       	movw	r20, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    5562:	41 14       	cp	r4, r1
    5564:	51 04       	cpc	r5, r1
    5566:	61 04       	cpc	r6, r1
    5568:	71 04       	cpc	r7, r1
    556a:	09 f0       	breq	.+2      	; 0x556e <tone(unsigned char, unsigned int, unsigned long)+0x264>
    556c:	48 c0       	rjmp	.+144    	; 0x55fe <tone(unsigned char, unsigned int, unsigned long)+0x2f4>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:399
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    556e:	9d 81       	ldd	r25, Y+5	; 0x05
    5570:	91 30       	cpi	r25, 0x01	; 1
    5572:	09 f4       	brne	.+2      	; 0x5576 <tone(unsigned char, unsigned int, unsigned long)+0x26c>
    5574:	63 c0       	rjmp	.+198    	; 0x563c <tone(unsigned char, unsigned int, unsigned long)+0x332>
    5576:	92 30       	cpi	r25, 0x02	; 2
    5578:	09 f0       	breq	.+2      	; 0x557c <tone(unsigned char, unsigned int, unsigned long)+0x272>
    557a:	e2 ce       	rjmp	.-572    	; 0x5340 <tone(unsigned char, unsigned int, unsigned long)+0x36>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:425
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    557c:	c3 bc       	out	0x23, r12	; 35
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:426
        timer2_toggle_count = toggle_count;
    557e:	20 93 b8 07 	sts	0x07B8, r18	; 0x8007b8 <timer2_toggle_count>
    5582:	30 93 b9 07 	sts	0x07B9, r19	; 0x8007b9 <timer2_toggle_count+0x1>
    5586:	40 93 ba 07 	sts	0x07BA, r20	; 0x8007ba <timer2_toggle_count+0x2>
    558a:	50 93 bb 07 	sts	0x07BB, r21	; 0x8007bb <timer2_toggle_count+0x3>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:427
        bitWrite(TIMSK2, OCIE2A, 1);
    558e:	87 b7       	in	r24, 0x37	; 55
    5590:	80 68       	ori	r24, 0x80	; 128
    5592:	60 c0       	rjmp	.+192    	; 0x5654 <tone(unsigned char, unsigned int, unsigned long)+0x34a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:355
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    5594:	60 e0       	ldi	r22, 0x00	; 0
    5596:	72 e1       	ldi	r23, 0x12	; 18
    5598:	8a e7       	ldi	r24, 0x7A	; 122
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	a5 01       	movw	r20, r10
    559e:	98 01       	movw	r18, r16
    55a0:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    55a4:	69 01       	movw	r12, r18
    55a6:	7a 01       	movw	r14, r20
    55a8:	91 e0       	ldi	r25, 0x01	; 1
    55aa:	c9 1a       	sub	r12, r25
    55ac:	d1 08       	sbc	r13, r1
    55ae:	e1 08       	sbc	r14, r1
    55b0:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:357

      prescalarbits = 0b001;
    55b2:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:358
      if (ocr > 0xffff)
    55b4:	c1 14       	cp	r12, r1
    55b6:	d1 04       	cpc	r13, r1
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	e8 06       	cpc	r14, r24
    55bc:	f1 04       	cpc	r15, r1
    55be:	84 f0       	brlt	.+32     	; 0x55e0 <tone(unsigned char, unsigned int, unsigned long)+0x2d6>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:360
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    55c0:	68 e4       	ldi	r22, 0x48	; 72
    55c2:	78 ee       	ldi	r23, 0xE8	; 232
    55c4:	81 e0       	ldi	r24, 0x01	; 1
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	a5 01       	movw	r20, r10
    55ca:	98 01       	movw	r18, r16
    55cc:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    55d0:	69 01       	movw	r12, r18
    55d2:	7a 01       	movw	r14, r20
    55d4:	91 e0       	ldi	r25, 0x01	; 1
    55d6:	c9 1a       	sub	r12, r25
    55d8:	d1 08       	sbc	r13, r1
    55da:	e1 08       	sbc	r14, r1
    55dc:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:361
        prescalarbits = 0b011;
    55de:	93 e0       	ldi	r25, 0x03	; 3
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:364
      }

      if (_timer == 1)
    55e0:	8d 81       	ldd	r24, Y+5	; 0x05
    55e2:	81 30       	cpi	r24, 0x01	; 1
    55e4:	d1 f4       	brne	.+52     	; 0x561a <tone(unsigned char, unsigned int, unsigned long)+0x310>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:367
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    55e6:	8e b5       	in	r24, 0x2e	; 46
    55e8:	88 7f       	andi	r24, 0xF8	; 248
    55ea:	89 2b       	or	r24, r25
    55ec:	8e bd       	out	0x2e, r24	; 46
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:393
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
    55ee:	2f ef       	ldi	r18, 0xFF	; 255
    55f0:	3f ef       	ldi	r19, 0xFF	; 255
    55f2:	a9 01       	movw	r20, r18
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    55f4:	41 14       	cp	r4, r1
    55f6:	51 04       	cpc	r5, r1
    55f8:	61 04       	cpc	r6, r1
    55fa:	71 04       	cpc	r7, r1
    55fc:	f9 f0       	breq	.+62     	; 0x563c <tone(unsigned char, unsigned int, unsigned long)+0x332>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:389
    {
      toggle_count = 2 * frequency * duration / 1000;
    55fe:	d8 01       	movw	r26, r16
    5600:	aa 0f       	add	r26, r26
    5602:	bb 1f       	adc	r27, r27
    5604:	a3 01       	movw	r20, r6
    5606:	92 01       	movw	r18, r4
    5608:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__muluhisi3>
    560c:	28 ee       	ldi	r18, 0xE8	; 232
    560e:	33 e0       	ldi	r19, 0x03	; 3
    5610:	40 e0       	ldi	r20, 0x00	; 0
    5612:	50 e0       	ldi	r21, 0x00	; 0
    5614:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
    5618:	aa cf       	rjmp	.-172    	; 0x556e <tone(unsigned char, unsigned int, unsigned long)+0x264>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:371
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
    561a:	8d 81       	ldd	r24, Y+5	; 0x05
    561c:	83 30       	cpi	r24, 0x03	; 3
    561e:	09 f0       	breq	.+2      	; 0x5622 <tone(unsigned char, unsigned int, unsigned long)+0x318>
    5620:	9d cf       	rjmp	.-198    	; 0x555c <tone(unsigned char, unsigned int, unsigned long)+0x252>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:372
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
    5622:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
    5626:	88 7f       	andi	r24, 0xF8	; 248
    5628:	89 2b       	or	r24, r25
    562a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:387

    }


    // Calculate the toggle count
    if (duration > 0)
    562e:	41 14       	cp	r4, r1
    5630:	51 04       	cpc	r5, r1
    5632:	61 04       	cpc	r6, r1
    5634:	71 04       	cpc	r7, r1
    5636:	09 f4       	brne	.+2      	; 0x563a <tone(unsigned char, unsigned int, unsigned long)+0x330>
    5638:	83 ce       	rjmp	.-762    	; 0x5340 <tone(unsigned char, unsigned int, unsigned long)+0x36>
    563a:	e1 cf       	rjmp	.-62     	; 0x55fe <tone(unsigned char, unsigned int, unsigned long)+0x2f4>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:412
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    563c:	db bc       	out	0x2b, r13	; 43
    563e:	ca bc       	out	0x2a, r12	; 42
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:413
        timer1_toggle_count = toggle_count;
    5640:	20 93 bf 07 	sts	0x07BF, r18	; 0x8007bf <timer1_toggle_count>
    5644:	30 93 c0 07 	sts	0x07C0, r19	; 0x8007c0 <timer1_toggle_count+0x1>
    5648:	40 93 c1 07 	sts	0x07C1, r20	; 0x8007c1 <timer1_toggle_count+0x2>
    564c:	50 93 c2 07 	sts	0x07C2, r21	; 0x8007c2 <timer1_toggle_count+0x3>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:414
        bitWrite(TIMSK1, OCIE1A, 1);
    5650:	87 b7       	in	r24, 0x37	; 55
    5652:	80 61       	ori	r24, 0x10	; 16
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:427

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
        timer2_toggle_count = toggle_count;
        bitWrite(TIMSK2, OCIE2A, 1);
    5654:	87 bf       	out	0x37, r24	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:457
        break;
#endif

    }
  }
}
    5656:	74 ce       	rjmp	.-792    	; 0x5340 <tone(unsigned char, unsigned int, unsigned long)+0x36>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:312
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    5658:	68 e4       	ldi	r22, 0x48	; 72
    565a:	78 ee       	ldi	r23, 0xE8	; 232
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	a5 01       	movw	r20, r10
    5662:	94 01       	movw	r18, r8
    5664:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    5668:	69 01       	movw	r12, r18
    566a:	7a 01       	movw	r14, r20
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	c8 1a       	sub	r12, r24
    5670:	d1 08       	sbc	r13, r1
    5672:	e1 08       	sbc	r14, r1
    5674:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:321
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    5676:	9f ef       	ldi	r25, 0xFF	; 255
    5678:	c9 16       	cp	r12, r25
    567a:	d1 04       	cpc	r13, r1
    567c:	e1 04       	cpc	r14, r1
    567e:	f1 04       	cpc	r15, r1
    5680:	09 f0       	breq	.+2      	; 0x5684 <tone(unsigned char, unsigned int, unsigned long)+0x37a>
    5682:	5c f4       	brge	.+22     	; 0x569a <tone(unsigned char, unsigned int, unsigned long)+0x390>
    5684:	83 e0       	ldi	r24, 0x03	; 3
    5686:	66 cf       	rjmp	.-308    	; 0x5554 <tone(unsigned char, unsigned int, unsigned long)+0x24a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:310
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    5688:	8f ef       	ldi	r24, 0xFF	; 255
    568a:	c8 16       	cp	r12, r24
    568c:	d1 04       	cpc	r13, r1
    568e:	e1 04       	cpc	r14, r1
    5690:	f1 04       	cpc	r15, r1
    5692:	09 f0       	breq	.+2      	; 0x5696 <tone(unsigned char, unsigned int, unsigned long)+0x38c>
    5694:	0c f7       	brge	.-62     	; 0x5658 <tone(unsigned char, unsigned int, unsigned long)+0x34e>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:302
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
    5696:	82 e0       	ldi	r24, 0x02	; 2
    5698:	5d cf       	rjmp	.-326    	; 0x5554 <tone(unsigned char, unsigned int, unsigned long)+0x24a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:323
            prescalarbits = 0b101;
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    569a:	62 e1       	ldi	r22, 0x12	; 18
    569c:	7a e7       	ldi	r23, 0x7A	; 122
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	a5 01       	movw	r20, r10
    56a4:	94 01       	movw	r18, r8
    56a6:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    56aa:	69 01       	movw	r12, r18
    56ac:	7a 01       	movw	r14, r20
    56ae:	91 e0       	ldi	r25, 0x01	; 1
    56b0:	c9 1a       	sub	r12, r25
    56b2:	d1 08       	sbc	r13, r1
    56b4:	e1 08       	sbc	r14, r1
    56b6:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:325
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
    56b8:	8f ef       	ldi	r24, 0xFF	; 255
    56ba:	c8 16       	cp	r12, r24
    56bc:	d1 04       	cpc	r13, r1
    56be:	e1 04       	cpc	r14, r1
    56c0:	f1 04       	cpc	r15, r1
    56c2:	09 f0       	breq	.+2      	; 0x56c6 <tone(unsigned char, unsigned int, unsigned long)+0x3bc>
    56c4:	08 f4       	brcc	.+2      	; 0x56c8 <tone(unsigned char, unsigned int, unsigned long)+0x3be>
    56c6:	15 cf       	rjmp	.-470    	; 0x54f2 <tone(unsigned char, unsigned int, unsigned long)+0x1e8>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    56c8:	c9 80       	ldd	r12, Y+1	; 0x01
    56ca:	da 80       	ldd	r13, Y+2	; 0x02
    56cc:	eb 80       	ldd	r14, Y+3	; 0x03
    56ce:	fc 80       	ldd	r15, Y+4	; 0x04
    56d0:	9a e0       	ldi	r25, 0x0A	; 10
    56d2:	f5 94       	asr	r15
    56d4:	e7 94       	ror	r14
    56d6:	d7 94       	ror	r13
    56d8:	c7 94       	ror	r12
    56da:	9a 95       	dec	r25
    56dc:	d1 f7       	brne	.-12     	; 0x56d2 <tone(unsigned char, unsigned int, unsigned long)+0x3c8>
    56de:	91 e0       	ldi	r25, 0x01	; 1
    56e0:	c9 1a       	sub	r12, r25
    56e2:	d1 08       	sbc	r13, r1
    56e4:	e1 08       	sbc	r14, r1
    56e6:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    56e8:	85 e0       	ldi	r24, 0x05	; 5
    56ea:	34 cf       	rjmp	.-408    	; 0x5554 <tone(unsigned char, unsigned int, unsigned long)+0x24a>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:328
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b100 : 0b110;
            if (ocr > 255)
            {
              // Can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    56ec:	c9 80       	ldd	r12, Y+1	; 0x01
    56ee:	da 80       	ldd	r13, Y+2	; 0x02
    56f0:	eb 80       	ldd	r14, Y+3	; 0x03
    56f2:	fc 80       	ldd	r15, Y+4	; 0x04
    56f4:	8a e0       	ldi	r24, 0x0A	; 10
    56f6:	f5 94       	asr	r15
    56f8:	e7 94       	ror	r14
    56fa:	d7 94       	ror	r13
    56fc:	c7 94       	ror	r12
    56fe:	8a 95       	dec	r24
    5700:	d1 f7       	brne	.-12     	; 0x56f6 <tone(unsigned char, unsigned int, unsigned long)+0x3ec>
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	c8 1a       	sub	r12, r24
    5706:	d1 08       	sbc	r13, r1
    5708:	e1 08       	sbc	r14, r1
    570a:	f1 08       	sbc	r15, r1
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:329
              prescalarbits = _timer != TIMER_WITH_FULL_PRESCALER ? 0b101 : 0b111;
    570c:	87 e0       	ldi	r24, 0x07	; 7
    570e:	22 cf       	rjmp	.-444    	; 0x5554 <tone(unsigned char, unsigned int, unsigned long)+0x24a>

00005710 <disableTimer(unsigned char)>:
_Z12disableTimerh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:465
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    5710:	81 30       	cpi	r24, 0x01	; 1
    5712:	31 f0       	breq	.+12     	; 0x5720 <disableTimer(unsigned char)+0x10>
    5714:	18 f0       	brcs	.+6      	; 0x571c <disableTimer(unsigned char)+0xc>
    5716:	82 30       	cpi	r24, 0x02	; 2
    5718:	39 f0       	breq	.+14     	; 0x5728 <disableTimer(unsigned char)+0x18>
    571a:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:471
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
    571c:	17 be       	out	0x37, r1	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:473
      #endif
      break;
    571e:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:477

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    5720:	87 b7       	in	r24, 0x37	; 55
    5722:	8f 7e       	andi	r24, 0xEF	; 239
    5724:	87 bf       	out	0x37, r24	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:478
      break;
    5726:	08 95       	ret
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:483
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    5728:	87 b7       	in	r24, 0x37	; 55
    572a:	8f 77       	andi	r24, 0x7F	; 127
    572c:	87 bf       	out	0x37, r24	; 55
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:486
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    572e:	80 e4       	ldi	r24, 0x40	; 64
    5730:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:489
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    5732:	85 b5       	in	r24, 0x25	; 37
    5734:	88 7f       	andi	r24, 0xF8	; 248
    5736:	84 60       	ori	r24, 0x04	; 4
    5738:	85 bd       	out	0x25, r24	; 37
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:492
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    573a:	13 bc       	out	0x23, r1	; 35
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:514
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
      break;
#endif
  }
}
    573c:	08 95       	ret

0000573e <noTone(unsigned char)>:
_Z6noToneh():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:518


void noTone(uint8_t _pin)
{
    573e:	cf 93       	push	r28
    5740:	c8 2f       	mov	r28, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:522
  int8_t _timer = -1;

  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    5742:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <tone_pins>
    5746:	c8 13       	cpse	r28, r24
    5748:	0d c0       	rjmp	.+26     	; 0x5764 <noTone(unsigned char)+0x26>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:523
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    574a:	e3 e2       	ldi	r30, 0x23	; 35
    574c:	f2 e0       	ldi	r31, 0x02	; 2
    574e:	84 91       	lpm	r24, Z
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:524
      tone_pins[i] = 255;
    5750:	9f ef       	ldi	r25, 0xFF	; 255
    5752:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <tone_pins>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:529
      break;
    }
  }

  disableTimer(_timer);
    5756:	0e 94 88 2b 	call	0x5710	; 0x5710 <disableTimer(unsigned char)>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531

  digitalWrite(_pin, 0);
    575a:	60 e0       	ldi	r22, 0x00	; 0
    575c:	8c 2f       	mov	r24, r28
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:532
}
    575e:	cf 91       	pop	r28
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:531
    }
  }

  disableTimer(_timer);

  digitalWrite(_pin, 0);
    5760:	0c 94 48 26 	jmp	0x4c90	; 0x4c90 <digitalWrite>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:519
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
    5764:	8f ef       	ldi	r24, 0xFF	; 255
    5766:	f7 cf       	rjmp	.-18     	; 0x5756 <noTone(unsigned char)+0x18>

00005768 <__vector_9>:
__vector_9():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:580
#if defined(__AVR_ATmega162__)
ISR(TIMER2_COMP_vect)
#else
ISR(TIMER2_COMPA_vect)
#endif
{
    5768:	1f 92       	push	r1
    576a:	0f 92       	push	r0
    576c:	0f b6       	in	r0, 0x3f	; 63
    576e:	0f 92       	push	r0
    5770:	11 24       	eor	r1, r1
    5772:	2f 93       	push	r18
    5774:	3f 93       	push	r19
    5776:	4f 93       	push	r20
    5778:	5f 93       	push	r21
    577a:	6f 93       	push	r22
    577c:	7f 93       	push	r23
    577e:	8f 93       	push	r24
    5780:	9f 93       	push	r25
    5782:	af 93       	push	r26
    5784:	bf 93       	push	r27
    5786:	ef 93       	push	r30
    5788:	ff 93       	push	r31
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:582

  if (timer2_toggle_count != 0)
    578a:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <timer2_toggle_count>
    578e:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <timer2_toggle_count+0x1>
    5792:	a0 91 ba 07 	lds	r26, 0x07BA	; 0x8007ba <timer2_toggle_count+0x2>
    5796:	b0 91 bb 07 	lds	r27, 0x07BB	; 0x8007bb <timer2_toggle_count+0x3>
    579a:	89 2b       	or	r24, r25
    579c:	8a 2b       	or	r24, r26
    579e:	8b 2b       	or	r24, r27
    57a0:	d1 f1       	breq	.+116    	; 0x5816 <__vector_9+0xae>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:585
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    57a2:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <timer2_pin_mask>
    57a6:	e0 91 b6 07 	lds	r30, 0x07B6	; 0x8007b6 <timer2_pin_port>
    57aa:	f0 91 b7 07 	lds	r31, 0x07B7	; 0x8007b7 <timer2_pin_port+0x1>
    57ae:	80 81       	ld	r24, Z
    57b0:	89 27       	eor	r24, r25
    57b2:	80 83       	st	Z, r24
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:587

    if (timer2_toggle_count > 0)
    57b4:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <timer2_toggle_count>
    57b8:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <timer2_toggle_count+0x1>
    57bc:	a0 91 ba 07 	lds	r26, 0x07BA	; 0x8007ba <timer2_toggle_count+0x2>
    57c0:	b0 91 bb 07 	lds	r27, 0x07BB	; 0x8007bb <timer2_toggle_count+0x3>
    57c4:	18 16       	cp	r1, r24
    57c6:	19 06       	cpc	r1, r25
    57c8:	1a 06       	cpc	r1, r26
    57ca:	1b 06       	cpc	r1, r27
    57cc:	9c f4       	brge	.+38     	; 0x57f4 <__vector_9+0x8c>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:588
      timer2_toggle_count--;
    57ce:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <timer2_toggle_count>
    57d2:	90 91 b9 07 	lds	r25, 0x07B9	; 0x8007b9 <timer2_toggle_count+0x1>
    57d6:	a0 91 ba 07 	lds	r26, 0x07BA	; 0x8007ba <timer2_toggle_count+0x2>
    57da:	b0 91 bb 07 	lds	r27, 0x07BB	; 0x8007bb <timer2_toggle_count+0x3>
    57de:	01 97       	sbiw	r24, 0x01	; 1
    57e0:	a1 09       	sbc	r26, r1
    57e2:	b1 09       	sbc	r27, r1
    57e4:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <timer2_toggle_count>
    57e8:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <timer2_toggle_count+0x1>
    57ec:	a0 93 ba 07 	sts	0x07BA, r26	; 0x8007ba <timer2_toggle_count+0x2>
    57f0:	b0 93 bb 07 	sts	0x07BB, r27	; 0x8007bb <timer2_toggle_count+0x3>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    57f4:	ff 91       	pop	r31
    57f6:	ef 91       	pop	r30
    57f8:	bf 91       	pop	r27
    57fa:	af 91       	pop	r26
    57fc:	9f 91       	pop	r25
    57fe:	8f 91       	pop	r24
    5800:	7f 91       	pop	r23
    5802:	6f 91       	pop	r22
    5804:	5f 91       	pop	r21
    5806:	4f 91       	pop	r20
    5808:	3f 91       	pop	r19
    580a:	2f 91       	pop	r18
    580c:	0f 90       	pop	r0
    580e:	0f be       	out	0x3f, r0	; 63
    5810:	0f 90       	pop	r0
    5812:	1f 90       	pop	r1
    5814:	18 95       	reti
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:595
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    5816:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <tone_pins>
    581a:	0e 94 9f 2b 	call	0x573e	; 0x573e <noTone(unsigned char)>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/Tone.cpp:599
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    581e:	ea cf       	rjmp	.-44     	; 0x57f4 <__vector_9+0x8c>

00005820 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    5820:	4f 92       	push	r4
    5822:	5f 92       	push	r5
    5824:	6f 92       	push	r6
    5826:	7f 92       	push	r7
    5828:	af 92       	push	r10
    582a:	bf 92       	push	r11
    582c:	cf 92       	push	r12
    582e:	df 92       	push	r13
    5830:	ef 92       	push	r14
    5832:	ff 92       	push	r15
    5834:	0f 93       	push	r16
    5836:	1f 93       	push	r17
    5838:	cf 93       	push	r28
    583a:	df 93       	push	r29
    583c:	cd b7       	in	r28, 0x3d	; 61
    583e:	de b7       	in	r29, 0x3e	; 62
    5840:	29 01       	movw	r4, r18
    5842:	3a 01       	movw	r6, r20
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    5844:	9b 01       	movw	r18, r22
    5846:	ac 01       	movw	r20, r24
    5848:	24 19       	sub	r18, r4
    584a:	35 09       	sbc	r19, r5
    584c:	46 09       	sbc	r20, r6
    584e:	57 09       	sbc	r21, r7
    5850:	89 89       	ldd	r24, Y+17	; 0x11
    5852:	9a 89       	ldd	r25, Y+18	; 0x12
    5854:	ab 89       	ldd	r26, Y+19	; 0x13
    5856:	bc 89       	ldd	r27, Y+20	; 0x14
    5858:	bc 01       	movw	r22, r24
    585a:	cd 01       	movw	r24, r26
    585c:	6a 19       	sub	r22, r10
    585e:	7b 09       	sbc	r23, r11
    5860:	8c 09       	sbc	r24, r12
    5862:	9d 09       	sbc	r25, r13
    5864:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <__mulsi3>
    5868:	a8 01       	movw	r20, r16
    586a:	97 01       	movw	r18, r14
    586c:	24 19       	sub	r18, r4
    586e:	35 09       	sbc	r19, r5
    5870:	46 09       	sbc	r20, r6
    5872:	57 09       	sbc	r21, r7
    5874:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__divmodsi4>
    5878:	ca 01       	movw	r24, r20
    587a:	b9 01       	movw	r22, r18
    587c:	6a 0d       	add	r22, r10
    587e:	7b 1d       	adc	r23, r11
    5880:	8c 1d       	adc	r24, r12
    5882:	9d 1d       	adc	r25, r13
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/WMath.cpp:55
}
    5884:	df 91       	pop	r29
    5886:	cf 91       	pop	r28
    5888:	1f 91       	pop	r17
    588a:	0f 91       	pop	r16
    588c:	ff 90       	pop	r15
    588e:	ef 90       	pop	r14
    5890:	df 90       	pop	r13
    5892:	cf 90       	pop	r12
    5894:	bf 90       	pop	r11
    5896:	af 90       	pop	r10
    5898:	7f 90       	pop	r7
    589a:	6f 90       	pop	r6
    589c:	5f 90       	pop	r5
    589e:	4f 90       	pop	r4
    58a0:	08 95       	ret

000058a2 <initVariant>:
initVariant():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    58a2:	08 95       	ret

000058a4 <main>:
main():
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    58a4:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <init>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    58a8:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <initVariant>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    58ac:	0e 94 ef 03 	call	0x7de	; 0x7de <setup>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    58b0:	c5 e1       	ldi	r28, 0x15	; 21
    58b2:	d7 e2       	ldi	r29, 0x27	; 39
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    58b4:	0e 94 0d 22 	call	0x441a	; 0x441a <loop>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    58b8:	20 97       	sbiw	r28, 0x00	; 0
    58ba:	e1 f3       	breq	.-8      	; 0x58b4 <main+0x10>
C:\Users\Xirka (Throwaway)\AppData\Local\Arduino15\packages\MegaCore\hardware\avr\2.2.0\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    58bc:	0e 94 15 27 	call	0x4e2a	; 0x4e2a <serialEventRun()>
    58c0:	f9 cf       	rjmp	.-14     	; 0x58b4 <main+0x10>

000058c2 <__subsf3>:
__subsf3():
    58c2:	50 58       	subi	r21, 0x80	; 128

000058c4 <__addsf3>:
    58c4:	bb 27       	eor	r27, r27
    58c6:	aa 27       	eor	r26, r26
    58c8:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <__addsf3x>
    58cc:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__fp_round>
__addsf3():
    58d0:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <__fp_pscA>
    58d4:	38 f0       	brcs	.+14     	; 0x58e4 <__addsf3+0x20>
    58d6:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__fp_pscB>
    58da:	20 f0       	brcs	.+8      	; 0x58e4 <__addsf3+0x20>
    58dc:	39 f4       	brne	.+14     	; 0x58ec <__addsf3+0x28>
    58de:	9f 3f       	cpi	r25, 0xFF	; 255
    58e0:	19 f4       	brne	.+6      	; 0x58e8 <__addsf3+0x24>
    58e2:	26 f4       	brtc	.+8      	; 0x58ec <__addsf3+0x28>
    58e4:	0c 94 e2 2d 	jmp	0x5bc4	; 0x5bc4 <__fp_nan>
    58e8:	0e f4       	brtc	.+2      	; 0x58ec <__addsf3+0x28>
    58ea:	e0 95       	com	r30
    58ec:	e7 fb       	bst	r30, 7
    58ee:	0c 94 dc 2d 	jmp	0x5bb8	; 0x5bb8 <__fp_inf>

000058f2 <__addsf3x>:
__addsf3x():
    58f2:	e9 2f       	mov	r30, r25
    58f4:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <__fp_split3>
    58f8:	58 f3       	brcs	.-42     	; 0x58d0 <__addsf3+0xc>
    58fa:	ba 17       	cp	r27, r26
    58fc:	62 07       	cpc	r22, r18
    58fe:	73 07       	cpc	r23, r19
    5900:	84 07       	cpc	r24, r20
    5902:	95 07       	cpc	r25, r21
    5904:	20 f0       	brcs	.+8      	; 0x590e <__addsf3x+0x1c>
    5906:	79 f4       	brne	.+30     	; 0x5926 <__addsf3x+0x34>
    5908:	a6 f5       	brtc	.+104    	; 0x5972 <__addsf3x+0x80>
    590a:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__fp_zero>
    590e:	0e f4       	brtc	.+2      	; 0x5912 <__addsf3x+0x20>
    5910:	e0 95       	com	r30
    5912:	0b 2e       	mov	r0, r27
    5914:	ba 2f       	mov	r27, r26
    5916:	a0 2d       	mov	r26, r0
    5918:	0b 01       	movw	r0, r22
    591a:	b9 01       	movw	r22, r18
    591c:	90 01       	movw	r18, r0
    591e:	0c 01       	movw	r0, r24
    5920:	ca 01       	movw	r24, r20
    5922:	a0 01       	movw	r20, r0
    5924:	11 24       	eor	r1, r1
    5926:	ff 27       	eor	r31, r31
    5928:	59 1b       	sub	r21, r25
    592a:	99 f0       	breq	.+38     	; 0x5952 <__addsf3x+0x60>
    592c:	59 3f       	cpi	r21, 0xF9	; 249
    592e:	50 f4       	brcc	.+20     	; 0x5944 <__addsf3x+0x52>
    5930:	50 3e       	cpi	r21, 0xE0	; 224
    5932:	68 f1       	brcs	.+90     	; 0x598e <__addsf3x+0x9c>
    5934:	1a 16       	cp	r1, r26
    5936:	f0 40       	sbci	r31, 0x00	; 0
    5938:	a2 2f       	mov	r26, r18
    593a:	23 2f       	mov	r18, r19
    593c:	34 2f       	mov	r19, r20
    593e:	44 27       	eor	r20, r20
    5940:	58 5f       	subi	r21, 0xF8	; 248
    5942:	f3 cf       	rjmp	.-26     	; 0x592a <__addsf3x+0x38>
    5944:	46 95       	lsr	r20
    5946:	37 95       	ror	r19
    5948:	27 95       	ror	r18
    594a:	a7 95       	ror	r26
    594c:	f0 40       	sbci	r31, 0x00	; 0
    594e:	53 95       	inc	r21
    5950:	c9 f7       	brne	.-14     	; 0x5944 <__addsf3x+0x52>
    5952:	7e f4       	brtc	.+30     	; 0x5972 <__addsf3x+0x80>
    5954:	1f 16       	cp	r1, r31
    5956:	ba 0b       	sbc	r27, r26
    5958:	62 0b       	sbc	r22, r18
    595a:	73 0b       	sbc	r23, r19
    595c:	84 0b       	sbc	r24, r20
    595e:	ba f0       	brmi	.+46     	; 0x598e <__addsf3x+0x9c>
    5960:	91 50       	subi	r25, 0x01	; 1
    5962:	a1 f0       	breq	.+40     	; 0x598c <__addsf3x+0x9a>
    5964:	ff 0f       	add	r31, r31
    5966:	bb 1f       	adc	r27, r27
    5968:	66 1f       	adc	r22, r22
    596a:	77 1f       	adc	r23, r23
    596c:	88 1f       	adc	r24, r24
    596e:	c2 f7       	brpl	.-16     	; 0x5960 <__addsf3x+0x6e>
    5970:	0e c0       	rjmp	.+28     	; 0x598e <__addsf3x+0x9c>
    5972:	ba 0f       	add	r27, r26
    5974:	62 1f       	adc	r22, r18
    5976:	73 1f       	adc	r23, r19
    5978:	84 1f       	adc	r24, r20
    597a:	48 f4       	brcc	.+18     	; 0x598e <__addsf3x+0x9c>
    597c:	87 95       	ror	r24
    597e:	77 95       	ror	r23
    5980:	67 95       	ror	r22
    5982:	b7 95       	ror	r27
    5984:	f7 95       	ror	r31
    5986:	9e 3f       	cpi	r25, 0xFE	; 254
    5988:	08 f0       	brcs	.+2      	; 0x598c <__addsf3x+0x9a>
    598a:	b0 cf       	rjmp	.-160    	; 0x58ec <__addsf3+0x28>
    598c:	93 95       	inc	r25
    598e:	88 0f       	add	r24, r24
    5990:	08 f0       	brcs	.+2      	; 0x5994 <__addsf3x+0xa2>
    5992:	99 27       	eor	r25, r25
    5994:	ee 0f       	add	r30, r30
    5996:	97 95       	ror	r25
    5998:	87 95       	ror	r24
    599a:	08 95       	ret

0000599c <__cmpsf2>:
    599c:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <__fp_cmp>
    59a0:	08 f4       	brcc	.+2      	; 0x59a4 <__cmpsf2+0x8>
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	08 95       	ret

000059a6 <__divsf3>:
    59a6:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <__divsf3x>
    59aa:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__fp_round>
    59ae:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__fp_pscB>
    59b2:	58 f0       	brcs	.+22     	; 0x59ca <__divsf3+0x24>
    59b4:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <__fp_pscA>
    59b8:	40 f0       	brcs	.+16     	; 0x59ca <__divsf3+0x24>
    59ba:	29 f4       	brne	.+10     	; 0x59c6 <__divsf3+0x20>
    59bc:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    59be:	29 f0       	breq	.+10     	; 0x59ca <__divsf3+0x24>
    59c0:	0c 94 dc 2d 	jmp	0x5bb8	; 0x5bb8 <__fp_inf>
    59c4:	51 11       	cpse	r21, r1
    59c6:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__fp_szero>
    59ca:	0c 94 e2 2d 	jmp	0x5bc4	; 0x5bc4 <__fp_nan>

000059ce <__divsf3x>:
__divsf3x():
    59ce:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <__fp_split3>
    59d2:	68 f3       	brcs	.-38     	; 0x59ae <__divsf3+0x8>

000059d4 <__divsf3_pse>:
    59d4:	99 23       	and	r25, r25
    59d6:	b1 f3       	breq	.-20     	; 0x59c4 <__divsf3+0x1e>
    59d8:	55 23       	and	r21, r21
    59da:	91 f3       	breq	.-28     	; 0x59c0 <__divsf3+0x1a>
    59dc:	95 1b       	sub	r25, r21
    59de:	55 0b       	sbc	r21, r21
    59e0:	bb 27       	eor	r27, r27
    59e2:	aa 27       	eor	r26, r26
    59e4:	62 17       	cp	r22, r18
    59e6:	73 07       	cpc	r23, r19
    59e8:	84 07       	cpc	r24, r20
    59ea:	38 f0       	brcs	.+14     	; 0x59fa <__divsf3_pse+0x26>
    59ec:	9f 5f       	subi	r25, 0xFF	; 255
    59ee:	5f 4f       	sbci	r21, 0xFF	; 255
    59f0:	22 0f       	add	r18, r18
    59f2:	33 1f       	adc	r19, r19
    59f4:	44 1f       	adc	r20, r20
    59f6:	aa 1f       	adc	r26, r26
    59f8:	a9 f3       	breq	.-22     	; 0x59e4 <__divsf3_pse+0x10>
    59fa:	35 d0       	rcall	.+106    	; 0x5a66 <__divsf3_pse+0x92>
    59fc:	0e 2e       	mov	r0, r30
    59fe:	3a f0       	brmi	.+14     	; 0x5a0e <__divsf3_pse+0x3a>
    5a00:	e0 e8       	ldi	r30, 0x80	; 128
    5a02:	32 d0       	rcall	.+100    	; 0x5a68 <__divsf3_pse+0x94>
    5a04:	91 50       	subi	r25, 0x01	; 1
    5a06:	50 40       	sbci	r21, 0x00	; 0
    5a08:	e6 95       	lsr	r30
    5a0a:	00 1c       	adc	r0, r0
    5a0c:	ca f7       	brpl	.-14     	; 0x5a00 <__divsf3_pse+0x2c>
    5a0e:	2b d0       	rcall	.+86     	; 0x5a66 <__divsf3_pse+0x92>
    5a10:	fe 2f       	mov	r31, r30
    5a12:	29 d0       	rcall	.+82     	; 0x5a66 <__divsf3_pse+0x92>
    5a14:	66 0f       	add	r22, r22
    5a16:	77 1f       	adc	r23, r23
    5a18:	88 1f       	adc	r24, r24
    5a1a:	bb 1f       	adc	r27, r27
    5a1c:	26 17       	cp	r18, r22
    5a1e:	37 07       	cpc	r19, r23
    5a20:	48 07       	cpc	r20, r24
    5a22:	ab 07       	cpc	r26, r27
    5a24:	b0 e8       	ldi	r27, 0x80	; 128
    5a26:	09 f0       	breq	.+2      	; 0x5a2a <__divsf3_pse+0x56>
    5a28:	bb 0b       	sbc	r27, r27
    5a2a:	80 2d       	mov	r24, r0
    5a2c:	bf 01       	movw	r22, r30
    5a2e:	ff 27       	eor	r31, r31
    5a30:	93 58       	subi	r25, 0x83	; 131
    5a32:	5f 4f       	sbci	r21, 0xFF	; 255
    5a34:	3a f0       	brmi	.+14     	; 0x5a44 <__divsf3_pse+0x70>
    5a36:	9e 3f       	cpi	r25, 0xFE	; 254
    5a38:	51 05       	cpc	r21, r1
    5a3a:	78 f0       	brcs	.+30     	; 0x5a5a <__divsf3_pse+0x86>
    5a3c:	0c 94 dc 2d 	jmp	0x5bb8	; 0x5bb8 <__fp_inf>
    5a40:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__fp_szero>
    5a44:	5f 3f       	cpi	r21, 0xFF	; 255
    5a46:	e4 f3       	brlt	.-8      	; 0x5a40 <__divsf3_pse+0x6c>
    5a48:	98 3e       	cpi	r25, 0xE8	; 232
    5a4a:	d4 f3       	brlt	.-12     	; 0x5a40 <__divsf3_pse+0x6c>
    5a4c:	86 95       	lsr	r24
    5a4e:	77 95       	ror	r23
    5a50:	67 95       	ror	r22
    5a52:	b7 95       	ror	r27
    5a54:	f7 95       	ror	r31
    5a56:	9f 5f       	subi	r25, 0xFF	; 255
    5a58:	c9 f7       	brne	.-14     	; 0x5a4c <__divsf3_pse+0x78>
    5a5a:	88 0f       	add	r24, r24
    5a5c:	91 1d       	adc	r25, r1
    5a5e:	96 95       	lsr	r25
    5a60:	87 95       	ror	r24
    5a62:	97 f9       	bld	r25, 7
    5a64:	08 95       	ret
    5a66:	e1 e0       	ldi	r30, 0x01	; 1
    5a68:	66 0f       	add	r22, r22
    5a6a:	77 1f       	adc	r23, r23
    5a6c:	88 1f       	adc	r24, r24
    5a6e:	bb 1f       	adc	r27, r27
    5a70:	62 17       	cp	r22, r18
    5a72:	73 07       	cpc	r23, r19
    5a74:	84 07       	cpc	r24, r20
    5a76:	ba 07       	cpc	r27, r26
    5a78:	20 f0       	brcs	.+8      	; 0x5a82 <__divsf3_pse+0xae>
    5a7a:	62 1b       	sub	r22, r18
    5a7c:	73 0b       	sbc	r23, r19
    5a7e:	84 0b       	sbc	r24, r20
    5a80:	ba 0b       	sbc	r27, r26
    5a82:	ee 1f       	adc	r30, r30
    5a84:	88 f7       	brcc	.-30     	; 0x5a68 <__divsf3_pse+0x94>
    5a86:	e0 95       	com	r30
    5a88:	08 95       	ret

00005a8a <__fixsfsi>:
    5a8a:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__fixunssfsi>
    5a8e:	68 94       	set
    5a90:	b1 11       	cpse	r27, r1
    5a92:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__fp_szero>
    5a96:	08 95       	ret

00005a98 <__fixunssfsi>:
    5a98:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__fp_splitA>
    5a9c:	88 f0       	brcs	.+34     	; 0x5ac0 <__fixunssfsi+0x28>
    5a9e:	9f 57       	subi	r25, 0x7F	; 127
    5aa0:	98 f0       	brcs	.+38     	; 0x5ac8 <__fixunssfsi+0x30>
    5aa2:	b9 2f       	mov	r27, r25
    5aa4:	99 27       	eor	r25, r25
    5aa6:	b7 51       	subi	r27, 0x17	; 23
    5aa8:	b0 f0       	brcs	.+44     	; 0x5ad6 <__fixunssfsi+0x3e>
__fixunssfsi():
    5aaa:	e1 f0       	breq	.+56     	; 0x5ae4 <__fixunssfsi+0x4c>
    5aac:	66 0f       	add	r22, r22
    5aae:	77 1f       	adc	r23, r23
    5ab0:	88 1f       	adc	r24, r24
    5ab2:	99 1f       	adc	r25, r25
    5ab4:	1a f0       	brmi	.+6      	; 0x5abc <__fixunssfsi+0x24>
    5ab6:	ba 95       	dec	r27
    5ab8:	c9 f7       	brne	.-14     	; 0x5aac <__fixunssfsi+0x14>
    5aba:	14 c0       	rjmp	.+40     	; 0x5ae4 <__fixunssfsi+0x4c>
    5abc:	b1 30       	cpi	r27, 0x01	; 1
    5abe:	91 f0       	breq	.+36     	; 0x5ae4 <__fixunssfsi+0x4c>
    5ac0:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <__fp_zero>
    5ac4:	b1 e0       	ldi	r27, 0x01	; 1
    5ac6:	08 95       	ret
    5ac8:	0c 94 26 2e 	jmp	0x5c4c	; 0x5c4c <__fp_zero>
    5acc:	67 2f       	mov	r22, r23
    5ace:	78 2f       	mov	r23, r24
    5ad0:	88 27       	eor	r24, r24
    5ad2:	b8 5f       	subi	r27, 0xF8	; 248
    5ad4:	39 f0       	breq	.+14     	; 0x5ae4 <__fixunssfsi+0x4c>
    5ad6:	b9 3f       	cpi	r27, 0xF9	; 249
    5ad8:	cc f3       	brlt	.-14     	; 0x5acc <__fixunssfsi+0x34>
    5ada:	86 95       	lsr	r24
    5adc:	77 95       	ror	r23
    5ade:	67 95       	ror	r22
    5ae0:	b3 95       	inc	r27
    5ae2:	d9 f7       	brne	.-10     	; 0x5ada <__fixunssfsi+0x42>
    5ae4:	3e f4       	brtc	.+14     	; 0x5af4 <__fixunssfsi+0x5c>
    5ae6:	90 95       	com	r25
    5ae8:	80 95       	com	r24
    5aea:	70 95       	com	r23
    5aec:	61 95       	neg	r22
    5aee:	7f 4f       	sbci	r23, 0xFF	; 255
    5af0:	8f 4f       	sbci	r24, 0xFF	; 255
    5af2:	9f 4f       	sbci	r25, 0xFF	; 255
    5af4:	08 95       	ret

00005af6 <__floatunsisf>:
__floatunsisf():
    5af6:	e8 94       	clt
    5af8:	09 c0       	rjmp	.+18     	; 0x5b0c <__floatsisf+0x12>

00005afa <__floatsisf>:
    5afa:	97 fb       	bst	r25, 7
    5afc:	3e f4       	brtc	.+14     	; 0x5b0c <__floatsisf+0x12>
    5afe:	90 95       	com	r25
    5b00:	80 95       	com	r24
    5b02:	70 95       	com	r23
    5b04:	61 95       	neg	r22
    5b06:	7f 4f       	sbci	r23, 0xFF	; 255
    5b08:	8f 4f       	sbci	r24, 0xFF	; 255
    5b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b0c:	99 23       	and	r25, r25
    5b0e:	a9 f0       	breq	.+42     	; 0x5b3a <__floatsisf+0x40>
    5b10:	f9 2f       	mov	r31, r25
    5b12:	96 e9       	ldi	r25, 0x96	; 150
    5b14:	bb 27       	eor	r27, r27
    5b16:	93 95       	inc	r25
    5b18:	f6 95       	lsr	r31
    5b1a:	87 95       	ror	r24
    5b1c:	77 95       	ror	r23
    5b1e:	67 95       	ror	r22
    5b20:	b7 95       	ror	r27
    5b22:	f1 11       	cpse	r31, r1
    5b24:	f8 cf       	rjmp	.-16     	; 0x5b16 <__floatsisf+0x1c>
    5b26:	fa f4       	brpl	.+62     	; 0x5b66 <__floatsisf+0x6c>
    5b28:	bb 0f       	add	r27, r27
    5b2a:	11 f4       	brne	.+4      	; 0x5b30 <__floatsisf+0x36>
    5b2c:	60 ff       	sbrs	r22, 0
    5b2e:	1b c0       	rjmp	.+54     	; 0x5b66 <__floatsisf+0x6c>
    5b30:	6f 5f       	subi	r22, 0xFF	; 255
    5b32:	7f 4f       	sbci	r23, 0xFF	; 255
    5b34:	8f 4f       	sbci	r24, 0xFF	; 255
    5b36:	9f 4f       	sbci	r25, 0xFF	; 255
    5b38:	16 c0       	rjmp	.+44     	; 0x5b66 <__floatsisf+0x6c>
    5b3a:	88 23       	and	r24, r24
    5b3c:	11 f0       	breq	.+4      	; 0x5b42 <__floatsisf+0x48>
    5b3e:	96 e9       	ldi	r25, 0x96	; 150
    5b40:	11 c0       	rjmp	.+34     	; 0x5b64 <__floatsisf+0x6a>
    5b42:	77 23       	and	r23, r23
    5b44:	21 f0       	breq	.+8      	; 0x5b4e <__floatsisf+0x54>
    5b46:	9e e8       	ldi	r25, 0x8E	; 142
    5b48:	87 2f       	mov	r24, r23
    5b4a:	76 2f       	mov	r23, r22
    5b4c:	05 c0       	rjmp	.+10     	; 0x5b58 <__floatsisf+0x5e>
    5b4e:	66 23       	and	r22, r22
    5b50:	71 f0       	breq	.+28     	; 0x5b6e <__floatsisf+0x74>
    5b52:	96 e8       	ldi	r25, 0x86	; 134
    5b54:	86 2f       	mov	r24, r22
    5b56:	70 e0       	ldi	r23, 0x00	; 0
    5b58:	60 e0       	ldi	r22, 0x00	; 0
    5b5a:	2a f0       	brmi	.+10     	; 0x5b66 <__floatsisf+0x6c>
    5b5c:	9a 95       	dec	r25
    5b5e:	66 0f       	add	r22, r22
    5b60:	77 1f       	adc	r23, r23
    5b62:	88 1f       	adc	r24, r24
    5b64:	da f7       	brpl	.-10     	; 0x5b5c <__floatsisf+0x62>
    5b66:	88 0f       	add	r24, r24
    5b68:	96 95       	lsr	r25
    5b6a:	87 95       	ror	r24
    5b6c:	97 f9       	bld	r25, 7
    5b6e:	08 95       	ret

00005b70 <__fp_cmp>:
__fp_cmp():
    5b70:	99 0f       	add	r25, r25
    5b72:	00 08       	sbc	r0, r0
    5b74:	55 0f       	add	r21, r21
    5b76:	aa 0b       	sbc	r26, r26
    5b78:	e0 e8       	ldi	r30, 0x80	; 128
    5b7a:	fe ef       	ldi	r31, 0xFE	; 254
    5b7c:	16 16       	cp	r1, r22
    5b7e:	17 06       	cpc	r1, r23
    5b80:	e8 07       	cpc	r30, r24
    5b82:	f9 07       	cpc	r31, r25
    5b84:	c0 f0       	brcs	.+48     	; 0x5bb6 <__fp_cmp+0x46>
    5b86:	12 16       	cp	r1, r18
    5b88:	13 06       	cpc	r1, r19
    5b8a:	e4 07       	cpc	r30, r20
    5b8c:	f5 07       	cpc	r31, r21
    5b8e:	98 f0       	brcs	.+38     	; 0x5bb6 <__fp_cmp+0x46>
    5b90:	62 1b       	sub	r22, r18
    5b92:	73 0b       	sbc	r23, r19
    5b94:	84 0b       	sbc	r24, r20
    5b96:	95 0b       	sbc	r25, r21
    5b98:	39 f4       	brne	.+14     	; 0x5ba8 <__fp_cmp+0x38>
    5b9a:	0a 26       	eor	r0, r26
    5b9c:	61 f0       	breq	.+24     	; 0x5bb6 <__fp_cmp+0x46>
    5b9e:	23 2b       	or	r18, r19
    5ba0:	24 2b       	or	r18, r20
    5ba2:	25 2b       	or	r18, r21
    5ba4:	21 f4       	brne	.+8      	; 0x5bae <__fp_cmp+0x3e>
    5ba6:	08 95       	ret
    5ba8:	0a 26       	eor	r0, r26
    5baa:	09 f4       	brne	.+2      	; 0x5bae <__fp_cmp+0x3e>
    5bac:	a1 40       	sbci	r26, 0x01	; 1
    5bae:	a6 95       	lsr	r26
    5bb0:	8f ef       	ldi	r24, 0xFF	; 255
    5bb2:	81 1d       	adc	r24, r1
    5bb4:	81 1d       	adc	r24, r1
    5bb6:	08 95       	ret

00005bb8 <__fp_inf>:
__fp_inf():
    5bb8:	97 f9       	bld	r25, 7
    5bba:	9f 67       	ori	r25, 0x7F	; 127
    5bbc:	80 e8       	ldi	r24, 0x80	; 128
    5bbe:	70 e0       	ldi	r23, 0x00	; 0
    5bc0:	60 e0       	ldi	r22, 0x00	; 0
    5bc2:	08 95       	ret

00005bc4 <__fp_nan>:
__fp_nan():
    5bc4:	9f ef       	ldi	r25, 0xFF	; 255
    5bc6:	80 ec       	ldi	r24, 0xC0	; 192
    5bc8:	08 95       	ret

00005bca <__fp_pscA>:
__fp_pscA():
    5bca:	00 24       	eor	r0, r0
    5bcc:	0a 94       	dec	r0
    5bce:	16 16       	cp	r1, r22
    5bd0:	17 06       	cpc	r1, r23
    5bd2:	18 06       	cpc	r1, r24
    5bd4:	09 06       	cpc	r0, r25
    5bd6:	08 95       	ret

00005bd8 <__fp_pscB>:
__fp_pscB():
    5bd8:	00 24       	eor	r0, r0
    5bda:	0a 94       	dec	r0
    5bdc:	12 16       	cp	r1, r18
    5bde:	13 06       	cpc	r1, r19
    5be0:	14 06       	cpc	r1, r20
    5be2:	05 06       	cpc	r0, r21
    5be4:	08 95       	ret

00005be6 <__fp_round>:
__fp_round():
    5be6:	09 2e       	mov	r0, r25
    5be8:	03 94       	inc	r0
    5bea:	00 0c       	add	r0, r0
    5bec:	11 f4       	brne	.+4      	; 0x5bf2 <__fp_round+0xc>
    5bee:	88 23       	and	r24, r24
    5bf0:	52 f0       	brmi	.+20     	; 0x5c06 <__fp_round+0x20>
    5bf2:	bb 0f       	add	r27, r27
    5bf4:	40 f4       	brcc	.+16     	; 0x5c06 <__fp_round+0x20>
    5bf6:	bf 2b       	or	r27, r31
    5bf8:	11 f4       	brne	.+4      	; 0x5bfe <__fp_round+0x18>
    5bfa:	60 ff       	sbrs	r22, 0
    5bfc:	04 c0       	rjmp	.+8      	; 0x5c06 <__fp_round+0x20>
    5bfe:	6f 5f       	subi	r22, 0xFF	; 255
    5c00:	7f 4f       	sbci	r23, 0xFF	; 255
    5c02:	8f 4f       	sbci	r24, 0xFF	; 255
    5c04:	9f 4f       	sbci	r25, 0xFF	; 255
    5c06:	08 95       	ret

00005c08 <__fp_split3>:
__fp_split3():
    5c08:	57 fd       	sbrc	r21, 7
    5c0a:	90 58       	subi	r25, 0x80	; 128
    5c0c:	44 0f       	add	r20, r20
    5c0e:	55 1f       	adc	r21, r21
    5c10:	59 f0       	breq	.+22     	; 0x5c28 <__fp_splitA+0x10>
    5c12:	5f 3f       	cpi	r21, 0xFF	; 255
    5c14:	71 f0       	breq	.+28     	; 0x5c32 <__fp_splitA+0x1a>
    5c16:	47 95       	ror	r20

00005c18 <__fp_splitA>:
    5c18:	88 0f       	add	r24, r24
    5c1a:	97 fb       	bst	r25, 7
    5c1c:	99 1f       	adc	r25, r25
    5c1e:	61 f0       	breq	.+24     	; 0x5c38 <__fp_splitA+0x20>
    5c20:	9f 3f       	cpi	r25, 0xFF	; 255
    5c22:	79 f0       	breq	.+30     	; 0x5c42 <__fp_splitA+0x2a>
    5c24:	87 95       	ror	r24
    5c26:	08 95       	ret
    5c28:	12 16       	cp	r1, r18
    5c2a:	13 06       	cpc	r1, r19
    5c2c:	14 06       	cpc	r1, r20
    5c2e:	55 1f       	adc	r21, r21
    5c30:	f2 cf       	rjmp	.-28     	; 0x5c16 <__fp_split3+0xe>
    5c32:	46 95       	lsr	r20
    5c34:	f1 df       	rcall	.-30     	; 0x5c18 <__fp_splitA>
    5c36:	08 c0       	rjmp	.+16     	; 0x5c48 <__fp_splitA+0x30>
    5c38:	16 16       	cp	r1, r22
    5c3a:	17 06       	cpc	r1, r23
    5c3c:	18 06       	cpc	r1, r24
    5c3e:	99 1f       	adc	r25, r25
    5c40:	f1 cf       	rjmp	.-30     	; 0x5c24 <__fp_splitA+0xc>
    5c42:	86 95       	lsr	r24
    5c44:	71 05       	cpc	r23, r1
    5c46:	61 05       	cpc	r22, r1
    5c48:	08 94       	sec
    5c4a:	08 95       	ret

00005c4c <__fp_zero>:
__fp_zero():
    5c4c:	e8 94       	clt

00005c4e <__fp_szero>:
    5c4e:	bb 27       	eor	r27, r27
    5c50:	66 27       	eor	r22, r22
    5c52:	77 27       	eor	r23, r23
    5c54:	cb 01       	movw	r24, r22
    5c56:	97 f9       	bld	r25, 7
    5c58:	08 95       	ret

00005c5a <__gesf2>:
__gesf2():
    5c5a:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <__fp_cmp>
    5c5e:	08 f4       	brcc	.+2      	; 0x5c62 <__gesf2+0x8>
    5c60:	8f ef       	ldi	r24, 0xFF	; 255
    5c62:	08 95       	ret

00005c64 <__mulsf3>:
__mulsf3():
    5c64:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <__mulsf3x>
    5c68:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <__fp_round>
    5c6c:	0e 94 e5 2d 	call	0x5bca	; 0x5bca <__fp_pscA>
    5c70:	38 f0       	brcs	.+14     	; 0x5c80 <__mulsf3+0x1c>
    5c72:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <__fp_pscB>
    5c76:	20 f0       	brcs	.+8      	; 0x5c80 <__mulsf3+0x1c>
    5c78:	95 23       	and	r25, r21
    5c7a:	11 f0       	breq	.+4      	; 0x5c80 <__mulsf3+0x1c>
    5c7c:	0c 94 dc 2d 	jmp	0x5bb8	; 0x5bb8 <__fp_inf>
    5c80:	0c 94 e2 2d 	jmp	0x5bc4	; 0x5bc4 <__fp_nan>
    5c84:	11 24       	eor	r1, r1
    5c86:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__fp_szero>

00005c8a <__mulsf3x>:
__mulsf3x():
    5c8a:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <__fp_split3>
    5c8e:	70 f3       	brcs	.-36     	; 0x5c6c <__mulsf3+0x8>

00005c90 <__mulsf3_pse>:
    5c90:	95 9f       	mul	r25, r21
    5c92:	c1 f3       	breq	.-16     	; 0x5c84 <__mulsf3+0x20>
    5c94:	95 0f       	add	r25, r21
    5c96:	50 e0       	ldi	r21, 0x00	; 0
    5c98:	55 1f       	adc	r21, r21
    5c9a:	62 9f       	mul	r22, r18
    5c9c:	f0 01       	movw	r30, r0
    5c9e:	72 9f       	mul	r23, r18
    5ca0:	bb 27       	eor	r27, r27
    5ca2:	f0 0d       	add	r31, r0
    5ca4:	b1 1d       	adc	r27, r1
    5ca6:	63 9f       	mul	r22, r19
    5ca8:	aa 27       	eor	r26, r26
    5caa:	f0 0d       	add	r31, r0
    5cac:	b1 1d       	adc	r27, r1
    5cae:	aa 1f       	adc	r26, r26
    5cb0:	64 9f       	mul	r22, r20
    5cb2:	66 27       	eor	r22, r22
    5cb4:	b0 0d       	add	r27, r0
    5cb6:	a1 1d       	adc	r26, r1
    5cb8:	66 1f       	adc	r22, r22
    5cba:	82 9f       	mul	r24, r18
    5cbc:	22 27       	eor	r18, r18
    5cbe:	b0 0d       	add	r27, r0
    5cc0:	a1 1d       	adc	r26, r1
    5cc2:	62 1f       	adc	r22, r18
    5cc4:	73 9f       	mul	r23, r19
    5cc6:	b0 0d       	add	r27, r0
    5cc8:	a1 1d       	adc	r26, r1
    5cca:	62 1f       	adc	r22, r18
    5ccc:	83 9f       	mul	r24, r19
    5cce:	a0 0d       	add	r26, r0
    5cd0:	61 1d       	adc	r22, r1
    5cd2:	22 1f       	adc	r18, r18
    5cd4:	74 9f       	mul	r23, r20
    5cd6:	33 27       	eor	r19, r19
    5cd8:	a0 0d       	add	r26, r0
    5cda:	61 1d       	adc	r22, r1
    5cdc:	23 1f       	adc	r18, r19
    5cde:	84 9f       	mul	r24, r20
    5ce0:	60 0d       	add	r22, r0
    5ce2:	21 1d       	adc	r18, r1
    5ce4:	82 2f       	mov	r24, r18
    5ce6:	76 2f       	mov	r23, r22
    5ce8:	6a 2f       	mov	r22, r26
    5cea:	11 24       	eor	r1, r1
    5cec:	9f 57       	subi	r25, 0x7F	; 127
    5cee:	50 40       	sbci	r21, 0x00	; 0
    5cf0:	9a f0       	brmi	.+38     	; 0x5d18 <__mulsf3_pse+0x88>
    5cf2:	f1 f0       	breq	.+60     	; 0x5d30 <__mulsf3_pse+0xa0>
    5cf4:	88 23       	and	r24, r24
    5cf6:	4a f0       	brmi	.+18     	; 0x5d0a <__mulsf3_pse+0x7a>
    5cf8:	ee 0f       	add	r30, r30
    5cfa:	ff 1f       	adc	r31, r31
    5cfc:	bb 1f       	adc	r27, r27
    5cfe:	66 1f       	adc	r22, r22
    5d00:	77 1f       	adc	r23, r23
    5d02:	88 1f       	adc	r24, r24
    5d04:	91 50       	subi	r25, 0x01	; 1
    5d06:	50 40       	sbci	r21, 0x00	; 0
    5d08:	a9 f7       	brne	.-22     	; 0x5cf4 <__mulsf3_pse+0x64>
    5d0a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d0c:	51 05       	cpc	r21, r1
    5d0e:	80 f0       	brcs	.+32     	; 0x5d30 <__mulsf3_pse+0xa0>
    5d10:	0c 94 dc 2d 	jmp	0x5bb8	; 0x5bb8 <__fp_inf>
    5d14:	0c 94 27 2e 	jmp	0x5c4e	; 0x5c4e <__fp_szero>
    5d18:	5f 3f       	cpi	r21, 0xFF	; 255
    5d1a:	e4 f3       	brlt	.-8      	; 0x5d14 <__mulsf3_pse+0x84>
    5d1c:	98 3e       	cpi	r25, 0xE8	; 232
    5d1e:	d4 f3       	brlt	.-12     	; 0x5d14 <__mulsf3_pse+0x84>
    5d20:	86 95       	lsr	r24
    5d22:	77 95       	ror	r23
    5d24:	67 95       	ror	r22
    5d26:	b7 95       	ror	r27
    5d28:	f7 95       	ror	r31
    5d2a:	e7 95       	ror	r30
    5d2c:	9f 5f       	subi	r25, 0xFF	; 255
    5d2e:	c1 f7       	brne	.-16     	; 0x5d20 <__mulsf3_pse+0x90>
    5d30:	fe 2b       	or	r31, r30
    5d32:	88 0f       	add	r24, r24
    5d34:	91 1d       	adc	r25, r1
    5d36:	96 95       	lsr	r25
    5d38:	87 95       	ror	r24
    5d3a:	97 f9       	bld	r25, 7
    5d3c:	08 95       	ret

00005d3e <__mulsi3>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    5d3e:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    5d40:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    5d42:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    5d44:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    5d48:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    5d4a:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    5d4c:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    5d4e:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    5d50:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    5d52:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    5d54:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    5d56:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    5d58:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    5d5a:	11 24       	eor	r1, r1
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    5d5c:	08 95       	ret

00005d5e <__udivmodqi4>:
__udivmodqi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    5d5e:	99 1b       	sub	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    5d60:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    5d62:	04 c0       	rjmp	.+8      	; 0x5d6c <__udivmodqi4_ep>

00005d64 <__udivmodqi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    5d64:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    5d66:	96 17       	cp	r25, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    5d68:	08 f0       	brcs	.+2      	; 0x5d6c <__udivmodqi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    5d6a:	96 1b       	sub	r25, r22

00005d6c <__udivmodqi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    5d6c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    5d6e:	7a 95       	dec	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    5d70:	c9 f7       	brne	.-14     	; 0x5d64 <__udivmodqi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    5d72:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    5d74:	08 95       	ret

00005d76 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    5d76:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    5d78:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    5d7a:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    5d7c:	07 c0       	rjmp	.+14     	; 0x5d8c <__udivmodhi4_ep>

00005d7e <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    5d7e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    5d80:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    5d82:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    5d84:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    5d86:	10 f0       	brcs	.+4      	; 0x5d8c <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    5d88:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    5d8a:	b7 0b       	sbc	r27, r23

00005d8c <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    5d8c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    5d8e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    5d90:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    5d92:	a9 f7       	brne	.-22     	; 0x5d7e <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    5d94:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    5d96:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    5d98:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    5d9a:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    5d9c:	08 95       	ret

00005d9e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    5d9e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    5da0:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    5da2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    5da4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    5da6:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    5da8:	0d c0       	rjmp	.+26     	; 0x5dc4 <__udivmodsi4_ep>

00005daa <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    5daa:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    5dac:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    5dae:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    5db0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    5db2:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    5db4:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    5db6:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    5db8:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    5dba:	20 f0       	brcs	.+8      	; 0x5dc4 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    5dbc:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    5dbe:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    5dc0:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    5dc2:	f5 0b       	sbc	r31, r21

00005dc4 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    5dc4:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    5dc6:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    5dc8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    5dca:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    5dcc:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    5dce:	69 f7       	brne	.-38     	; 0x5daa <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    5dd0:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    5dd2:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    5dd4:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    5dd6:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    5dd8:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    5dda:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    5ddc:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    5dde:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    5de0:	08 95       	ret

00005de2 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    5de2:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    5de4:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    5de6:	1e f4       	brtc	.+6      	; 0x5dee <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    5de8:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    5dea:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    5dee:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    5df0:	07 d0       	rcall	.+14     	; 0x5e00 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    5df2:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    5df6:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    5df8:	03 d0       	rcall	.+6      	; 0x5e00 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    5dfa:	4e f4       	brtc	.+18     	; 0x5e0e <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    5dfc:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <__negsi2>

00005e00 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    5e00:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    5e02:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    5e04:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    5e06:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    5e08:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    5e0a:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    5e0c:	5f 4f       	sbci	r21, 0xFF	; 255

00005e0e <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    5e0e:	08 95       	ret

00005e10 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    5e10:	90 95       	com	r25
    5e12:	80 95       	com	r24
    5e14:	70 95       	com	r23
    5e16:	61 95       	neg	r22
    5e18:	7f 4f       	sbci	r23, 0xFF	; 255
    5e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e1c:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    5e1e:	08 95       	ret

00005e20 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    5e20:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    5e22:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    5e24:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    5e26:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    5e28:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    5e2a:	09 94       	ijmp

00005e2c <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    5e2c:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    5e30:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    5e32:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    5e34:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    5e36:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    5e38:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    5e3a:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    5e3c:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    5e3e:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    5e40:	08 95       	ret

00005e42 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    5e42:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    5e44:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    5e46:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    5e48:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    5e4a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    5e4c:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    5e4e:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    5e50:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    5e52:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    5e54:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    5e56:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    5e58:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    5e5a:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    5e5c:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    5e5e:	08 95       	ret

00005e60 <strcmp>:
strcmp():
    5e60:	fb 01       	movw	r30, r22
    5e62:	dc 01       	movw	r26, r24
    5e64:	8d 91       	ld	r24, X+
    5e66:	01 90       	ld	r0, Z+
    5e68:	80 19       	sub	r24, r0
    5e6a:	01 10       	cpse	r0, r1
    5e6c:	d9 f3       	breq	.-10     	; 0x5e64 <strcmp+0x4>
    5e6e:	99 0b       	sbc	r25, r25
    5e70:	08 95       	ret

00005e72 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    5e72:	f8 94       	cli

00005e74 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    5e74:	ff cf       	rjmp	.-2      	; 0x5e74 <__stop_program>
